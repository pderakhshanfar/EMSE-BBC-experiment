/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:26:14 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "1";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Option option0 = new Option("1", true, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "cx5ad@]+</}2+y", "", options1, "O8'bQKiR7hY)#/?fr", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("1", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      option0.setArgName(" ");
      OptionGroup optionGroup1 = new OptionGroup();
      Option option1 = new Option((String) null, true, "!8{(>$I!4I>v2gS4");
      optionGroup1.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Illegal option name '", "", options2, "1", true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("1", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      option0.setArgName(" ");
      Option option1 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(9, "cmdLineSyntax not provided", "has already been selected: '", options2, (String) null, true);
      String string0 = helpFormatter0.defaultArgName;
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("1", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      option0.setArgName(" ");
      options0.hasOption("");
      helpFormatter0.printHelp("^ c]", "", options2, "' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.optionComparator = null;
      helpFormatter0.printHelp("uJgR.y~i(WwM)", "\u0004sVZHa@.-=\"yP~.", options0, "uJgR.y~i(WwM)");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 110, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "[", false, "@]T");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", " ");
      optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(64, "\"[b|g", "@]T", options1, "\n", true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-196));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "~-:B!f|^", options0, "~-:B!f|^");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("A", "A", (Options) null, "*erfT&x", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = (-2021);
      helpFormatter0.findWrapPos("\n", 648, (-2021));
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Object object0 = new Object();
      stringBuffer0.append(object0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 1, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      Option option0 = new Option("1", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      helpFormatter0.printHelp(8, "1", "usage: ", options1, ";2!nB", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "--", "usage: ", options0, "arg", false);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.AlreadySelectedException");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1286), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", " ", options0, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      Option option0 = new Option("1", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(8, "1", "usage: ", options1, ";2!nB", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(";2!nB", options0);
      helpFormatter2.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " | ", true, "usage: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      String string0 = "";
      helpFormatter0.printHelp(32, "Cannot add value, list full.", "", options0, (String) null, true);
      int int0 = 100;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 100, 454, " ]");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, 887, "v7B\"5eyZU&.>");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "Cannot add value, list full.", options1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 16, 16);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.ParseException";
      boolean boolean0 = false;
      String string1 = "X]c0+L-^Oin$=fdKTw";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "L`.@y[}", objectArray0);
      mockPrintWriter0.append('t');
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "[ARG...]");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", " ", options0, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1820, "l/K@q+],V]5+K)17", "org.apache.commons.cli.HelpFormatter", options0, (-2230), 1820, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "Cannt add value, list full.");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(3, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "a");
      options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, (-1), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")nXk6#)=C<#[g.n4Dg!");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, (-568), "&['@*{S \"K%:yg?f");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(")d`w{o'Yhd3e,sGr&", "g{G;", options0, "usage: ");
      helpFormatter1.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      helpFormatter2.renderWrappedText(stringBuffer0, 0, 74, " ");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      boolean boolean0 = true;
      options0.addOption("arg", "--", true, "usage: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.defaultDescPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "--", "usage: ", options0, "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "qJk#Md8/", "\n", (Options) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, (-2), "");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.defaultDescPad = (-1438);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "--", true, "\n");
      options0.addOption("arg", (String) null, false, "A CloneNotSupportedException was thrown: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      String string0 = "%T}&Y;elry4F0!9tms";
      helpFormatter0.printHelp(10, "%T}&Y;elry4F0!9tms", " ]", options0, "A CloneNotSupportedException was thrown: ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "2m";
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = '7';
      charArray0[2] = '%';
      charArray0[3] = '`';
      mockPrintWriter0.println(charArray0);
      helpFormatter0.rtrim("2m");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-2830), "\n", "", options0, 74, 1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "NO_ARGS_ALLOWED", (String) null, options0, 34, 9, (String) null, true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("usage: ", "U+!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-839), (String) null, "-", options2, 3, 74, "2Ii97 5p|Ux-SP?", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 71, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "N4)$hESzn0Y)O#2/Soh";
      helpFormatter0.rtrim("arg");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      stringBuffer0.append((float) 3);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter1);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 31, "arg", "-", options0, 74, 74, "\n", true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.rtrim(" ");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth((-5099));
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = null;
      int int0 = 1190;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-310), (Options) null, 1190, 1190);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      Options options1 = new Options();
      Options options2 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.printHelp("F{", "YBq%N4Y.sn5>", options1, "F{");
      helpFormatter0.setNewLine("F{");
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1924);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "1xj{2O%pN7>=/MQq.e", "F{", options1, 31, 0, "H~`HHtKWo.", false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 531, options0, 254, 531);
      options0.getOptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.getLeftPadding();
      options0.hasShortOption("--");
      options0.getMatchingOptions("");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 278, "N4)$hESzn0Y)O#2/Soh", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("arg", (-890), (-890));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "N4)$hESzn0Y)O#2/Soh";
      helpFormatter0.rtrim("arg");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      stringBuffer0.append((float) 3);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "N4)$hESzn0Y)O#2/Soh", ".%#c", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("arg", "--", true, "3bVfp8GO\"v+1");
      helpFormatter0.printHelp(74, " ", " ", options1, "aLAx'z6}v'e", true);
      helpFormatter0.rtrim("aLAx'z6}v'e");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "aLAx'z6}v'e");
      helpFormatter0.printHelp(63, " ", " ", options0, (String) null, true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append('1');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1016, " ", "", options1, (-1444), 10, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.optionComparator = comparator0;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "");
      options2.getOption("|.8LMtmL%z1Gk,rSm-");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter2.setNewLine("jSOa;t9v Q");
      helpFormatter0.printHelp(506, "w", "usage: ", options1, "", false);
      helpFormatter2.rtrim("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "arg", true, "usage: ");
      options0.getOption("arg");
      options2.hasOption(" ");
      Option option0 = new Option("P4w", true, "P4w");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("P4w", "P4w", options3, (String) null);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 117, "P4w");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      Options options2 = options1.addOption((String) null, "\n", false, "");
      options0.hasLongOption("arg");
      options2.getMatchingOptions("O3|EC}9C|mYpM}h");
      helpFormatter0.printHelp("!XoJkja#wV", "!XoJkja#wV", options2, "", true);
      helpFormatter0.getWidth();
      File file0 = MockFile.createTempFile("arg", "W#!3t|k%..\"<W`+");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('@');
      helpFormatter0.printUsage(printWriter0, 74, "W#!3t|k%..\"<W`+", options0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      helpFormatter0.printHelp("--", "F{", options1, "arg");
      helpFormatter1.setNewLine("gPoy#*]7@");
      helpFormatter1.setLongOptSeparator(" ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 27, "i6vmsIti", "arg", options0, (-8), 3, "-", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      Options options2 = options1.addOption((String) null, "\n", false, "");
      options2.getMatchingOptions("O3|EC}9C|mYpM}h");
      helpFormatter0.printHelp("!XoJkja#wV", "!XoJkja#wV", options2, "", true);
      helpFormatter0.getWidth();
      int int0 = 36;
      helpFormatter0.printHelp(36, "!XoJkja#wV", "t ", options1, "!XoJkja#wV", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('b');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int1 = (-4983);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-4983), 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, (String) null);
      options0.addOption(option0);
      helpFormatter1.printHelp("fJCJ3v/#tMw9w", "", options0, "arg");
      helpFormatter1.setArgName("fJCJ3v/#tMw9w");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine("lzI<?,D=Y-smA");
      helpFormatter1.setLongOptSeparator("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "usage: ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "`~_f@'p>@y g#'f`");
      option0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 5, options0, 10, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1889);
      helpFormatter0.setLeftPadding((-1889));
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("]", "]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) linkedList1;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, " | ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.printf("-lTL<p^FNzNv+", objectArray0);
      String string0 = "@|h%KjC|}";
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ", false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption(";{]J.UB", true, "q'[Dnh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ';{]J.UB' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "fJCJ3v/#tMw9w", options0, " :: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine("--");
      helpFormatter1.setLongOptSeparator("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 2, "r*|");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("s>A");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getNewLine();
      PrintWriter printWriter0 = mockPrintWriter0.append(':');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 47, "arg", "", options0, 44, 1, " ERzj>5Gh=/5", true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter1.printHelp("--", "F{", options0, "8");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter2.optionComparator = comparator0;
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, 177, options0, 96, 74);
      helpFormatter2.renderWrappedText(stringBuffer1, 3, 4644, "usage: ");
      helpFormatter2.setNewLine("gPoy#*]7@");
      helpFormatter0.setLongOptSeparator("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=e4/iPY%n=]P");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "\n");
      helpFormatter0.createPadding(34);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      helpFormatter2.printHelp("--", "F", options1, "arg");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options2 = options0.addOption("arg", "\n", false, "@o");
      MockFile mockFile0 = new MockFile("HW)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter3.printOptions(mockPrintWriter0, (-1), options1, 22, 4681);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      try { 
        options2.addOption("usage: ", "-", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("arg", " ", options2, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The option '", " ", (Options) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "!XoJkja#wV";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      String string1 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1, 22);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('F');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      options0.hasLongOption((String) null);
      options0.helpOptions();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 31, "^[4U[X8zw", options0);
      helpFormatter0.printHelp("wVrd_r/<0", options0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", false, "");
      String string1 = null;
      Options options2 = options1.addOption((String) null, "\n", false, "");
      options1.hasLongOption("[");
      options2.getMatchingOptions("O3|EC}9C|mYpM}h");
      options2.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "d{u";
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "N4)$hESzn0Y)O#2/Soh";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("arg");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      options0.getOptionGroups();
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.ParseException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.ENGLISH;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) "org.apache.commons.cli.ParseException";
      objectArray0[2] = (Object) "org.apache.commons.cli.ParseException";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "wamt}pU\u0007Bem{L", objectArray0);
      helpFormatter0.printHelp(printWriter1, 51, "arg", "N4)$hESzn0Y)O#2/Soh", options0, 51, 51, "N4)$hESzn0Y)O#2/Soh", false);
      stringBuffer0.append((float) 3);
      options0.toString();
      helpFormatter0.setNewLine(" ] [ long ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "d$iMYTyh/JcW", " ] [ long ", options0, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter1.defaultWidth;
      Options options0 = new Options();
      Option option0 = new Option((String) null, "");
      options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z8h>OfN7j&o^/vmT");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "[ARG...]", " ", options0, 64, 74, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("", "org.apache.commonsgcli.HelFormater$1", true, "-");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options0);
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptSeparator((String) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      mockPrintWriter0.println(charArray0);
      String string0 = "=.Ec{@^+@|:Fn&AOJ*";
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "=.Ec{@^+@|:Fn&AOJ*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("[");
      StringBuffer stringBuffer0 = new StringBuffer("0D@i,T;30m>n");
      Options options1 = new Options();
      options1.getOptionGroups();
      stringBuffer0.append((-5315.6924F));
      options0.toString();
      helpFormatter0.setNewLine("[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 43, "4%0y", "[dD#*5", options1, 9, 3, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      helpFormatter2.printHelp("--", "F{", options1, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter3.optionComparator = comparator0;
      helpFormatter3.setNewLine("gPoy#*]7@");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter1.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ", 1, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 102, "i6vmsIti", "7^hs2A", (Options) null, 1, 2, "`g<)A7=`\"S'", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      Options options2 = options1.addOption((String) null, true, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      options0.helpOptions();
      options2.getOption("");
      options1.getMatchingOptions("72N.Ggz_!o");
      options0.hasOption("cmdLineSyntax not provided");
      helpFormatter0.findWrapPos("", 29, (-2));
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 20, "", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter2.printHelp("--", "F{", options1, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter3.optionComparator = comparator0;
      helpFormatter3.setNewLine("gPoy#*]7@");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter1.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=e4/iPY%n=]P");
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.printHelp("\n", ">", options2, "QR^^d{;.P/pP[]N{q");
      helpFormatter0.setNewLine("arg");
      helpFormatter1.setLongOptSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter(1469);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-", 1, 1);
      StringWriter stringWriter2 = stringWriter1.append('c');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 1, 118);
      helpFormatter1.getOptionComparator();
      helpFormatter1.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.rtrim((String) null);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options2 = new Options();
      stringBuffer0.append((float) 1);
      options0.getOption("r?U=N@|F:s");
      helpFormatter1.setNewLine("--");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-3995), "has already been selected: '", "", options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.rtrim((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", true, "{&-9=<gO;F->d");
      options1.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      stringBuffer0.append(0.0F);
      options0.addOptionGroup(optionGroup0);
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "Kd|Y'V:$", options1, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.printHelp("\n", ">", options2, "QR^^d{;.P/pP[]N{q");
      helpFormatter0.setNewLine("arg");
      helpFormatter1.setLongOptSeparator((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Option option0 = new Option((String) null, "`~_f@'p>@y g#'f`");
      option0.toString();
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 5, options1, 10, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      int int1 = (-1202);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1202), 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = ">";
      Options options1 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.printHelp("\n", ">", options1, "QR^^d{;.P/pP[]N{q");
      helpFormatter0.setNewLine("arg");
      boolean boolean0 = true;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionValidator");
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter2.printOptions(mockPrintWriter0, (-1801), options2, 97, (-871));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setDescPadding(0);
      int int0 = 536;
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter$1", false, "-");
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, 0, options1, 536, 536);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(29, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "b", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(66, "a{fXr*A %?<R{Q'OpZ", "b", options2, "ql", true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(" ", "usage: ", options1, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine("--");
      helpFormatter2.setLongOptSeparator("usage: ");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "`~_f@'p>@y g#'f`");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-2), "NO_ARGS_ALLOWED", "U+!", options0, 1, 1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "N4)$hESzn0Y)O#2/Soh";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("arg");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      stringBuffer0.append((float) 3);
      options0.addOptionGroup(optionGroup0);
      options0.toString();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", " ] [ long ", options0, "");
      helpFormatter0.setNewLine(" ] [ long ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "v;", " ] [ long ", options0, 9, 9, "v;", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "`~_f@'p>@y g#'f`");
      option0.toString();
      options0.addOption(option0);
      helpFormatter1.getLeftPadding();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1158));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "b", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1489, "", "<E=9.Ptu:6U", options3, (-2), 1578, "#pA`27:z('GL<HY%q\"M", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Collection collection0 = new LinkedList<Integer>();
      Options options2 = options1.addOption((String) null, false, (String) null);
      options0.helpOptions();
      options1.getOption((String) null);
      options2.getMatchingOptions("");
      options2.hasOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-558), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.printHelp("\n", ">", options2, "QR^^d{;.P/pP[]N{q");
      helpFormatter0.setNewLine("arg");
      helpFormatter1.setLongOptSeparator((String) null);
      helpFormatter1.printHelp(74, ">", "", options2, "yz\"prb9@}&^", false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "arg", true, "<");
      optionGroup0.setSelected(option0);
      options1.getOptionGroups();
      Options options2 = options1.addOption((String) null, true, (String) null);
      options0.helpOptions();
      options1.getOption((String) null);
      helpFormatter0.getArgName();
      List list0 = new LinkedList<Object>();
      options2.hasOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-558), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      Options options0 = new Options();
      options0.getMatchingOptions(" [ARG]");
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "0ZTe^8)X$0", "0ZTe^8)X$0", options0, "[", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "slne.eprator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(53, "slne.eprator", "slne.eprator", (Options) null, "slne.eprator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("-");
      helpFormatter0.printHelp("]", options0, true);
      helpFormatter0.printHelp(36, "]", "]", options0, "c+om<9XcCm1z");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      options1.addOption((String) null, true, (String) null);
      options0.helpOptions();
      options1.getOption((String) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options2 = new Options();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-274), options3, (-1), 63);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "0ZTe^8)X$0", "0ZTe^8)X$0", options0, "usage: ", true);
      StringWriter stringWriter0 = new StringWriter();
      options0.getMatchingOptions("-");
      options0.getOptions();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "\n", (-2259), 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(64, "]", "i8U", options1, "<", false);
      helpFormatter0.setArgName("CWmihg#i}xQ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      Options options2 = options1.addOption((String) null, true, (String) null);
      options0.helpOptions();
      options1.getOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3246, (String) null, "'K", options2, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp(64, "]", "i8U", options1, "<", false);
      helpFormatter0.setArgName("CWmihg#i}xQ");
      helpFormatter0.printHelp(64, "]", " ", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1547);
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultSyntaxPrefix = "v|]'k~M/ik\"N&";
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.write(" ");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append((Object) "v|]'k~M/ik\"N&");
      helpFormatter0.renderWrappedText(stringBuffer0, 1547, (-6636), ">");
      int int0 = (-828);
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      helpFormatter0.printHelp(1961, ">>&ne5}zO(m%fP!", "v|]'k~M/ik\"N&", options0, "org.apache.commons.cli.HelpFormatter$1", true);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter3, 44, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultNewLine = "";
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      int int1 = 536;
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter$1", true, "-");
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, 0, options1, 536, 536);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      Options options2 = options1.addOption((String) null, true, (String) null);
      options0.helpOptions();
      options1.getOption((String) null);
      options2.getMatchingOptions("");
      options2.hasOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-558), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("slne.eprator", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption((String) null, false, "--");
      String string0 = "";
      options1.getOption("");
      String string1 = "_:/";
      Options options2 = options1.addOption((String) null, "-", false, "_:/");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "0ZTe^8)X$0", "0ZTe^8)X$0", options0, "[", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1547);
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultSyntaxPrefix = "v|]'k~M/ik\"N&";
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append((Object) "v|]'k~M/ik\"N&");
      helpFormatter0.renderWrappedText(stringBuffer0, 1547, (-6636), ">");
      int int0 = (-828);
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      charArray0[1] = ';';
      charArray0[2] = 'i';
      charArray0[3] = 'f';
      charArray0[4] = '6';
      charArray0[5] = 'W';
      charArray0[6] = '^';
      charArray0[7] = 'a';
      charArray0[8] = '#';
      mockPrintWriter0.write(charArray0, 0, 3);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 1, "[T@N(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-599);
      String string0 = "C<HV";
      helpFormatter0.defaultNewLine = "C<HV";
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        MockFile.createTempFile(", ", "C<HV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getWidth();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, int0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "N4)$hESzn0Y)O#2/Soh";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("arg");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = (-2465);
      Options options0 = new Options();
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      stringBuffer0.append((float) 3);
      Options options2 = options1.addOption("arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      options2.toString();
      // Undeclared exception!
      try { 
        options2.addOption("usage: ", "", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.rtrim(" ");
      String string1 = "";
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "lN`OxwZjDbsVQzvC";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("lN`OxwZjDbsVQzvC", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("-");
      assertEquals("-", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1012, "", "", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter1.createPadding(74);
      Options options0 = new Options();
      int int0 = 44;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 307;
      helpFormatter0.setWidth(1);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "org.apache.commons.cli.AlreadySelectedException");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.helpOptions();
      options0.toString();
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "cB0PIgI\"Fe2o'~w}'", false, "\n");
      Options options1 = options0.addOption(option0);
      String string1 = "";
      String string2 = "d+\"d12Oc$Y[T%3h=";
      Options options2 = options1.addOption("", false, "d+\"d12Oc$Y[T%3h=");
      options2.addOption(option0);
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2198), "cB0PIgI\"Fe2o'~w}'", "", options2, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.defaultArgName = "org.apache.commons.cli.AlreadySelectedException";
      int int0 = 509;
      helpFormatter0.setLeftPadding(509);
      String string1 = "' was specified but an option from this group ";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("\n", "arg", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "\n", true, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      helpFormatter0.printHelp("0Uv", (String) null, options1, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 22, "D_fP)=DY]c\"cWk", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("!/}bxzn8-9-Wo,{", "!/}bxzn8-9-Wo,{", options0, "S#H'7Qr1:~.6D(X");
      helpFormatter0.setNewLine("S#H'7Qr1:~.6D(X");
      helpFormatter0.setLongOptSeparator("FuM4ic{l&1*p|/F'gv");
      assertEquals("FuM4ic{l&1*p|/F'gv", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "`~_f@'p>@y g#'f`");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup1 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "\n", "D/hPz/9GTN&Oek4", options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.printf("\n", (Object[]) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 44, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.defaultLeftPad = 44;
      StringBuffer stringBuffer0 = null;
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("jUJqyO&PcM=zsUk|;t", true, "jUJqyO&PcM=zsUk|;t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'jUJqyO&PcM=zsUk|;t' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("cmdLineSyntax not provided");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 5, 5, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.printf("\n", (Object[]) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 44, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.defaultLeftPad = 44;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = null;
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("jUJqyO&PcM=zsUk|;t", true, "jUJqyO&PcM=zsUk|;t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'jUJqyO&PcM=zsUk|;t' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2718;
      helpFormatter0.defaultWidth = 2718;
      String string0 = "<";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2718, "=_k{30");
      helpFormatter0.setLongOptPrefix("<");
      helpFormatter0.defaultArgName = "<";
      String string1 = "";
      helpFormatter0.setLongOptSeparator("");
      String string2 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("<", true, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("usage: ");
      MockFile mockFile0 = new MockFile("has already been selected: '", "vqMAO+;");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.format("usage: ", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      int int0 = (-3064);
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option(".qq}}03i~ }m66", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.qq}}03i~ }m66' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-914);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(74, 2366L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 74
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
