/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:13:24 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", true, " ");
      option0.setArgName("sb~69p9}L[;J");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.getLongOptSeparator();
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('2');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "lJH$Bzs";
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "lJH$Bzs");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-121);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "%neP9'C@ay[n&> ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 10, (-1731), "%neP9'C@ay[n&> ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasOption("D-JF(n6PD@(C<D@U");
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("\n", 3, 0);
      helpFormatter0.setArgName("");
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "\n");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      String string0 = "J5J cw!R\"";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "J5J cw!R\"", "J5J cw!R\"", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("tS<=['57:2A:/{", "tS<=['57:2A:/{", (Options) null, "tS<=['57:2A:/{", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      Options options0 = new Options();
      int int0 = 11;
      options0.hasLongOption("arg");
      String string1 = "D-JF(n6PD@(C<D@U";
      options0.hasOption("D-JF(n6PD@(C<D@U");
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.defaultLeftPad = (-2897);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("^DL`fYTyhE7hw67InL6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultSyntaxPrefix = "GEgI}]93";
      helpFormatter0.setSyntaxPrefix("GEgI}]93");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "xI`e!^";
      helpFormatter0.setNewLine("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-858);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("KV", (String) null, options0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Option option1 = new Option("uOKCJ9L", "", true, " ");
      optionGroup2.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "kGRa6s/b/R";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "kGRa6s/b/R");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      String string0 = "C\\j*b>X'-";
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(" ] [ long ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 1272, 31);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.setWidth(105);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", true, " ");
      optionGroup0.addOption(option0);
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding((-2));
      int int0 = 3;
      String string0 = "usage: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(118, "VBhI}_0F`|?A", "", options0, "Q6F-G,dhs^");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(":T|G0|", options0);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.write("C$<F");
      Options options1 = options0.addOption("arg", false, "a");
      options0.getOptions();
      MockFile mockFile0 = new MockFile("cmdLineSyntax not provided", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Options options2 = options1.addOption("", true, "\n");
      String string0 = "";
      mockPrintWriter0.println(1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " 2vjlHqU:'d{<DE", "4\"U7", options2, 5, 1600, "]", false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-6462));
      StringWriter stringWriter0 = new StringWriter(1);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(74);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-5181);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("M9T7'6MX}N4&-IY$", (Options) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.setLeftPadding((-1));
      boolean boolean0 = false;
      int int0 = 1853;
      String string0 = "Qsb,{-AM\\hp$G&S8BZ~";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Qsb,{-AMhp$G&S8BZ~", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("c[g(HsAw=R9m*.ZXi@^");
      int int0 = (-888);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-888), options2, 2180, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      Options options0 = new Options();
      helpFormatter0.printHelp("kGRa6s/b/R", "kGRa6s/b/R", options0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 592, "org.apache.commons.cli.HelpFormatter", "", options0, 8, 592, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options1 = new Options();
      options1.hasLongOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 11, ",[KCWDNq65", (String) null, options1, 11, 2521, "wsa'HaSfiKN}ym", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2391));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" :: ", "", options0, " :: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setLeftPadding(1);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*TXs54a]?;*:";
      Options options0 = new Options();
      helpFormatter0.printHelp(11, "*TXs54a]?;*:", "[", options0, "1.#d");
      String string1 = "'";
      String string2 = null;
      helpFormatter0.setLeftPadding((-1763));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(57, "'", (String) null, options0, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2185);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      int int0 = 0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6hU)v8#c!_DE4;", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 259;
      String string0 = "|^jRx";
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options2 = options1.addOption("arg", true, "-");
      String string2 = "";
      options0.getOption((String) null);
      options2.hasShortOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 259, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      String string0 = "kGRa6s/b/R";
      String string1 = ".Dux4md*z5@0";
      helpFormatter0.createPadding(0);
      Options options0 = null;
      helpFormatter0.defaultSyntaxPrefix = "Iv`e!";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "kGRa6s/b/R", ".Dux4md*z5@0", (Options) null, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ":T|}0|";
      Options options0 = new Options();
      helpFormatter0.printHelp(":T|}0|", options0);
      helpFormatter0.setSyntaxPrefix("I");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 44, options1, 5740, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLeftPadding((-396));
      helpFormatter0.createPadding(38);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "/lW#^&a^4H9E~t0", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 156, "gKkxo*K", options0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("KV", (String) null, options0, "");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setLeftPadding(1);
      // Undeclared exception!
      helpFormatter1.printHelp(0, " ", "usage: ", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", true, " ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      options1.getOption("-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, (String) null, options1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, false, "8ucSGw(]K+-hp");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X-S~9Jghz3~(G>=vm<$");
      Object[] objectArray0 = new Object[5];
      mockPrintWriter0.print('I');
      objectArray0[0] = (Object) "X-S~9Jghz3~(G>=vm<$";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) "SFhC_nq2k4";
      objectArray0[4] = (Object) "=";
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      helpFormatter0.printHelp(printWriter0, 2516, "Y;-3i*4@^J:Ry", "TF#^txWeC+KjS8;#)", options0, 735, 2516, "", false);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.printHelp(1347, "org.apache.commons.cli.HelpFormatter$1", "<co*-jK", options1, (String) null, true);
      helpFormatter1.getOptionComparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(":T|G0|", options1);
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      helpFormatter1.setLeftPadding(74);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 32, "-", "arg", options0, 612, 1, "usage: ", true);
      helpFormatter2.renderOptions(stringBuffer0, 109, options1, 74, 103);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      String string0 = "i#(GmkL";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(":T|G0|", options0);
      helpFormatter1.setSyntaxPrefix("i#(GmkL");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" |b");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "\n", ":T|G0|", options0, "og.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 103, (String) null, options1);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter0.printHelp("usage: ", "-", options2, "arg");
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      String string0 = "j";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(":T|G0|", options0);
      helpFormatter1.setSyntaxPrefix("j");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" |b");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "\n", ":T|G0|", options0, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-858);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("KV", (String) null, options0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.setNewLine("[ Options: [ short ");
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "]2Tw=2<'$Op";
      stringBuffer0.append("]2Tw=2<'$Op");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "[ Options: [ short ", "", (Options) null, 13, (-2508), (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      int int0 = 0;
      String string0 = "kGRa6s/b/R";
      String string1 = ".Dux4md*z5@0";
      Options options0 = null;
      helpFormatter0.defaultSyntaxPrefix = "xI`e!^";
      StringBuffer stringBuffer0 = new StringBuffer(".Dux4md*z5@0");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 13, (Options) null, 13, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(":T|G0|", options0);
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getSyntaxPrefix();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 3, "", options0);
      Options options1 = new Options();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 82, "SWd[", "arg", options1, 458, 58, "--", true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options1);
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      helpFormatter1.setLeftPadding(74);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options1);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, " ", "--", options2, 74, 3, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\"<";
      helpFormatter0.setLeftPadding(166);
      helpFormatter0.setLongOptSeparator("\"<");
      helpFormatter0.defaultNewLine = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "]", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("ZP-R#(!R[!Y,$W");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "FM*IN+");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFile1.delete();
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[5];
      mockFile0.deleteOnExit();
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      locale0.getDisplayCountry();
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(" ", objectArray0);
      mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 8, (-749), "FM*IN+");
      helpFormatter0.defaultOptPrefix = "\n";
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "United States");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 179, (-2306), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) uRI0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options2.getOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 34, "S7TlRf-]6R", "Illegal option name '", options2, 990, (-1), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(":T|G0|", options0);
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = '6';
      charArray0[2] = 'Y';
      charArray0[3] = '{';
      charArray0[4] = 'F';
      charArray0[5] = '_';
      charArray0[6] = 's';
      mockPrintWriter0.write(charArray0);
      mockPrintWriter0.flush();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" | ");
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "6tK+w8=Cacx7+[", "", options0, 74, 3628, "");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      String string0 = ":T|G0|";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(":T|G0|", options0);
      mockPrintWriter0.print("--");
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter2.getDescPadding();
      String string1 = " | ";
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption("", "", false, "--");
      helpFormatter0.setSyntaxPrefix("   ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "", "", options1, 74, 31, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, ":X`MrV=ezH\"70", false, "");
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ] [ long ", "line.separator", options0, (String) null);
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.defaultSyntaxPrefix = "xI`e!^";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, " ", (String) null, (Options) null, 3, 9, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(":T|G0|", options1);
      helpFormatter1.setSyntaxPrefix("");
      Option option0 = new Option((String) null, "-", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOption("", "\n", false, "");
      options2.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      options3.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, (String) null, options3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      Options options4 = new Options();
      Options options5 = options4.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("h_?5+`0]wBF", "", options5, "--");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      stringWriter0.write("Cj*b>X'-");
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      Option option0 = new Option((String) null, "arg", true, "-");
      Options options2 = options1.addOption(option0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("]");
      Locale locale0 = new Locale("", " ", " ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, true);
      options2.addOption((String) null, "<6#$<H U7hgBccE", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "J?xU", "", options0, "line.separator", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "xI`e!^";
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("kGRa6s/b/R", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) uRI0;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp(1456, "[", "Cannot add value, list full.", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-677), (String) null, "[", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      helpFormatter0.setNewLine("");
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(96, "arg", "xI`e!^", (Options) null, "Q^/N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      MockURI.parseServerAuthority(uRI0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) uRI0;
      objectArray0[4] = objectArray0[1];
      objectArray0[6] = (Object) uRI0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("CV38y|swRx*", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 44, "CV38y|swRx*");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      stringWriter0.write("Cj*b>X'-");
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      options0.addOption("", " ", true, "C<|.");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-708), "", (String) null, options1, 3, (-1), "[", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(":T|G0|", options0);
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" | ");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter2, 31, "arg", "[ option: ", options0, (-2), 1, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      stringWriter0.write("Cj*b>X'-");
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      Option option0 = new Option((String) null, "arg", true, "-");
      Options options2 = options1.addOption(option0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("]");
      Locale locale0 = new Locale("", " ", " ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, true);
      options2.addOption((String) null, "<6#$<H U7hgBccE", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 32, (-193), "");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      helpFormatter1.createPadding(2132);
      helpFormatter0.setLeftPadding(31);
      helpFormatter1.printHelp("arg", "   ", options1, "iLlsL+%5]hN5x@u");
      helpFormatter0.getLeftPadding();
      helpFormatter1.findWrapPos("   ", 1, 2875);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(":T|G0|", options0);
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" | ");
      Options options1 = options0.addOption("arg", "\n", true, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, (-708), "[", " | ", options1, 3, (-1), (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      stringWriter0.write("Cj*b>X'-");
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      Option option0 = new Option((String) null, "arg", true, "-");
      Options options2 = options1.addOption(option0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("]");
      Locale locale0 = new Locale("", " ", " ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("-");
      Options options3 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 33, "Cj*b>X'-", "Qn@Z7TK%97q8^l*yS{:", options2, 547, 18, "");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 96, 96, "Y7?pC/h$m;");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", "--", options1, "--");
      helpFormatter0.renderOptions((StringBuffer) null, 31, options1, 1736, 742);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      options0.addOption("", "", false, "--");
      Option option0 = new Option("m", "7M6", false, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "Llr=&knp1Y", objectArray0);
      helpFormatter0.printHelp(" ", "", options2, "--");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, (String) null, "", options0, 948, 948, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "-", true);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.ParseException", 32, (-120));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 74;
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(false);
      stringBuffer0.append("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "TJ%3v@~Tx8(*=";
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "uJ7[$iKix\\#%|";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("uJ7[$iKix#%|");
      int int0 = (-22);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-22), "uJ7[$iKix#%|");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 74;
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(" | ", "", options0, "?d");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1259);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, 3, "97F+#", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      options0.hasOption("D-JF(n6PD@(C<D@U");
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos(" ", 3, 0);
      helpFormatter0.setOptPrefix("D-JF(n6PD@(C<D@U");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("9P.!We(<}", (-429), 4312);
      helpFormatter0.setLeftPadding(20);
      helpFormatter0.printHelp(4312, "\n", "~dHs\"[?", options0, "--", false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(":T|G0|", options1);
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      helpFormatter1.setLeftPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "-", "", options1, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ROOT;
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, (String) null, (String) null, (Options) null, ".Dux4md*z5@0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "Lz";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("]Qki-/eKHUOh", 4307, 1);
      helpFormatter1.setLeftPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(91, "ED<x*2f/1;<`Lw)", "[", (Options) null, " ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) uRI0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 74, options0, 74, 74);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 1, 32, "~ w X*$<?nbrp");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) uRI0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.rtrim("7u#");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-241), "\n", "usage: ", (Options) null, "Lz");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "uJ7[$iKix\\#%|";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("uJ7[$iKix#%|");
      int int0 = 8;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "uJ7[$iKix#%|");
      Options options0 = new Options();
      String string1 = null;
      Option option0 = new Option("arg", (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption(":^@_.y!u", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ':^@_.y!u' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      stringWriter0.write("Cj*b>X'-");
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      Option option0 = new Option((String) null, "arg", true, "-");
      Options options2 = options1.addOption(option0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("]");
      Locale locale0 = new Locale("<6#$<H U7hgBccE");
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0, true);
      options2.addOption((String) null, "<6#$<H U7hgBccE", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "<6#$<H U7hgBccE", "", options0, (-1), (-708), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 1, "cmdLineSyntax not provided", (String) null, options0, 1, 13, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setDescPadding(1519);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Illegal opt]n name]'");
      Options options0 = new Options();
      options0.getOption("\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "\"", (String) null, options0, 0, 0, (String) null);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 2, 2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      options0.hasOption("D-JF(n6PD@(C<D@U");
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setOptPrefix("u?/0^Bs;");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter2.findWrapPos((String) null, 1, (-680));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(":T|G0|", options1);
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter2.findWrapPos("usage: ", 3, 74);
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.printHelp(31, "hBW9iv R", "-", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      options0.addOption("", "", false, "--");
      Option option0 = new Option("m", "7M6", false, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "Llr=&knp1Y", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1, options2, 3, 59);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) uRI0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 44, "~ w X*$<?nbrp", options2);
      helpFormatter0.getLongOptPrefix();
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "[/Hfe1$Kh9", "tJ\"9*9_", options3, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      options0.hasOption("D-JF(n6PD@(C<D@U");
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.setSyntaxPrefix("]");
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("D-JF(n6PD@(C<D@U", 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("E5lw)TzkW&L\" gn", "TJ%3v@~Tx8(*=", options0, " ");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      String string0 = "";
      Option option0 = new Option("", "");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      String string1 = "(x(";
      Option option1 = new Option("", "(x(", false, "   ");
      Options options2 = options1.addOption(option1);
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2185);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      String string0 = "D-JF(n6PD@(C<D@U";
      options0.hasOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      options0.hasOption("D-JF(n6PD@(C<D@U");
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos(" ", 3, 0);
      helpFormatter0.setLeftPadding(13);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(103, "", "MM9gGL4nVP}M'Kfj-/", options0, "D-JF(n6PD@(C<D@U", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Illegal opt]n name]'");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "\"", (String) null, options0, 0, 0, (String) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.close();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      String string0 = null;
      Option option0 = new Option((String) null, "arg", true, "-");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "-", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 408, 408, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0, true);
      String string0 = null;
      helpFormatter0.printHelp("-", options0);
      StringWriter stringWriter0 = new StringWriter(381);
      stringWriter0.append('(');
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-", 381, (-3346));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "Cj*b>X'-");
      Option option0 = new Option((String) null, "arg", true, "-");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, ":T|G0|", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 408, 408, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "_e:o2zv2i1;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) helpFormatter0;
      objectArray1[1] = (Object) mockPrintWriter0;
      objectArray1[2] = (Object) mockPrintStream0;
      objectArray1[3] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-3045), 1785, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1782, (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1925;
      helpFormatter0.defaultDescPad = 1925;
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      String string1 = "";
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      int int0 = (-1911);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1911), (-1911), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("A<8s>W_<T", true, "JOty\"g\"fk4e_<8cJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A<8s>W_<T' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("KV", (String) null, options0, "--");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2070);
      Options options0 = new Options();
      int int1 = (-4095);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2070), options0, (-4095), (-2070));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "TJ%3v@~Tx8(*=", options0, " ");
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-987);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      int int0 = (-482);
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "e(Eb. j[)Bo:]LS");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // e(Eb. j[)Bo:]LS
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.printHelp("-", options0, false);
      Option option0 = null;
      try {
        option0 = new Option("-", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-4574));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 74;
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(false);
      stringBuffer0.append("NO_ARGS_ALLOWED");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      options0.hasOption("D-JF(n6PD@(C<D@U");
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos(" ", 3, 0);
      helpFormatter0.setArgName("");
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Cj*b>X'-");
      Option option0 = new Option((String) null, "arg", true, "-");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, ":T|G0|", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 408, 408, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1706);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(false);
      stringBuffer0.append("NO_ARGS_ALLOWED");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3065));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          String string0 = "kGRa6s/b/R";
          String string1 = ".Dux4md*z5@0";
          Options options0 = null;
          // Undeclared exception!
          helpFormatter0.printHelp(0, "kGRa6s/b/R", ".Dux4md*z5@0", (Options) null, "kGRa6s/b/R");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      String string0 = "G1\\[\\V;G+8}$:HGV";
      boolean boolean1 = false;
      String string1 = "9[9z?SzEg";
      options0.getOptionGroups();
      Options options1 = options0.addOption((String) null, "G1[V;G+8}$:HGV", false, "9[9z?SzEg");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options1, (-2), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      int int0 = 1;
      Options options0 = new Options();
      mockPrintWriter0.print(false);
      options0.getOptions();
      // Undeclared exception!
      try { 
        options0.addOption("DHO~1nD,`", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'DHO~1nD,`' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 685;
      helpFormatter0.setWidth(685);
      String string0 = "o=5v8{G2]";
      Options options0 = new Options();
      String string1 = null;
      // Undeclared exception!
      try { 
        options0.addOption("-", (String) null, true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "5";
      helpFormatter0.getLongOptPrefix();
      String string0 = "T1@|f_";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T1@|f_");
      int int0 = (-3388);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) uRI0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 44, "~ w X*X$<?nbWrp", options2);
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      String string1 = "5*XXt<PcA ";
      Options options3 = new Options();
      helpFormatter0.setLongOptPrefix("");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options3.addOption("5*XXt<PcA ", "-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '5*XXt<PcA ' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 1366;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
