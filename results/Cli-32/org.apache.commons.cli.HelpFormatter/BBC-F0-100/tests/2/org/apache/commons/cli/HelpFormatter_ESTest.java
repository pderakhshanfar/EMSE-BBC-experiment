/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:12:54 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", true, "3Yj=+=_jyl^?|xd5");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(74, "--", "--", options2, "--", true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'l';
      charArray0[2] = '<';
      charArray0[3] = '<';
      int int0 = 3631;
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.getOptions();
      helpFormatter0.defaultLeftPad = (-1945);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, " | ", "*e|m4E[IHhsax2z", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 970;
      int int1 = (-1260);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 970, (-1260), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("jP_FB", "-", true, "3Yj=+=_jyl^?|xd5");
      option0.setArgName("-");
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(74, "--", "--", options2, "--", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Ow}<p@D|K$~FPUfW)UN", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1800);
      Options options0 = new Options();
      options0.addOption("", true, "\n");
      options0.getOptions();
      helpFormatter0.printHelp(string0, string0, options0, "#c3y8x7uA");
      helpFormatter0.setNewLine("[ Options: [ short ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "RSaQb>Xb)-\"baO3k,m", "RSaQb>Xb)-\"baO3k,m", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("jP_FB", "-", true, "3Yj=+=_jyl^?|xd5");
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(74, "--", "--", options2, "--", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(1, " ", " ", options0, " ");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-896);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-896), ",_:xGx4q;kd_uW,20", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("jP_FB", "-", true, "3Yj=+=_jyl^?|xd5");
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "--", "--", options2, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      options0.hasLongOption("'R*SKYJQpb&ugY:1!");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 18, "EVrUA6V}%c/[:>8?R3+", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("jP_FB", "%c&4$I@ Te#7", true, "3Yj=+=_jyl^?|xd5");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "%c&4$I@ Te#7", "%c&4$I@ Te#7", options2, "%c&4$I@ Te#7", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" :: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3631, (-1592), "HkZ?^N Z>,Ar[y+z2");
      helpFormatter0.setWidth((-1592));
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 6, 6, "{+lf|js-:8:d .x/");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " :: ");
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 0, "arg", "", options0, (-1608), 3, "", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "z,gW!w*fa;;Noj1", options0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, ", ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(1206, "SK]sbzv", "SK]sbzv", options1, "org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      option0.setRequired(true);
      Options options3 = options2.addOption((String) null, "-", true, "?fcy[wF7E-.W");
      helpFormatter0.printHelp("v?V|", "UWw3GCd{v1YVxF", options3, "UWw3GCd{v1YVxF", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "-";
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(1, "\n", "", options0, "\n");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption((String) null, "-", true, "?fcy[wF7E-.W");
      helpFormatter0.printHelp("v?V|", "UWw3GCd{v1YVxF", options3, "UWw3GCd{v1YVxF", true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth((-687));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setSyntaxPrefix("&aZUe<a");
      helpFormatter0.createPadding(67);
      helpFormatter0.findWrapPos("                                                                   ", 63, 67);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      String string0 = "mP=3KSH\"mDlx$)f2$Y)";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 67, 67, "uKb5]ad$9L\"{m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("g{bPIY1B,5v}Xv'3");
      stringBuffer0.append('\"');
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 43, (Options) null, 43, 624);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.getLongOptSeparator();
          Options options0 = new Options();
          int int0 = 0;
          helpFormatter0.getOptionComparator();
          // Undeclared exception!
          helpFormatter0.printHelp(0, "Jf{Ih#&8A[ )>yy", "Iz%!d@:{):;7/I|KtW!", options0, "Jf{Ih#&8A[ )>yy", true);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "maM]Ib3zT\"_";
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 40, options0, 32, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.addOption("arg", true, "mx]^^qz,6fqF<P=");
      options0.addOption("X", "w8", true, "AC{uBwr^");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "usage: ";
      int int0 = (-556);
      String string1 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "AC{uBwr^");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 3, options0, 74, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.getWidth();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      helpFormatter0.defaultLeftPad = (int) (byte) (-2);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Option option0 = new Option("", "-");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      OptionGroup optionGroup1 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "maM]Ib3zT\"_";
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "has already been selected: '", options0, "");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultLeftPad = (-1573);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5108, "7wd9m", "", options0, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.addOption("Y", "-", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 26, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setWidth(1);
      helpFormatter0.getWidth();
      String string0 = "";
      Option option0 = new Option("", "-");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      options0.hasShortOption("}6n|'^}NOS|*<1SR");
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "$j(y]s#Y:y=ku AzOGE&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.getWidth();
      Option option0 = new Option("", "-");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("--", options1);
      String string0 = "arg";
      String string1 = "line.separator";
      Options options2 = options1.addOption("arg", true, "line.separator");
      helpFormatter0.printHelp("C", "--", options0, "arg");
      helpFormatter0.getLongOptSeparator();
      String string2 = "z*p`(_";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.getWidth();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("--", options1);
      options1.addOption("arg", true, "line.separator");
      helpFormatter0.printHelp("CL", "--", options0, "lyaeXSv");
      helpFormatter0.getLongOptSeparator();
      File file0 = MockFile.createTempFile("z*p`(_", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "", options0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.getWidth();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("--", options1);
      options0.addOption("arg", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("3`wm]PFXaS(T28", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.getWidth();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("--", options1);
      Options options2 = options1.addOption("arg", true, "line.separator");
      helpFormatter0.printHelp("CL", "--", options0, "lyaeXSv");
      helpFormatter0.getLongOptSeparator();
      File file0 = MockFile.createTempFile("z*p`(_", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "Ig+&Iqix+$[#6=hVeQ", "[]", options2, 121, (-1), "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      String string0 = "\"<YBSP&][<!x7 ";
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"<YBSP&][<!x7 ", "", (Options) null, "\":cXMR$ZrNG|", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption("Y", "-", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 38, (String) null, " ", options0, 38, 2329, "Y", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 734;
      helpFormatter0.findWrapPos("", 734, 734);
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-1), options0, 12, 12);
      options0.getOptions();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-176), "", "cmdLineSyntax not provided", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1783);
      helpFormatter0.getLeftPadding();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+Qz* cT~?n*SD2}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'F';
      charArray0[2] = 'u';
      charArray0[5] = '$';
      charArray0[5] = '\\';
      charArray0[6] = '<';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      charArray0[7] = 'n';
      mockPrintWriter0.print(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3631, 3631, string0);
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("y5I7Y[j*&\"VC1D]Kh", string0, options0, "");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.getWidth();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.printHelp("--", options1);
      options1.addOption("arg", true, "line.separator");
      helpFormatter0.printHelp("CL", "--", options0, "arg");
      helpFormatter0.getLongOptSeparator();
      String string0 = "z*p`(_";
      File file0 = MockFile.createTempFile("z*p`(_", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, " ", " ", options2, 1, 1821, "arg");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("+7PCE", "+7PCE", options0, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      Option option0 = new Option("", "-");
      options0.addOption(option0);
      options0.hasLongOption("org.apache.commons.cli.HelpFormatter");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      helpFormatter0.printHelp("UTa", "k.EDm#uPc", options1, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) null, 34, "-", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("+7PCE", "+7PCE", options0, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("=Xs%it3qF[F=LbG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "[]";
      objectArray0[1] = (Object) option0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 13, "xb3ub+v6=sL", (String) null, options1, 6, 1, "", true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "\n");
      helpFormatter0.setWidth(3631);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter1.renderWrappedText(stringBuffer0, 2009, 1, "");
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "A CloneNotSupportedException was thrown: ", options0, 3, 34, "", false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("+7PCE", "+7PCE", options0, " ");
      Options options1 = options0.addOption("", "org.apache.commons.cli.Util", true, "w~31*");
      helpFormatter0.printHelp("[ Options: [ short ", options1);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = new StringBuffer(0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("+7PCE", "+7PCE", options0, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      Option option0 = new Option("", "-");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ojQh`_z");
      mockPrintWriter0.print('4');
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 74, " ");
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 13, (-1274), "");
      helpFormatter1.getLongOptSeparator();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 44, "\"Y,&2<L2~s$d]", "-", options0, 32, 74, (String) null, false);
      helpFormatter1.rtrim(" ");
      helpFormatter2.findWrapPos("-", 44, 4520);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption("", "", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 38, "RlB//gdiq=U.%5EP+bM", "RlB//gdiq=U.%5EP+bM", options1, 38, 0, "Y", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Co;K9A5nN", "arg", options0, "org.apache.commons.cli.OptionGroup");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "", options0, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, " | ", "", options0, 64, 10, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("a5h`/~tnWy{}1_V", "usage: ", options0, "K--~xn>9;uH3 ");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2511;
      helpFormatter0.setWidth(2511);
      String string0 = "H;5{0p$R&D]P=v";
      helpFormatter0.setLongOptSeparator("H;5{0p$R&D]P=v");
      String string1 = null;
      helpFormatter0.setWidth(2511);
      helpFormatter0.defaultLeftPad = 2864;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2864, 2864);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "!u{W`}p4#oz&p";
      Options options0 = new Options();
      String string1 = null;
      Options options1 = options0.addOption((String) null, false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = "";
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      String string3 = ",:|:lx}";
      option0.clearValues();
      optionGroup1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "!u{W`}p4#oz&p", "!u{W`}p4#oz&p", options2, ",:|:lx}", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "\n");
      helpFormatter0.setWidth(3631);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter1.renderWrappedText(stringBuffer0, 2009, 1, "");
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer(1466);
      helpFormatter0.printHelp(299, "\n", "D{'4/<gFRkh7b$", options0, "", false);
      helpFormatter1.renderOptions(stringBuffer0, (-1644), options0, 1466, 299);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = "w";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 44, "w");
      helpFormatter0.setWidth((-36));
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 44, 44, "");
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, " [ARG]", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("-", "-", options0, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "a>{hvKNEGr(u._", true, "no@OUW%2");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "", "ZXTS@D}q\"D%^Z", options0, (-1813), 1, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 3, (Options) null, 316, (-1425));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.getWidth();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp("--", options1);
      options1.addOption("arg", true, "arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultLongOptPrefix = "z*p`(_";
      File file0 = MockFile.createTempFile("z*p`(_", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "-", options0);
      int int0 = (-1400);
      String string0 = "";
      String string1 = "zl:3";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, " ", " ", options1, (-965), 74, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'l';
      charArray0[2] = '<';
      charArray0[3] = '<';
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3631, (-254), "w");
      helpFormatter0.setWidth(3);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3631, "");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 10, "usage: ", " ", options0, 3440, 32, "-", false);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "\"");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'l';
      charArray0[2] = '<';
      charArray0[3] = '<';
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(32, " | ", "*e|m4E[IHhsax2z", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(13, "--", "--", options0, "-");
      helpFormatter1.getWidth();
      helpFormatter1.printHelp("\n", options0);
      StringBuffer stringBuffer0 = new StringBuffer(44);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 31, 1111, "usage: ");
      helpFormatter0.renderOptions(stringBuffer1, 1645, options0, 13, 1645);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "}&";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("}&");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "Cj", "y-!serld", (Options) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "-";
      boolean boolean0 = false;
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("--");
      stringBuffer0.codePoints();
      String string1 = "mj#UR]&";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-2), "mj#UR]&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "W-";
      String string1 = helpFormatter0.defaultArgName;
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3584);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "W-", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 1, 3584, "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "", options0, (-2994), 3584, "oHGx", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1783);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" | ").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'l';
      charArray0[2] = '<';
      charArray0[3] = '<';
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3631, (-254), "");
      helpFormatter0.setWidth(1783);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3631, "");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printUsage(printWriter0, 1783, "*e|m4E[IHhsax2z", options0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("+7PCE", "+7PCE", options0, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      helpFormatter1.printHelp("--", options1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("pW?%Jj]Sa~Q", "v1*9,/ZQ-;^_o[#0:0X", options1, "-");
      helpFormatter2.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.write(1543);
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "g\"'N!^Z|a}f");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "arg", "arg", options1, 1, 38, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "-";
      Option option0 = new Option((String) null, true, "");
      options0.addOption(option0);
      helpFormatter0.printHelp("arg", "'R*SKYJQpb&ugY:1!", options0, "");
      // Undeclared exception!
      try { 
        options0.addOption("-", "usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("C'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)84;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = '<';
      charArray0[2] = '$';
      mockPrintWriter0.print(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte)10, (int) (byte)84, "C'");
      helpFormatter0.setWidth(3631);
      StringBuffer stringBuffer0 = new StringBuffer("S.;FgSx!1k]/");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (byte)10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-2);
      mockPrintWriter0.println((-3455L));
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption("", "", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 27, " ", "", options0, 158, 27, "NO_ARGS_ALLOWED", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-124));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption("X", "w8", true, "AC{uBwr^");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "usage: ";
      String string1 = " ";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-556), (String) null, "ci~d2B8a", options0, (-556), 74, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3584);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "W-", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 1, 3584, "usage: ");
      Options options0 = new Options();
      options0.addOption("", "arg", false, "arg");
      helpFormatter0.printHelp("--", "arg", options0, "-");
      Options options1 = options0.addOption("arg", "ftl70X|-yLy*H7&qY", false, "t `,{");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, 74, "", "arg", options1, 3, (-2307), "|q,fqHNk&7RG1]MQV;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "\n");
      helpFormatter0.setWidth(3631);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter1.renderWrappedText(stringBuffer0, 2009, 1, "");
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 352, "--", "--", options0, (-1367), 2009, "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1783);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'l';
      charArray0[2] = '<';
      charArray0[3] = '<';
      mockPrintWriter0.print(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3631, (-254), "");
      helpFormatter0.setWidth(1783);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3631, "");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      int int0 = 488;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, string0, "$0N", options0, 488, (-254), ">", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = "";
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 10, 63, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "~k<rGI$ 4Z";
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) "usage: ";
      helpFormatter0.setWidth(9);
      Options options1 = new Options();
      helpFormatter0.printHelp(63, "R3=:U {!kF<xDME0[", "3jo`Y)V&>BHh?B", options0, "Y");
      helpFormatter0.printHelp(63, "2k<|ZxUrY;o{", " :: ", options0, "");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1783);
      helpFormatter0.getLeftPadding();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      helpFormatter0.defaultDescPad = 1783;
      charArray0[1] = 'F';
      charArray0[2] = 'u';
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp("*2)%tYv)a", options0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 876, 876, "*2)%tYv)a");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption("", "-", true, "");
      helpFormatter0.printHelp("O]I*7Ml", options0);
      StringBuffer stringBuffer0 = new StringBuffer(826);
      StringBuffer stringBuffer1 = new StringBuffer(826);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", "-", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 10, "usage: ", "", options0, (-2277), 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cmdLineSyntax not provided", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Option option0 = new Option((String) null, "usage: ", true, "--");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine((String) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) null, 1, 1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter2.format("", objectArray0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-542), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", (String) null, options0, "arg");
      // Undeclared exception!
      try { 
        options0.addOption("\n", "-", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("arg");
      helpFormatter0.defaultArgName = "w@{boJS";
      helpFormatter0.setArgName("arg");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("arg", options0, false);
      helpFormatter0.printHelp("arg", "arg", options0, "arg", false);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3255), "--", ".(Z;=Z,J=g3ksmbas", options0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3584);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 1, 3584, "usage: ");
      Options options0 = new Options();
      options0.addOption("", "arg", false, "arg");
      helpFormatter1.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "", "arg", options0, "(lMIT0", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("W-");
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3584);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "W-", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 1, 3584, "usage: ");
      Options options0 = new Options();
      options0.addOption("", "arg", false, "arg");
      helpFormatter0.printHelp("--", "arg", options0, "-");
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "W-", false, "W-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1783);
      helpFormatter0.getLeftPadding();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+Qz* cT~?n*SD2}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'F';
      charArray0[2] = 'u';
      charArray0[5] = '$';
      charArray0[4] = 'T';
      charArray0[5] = '\\';
      charArray0[6] = '<';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      charArray0[7] = 'n';
      mockPrintWriter0.print(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3631, 3631, string0);
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      String string0 = "line.separator";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-52), "A&Y]5jaSE<T-@?+wYe)", "A&Y]5jaSE<T-@?+wYe)", options0, 32, (-52), "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1800);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "\n");
      Options options2 = options1.addOption("arg", "usage: ", true, "-");
      options1.helpOptions();
      Collection collection0 = options2.getOptions();
      helpFormatter0.printHelp(string0, string0, options2, "#c3yxBuA");
      helpFormatter0.setSyntaxPrefix("=Wi ]HS");
      helpFormatter0.setNewLine("[ Options: [ short ");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) collection0;
      objectArray0[2] = (Object) options2;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "#c3yxBuA";
      PrintWriter printWriter0 = mockPrintWriter0.format("#c3yxBuA", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("W-");
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(3584);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "W-", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 1, 3584, "usage: ");
      String string0 = "org.apache.commons.cli.OptionGroup";
      Options options0 = new Options();
      options0.addOption("", "arg", false, "arg");
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.OptionGroup", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.OptionGroup' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.Util", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) ">";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "W-";
      objectArray0[6] = (Object) "W-";
      mockPrintWriter0.printf(locale0, ">", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1438, 1438, "~k<rGI$ 4Z");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-736), "gbM=T9^rt))", "%", options0, "org.apache.commons.cli.Util", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = (-1353);
      PrintWriter printWriter0 = null;
      helpFormatter0.setNewLine("--");
      String string0 = "line.separator";
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.OptionGroup";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", "'R*SKYJQpb&ugY:1!", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("d?~VP%yS_oVYQF\"8P", (-9), (-9));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cmdLineSyntax not provided", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[7];
      options0.toString();
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "~k<rGI$ 4Z";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "cmdLineSyntax not provided";
      objectArray0[5] = (Object) "cmdLineSyntax not provided";
      objectArray0[6] = (Object) mockFileOutputStream0;
      mockPrintWriter0.printf(locale0, "~k<rGI$ 4Z", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "=68z ISz", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, " ", " ", options1, 1, 38, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      String string1 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      Options options1 = options0.addOption("xfS4zVlZ", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.HelpFormatter", options1, "D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+Qz* cT~?n*SD2}");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "\n");
      helpFormatter0.setWidth(3631);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter1.renderWrappedText(stringBuffer0, 2009, 1, "");
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 2, "->Dl\"zTI,'x!", "", options0, 3, 74, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption("", "-", true, "");
      helpFormatter0.setWidth(1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1783);
      helpFormatter0.getLeftPadding();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+Qz* cT~?n*SD2}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'F';
      charArray0[2] = 'u';
      charArray0[3] = '$';
      charArray0[4] = 'T';
      charArray0[5] = '\\';
      charArray0[6] = '<';
      charArray0[7] = 'n';
      mockPrintWriter0.print(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3631, 3631, string0);
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      String string0 = "~Av";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "~k<rGI$ 4Z";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "~Av", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1), (-1), "~Av");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1050), 3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      String string0 = "line.separator";
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.printHelp("line.separator", "'R*SKYJQpb&ugY:1!", options0, "");
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.OptionGroup", "usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.OptionGroup' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "cmdLineSyntax not provided";
      String string1 = "";
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cmdLineSyntax not provided", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "~k<rGI$ 4Z";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "cmdLineSyntax not provided";
      objectArray0[5] = (Object) "cmdLineSyntax not provided";
      objectArray0[6] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "~k<rGI$ 4Z", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "~k<rGI$ 4Z");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = 0;
      stringBuffer0.ensureCapacity(3);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 3431, 9);
      helpFormatter0.renderWrappedText(stringBuffer1, 9, 0, "usage: ");
      helpFormatter0.setArgName("usage: ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "-", (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2457;
      helpFormatter0.setDescPadding(2457);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("<", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter(2185);
      StringWriter stringWriter1 = stringWriter0.append('j');
      stringWriter1.getBuffer();
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "}C7", false, "");
      // Undeclared exception!
      try { 
        options2.addOption("-", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-498);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 0, (Options) null, 0, (-498));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("d?~VP%yS_oVYQF\"8P", 10, 10);
      String string0 = "O?UV}:s(F}]A1)F8";
      Options options0 = new Options();
      String string1 = null;
      Option option0 = new Option((String) null, "--");
      String string2 = "line.separator";
      helpFormatter0.defaultArgName = "line.separator";
      option0.setArgs((-1334));
      Options options1 = options0.addOption(option0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption(" ", true, "O?UV}:s(F}]A1)F8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.UK;
      String string0 = "";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      int int0 = 1544;
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 1544, options0, 1544, 1544);
      helpFormatter0.getOptionComparator();
      String string1 = "";
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, int0);
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("--", string0);
      
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setOptionComparator((Comparator) null);
      int int1 = helpFormatter0.getWidth();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, int1);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "org.apache.commons.cli.Option";
      String string1 = "";
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option", "");
      File file0 = MockFile.createTempFile("arg", "arg", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1783);
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "\n");
      Options options2 = options1.addOption("arg", "usage: ", true, "-");
      options2.getOptions();
      String string1 = "#cyxBuA";
      helpFormatter0.printHelp(string0, string0, options2, "#cyxBuA");
      helpFormatter0.setSyntaxPrefix("=Wi ]HS");
      helpFormatter0.setNewLine("[ Options: [ short ");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "arg", 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("N)i#4");
      assertEquals("N)i#4", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-33));
      helpFormatter0.setOptPrefix("org.apache.commons.cli.ParseException");
      assertEquals("org.apache.commons.cli.ParseException", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "usage: ");
      mockFile0.toURI();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print((Object) mockFile0);
      int int0 = 1640;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1640, "UwvX");
      helpFormatter0.rtrim("UwvX");
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("]", "org.apache.commons.cli.HelpFormatter", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = null;
      String string1 = "SdWY# DYT";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("[ Options: [ short ", "", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ Options: [ short ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
