/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:14:46 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0";
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption("arg", "-", true, "--");
      helpFormatter0.setDescPadding((-1041));
      String string1 = "";
      String string2 = "";
      Option option0 = new Option("", true, "");
      option0.setArgName("");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(20, "0", "usage: ", options1, "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "--");
      String string1 = "";
      String string2 = "";
      Option option0 = new Option("", true, "");
      option0.setArgName("-");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "0", "usage: ", options1, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      String string1 = "";
      String string2 = "usage: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string3 = "xrh4ms(p";
      Option option0 = null;
      try {
        option0 = new Option("xrh4ms(p", "-", true, "v5hb@2?bWl]P)b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'xrh4ms(p' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "--");
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      option0.setArgName(" ");
      helpFormatter0.printHelp("f[I%!=0GzdL`", options1);
      option0.setArgName("");
      options1.addOption(option0);
      helpFormatter0.printHelp(3, "0", "usage: ", options1, "--", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("0", "", options1, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultWidth = (-2);
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("F]JKvfbn", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("7x8s!7&");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2158, "7x8s!7&", options2);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "[", false, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*U>K5`.<LVdQxlZEX?", "-", (Options) null, "9Xk[eS@a)E^bQ\">wh2", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "=|ct<1\"1I:@SS m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1026, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(118, "kZ5,nVkc0_H0_+", "", (Options) null, "kZ5,nVkc0_H0_+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim("org.apache.commons.cli.OptionValidator");
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 2284;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("-", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2635);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setArgName("K3ftb~4 j9PBJ9VSD5d");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "K3ftb~4 j9PBJ9VSD5d");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      options0.addOption((String) null, true, "usage: ");
      helpFormatter0.defaultWidth = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("~:3sT>@n_sj.qGeXbrH", "~:3sT>@n_sj.qGeXbrH", options0, "~:3sT>@n_sj.qGeXbrH");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-2);
      helpFormatter0.defaultDescPad = (-2);
      helpFormatter0.findWrapPos("", 1585, 1585);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "c!UdN9\u0004y 2-OE(?/", true, "c!UdN9\u0004y 2-OE(?/");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1032, (-2), "U");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2), options2, 0, 3291);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "";
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "-");
      options2.hasShortOption("H#|)<lot&sBN");
      String string2 = "\"W@G@?5}AG,%H/P:";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "kpp03w", "kpp03w", options2, "\"W@G@?5}AG,%H/P:");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "usage: ");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-5415);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", options0, false);
      StringWriter stringWriter0 = new StringWriter(13);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('E');
      StringBuffer stringBuffer1 = stringWriter2.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 13, 13, "A CloneNotSupportedException was thrown: ");
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 13, 13);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      String string0 = "D&$ZI gxh|k";
      File file0 = MockFile.createTempFile("d'g", "H2A)K` i");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding(3);
      int int0 = 0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 9;
      String string1 = "";
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 2562, 9);
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, "[IF\";m]k%q-|)`EJDVY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.optionComparator = null;
      helpFormatter0.setDescPadding(3);
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 366, (Options) null, 366, 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      mockFileOutputStream0.write(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "x\"  ");
      helpFormatter0.printHelp("[", "usage: ", options1, "");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderOptions(stringBuffer0, 2582, options0, 2582, 2582);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      mockFileOutputStream0.write(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("JL", false, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options2 = new Options();
      options0.hasLongOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options1.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("", true, "usage: ");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", "JL", (String) null).when(comparator0).toString();
      doReturn(3, 1, 0).when(comparator0).compare(any(org.apache.commons.cli.Option.class) , any(org.apache.commons.cli.Option.class));
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp(" | ", "", options1, "", true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) optionGroup0;
      objectArray0[2] = (Object) "";
      mockPrintWriter0.format(";dck", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2083), "", options4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter1.defaultOptPrefix = "-";
      helpFormatter0.setOptPrefix("Rn\"\"DJ:U'=wtGDBLU");
      helpFormatter2.printHelp("arg", "", options0, "Rn\"\"DJ:U'=wtGDBLU");
      helpFormatter2.getOptionComparator();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "   ", "The option '", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("--");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 8, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1273), "--", "", options0, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      mockFileOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(74);
      mockPrintWriter0.println(3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "");
      mockPrintWriter0.print("II!v|<wE");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 2471, ">lFjKi (*4|cH");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NO_ARGS_ALLOWEC", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(74);
      mockPrintWriter0.println(3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      helpFormatter0.printHelp(3577, "{w ',9{:Hep", "ws}std13o*$M\"&\"Z_", options0, "fNZ", false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "");
      String string0 = "org.apache.commons.cli.OptionGroup";
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.OptionGroup", objectArray0);
      mockPrintWriter0.format("--", objectArray0);
      PrintWriter printWriter1 = printWriter0.printf("org.apache.commons.cli.OptionGroup", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter1);
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, 9, "/R\"t 2xxd7Qn(chZB ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      mockFileOutputStream0.write(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("JL", false, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options2 = new Options();
      options0.hasLongOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options2;
      objectArray0[2] = (Object) "";
      mockPrintWriter0.format("usage: ", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "H]-j829E", "iI*26x", options0, 13, 111, (String) null, true);
      helpFormatter0.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("IlJh#r:(\"Kt?w??~", false);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(3);
      mockPrintWriter0.println(1);
      int int0 = 20;
      int int1 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 20, (-2), "cmdLineSyntax not provided");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setNewLine("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options2 = new Options();
      options1.hasLongOption("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2044, "org.apache.commons.cli.Options", "", options3, 74, 0, "9U8", false);
      helpFormatter0.getLongOptSeparator();
      Options options4 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "@WJ ?", "", options1, 44, 983, "`:8");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix(" ");
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 63, (String) null, options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      mockFileOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "4%'v;|33v\">6S";
      boolean boolean0 = true;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", "--", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      mockFileOutputStream0.write(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("JL", false, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options2 = new Options();
      options0.hasLongOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options2;
      objectArray0[2] = (Object) "";
      mockPrintWriter0.format("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 13, "NO_ARGS_ALLOWED", options1);
      Options options3 = new Options();
      options2.getMatchingOptions("usage: ");
      helpFormatter0.printHelp("l^_hW7MX\"2W1", "", options3, "");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      Object[] objectArray0 = new Object[1];
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NO_ARGS_ALLOWED", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(74);
      mockPrintWriter0.println(3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "");
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.OptionGroup", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "x3r=l", "~asoEd^qw7w^0{[X{", options0, 44, 63, "NO_ARGS_ALLOWED", false);
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 44, options0, 44, 1090);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 63, 40, "0q&<ut|As-4yF~\"");
      helpFormatter0.renderWrappedText(stringBuffer2, 44, 63, "\"");
      PrintWriter printWriter1 = printWriter0.printf("Y", objectArray0);
      helpFormatter0.printUsage(printWriter1, 44, "0q&<ut|As-4yF~\"", options0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("~QB(3h??|Z", "HaN[@r_]W+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1759, "", "", options1, (-1), 3, "usage: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-342));
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      String string1 = "ro^4*;st";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("~QB(3h??|Z", "HaN[@r_]W+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "~QB(3h??|Z";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "org.apache.commons.cli.OptionGroup";
      mockPrintWriter1.format("arg", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 1, "org.apache.commons.cli.OptionGroup", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter2.setSyntaxPrefix(" ");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 1, "\n", (String) null, options0, (-1418), (-1418), "\n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NO_ARGS_ALLOWED", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(74);
      mockPrintWriter0.println(3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "");
      mockPrintWriter0.format("org.apache.commons.cli.OptionGroup", objectArray0);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptionGroups();
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("rX/5", "V:18`y$4(n]yY", options0, "usage: ");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter1.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3512, "7jQv`;:DAc KIOk 26", "", options1, 4011, (-251), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("");
      helpFormatter1.setOptPrefix("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.setSyntaxPrefix((String) null);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) null, (-4288), "usage: ", "\n", options1, 8, 3, "uQv a)J", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      String string1 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(10);
      int int0 = 1296;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NO_ARGS_ALLOWED", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(74);
      mockPrintWriter0.println(3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "arg");
      mockPrintWriter0.format("org.apache.commons.cli.OptionGroup", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 47, 33);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 31, 1, "4IfOk%O#[H");
      helpFormatter1.renderWrappedText(stringBuffer2, 9, 106, "3");
      helpFormatter1.printHelp(31, "-", " ", options0, "");
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter2.setSyntaxPrefix(" ");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 3, " ", "usage: ", options0, (-1418), 11, "Vx,V/", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bw=F{");
      helpFormatter0.getLeftPadding();
      String string0 = "O\"fTY)}W/\"p)V";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "O\"fTY)}W/\"p)V", "O\"fTY)}W/\"p)V", options0, "O\"fTY)}W/\"p)V");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "-", "-", options2, "fz", true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NO_ARGS_ALLOWED", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("^'Tij.9|q");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      options1.addOption("", true, "D@}ugpL");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.printHelp("-", "org.apache.commons.cli.OptionGroup", options0, "&E", true);
      Collection collection0 = new LinkedList<String>();
      helpFormatter0.setOptPrefix("arg");
      helpFormatter1.printHelp("--", "arg", options0, "");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter2.setSyntaxPrefix(" ");
      StringBuffer stringBuffer0 = new StringBuffer(11);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "usage: ");
      helpFormatter2.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("");
      helpFormatter1.setNewLine("");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "wqwRh^=}q~=");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.printHelp(" ", "\n", options0, "", true);
      options1.getOptionGroups();
      helpFormatter1.setOptPrefix(" ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "bqKL?d%wq<;", options0, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      helpFormatter0.getLongOptSeparator();
      Options options2 = new Options();
      options0.getOptions();
      helpFormatter2.printHelp("org.apache.commons.cli.HelpFormatter", "LcMe:rFr0^i82IGCP\"", options0, "-");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLeftPadding();
      helpFormatter0.printHelp(32, "--", ":t$!5Qa", options1, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NO_ARGS_ALLOWED", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(74);
      mockPrintWriter0.println(3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "");
      mockPrintWriter0.format("org.apache.commons.cli.OptionGroup", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", ")uF", true, "'");
      Option option0 = new Option((String) null, "arg", false, "");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", (String) null, options2, ")uF");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      mockFileOutputStream0.write(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("JL", false, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options2 = new Options();
      String string0 = null;
      options0.hasLongOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      String string1 = helpFormatter0.defaultArgName;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "-", "#QOT|g@&Hg[(-j0z5m", options1, 0, 2044, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      mockFileOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(74);
      mockPrintWriter0.println(3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "");
      mockPrintWriter0.print("II!v|<wE");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.renderWrappedText(stringBuffer1, 11, 2471, ">lFjKi (*4|H");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("arg", "Q_-vus}oYJ[P}GG", options0, "");
      helpFormatter0.setOptPrefix("Q_-vus}oYJ[P}GG");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("\n");
      helpFormatter1.printHelp("--", "", options0, "-");
      helpFormatter1.printHelp("usage: ", "", options0, "\"");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "--");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter1.printHelp("--", "-", options0, "");
      helpFormatter0.printHelp("-", " ", options0, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer(10);
      helpFormatter1.findWrapPos("--", 3, (-1));
      StringBuffer stringBuffer1 = new StringBuffer("");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-342));
      StringWriter stringWriter0 = new StringWriter(4);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printOptions(mockPrintWriter0, 9, options0, 4773, 31);
      helpFormatter0.setOptPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "5--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.setNewLine(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$nU'");
      Options options2 = new Options();
      options0.hasLongOption((String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = helpFormatter0.defaultArgName;
      String string1 = "";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "9U8", "9U8", options1, 2044, 2044, "", true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setNewLine("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options2 = new Options();
      options1.hasLongOption("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2044, "org.apache.commons.cli.Options", "", options3, 74, 0, "9U8", false);
      helpFormatter0.getLongOptSeparator();
      Options options4 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1553, "@WJ ?", "", options1, 44, 983, "`:8");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NO_ARGS_ALLOWED", false);
      helpFormatter0.setOptPrefix("NO_ARGS_ALLOWED");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "Cannot add value, list full.", "   ", options0, (-1418), 1, "NO_ARGS_ALLOWED", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.toString();
      int int0 = 2044;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9U8");
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2044, (String) null, (String) null, options1, 2044, 2044, "V|=>R]+bxA_", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2697);
      helpFormatter0.defaultLeftPad = (-2697);
      helpFormatter0.getLeftPadding();
      String string0 = "-";
      Options options0 = new Options();
      String string1 = "6,qGh\\B";
      String string2 = "`}e'BAVzW_P4";
      // Undeclared exception!
      try { 
        options0.addOption("6,qGhB", "`}e'BAVzW_P4", true, "0%T^p{46dHR0b,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '6,qGhB' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = (-185);
      Options options0 = null;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Tn-E.P>@r");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, (Options) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) null, 0, "\n", (String) null, options0, 733, (-1418), (String) null, true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setNewLine("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options2 = new Options();
      options1.hasLongOption("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2044, "org.apache.commons.cli.Options", "", options3, 74, 0, "9U8", false);
      helpFormatter0.getLongOptSeparator();
      Options options4 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1553, "", "[]", options1, (-1205), 2125, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      mockPrintWriter1.print('R');
      mockPrintWriter1.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "-", (Object[]) null);
      options0.addOptionGroup(optionGroup0);
      Object object0 = new Object();
      mockPrintWriter0.format("", (Object[]) null);
      options0.hasOption("\n");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 47, "1q;7}aGVB8M", (String) null, options1, (-821), (-821), "H/\"*oX8*c#", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.print('p');
      mockPrintWriter0.format(locale0, "--", objectArray0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 10, "J");
      mockPrintWriter0.format(locale0, "", objectArray0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Object object0 = new Object();
      mockPrintWriter0.format(" ", objectArray0);
      Options options2 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "[ Options: [ short ", "", options1, 0, 39, "", true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      options0.hasOption("% VZ*!");
      Options options1 = new Options();
      options1.getOptions();
      options1.getOptions();
      helpFormatter0.printHelp("Nit2b4Qx3", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("--", options0, false);
      helpFormatter2.setLeftPadding(3);
      helpFormatter2.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-'%l.2{l");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "--", " ", options0, 4693, (-5479), "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "arg";
      helpFormatter0.defaultOptPrefix = "usage: ";
      Options options0 = new Options();
      options0.hasOption("usage: ");
      options0.getOptions();
      options0.getOptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.close();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 17, (-1), "\"T0\",D@f}Lr[ KO+eQ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("[ option: ", "Q_-vus}oYJ[P}GG", options0, "");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      Options options1 = new Options();
      int int0 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "", "\n", options1, 74, 32, "}8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("sbi\"E#ew r!tx h*g");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("vu");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      mockPrintWriter2.print('9');
      Options options1 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Object object0 = new Object();
      mockPrintWriter2.format("_7y]s8G{", (Object[]) null);
      Options options2 = new Options();
      options2.getOption("--");
      options2.addOption("", "\n", false, "K|");
      helpFormatter0.printHelp(693, "K|", "", options1, "");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "-", options0, "");
      helpFormatter0.printHelp("-", " ", options0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("k:%vut3P");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(printWriter0, (-2320), options0, (-2), 74);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 115, "usage: ", "usage: ", options1, 1408, (-3843), "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      mockPrintWriter1.print('R');
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter1.format(locale0, "-", (Object[]) null);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Object object0 = new Object();
      mockPrintWriter0.format("", (Object[]) null);
      Options options2 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1408, "", " [ARG]", options1, 1408, 9, " [ARG]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("% VZ*!");
      options0.toString();
      options0.getOptions();
      helpFormatter0.setDescPadding((-1012));
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Nit2b4Qx3", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      mockPrintWriter1.print('R');
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Object object0 = new Object();
      mockPrintWriter0.format("", (Object[]) null);
      Options options1 = new Options();
      options0.addOption("", "-", true, " [ARG]");
      helpFormatter0.printHelp(" [ARG]", (String) null, options1, ",j^");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-185));
      helpFormatter0.setOptPrefix("nU0i.5");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("Tn-E.PZ>@r");
      helpFormatter1.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) null, 13, "--", "", options0, 1, 64, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "nU0\\i.5";
      helpFormatter0.setDescPadding((-185));
      helpFormatter0.setOptPrefix("nU0i.5");
      Options options0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", (Options) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "", "\n", options1, 711, 32, "}8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.defaultNewLine = "[ Options: [ short ";
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      boolean boolean0 = false;
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      mockPrintWriter0.print('R');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      String string0 = "arg";
      Options options0 = new Options();
      options0.hasLongOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      int int0 = 0;
      optionGroup0.toString();
      String string1 = "' was specified but an option from this group ";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-630), options1, (-630), 32);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "--");
      helpFormatter0.defaultDescPad = 1;
      Option option0 = new Option("", true, "");
      option0.setArgName("");
      options1.addOption(option0);
      helpFormatter0.printHelp(20, "0", "usage: ", options1, "--", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("0", "", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-917));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setNewLine("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options2 = new Options();
      options1.hasLongOption("arg");
      options1.addOption("arg", "usage: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("8%z", "usage: ", options1, "8%z");
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.getWidth();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("Y}!(j)8v%");
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "c!UdN9\u0004y 2-OE(?/", true, "c!UdN9\u0004y 2-OE(?/");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "1?zF}1cZ5/G5]T", "usage: ", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setNewLine("usage: ");
      Options options0 = new Options();
      options0.addOption("arg", false, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options1 = new Options();
      String string0 = "?0";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "-", "?0", options0, 733, 4029, "", true);
      helpFormatter0.setLongOptPrefix("usage: ");
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      mockPrintWriter1.print('R');
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "KLHS1=", false, "");
      helpFormatter0.printHelp("%TdrB^1lO", "%TdrB^1lO", options1, (String) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      mockPrintWriter1.append((CharSequence) "");
      Options options2 = new Options();
      options0.hasOption("org.apache.commons.cli.OptionGroup");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 401, "org.apache.commons.cli.OptionGroup", "KLHS1=", options3, 31, 1408, "1q;7}aGVB8M", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("The option '");
      helpFormatter1.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "The option '";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("difC7", "The option '", options0, "e0wQ1.MV 4+HS", true);
      options1.getOptionGroups();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-630), "=]zJ", "", options1, 1408, 1408, "org.apache.commons.cli.ParseException", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2184), "zn+D]t*u");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "The option '";
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("usage: ");
      String string1 = "difC7";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      options1.toString();
      Object[] objectArray0 = new Object[7];
      bufferedOutputStream0.write(3);
      objectArray0[0] = (Object) "difC7";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = (Object) options1;
      objectArray0[6] = (Object) "e0wQ1.MV 4+HS";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1107), "e0>DGi+Q[7@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-185));
      helpFormatter0.setOptPrefix("nU0i.5");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("Tn-E.PZ>@r");
      helpFormatter1.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-1), "arg", "--", options0, 32, 3, "}8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "nU0\\i45";
      helpFormatter0.defaultLongOptPrefix = "nU0i45";
      helpFormatter0.setDescPadding(1488);
      String string1 = "[/";
      helpFormatter0.setOptPrefix("[/");
      Options options0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      options0.hasOption("% VZ*!");
      Options options1 = new Options();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1488, 1905, "m~zM.O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "-";
      helpFormatter0.defaultOptPrefix = "usage: ";
      helpFormatter0.setArgName("\"T0\",D@f}Lr[ KO+eQ");
      Options options0 = new Options();
      options0.hasOption("usage: ");
      options0.getOptions();
      options0.getOptions();
      helpFormatter0.printHelp("\"T0\",D@f}Lr[ KO+eQ", "\"T0\",D@f}Lr[ KO+eQ", options0, "\"T0\",D@f}Lr[ KO+eQ", false);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options1 = new Options();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.Util");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.optionComparator = null;
      int int0 = 1488;
      helpFormatter0.defaultLeftPad = 1488;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("K3ktb~4 j9P J9VSD5d");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      Locale locale0 = Locale.KOREAN;
      mockPrintWriter1.print('R');
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-342));
      helpFormatter0.setOptPrefix("   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", "Bcj=sOA)XP?.`\"c7Gv", options0, "q&");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 899;
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-3199), (-1), "has already been selected: '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "The option '";
      helpFormatter0.getSyntaxPrefix();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("usage: ");
      String string1 = "difC7";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      helpFormatter0.setOptPrefix("");
      options1.toString();
      Object[] objectArray0 = new Object[7];
      bufferedOutputStream0.write(3);
      objectArray0[0] = (Object) "difC7";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = (Object) options1;
      objectArray0[6] = (Object) "e0wQ1.MV 4+HS";
      mockPrintWriter0.format("arg", objectArray0);
      int int0 = (-911);
      Options options2 = new Options();
      String string2 = null;
      boolean boolean0 = true;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "The option '");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2731), (-2731), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      options0.hasOption("% VZ*!");
      Options options1 = new Options();
      options1.getOptions();
      options1.getOptions();
      helpFormatter0.printHelp("Nit2b4Qx3", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding(3);
      helpFormatter2.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-'%l.2{l");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "nU0i45";
      helpFormatter0.setDescPadding(1488);
      helpFormatter0.setOptPrefix("[/");
      helpFormatter0.setLeftPadding(355);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = new Locale("Kx&1js<?H;RnbU", "X~WQo7K`o");
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[/";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1488, "");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "-";
      helpFormatter0.defaultOptPrefix = "usage: ";
      helpFormatter0.setArgName("\"T0\",D@f}Lr[ KO+eQ");
      Options options0 = new Options();
      options0.hasOption("usage: ");
      options0.getOptions();
      options0.getOptions();
      helpFormatter0.printHelp("\"T0\",D@f}Lr[ KO+eQ", "\"T0\",D@f}Lr[ KO+eQ", options0, "\"T0\",D@f}Lr[ KO+eQ", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1408, "bjk/", "-", options0, 1396, (-630), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      helpFormatter0.defaultLongOptPrefix = "The option '";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.setOptPrefix("g%=='l^iW{)9Ms ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(36, ">", "3eJK5EX", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "The option '";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      options1.toString();
      Object[] objectArray0 = new Object[7];
      bufferedOutputStream0.write(3);
      objectArray0[0] = (Object) "difC7";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = (Object) options1;
      objectArray0[6] = (Object) "e0wQ1.MV 4+HS";
      mockPrintWriter0.format("arg", objectArray0);
      Options options2 = new Options();
      Options options3 = options1.addOption("difC7", (String) null, true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-911), "", (String) null, options3, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      mockPrintWriter1.print('R');
      mockPrintWriter1.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      options0.hasLongOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter1.format(locale0, "-", (Object[]) null);
      options0.addOptionGroup(optionGroup0);
      Object object0 = new Object();
      mockPrintWriter0.format("", (Object[]) null);
      Options options1 = new Options();
      options0.addOption("", "-", true, " [ARG]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.AlreadySelectedException");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.setArgName("%g1MV");
      String string0 = "";
      helpFormatter0.setOptPrefix(")b%9Hg/C|St;EB=d");
      helpFormatter0.setLeftPadding((-5325));
      helpFormatter0.getNewLine();
      helpFormatter0.setWidth((-1));
      helpFormatter0.getNewLine();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.rtrim((String) null);
      String string1 = "hfgPs|71^G7G";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      options0.hasOption("% VZ*!");
      String string1 = "Rb6yX7\"-V";
      Options options1 = new Options();
      options1.getOptions();
      options1.getOptions();
      boolean boolean0 = false;
      helpFormatter0.printHelp("Rb6yX7\"-V", "-'%l.2{l", options1, "% VZ*!", true);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2635));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      helpFormatter0.defaultArgName = "-";
      helpFormatter0.defaultOptPrefix = "\"T0\",D@f}Lr[ KO+eQ";
      helpFormatter0.setArgName("\"T0\",D@f}Lr[ KO+eQ");
      Options options0 = new Options();
      options0.hasOption("\"T0\",D@f}Lr[ KO+eQ");
      options0.getOptions();
      options0.getOptions();
      options0.helpOptions();
      helpFormatter0.printHelp("\"T0\",D@f}Lr[ KO+eQ", "\"T0\",D@f}Lr[ KO+eQ", options0, "\"T0\",D@f}Lr[ KO+eQ", false);
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("Ys $'E&`N:D:3I87x");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "Ys $'E&`N:D:3I87x", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      mockPrintWriter1.print('R');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.hasLongOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 1, "arg", "arg", options1, 0, 0, "' was specified but an option from this group ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix(">");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">", (String) null, (Options) null, ",.Fgn+3cnS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options1, (-2), 44);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Comparator<String> comparator0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      helpFormatter0.createPadding(10);
      String string0 = " [ARG]";
      String string1 = "9e Mw^l=;{eH\\{8|>U";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("sFndPn/Y}S YH]M0|_J");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) "sFndPn/Y}S YH]M0|_J";
      mockFile0.getCanonicalFile();
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      mockPrintWriter0.println("-");
      objectArray0[6] = (Object) "-";
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 353, 993, ":\"FC{@E;");
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.Options", false, "=5A~8qOHF$*<mN}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.Options' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 0;
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", "arg", false, "<`\\\"%m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "-";
      helpFormatter0.defaultOptPrefix = "\"T0\",D@f}Lr[ KO+eQ";
      helpFormatter0.setArgName("\"T0\",D@f}Lr[ KO+eQ");
      Options options0 = new Options();
      options0.hasOption("\"T0\",D@f}Lr[ KO+eQ");
      options0.getOptions();
      options0.getOptions();
      boolean boolean0 = false;
      helpFormatter0.printHelp("\"T0\",D@f}Lr[ KO+eQ", "\"T0\",D@f}Lr[ KO+eQ", options0, "\"T0\",D@f}Lr[ KO+eQ", false);
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("Ys $'E&`N:D:3I87x");
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "-";
      helpFormatter0.defaultOptPrefix = "\"T0\",D@f}Lr[ KO+eQ";
      helpFormatter0.setArgName("\"T0\",D@f}Lr[ KO+eQ");
      Options options0 = new Options();
      options0.hasOption("\"T0\",D@f}Lr[ KO+eQ");
      options0.getOptions();
      String string0 = "";
      helpFormatter0.setWidth((-689));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"T0\",D@f}Lr[ KO+eQ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2635);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setArgName("K3ftb~4 j9PBJ9VSD5d");
      helpFormatter0.defaultLongOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("K3ftb~4 j9PBJ9VSD5d", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("K3ktb~4 j9P J9VSD5d");
      String string0 = "W $$f>*Ad";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("W $$f>*Ad", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "' was specified but an option from this group ";
      String string1 = "DE+p6j`mE~z-!q";
      Options options0 = new Options();
      String string2 = null;
      boolean boolean0 = false;
      Options options1 = options0.addOption((String) null, "arg", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(732, "", "' was specified but an option from this group ", options1, "M^QrN13<hvSM!P71s4", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1460), options0, 44, (-1460));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "nU0i.5";
      helpFormatter0.setDescPadding(1488);
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("has already been selected: '", ",.Fgn+3cnS", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "y@WxsbE=Q9-di>jM5";
      String string1 = "has already been selected: '";
      helpFormatter0.setSyntaxPrefix("has already been selected: '");
      helpFormatter0.setArgName("y@WxsbE=Q9-di>jM5");
      MockFile mockFile0 = new MockFile("y@WxsbE=Q9-di>jM5", "--");
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "-", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      int int1 = (-726);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, (-726), "eUq\"p #>X_P=)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.AlreadySelectedException");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-630), "bjk/", "bjk/", options0, 0, 0, "bjk/", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.rtrim("R{r\"I;{ipo");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth(31);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3762);
      helpFormatter0.setNewLine((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-3762), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-2);
      String string0 = "";
      String string1 = "|V{]^Nt3";
      Options options0 = new Options();
      String string2 = "";
      // Undeclared exception!
      try { 
        options0.addOption("4ArMeCV9%", "-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '4ArMeCV9%' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-185));
      helpFormatter0.setOptPrefix("nU0i.5");
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("\n", "8%z", (Options) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NO_ARGS_ALLOWED", false);
      mockFileOutputStream0.write(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(74);
      mockPrintWriter0.println(3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter", objectArray0);
      int int0 = 74;
      String string1 = "";
      helpFormatter0.printWrapped(printWriter0, 74, 74, "");
      int int1 = (-2028);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2028), 3555, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("(O_1&|ct*ClAHHD9");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setNewLine("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options2 = new Options();
      options1.hasLongOption("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2044, "org.apache.commons.cli.Options", "", options3, 10, 0, "9U8", false);
      helpFormatter0.setArgName("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix(" ");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator comparator0 = helpFormatter2.getOptionComparator();
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter2.printHelp("x}", "", options0, "");
      helpFormatter0.printHelp("--", "x}", options1, "-");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("usage: ");
      String string0 = "difC7";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "difC7";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) options1;
      objectArray0[6] = (Object) "e0wQ1.MV 4+HS";
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "arg");
      helpFormatter0.printUsage(printWriter1, 3147, "e0wQ1.MV 4+HS");
      options0.helpOptions();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        options0.addOption("e0wQ1.MV 4+HS", true, "p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'e0wQ1.MV 4+HS' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-689);
      File file0 = MockFile.createTempFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-689), "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      mockPrintWriter1.print('R');
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      options0.hasLongOption("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "arg", "arg", options1, 0, 0, "' was specified but an option from this group ", false);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "sNN7'A-dx+L]xG";
      Options options0 = new Options();
      options0.helpOptions();
      String string1 = "ljINo#@^7n>_";
      options0.hasLongOption("");
      helpFormatter0.setSyntaxPrefix("U0b]Onq");
      // Undeclared exception!
      try { 
        options0.addOption("ljINo#@^7n>_", "arg", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'ljINo#@^7n>_' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "V*hR+4M#0&@tB`";
      helpFormatter0.defaultWidth = (-1007);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("V*hR+4M#0&@tB`", (-3230), 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setWidth((-1));
      helpFormatter0.getOptionComparator();
      String string0 = "";
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
