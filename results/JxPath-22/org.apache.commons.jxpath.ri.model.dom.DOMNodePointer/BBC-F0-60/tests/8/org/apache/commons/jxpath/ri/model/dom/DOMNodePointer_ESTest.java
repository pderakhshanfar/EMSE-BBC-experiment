/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:32:05 GMT 2021
 */

package org.apache.commons.jxpath.ri.model.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.html.dom.HTMLAnchorElementImpl;
import org.apache.html.dom.HTMLBaseFontElementImpl;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLFieldSetElementImpl;
import org.apache.html.dom.HTMLFormElementImpl;
import org.apache.html.dom.HTMLFrameSetElementImpl;
import org.apache.html.dom.HTMLHRElementImpl;
import org.apache.html.dom.HTMLHeadElementImpl;
import org.apache.html.dom.HTMLLabelElementImpl;
import org.apache.html.dom.HTMLParagraphElementImpl;
import org.apache.html.dom.HTMLPreElementImpl;
import org.apache.html.dom.HTMLTableElementImpl;
import org.apache.html.dom.HTMLTableSectionElementImpl;
import org.apache.wml.dom.WMLBigElementImpl;
import org.apache.wml.dom.WMLDoElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.wml.dom.WMLFieldsetElementImpl;
import org.apache.wml.dom.WMLGoElementImpl;
import org.apache.wml.dom.WMLHeadElementImpl;
import org.apache.wml.dom.WMLImgElementImpl;
import org.apache.wml.dom.WMLMetaElementImpl;
import org.apache.wml.dom.WMLOneventElementImpl;
import org.apache.wml.dom.WMLPElementImpl;
import org.apache.wml.dom.WMLPrevElementImpl;
import org.apache.wml.dom.WMLUElementImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentFragmentImpl;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.ElementDefinitionImpl;
import org.apache.xerces.dom.EntityImpl;
import org.apache.xerces.dom.EntityReferenceImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xerces.dom.PSVIElementNSImpl;
import org.apache.xerces.dom.ProcessingInstructionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Comment;
import org.w3c.dom.DOMException;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.Text;
import org.w3c.dom.html.HTMLElement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DOMNodePointer_ESTest extends DOMNodePointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      Attr attr0 = coreDocumentImpl0.createAttributeNS("xKg\"a", "!V5FvGyd", "cSR{<oV'ffbp#U#");
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl(coreDocumentImpl0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attr0, locale0, "!V5FvGyd");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, documentFragmentImpl0);
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      Locale locale0 = Locale.CANADA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragmentImpl0, locale0, (String) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getPointerByID((JXPathContext) null, "xmlns:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      QName qName0 = new QName("org.apache.html.dom.HTMLBRElementImpl", "Undefined variable: ");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentType documentType0 = hTMLDocumentImpl0.createDocumentType("org.apache.html.dom.HTMLBRElementImpl", "z@CJ~E&rr*5YTeK+z)", "Undefined variable: ");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentType0);
      WMLMetaElementImpl wMLMetaElementImpl0 = new WMLMetaElementImpl(wMLDocumentImpl0, "z@CJ~E&rr*5YTeK+z)");
      CDATASection cDATASection0 = wMLDocumentImpl0.createCDATASection("Undefined variable: ");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, cDATASection0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLMetaElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild(jXPathContext0, qName0, (-556), (Object) hTMLDocumentImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: $org.apache.html.dom.HTMLBRElementImpl:Undefined variable: /text()[1]
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = new Locale("");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.getNamespaceURI("e%a9");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "a&+A1.80povnMK^", ")P", "z@CJ~E&rr*5YTeK+z)");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(wMLDocumentImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      QName qName0 = new QName("org.apache.html.dom.HTMLBRElementImpl", "Undefined variable: ");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentType documentType0 = hTMLDocumentImpl0.createDocumentType("org.apache.html.dom.HTMLBRElementImpl", "z@CJ~E&rr*5YTeK+z)", "Undefined variable: ");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentType0);
      CDATASection cDATASection0 = wMLDocumentImpl0.createCDATASection("Undefined variable: ");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, cDATASection0);
      QName qName1 = dOMNodePointer0.getName();
      assertNotSame(qName1, qName0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(documentImpl0, "N?{Z4S*mdC\r+0>g[Kg", "N?{Z4S*mdC\r+0>g[Kg", "Cannot add a second doctype, only one is allowed");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLHeadElementImpl wMLHeadElementImpl0 = new WMLHeadElementImpl(wMLDocumentImpl0, "Y1<[.abt}& 0JIN");
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLHeadElementImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Y1<[.abt}& 0JIN");
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      WMLOneventElementImpl wMLOneventElementImpl0 = new WMLOneventElementImpl((WMLDocumentImpl) null, "*");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLOneventElementImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLOneventElementImpl0, locale0);
      jXPathContext0.getRelativeContext(dOMNodePointer0);
      boolean boolean0 = dOMNodePointer0.isLanguage("http://www.w3.org/2000/xmlns/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "z@CJ~E&rr*5YTeK+z)", "http://www.w3.org/2000/xmlns/", "xmlns");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(pSVIElementNSImpl0, locale0, "z@CJ~E&rr*5YTeK+z)");
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertEquals("z@CJ~E&rr*5YTeK+z)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "org.apache.commons.jxpath.ri.axes.RootContext");
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLLabelElementImpl0, locale0, "/");
      String string0 = dOMNodePointer0.getLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      QName qName0 = new QName(";i2iEU&DufhG4|", ";i2iEU&DufhG4|");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, (Node) null);
      Object object0 = dOMNodePointer0.getImmediateNode();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getHead();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLElement0);
      Object object0 = dOMNodePointer0.getImmediateNode();
      assertSame(hTMLElement0, object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "http");
      Object object0 = dOMNodePointer0.getBaseValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "<<unknown namespace>>");
      // Undeclared exception!
      try { 
        DOMNodePointer.testNode((Node) null, (NodeTest) nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("iG");
      // Undeclared exception!
      try { 
        dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: http://www.w3.org/XML/1998/namespace
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "org.apache.commons.xpath.ri.mode.dom.DOMNodePsinter");
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(hTMLDocumentImpl0, "org.apache.wml.dom.WMLDoElementImpl");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, elementDefinitionImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer1.setValue("id('");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, (Node) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.setReadOnly(true, true);
      Locale locale0 = new Locale("node()", "node()", "cK2n");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.namespaceIterator();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      Locale locale0 = Locale.PRC;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(coreDocumentImpl0, locale0, "3>({!]0+v5");
      // Undeclared exception!
      try { 
        dOMNodePointer0.namespaceIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0, "Rl7ub`");
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLeaf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, (Locale) null, "V+P5(L/&OF|@?[3wO");
      // Undeclared exception!
      try { 
        dOMNodePointer0.isLanguage("V+P5(L/&OF|@?[3wO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "http://www.w3.org/XML/1998/namespace");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, jXPathContext0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, (Node) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        DOMNodePointer.getPrefix((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) wMLDocumentImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) documentFragmentImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.DocumentFragmentImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.GERMANY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "nd)");
      hTMLDocumentImpl0.setReadOnly(true, true);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("}[_");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, true);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, (Locale) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ROOT;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "<<unknown namespace>>", "http://www.w3.org/XML/1998/namespace", "x#l~)= ");
      dOMNodePointer0.setValue(documentTypeImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted. 
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, (Node) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, true);
      EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(deferredDocumentImpl0, "ExceptionHandler registration is not implemented by ");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReferenceImpl0, (Locale) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getNamespaceURI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xerces.dom.EntityReferenceImpl cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      WMLUElementImpl wMLUElementImpl0 = new WMLUElementImpl((WMLDocumentImpl) null, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLUElementImpl0, (Locale) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        DOMNodePointer.getLocalName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl((WMLDocumentImpl) null, "*!!0}9tZ',");
      Locale locale0 = Locale.CANADA_FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLBigElementImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getLanguage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.GERMAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      hTMLDocumentImpl0.setReadOnly(true, true);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getDefaultNamespaceURI();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false);
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.getDefaultNamespaceURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      WMLBigElementImpl wMLBigElementImpl0 = new WMLBigElementImpl((WMLDocumentImpl) null, "http://www.w3.org/2000/xmlns/");
      // Undeclared exception!
      try { 
        DOMNodePointer.findEnclosingAttribute(wMLBigElementImpl0, "<<unknown namespace>>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(pSVIDocumentImpl0, locale0, "#document");
      QName qName0 = new QName(")Sb#otwu;w;+M", "self::");
      WMLPElementImpl wMLPElementImpl0 = new WMLPElementImpl((WMLDocumentImpl) null, "http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, Integer.MIN_VALUE, (Object) wMLPElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(coreDocumentImpl0, "http://www.w3.org/2000/xmlns/", "<<unknown namespace>>", "<<unknown namespace>>");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(wMLDocumentImpl0, locale0, "http://www.w3.org/XML/1998/namespace");
      QName qName0 = dOMNodePointer1.getName();
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = new Locale("<<unknown namespace>>", "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: http://www.w3.org/XML/1998/namespace
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers((NodePointer) null, (NodePointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      DocumentImpl documentImpl0 = new DocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'http://www.w3.org/XML/1998/namespace:http://www.w3.org/XML/1998/namespace'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("", "http://www.w3.org/2000/xmlns/");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, deferredDocumentImpl0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.compareChildNodePointers(nodePointer0, variablePointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.QName cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(false);
      EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(deferredDocumentImpl0, (String) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReferenceImpl0, (Locale) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "]");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeTypeTest0, true, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: http://www.w3.org/XML/1998/namespace:]
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      ElementDefinitionImpl elementDefinitionImpl0 = new ElementDefinitionImpl(pSVIDocumentImpl0, "PpdFos L3");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) elementDefinitionImpl0);
      Variables variables0 = jXPathContext0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(variables0, (QName) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, elementDefinitionImpl0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "!4&)}9d");
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeNameTest0, false, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, ". Pw-kUR");
      QName qName0 = new QName(". Pw-kUR");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "!hqY_zgTE+.[2");
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(nodeNameTest0, false, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '. Pw-kUR'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, "R8<");
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTableElementImpl0, locale0, "node()");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      QName qName0 = dOMNodePointer0.getName();
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, "R8<");
      // Undeclared exception!
      try { 
        dOMNodePointer0.childIterator(processingInstructionTest0, false, nodePointer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      QName qName0 = new QName("+x", (String) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Variables variables0 = jXPathContext0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHeadElementImpl hTMLHeadElementImpl0 = new HTMLHeadElementImpl(hTMLDocumentImpl0, "}n{_G");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLHeadElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.attributeIterator(qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.asPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "\"node\"", "\"node\"", "VaQ-+`'/)A");
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("1{K1~Igsz`");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      variablePointer0.setIndex(87);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, pSVIElementNSImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.asPath();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '1{K1~Igsz`'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLAnchorElementImpl hTMLAnchorElementImpl0 = new HTMLAnchorElementImpl(hTMLDocumentImpl0, ":937/5");
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLAnchorElementImpl0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "Unknown namespace prefix: ", "M5mck", "EmK,cP~ ?w|=");
      String string0 = DOMNodePointer.getNamespaceURI((Node) pSVIElementNSImpl0);
      assertEquals("Unknown namespace prefix: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl(false);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(documentImpl0, "/9r}JuYbwS+'");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLGoElementImpl wMLGoElementImpl0 = new WMLGoElementImpl(wMLDocumentImpl0, "p4~U0Ni@mXU$yVy:");
      String string0 = DOMNodePointer.getLocalName(wMLGoElementImpl0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      Attr attr0 = coreDocumentImpl0.createAttributeNS("xKg\"a", "xKg\"a", "c4SR{<oV'ffp#U#");
      String string0 = DOMNodePointer.getLocalName(attr0);
      assertEquals("c4SR{<oV'ffp#U#", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      Element element0 = pSVIDocumentImpl0.createElementNS("/processing-instruction('", "!4&)}9d", (String) null);
      String string0 = DOMNodePointer.getLocalName(element0);
      assertEquals("!4&)}9d", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Comment comment0 = hTMLDocumentImpl0.createComment("c9u3I *BXxct");
      String string0 = DOMNodePointer.getPrefix(comment0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, ":WH");
      String string0 = DOMNodePointer.getPrefix(hTMLParagraphElementImpl0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      String string0 = DOMNodePointer.getPrefix(pSVIElementNSImpl0);
      assertEquals("http", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("sXzAk?2wm>21g");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "uZc{Sa)7;`~<|\",jfu", "sXzAk?2wm>21g", "java.util.Locale@0000000003");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLDoElementImpl wMLDoElementImpl0 = new WMLDoElementImpl(wMLDocumentImpl0, "k3F+J[wYyK#K7!]IXB");
      Locale locale0 = Locale.CANADA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, wMLDoElementImpl0, locale0);
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(wMLDocumentImpl0, "PRE", "java.util.Locale@0000000003", "[");
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, pSVIElementNSImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer1, pSVIElementNSImpl0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/node()[1]/node()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      CDATASection cDATASection0 = wMLDocumentImpl0.createCDATASection("Undefined variable: ");
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
      String string0 = dOMNodePointer0.toString();
      assertEquals("/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.FRENCH;
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "hERC`0l-Pi[\"?4iH2", "?&1F5Lqz");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/processing-instruction('hERC`0l-Pi[\"?4iH2')[1]", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale locale0 = Locale.UK;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "&<*<+?pf5Q|15A9j");
      String string0 = dOMNodePointer0.asPath();
      assertEquals("id('&<*<+?pf5Q|15A9j')", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLDocumentImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild((JXPathContext) null, qName0, Integer.MIN_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      HTMLPreElementImpl hTMLPreElementImpl0 = new HTMLPreElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLPreElementImpl0);
      String string0 = dOMNodePointer1.getDefaultNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLLabelElementImpl0);
      String string0 = dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "xmlns");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHRElementImpl0, locale0);
      String string0 = dOMNodePointer0.getNamespaceURI("xmlns");
      assertEquals("http://www.w3.org/2000/xmlns/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "http://www.w3.org/XML/1998/namespace");
      Locale locale0 = jXPathContext0.getLocale();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLFrameSetElementImpl hTMLFrameSetElementImpl0 = new HTMLFrameSetElementImpl(hTMLDocumentImpl0, "I");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLFrameSetElementImpl0, locale0, "RYYX");
      String string0 = dOMNodePointer0.getNamespaceURI("xml");
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, (Locale) null, "V+P5(L/&OF|@?[3wO");
      String string0 = dOMNodePointer0.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLLabelElementImpl0);
      dOMNodePointer0.attributeIterator(qName0);
      NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = new Locale("");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "d>-qTr2 .-+0");
      NamespaceResolver namespaceResolver0 = dOMNodePointer0.getNamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      boolean boolean0 = DOMNodePointer.testNode((Node) documentImpl0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = new Locale("node()", "node()", "cK2n");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      NodeIterator nodeIterator0 = dOMNodePointer0.namespaceIterator();
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ENGLISH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "");
      Object object0 = dOMNodePointer0.getBaseValue();
      assertSame(hTMLDocumentImpl0, object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLFieldSetElementImpl hTMLFieldSetElementImpl0 = new HTMLFieldSetElementImpl(hTMLDocumentImpl0, "s*n(uY3D7zC?P+5)nU");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "s*n(uY3D7zC?P+5)nU");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName(")34L_ZrW/X", "http://www.w3.org/2000/xmlns/");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLFieldSetElementImpl0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(variablePointer0, wMLDocumentImpl0);
      int int0 = dOMNodePointer1.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(pSVIDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      BasicVariables basicVariables0 = new BasicVariables();
      HTMLAnchorElementImpl hTMLAnchorElementImpl0 = new HTMLAnchorElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      QName qName0 = new QName("/,AX*=D*9'", ")34L_ZrW/X");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLAnchorElementImpl0);
      WMLFieldsetElementImpl wMLFieldsetElementImpl0 = new WMLFieldsetElementImpl(wMLDocumentImpl0, "DQV2f\"rag6/kZbTO.;");
      NodePointer nodePointer0 = variablePointer0.createPath(jXPathContext0, (Object) wMLFieldsetElementImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, documentTypeImpl0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, wMLDocumentImpl0);
      int int0 = dOMNodePointer1.compareChildNodePointers(variablePointer0, dOMNodePointer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Element element0 = hTMLDocumentImpl0.getDocumentElement();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, locale0, "\"<\"");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
      int int0 = dOMNodePointer1.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      Attr attr0 = coreDocumentImpl0.createAttributeNS("b#8A:X}#fNLu", "ID('", "org.apache.wml.dom.WMLSetvarElementImpl");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "c4SR<oV'fp#U#");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(attr0, locale0, "=[I#zNlL2NJ#EPRT");
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "}'(7XlE;$NBTbSq%e");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLBaseFontElementImpl0);
      int int0 = dOMNodePointer1.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      Attr attr0 = pSVIDocumentImpl0.createAttributeNS("')", "')", "c4SR<oV'fp#U#");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "')");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLBaseFontElementImpl0, locale0, ":+:o7%{T].CKP");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, attr0);
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.getNamespaceURI("f");
      DOMNodePointer dOMNodePointer1 = (DOMNodePointer)dOMNodePointer0.getPointerByID((JXPathContext) null, "");
      assertFalse(dOMNodePointer1.isContainer());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, true);
      EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(deferredDocumentImpl0, "ExceptionHandler registration is not implemented by ");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReferenceImpl0, (Locale) null);
      NullPointer nullPointer0 = (NullPointer)dOMNodePointer0.getPointerByID((JXPathContext) null, "<");
      assertFalse(nullPointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.KOREAN;
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, (String) null, (String) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.FRENCH;
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "hERC`0l-Pi[\"?4iH2", "hERC`0l-Pi[\"?4iH2");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("hERC`0l-Pi[\"?4iH2", object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "xmlns:");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      CDATASection cDATASection0 = wMLDocumentImpl0.createCDATASection((String) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, cDATASection0);
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getHead();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0);
      dOMNodePointer0.setValue("cSR{<oV'ffbp#U#");
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("cSR{<oV'ffbp#U#", object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      Comment comment0 = documentImpl0.createComment("http://www.w3.org/XML/1998/namespace");
      Locale locale0 = Locale.ITALIAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0, (String) null);
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("http://www.w3.org/XML/1998/namespace", object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "s*n(uY3D7zC?P+5)nU");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      Comment comment0 = wMLDocumentImpl0.createComment((String) null);
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0);
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      Locale locale0 = Locale.FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(pSVIDocumentImpl0, locale0, "!4&)}9d");
      Object object0 = dOMNodePointer0.getValue();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "UX1:UYKO0tt~^j\"3;lfr");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLFieldsetElementImpl wMLFieldsetElementImpl0 = new WMLFieldsetElementImpl(wMLDocumentImpl0, "xmlns");
      Node node0 = hTMLDocumentImpl0.importNode(wMLFieldsetElementImpl0, false);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(node0, locale0, "xmlns");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "xmlns");
      QName qName0 = dOMNodePointer0.getName();
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      String string0 = dOMNodePointer0.getNamespaceURI();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      String string0 = DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLFieldSetElementImpl hTMLFieldSetElementImpl0 = new HTMLFieldSetElementImpl(hTMLDocumentImpl0, "s*n(uY3D7zC?P+5)nU");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "s*n(uY3D7zC?P+5)nU");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName(")34L_ZrW/X", "http://www.w3.org/2000/xmlns/");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLFieldSetElementImpl0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(variablePointer0, wMLDocumentImpl0);
      boolean boolean0 = dOMNodePointer1.equals(dOMNodePointer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLLabelElementImpl0);
      boolean boolean0 = dOMNodePointer0.equals(qName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.CHINA;
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl(hTMLDocumentImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragmentImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(documentFragmentImpl0, locale0, "<<unknown namespace>>");
      boolean boolean0 = dOMNodePointer1.equals(dOMNodePointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, (String) null, (String) null, (String) null);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLDoElementImpl wMLDoElementImpl0 = new WMLDoElementImpl(wMLDocumentImpl0, "k3F+J[wYyK#K7!]IXB");
      QName qName0 = new QName((String) null, "xml:lang");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, hTMLDocumentImpl0);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer1, wMLDoElementImpl0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/k3F+J[wYyK#K7!]IXB[1]", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      QName qName0 = new QName("sXzAk?2wm>21g");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "uZc{Sa)7;`~<|\",jfu", "sXzAk?2wm>21g", "java.util.Locale@0000000003");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLDoElementImpl wMLDoElementImpl0 = new WMLDoElementImpl(wMLDocumentImpl0, "k3F+J[wYyK#K7!]IXB");
      Locale locale0 = Locale.CANADA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, wMLDoElementImpl0, locale0);
      String string0 = nodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      Attr attr0 = coreDocumentImpl0.createAttributeNS("xKg\"a", "!V5FvGyd", "cSR{<oV'ffbp#U#");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attr0, locale0, "!V5FvGyd");
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(coreDocumentImpl0, "HTMLBRElementImpl", "http://www.w3.org/XML/1998/namespace", "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, documentTypeImpl0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("id('!V5FvGyd')", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      Comment comment0 = documentImpl0.createComment("htp://www.w3.org/XML/1998/-am[space");
      Locale locale0 = Locale.ITALIAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0, (String) null);
      String string0 = dOMNodePointer0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.FRENCH;
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "hERC`0l-Pi[\"?4iH2", "hERC`0l-Pi[\"?4iH2");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      QName qName0 = new QName("hERC`0l-Pi[\"?4iH2", "9IY=Sz:|");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLDocumentImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createChild(jXPathContext0, qName0, 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: /processing-instruction('hERC`0l-Pi[\"?4iH2')[1]
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      EntityImpl entityImpl0 = new EntityImpl(hTMLDocumentImpl0, "]");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityImpl0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("", "http://www.w3.org/2000/xmlns/");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "<<unknown namespace>>", (String) null, "");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(wMLDocumentImpl0, "\r{_n");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, entityReferenceImpl0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("$:http://www.w3.org/2000/xmlns/", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      QName qName0 = new QName("org.apache.html.dom.HTMLBRElementImpl", "Undefined variable: ");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      CDATASection cDATASection0 = wMLDocumentImpl0.createCDATASection("Undefined variable: ");
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path /text()[1]/@org.apache.html.dom.HTMLBRElementImpl:Undefined variable: , operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Text text0 = hTMLDocumentImpl0.createTextNode("4nG`-U");
      Locale locale0 = Locale.forLanguageTag("4nG`-U");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("/text()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      Attr attr0 = pSVIDocumentImpl0.createAttributeNS("')", "')", "c4SR<oV'fp#U#");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attr0, locale0);
      String string0 = dOMNodePointer0.asPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, true);
      EntityReferenceImpl entityReferenceImpl0 = new EntityReferenceImpl(deferredDocumentImpl0, "ExceptionHandler registration is not implemented by ");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReferenceImpl0, (Locale) null);
      // Undeclared exception!
      try { 
        dOMNodePointer0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove root DOM node
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "s*n(uY3D7zC?P+5)nU");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLMetaElementImpl wMLMetaElementImpl0 = new WMLMetaElementImpl(wMLDocumentImpl0, "s*n(uY3D7zC?P+5)nU");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLMetaElementImpl0, locale0);
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, documentTypeImpl0);
      dOMNodePointer1.remove();
      assertTrue(dOMNodePointer1.isActual());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.FRANCE;
      Element element0 = hTMLDocumentImpl0.getDocumentElement();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLDocumentImpl0);
      QName qName0 = dOMNodePointer0.getName();
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      NodePointer nodePointer0 = dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertFalse(nodePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ENGLISH;
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "e&n/@I@L[e/A\"", "http://www.w3.org/2000/xmlns/", " 8E\niC4~VR qR");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "http://www.w3.org/XML/1998/namespace");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(pSVIElementNSImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown namespace prefix: http
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      WMLMetaElementImpl wMLMetaElementImpl0 = new WMLMetaElementImpl(wMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      Locale locale0 = new Locale("", "X:&JU", "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLMetaElementImpl0, locale0);
      dOMNodePointer0.setValue("");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.setValue((Object) null);
      assertFalse(dOMNodePointer0.isContainer());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ROOT;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.setValue(hTMLDocumentImpl0);
      assertNull(hTMLDocumentImpl0.getURL());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.FRENCH;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "xml", "xml", "java.util.Locale@0000000008");
      dOMNodePointer0.setValue(documentTypeImpl0);
      // Undeclared exception!
      try { 
        DOMNodePointer.getNamespaceURI((Node) hTMLDocumentImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted. 
         //
         verifyException("org.apache.xerces.dom.ParentNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("=cX}", "=cX}");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLLabelElementImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue(variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '=cX}:=cX}'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getImages();
      Element element0 = hTMLDocumentImpl0.getDocumentElement();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, (Locale) null);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLPrevElementImpl wMLPrevElementImpl0 = new WMLPrevElementImpl(wMLDocumentImpl0, "preceding::");
      dOMNodePointer0.setValue(wMLPrevElementImpl0);
      assertTrue(dOMNodePointer0.isActual());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      Text text0 = pSVIDocumentImpl0.createTextNode("org.apache.commons.jxpath.ri.compiler.NodeNameTest@0000000006");
      Locale locale0 = Locale.KOREA;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      dOMNodePointer0.setValue(text0);
      assertEquals(Integer.MIN_VALUE, dOMNodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("az[.A)D^NA/");
      Locale locale0 = Locale.PRC;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Text text0 = hTMLDocumentImpl0.createTextNode("4nG`-U");
      Locale locale0 = Locale.forLanguageTag("4nG`-U");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.setValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", "ordered", "http://www.w3.org/2000/xmlns/");
      String string0 = DOMNodePointer.findEnclosingAttribute(pSVIElementNSImpl0, "u4");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl(coreDocumentImpl0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragmentImpl0, locale0, "");
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
      boolean boolean0 = dOMNodePointer0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.ITALY;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      dOMNodePointer0.getDefaultNamespaceURI();
      String string0 = dOMNodePointer0.getDefaultNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("=cX}", "=cX}");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLLabelElementImpl0);
      dOMNodePointer0.attributeIterator(qName0);
      String string0 = dOMNodePointer0.getNamespaceURI("=cX}");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, ":WH");
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      dOMNodePointer0.attributeIterator(qName0);
      assertEquals(":WH", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("=cX}", "=cX}");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, hTMLLabelElementImpl0);
      String string0 = dOMNodePointer0.getNamespaceURI((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, (String) null, "{V=*++", (String) null);
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLImgElementImpl wMLImgElementImpl0 = new WMLImgElementImpl(wMLDocumentImpl0, "xml:space");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLImgElementImpl0, locale0, (String) null);
      QName qName0 = dOMNodePointer0.getName();
      WMLGoElementImpl wMLGoElementImpl0 = new WMLGoElementImpl(wMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLGoElementImpl0);
      dOMNodePointer0.createAttribute(jXPathContext0, qName0);
      assertEquals("xml:space", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.FRENCH;
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "hERC`0l-Pi[\"?4iH2", "?&1F5Lqz");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      assertEquals("hERC`0l-Pi[\"?4iH2", qName0.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl(false);
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(documentImpl0, "/9r}JuYbwS+'");
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
      WMLGoElementImpl wMLGoElementImpl0 = new WMLGoElementImpl(wMLDocumentImpl0, "p4~U0Ni@mXU$yVy:");
      QName qName0 = new QName((String) null, "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "/text()");
      boolean boolean0 = DOMNodePointer.testNode((Node) wMLGoElementImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "hERC`0l-Pi[\"?4iH2", "hERC`0l-Pi[\"?4iH2");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("i(mOqtT+");
      boolean boolean0 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, "7");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLParagraphElementImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, ":W]H");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLParagraphElementImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      boolean boolean0 = DOMNodePointer.testNode((Node) cDATASection0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, ",PP%s<sJm@O|c3", ",PP%s<sJm@O|c3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      boolean boolean0 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Comment comment0 = hTMLDocumentImpl0.createComment("c9u3I *BXxct");
      boolean boolean0 = DOMNodePointer.testNode((Node) comment0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Text text0 = hTMLDocumentImpl0.createTextNode((String) null);
      boolean boolean0 = DOMNodePointer.testNode((Node) text0, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLParagraphElementImpl hTMLParagraphElementImpl0 = new HTMLParagraphElementImpl(hTMLDocumentImpl0, ":WH");
      Locale locale0 = Locale.FRANCE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLParagraphElementImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLParagraphElementImpl0, (NodeTest) nodeNameTest0);
      assertEquals(":WH", nodeNameTest0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      QName qName0 = new QName("VS^$4!", "VS^$4!");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      HTMLFormElementImpl hTMLFormElementImpl0 = new HTMLFormElementImpl(hTMLDocumentImpl0, "VS^$4!");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLFormElementImpl0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      QName qName0 = new QName("=cX}", "=cX}");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      HTMLFormElementImpl hTMLFormElementImpl0 = new HTMLFormElementImpl(hTMLDocumentImpl0, "=cX}");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLFormElementImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "4");
      QName qName0 = new QName("4", "*");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "*");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLLabelElementImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", "ordered", "http://www.w3.org/2000/xmlns/");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, pSVIElementNSImpl0);
      QName qName0 = dOMNodePointer1.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ordered");
      boolean boolean0 = DOMNodePointer.testNode((Node) pSVIElementNSImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
      assertEquals("http://www.w3.org/2000/xmlns/", nodeNameTest0.toString());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl(false);
      QName qName0 = new QName((String) null, "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "/text()");
      boolean boolean0 = DOMNodePointer.testNode((Node) documentImpl0, (NodeTest) nodeNameTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLLabelElementImpl hTMLLabelElementImpl0 = new HTMLLabelElementImpl(hTMLDocumentImpl0, "//www.w3.org/XML/1998/namespace");
      QName qName0 = new QName("*");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "*");
      boolean boolean0 = DOMNodePointer.testNode((Node) hTMLLabelElementImpl0, (NodeTest) nodeNameTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      WMLOneventElementImpl wMLOneventElementImpl0 = new WMLOneventElementImpl((WMLDocumentImpl) null, "*");
      boolean boolean0 = DOMNodePointer.testNode((Node) wMLOneventElementImpl0, (NodeTest) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Locale locale0 = new Locale("c9u3I *BXxct");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      NodeIterator nodeIterator0 = dOMNodePointer0.childIterator(nodeTypeTest0, true, (NodePointer) null);
      assertEquals(0, nodeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "<<unknown namespace>>", "http://www.w3.org/2000/xmlns/", "http://www.w3.org/2000/xmlns/");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, pSVIElementNSImpl0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
      QName qName0 = new QName("Km.");
      // Undeclared exception!
      try { 
        dOMNodePointer1.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DocumentImpl documentImpl0 = new DocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, (Locale) null, "V+P5(L/&OF|@?[3wO");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) processingInstructionTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(variablePointer0, (Node) null);
      boolean boolean0 = dOMNodePointer0.isActual();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
      PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/xmlns/", "<<unknown namespace>>");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, pSVIElementNSImpl0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals("/node()[1]", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLBaseFontElementImpl hTMLBaseFontElementImpl0 = new HTMLBaseFontElementImpl(hTMLDocumentImpl0, "')");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLBaseFontElementImpl0, locale0, ":+:o7%{T].CKP");
      dOMNodePointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Text text0 = hTMLDocumentImpl0.createTextNode("4nG`-U");
      Locale locale0 = Locale.forLanguageTag("4nG`-U");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(text0, locale0);
      int int0 = dOMNodePointer0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLTableSectionElementImpl hTMLTableSectionElementImpl0 = new HTMLTableSectionElementImpl(hTMLDocumentImpl0, "R&{u[%3F9kp:");
      Locale locale0 = Locale.JAPAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTableSectionElementImpl0, locale0, (String) null);
      NodePointer nodePointer0 = dOMNodePointer0.namespacePointer("vr");
      assertFalse(nodePointer0.isRoot());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("org.apache.html.dom.HTMLDocumentImpl@0000000003");
      HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLElement0, locale0, "org.apache.wml.dom.WMLSelectElementImpl");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) cDATASection0);
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
      try { 
        dOMNodePointer1.createChild(jXPathContext0, qName0, Integer.MIN_VALUE, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: id('org.apache.wml.dom.WMLSelectElementImpl')/BODY[1]
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.TAIWAN;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "/");
      boolean boolean0 = dOMNodePointer0.isCollection();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
      boolean boolean0 = dOMNodePointer0.isLanguage("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLHRElementImpl hTMLHRElementImpl0 = new HTMLHRElementImpl(hTMLDocumentImpl0, "xmlns");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLHRElementImpl0, locale0);
      int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      WMLImgElementImpl wMLImgElementImpl0 = new WMLImgElementImpl(wMLDocumentImpl0, "xmlns:");
      Locale locale0 = Locale.JAPANESE;
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLImgElementImpl0, locale0, "xmlns:");
      QName qName0 = new QName("xmlns:");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLDocumentImpl0);
      // Undeclared exception!
      try { 
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }
}
