/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:29:15 GMT 2021
 */

package com.fasterxml.jackson.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultIndenter;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.Separators;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultPrettyPrinter_ESTest extends DefaultPrettyPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      Separators separators0 = Separators.createDefaultInstance();
      defaultPrettyPrinter0.withSeparators(separators0);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeArrayValueSeparator((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("{Z)OD6 <_Ug)RGSqs_;");
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeEndObject((JsonGenerator) null, (-4836));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      defaultPrettyPrinter0._separators = null;
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeObjectEntrySeparator((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      Separators separators0 = new Separators();
      defaultPrettyPrinter0._separators = separators0;
      defaultPrettyPrinter0._spacesInObjectEntries = false;
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeObjectFieldValueSeparator((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("6I'5-pxA([tWj(C");
      Separators separators0 = new Separators('', 'h', 'y');
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withSeparators(separators0);
      DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
      assertFalse(defaultPrettyPrinter2.equals((Object)defaultPrettyPrinter0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultPrettyPrinter.FixedSpaceIndenter defaultPrettyPrinter_FixedSpaceIndenter0 = DefaultPrettyPrinter.FixedSpaceIndenter.instance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      defaultPrettyPrinter_FixedSpaceIndenter0.writeIndentation(uTF8JsonGenerator0, (-4109));
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      assertFalse(defaultPrettyPrinter1.equals((Object)defaultPrettyPrinter0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter("pWdgOnqp>f/'M^C", "[YkSXlMHsGUt");
      // Undeclared exception!
      try { 
        defaultIndenter0.writeIndentation((JsonGenerator) null, 1814);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultIndenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultPrettyPrinter.NopIndenter defaultPrettyPrinter_NopIndenter0 = DefaultPrettyPrinter.NopIndenter.instance;
      boolean boolean0 = defaultPrettyPrinter_NopIndenter0.isInline();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultPrettyPrinter.NopIndenter defaultPrettyPrinter_NopIndenter0 = new DefaultPrettyPrinter.NopIndenter();
      assertTrue(defaultPrettyPrinter_NopIndenter0.isInline());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultPrettyPrinter.FixedSpaceIndenter defaultPrettyPrinter_FixedSpaceIndenter0 = new DefaultPrettyPrinter.FixedSpaceIndenter();
      // Undeclared exception!
      try { 
        defaultPrettyPrinter_FixedSpaceIndenter0.writeIndentation((JsonGenerator) null, 108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultPrettyPrinter.FixedSpaceIndenter defaultPrettyPrinter_FixedSpaceIndenter0 = DefaultPrettyPrinter.FixedSpaceIndenter.instance;
      boolean boolean0 = defaultPrettyPrinter_FixedSpaceIndenter0.isInline();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2485), (ObjectCodec) null, byteArrayBuilder0);
      defaultPrettyPrinter0.writeStartArray(uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultPrettyPrinter0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, byteArrayBuilder0);
      defaultPrettyPrinter0.writeObjectFieldValueSeparator(uTF8JsonGenerator0);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      defaultPrettyPrinter0.writeObjectEntrySeparator(uTF8JsonGenerator0);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      defaultPrettyPrinter0.writeEndObject(uTF8JsonGenerator0, 484);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler(696, 696);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1581);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      defaultPrettyPrinter0.writeArrayValueSeparator(filteringGeneratorDelegate0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)44, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      defaultPrettyPrinter0.beforeArrayValues(uTF8JsonGenerator0);
      assertTrue(uTF8JsonGenerator0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0._withSpaces(true);
      assertSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 32, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)53, true);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeStartObject(uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Numeric value (%s) out of range of int (Md - %s)", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeStartObject(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultPrettyPrinter0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      try { 
        defaultPrettyPrinter0.writeStartObject(uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2431, false);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeStartArray(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter");
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeRootValueSeparator((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2433);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)64, false);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeRootValueSeparator(uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H.M");
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-2150), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeRootValueSeparator(filteringGeneratorDelegate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler(56320, 35);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 1334, true);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultPrettyPrinter0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)108, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeObjectEntrySeparator(jsonGeneratorDelegate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler(93, 40);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1415, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1569), true);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeObjectEntrySeparator(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1569
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(52);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeEndObject(uTF8JsonGenerator0, 56320);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler(56, 2491);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0, byteArray0, 3015, false);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, (byte) (-110));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler(80, 3118);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-208), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1242, true);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeArrayValueSeparator(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler(852, 2249);
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultPrettyPrinter0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)41, false);
      try { 
        defaultPrettyPrinter0.writeArrayValueSeparator(uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.withSeparators((Separators) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      defaultPrettyPrinter0._nesting = 8233;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IOContext iOContext0 = new IOContext(bufferRecycler0, linkedList0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8233, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      defaultPrettyPrinter0.beforeObjectEntries(uTF8JsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.beforeObjectEntries((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultIndenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.util.DefaultPrettyPrinter", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1270);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2488, false);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.beforeObjectEntries(uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SerializedString serializedString0 = new SerializedString("No current event to copy");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No current event to copy");
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-3105), true);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.beforeObjectEntries(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.beforeArrayValues((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF16_BE", true);
      MockFile mockFile0 = new MockFile("UTF16_BE");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-24), false);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.beforeArrayValues(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -24
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-231), (ObjectCodec) null, pipedOutputStream0, byteArray0, 5118, false);
      try { 
        defaultPrettyPrinter0.beforeArrayValues(uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = null;
      try {
        defaultPrettyPrinter0 = new DefaultPrettyPrinter((DefaultPrettyPrinter) null, (SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = null;
      try {
        defaultPrettyPrinter0 = new DefaultPrettyPrinter((DefaultPrettyPrinter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(" ");
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withRootSeparator((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      assertSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      assertFalse(defaultPrettyPrinter1.equals((Object)defaultPrettyPrinter0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultIndenter defaultIndenter0 = new DefaultIndenter("", "");
      defaultPrettyPrinter0._arrayIndenter = (DefaultPrettyPrinter.Indenter) defaultIndenter0;
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeEndArray((JsonGenerator) null, (-1190));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler(1192, 1192);
      Locale locale0 = Locale.CHINA;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)91, true);
      try { 
        defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, (byte)1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeEndObject((JsonGenerator) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("s+B[uN>");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(123);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1244), true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeEndObject(filteringGeneratorDelegate0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultPrettyPrinter0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1196), (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      try { 
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultPrettyPrinter0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      defaultPrettyPrinter0.writeStartObject(uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      defaultPrettyPrinter0.writeRootValueSeparator((JsonGenerator) null);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withObjectIndenter((DefaultPrettyPrinter.Indenter) null);
      assertNotSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withObjectIndenter(defaultPrettyPrinter0._objectIndenter);
      assertSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withArrayIndenter((DefaultPrettyPrinter.Indenter) null);
      assertNotSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter");
      DefaultPrettyPrinter.FixedSpaceIndenter defaultPrettyPrinter_FixedSpaceIndenter0 = DefaultPrettyPrinter.FixedSpaceIndenter.instance;
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withArrayIndenter(defaultPrettyPrinter_FixedSpaceIndenter0);
      assertSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      defaultPrettyPrinter0.indentArraysWith((DefaultPrettyPrinter.Indenter) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultIndenter defaultIndenter0 = new DefaultIndenter(" e -@n~x|.r", " e -@n~x|.r");
      defaultPrettyPrinter0.indentArraysWith(defaultIndenter0);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeStartArray((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withRootSeparator((String) null);
      assertSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withRootSeparator((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      assertNotSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("V6yljgBJw");
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withRootSeparator((SerializableString) null);
      assertNotSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withRootSeparator("");
      assertSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withRootSeparator((SerializableString) null);
      assertSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((String) null);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("2$r3:+)");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultPrettyPrinter0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 93, true);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeStartArray(uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultPrettyPrinter.FixedSpaceIndenter defaultPrettyPrinter_FixedSpaceIndenter0 = new DefaultPrettyPrinter.FixedSpaceIndenter();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      defaultPrettyPrinter0.indentObjectsWith(defaultPrettyPrinter_FixedSpaceIndenter0);
      assertTrue(defaultPrettyPrinter_FixedSpaceIndenter0.isInline());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      defaultPrettyPrinter0.indentObjectsWith((DefaultPrettyPrinter.Indenter) null);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeEndObject((JsonGenerator) null, 95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      defaultPrettyPrinter0.indentObjectsWith((DefaultPrettyPrinter.Indenter) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      defaultPrettyPrinter0.writeStartObject(filteringGeneratorDelegate0);
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler(56320, 35);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 1334, true);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.writeArrayValueSeparator(uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withSpacesInObjectEntries();
      assertSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IOContext iOContext0 = new IOContext(bufferRecycler0, linkedList0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8233, (ObjectCodec) null, mockPrintStream0);
      defaultPrettyPrinter0.beforeObjectEntries(uTF8JsonGenerator0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.util.DefaultPrettyPrinter", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)111, true);
      // Undeclared exception!
      try { 
        defaultPrettyPrinter0.beforeArrayValues(uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultPrettyPrinter0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)109, false);
      try { 
        defaultPrettyPrinter0.writeObjectEntrySeparator(uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withoutSpacesInObjectEntries();
      assertNotSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
  }
}
