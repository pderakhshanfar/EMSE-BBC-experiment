/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 14:28:49 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.math.BigInteger;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.time.Instant;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.swing.JInternalFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.javax.swing.MockDefaultListSelectionModel;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.time.Week;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      double[][] doubleArray0 = new double[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState((PlotRenderingInfo) null);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.hitTest(0.05, 0.0, (Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, subCategoryAxis0, numberAxis3D0, defaultIntervalCategoryDataset0, 10, 0, false, categoryItemRendererState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      defaultCategoryItemRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addEntity((EntityCollection) null, minMaxCategoryRenderer0.DEFAULT_SHAPE, defaultBoxAndWhiskerCategoryDataset0, 9, (-3380), false, 0.05, (double) minMaxCategoryRenderer0.ZERO);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, numberAxis3D0, defaultCategoryItemRenderer0);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultBoxAndWhiskerCategoryDataset0, 10, 10, false, 1, 0.05);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("onX~jgC,Td#voe<>");
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Size2D size2D0 = new Size2D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 3, Double.NaN, rectangleAnchor0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Point2D.Double point2D_Double0 = (Point2D.Double)scatterRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle2D0, numberAxis0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(Double.NaN, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, rectangle2D_Double0, (RectangleInsets) null, (LengthAdjustmentType) null, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("onX~jgC,Td#voe<>");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      MockDefaultListSelectionModel mockDefaultListSelectionModel0 = new MockDefaultListSelectionModel();
      JTable jTable0 = new JTable(timeSeriesTableModel0, defaultTableColumnModel0, mockDefaultListSelectionModel0);
      Rectangle rectangle0 = jTable0.getCellRect((-724), 500, true);
      Rectangle2D rectangle2D0 = numberAxis0.DEFAULT_AXIS_LABEL_INSETS.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      Point2D.Double point2D_Double0 = (Point2D.Double)categoryStepRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, rectangle0, numberAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals((-4.0), point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(defaultCategoryItemRenderer0.ZERO, (double) defaultCategoryItemRenderer0.ZERO, defaultCategoryItemRenderer0.ZERO, (double) defaultCategoryItemRenderer0.ZERO, defaultCategoryItemRenderer0.DEFAULT_PAINT, defaultCategoryItemRenderer0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      defaultCategoryItemRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      boolean boolean0 = defaultCategoryItemRenderer0.removeAnnotation(categoryLineAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      Point2D.Double point2D_Double0 = (Point2D.Double)categoryStepRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle2D_Double0, combinedDomainXYPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(8.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add(1.0, (double) 0, (Comparable) 0, (Comparable) false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      defaultCategoryItemRenderer0.addEntity(standardEntityCollection0, combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, defaultStatisticalCategoryDataset0, 0, 0, true, (double) scatterRenderer0.ZERO, 0);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null);
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      waterfallBarRenderer0.drawOutline(graphics2D0, categoryPlot0, rectangle2D0);
      assertTrue(categoryPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      double[][] doubleArray0 = new double[3][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      scatterRenderer0.addEntity(standardEntityCollection0, defaultCaret0, defaultIntervalCategoryDataset0, 0, 0, false);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) defaultCategoryItemRenderer0.ZERO);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, (CategoryAxis) null, cyclicNumberAxis0, defaultCategoryItemRenderer0);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, categoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, 1.0, "Base item URL generator not cloneable.");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis3D0, cyclicNumberAxis0, ganttRenderer0);
      AffineTransform affineTransform0 = new AffineTransform();
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      Rectangle2D rectangle2D0 = categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT.getStringBounds("Base item URL generator not cloneable.", fontRenderContext0);
      CategoryItemRendererState categoryItemRendererState0 = ganttRenderer0.initialise((Graphics2D) null, rectangle2D0, categoryPlot0, defaultCategoryDataset0, (PlotRenderingInfo) null);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2.0F, 0.0F, true);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis3D0, numberAxis3D0, stackedBarRenderer3D0);
      CategoryItemRendererState categoryItemRendererState0 = stackedBarRenderer3D0.initialise((Graphics2D) null, defaultCaret0, categoryPlot0, defaultCategoryDataset0, (PlotRenderingInfo) null);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryURLGenerator categoryURLGenerator0 = scatterRenderer0.getURLGenerator(0, 1, true);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineAndShapeRenderer0.getSeriesToolTipGenerator(0);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add(1.0, (double) 0, (Comparable) 0, (Comparable) false);
      scatterRenderer0.initialise((Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, defaultStatisticalCategoryDataset0, (PlotRenderingInfo) null);
      int int0 = scatterRenderer0.getRowCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      ValueAxis valueAxis0 = groupedStackedBarRenderer0.getRangeAxis(categoryPlot0, 3);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      double[][] doubleArray0 = new double[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      LogAxis logAxis0 = new LogAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, subCategoryAxis0, logAxis0, minMaxCategoryRenderer0);
      minMaxCategoryRenderer0.getRangeAxis(categoryPlot0, 0);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, (double) stackedAreaRenderer0.ZERO);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, subCategoryAxis0, cyclicNumberAxis0, stackedAreaRenderer0);
      ValueAxis valueAxis0 = stackedAreaRenderer0.getRangeAxis(categoryPlot0, 11);
      assertNull(valueAxis0.getLabelToolTip());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2447.669, 2.0F);
      CategoryPlot categoryPlot0 = stackedBarRenderer3D0.getPlot();
      assertNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, subCategoryAxis0, numberAxis3D0, ganttRenderer0);
      CategoryPlot categoryPlot1 = ganttRenderer0.getPlot();
      assertEquals(0.5F, categoryPlot1.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Number[][] numberArray0 = new Number[13][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis("s$a,*#Y lx IrQ-NZQC");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(10);
      double double0 = ganttRenderer0.getItemMiddle(1.0E-8, 2.0F, defaultIntervalCategoryDataset0, categoryAxis0, defaultCaret0, rectangleEdge0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)stackedAreaRenderer0.getItemLabelGenerator(2047, 19, false);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      DrawingSupplier drawingSupplier0 = intervalBarRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis categoryAxis0 = groupedStackedBarRenderer0.getDomainAxis(categoryPlot0, (CategoryDataset) null);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, numberAxis3D0, defaultCategoryItemRenderer0);
      defaultCategoryItemRenderer0.getDomainAxis(categoryPlot0, defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = minMaxCategoryRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((double) 0, (double) 0, (Comparable) scatterRenderer0.ZERO, (Comparable) 0);
      scatterRenderer0.initialise((Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, defaultStatisticalCategoryDataset0, (PlotRenderingInfo) null);
      int int0 = scatterRenderer0.getColumnCount();
      assertEquals(1, scatterRenderer0.getRowCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)stackedAreaRenderer0.getBaseToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = scatterRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("{0}", decimalFormat0, decimalFormat0);
      groupedStackedBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator1 = (StandardCategoryItemLabelGenerator)groupedStackedBarRenderer0.getBaseItemLabelGenerator();
      assertEquals("{0}", standardCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.2;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0.2, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[13];
      doubleArray1[3] = (-1368.5181301987218);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals((-1368.5181301987218), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds(defaultStatisticalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Range range0 = scatterRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((double) scatterRenderer0.ZERO, (double) 1.0F, (Comparable) 0, (Comparable) 1.0F);
      Range range0 = scatterRenderer0.findRangeBounds(defaultStatisticalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Number[][] numberArray0 = new Number[1][8];
      Number[] numberArray1 = new Number[8];
      numberArray1[3] = (Number) 3.0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = areaRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(3.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[6];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      numberArray1[5] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = ganttRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1961.0510010183395, 0.0);
      boolean boolean0 = stackedBarRenderer3D0.equals(barRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add(1.0, (double) 0, (Comparable) 0, (Comparable) false);
      scatterRenderer0.initialise((Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, defaultStatisticalCategoryDataset0, (PlotRenderingInfo) null);
      scatterRenderer0.createState((PlotRenderingInfo) null);
      assertEquals(1, scatterRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setSeriesURLGenerator((-3922), (CategoryURLGenerator) customCategoryURLGenerator0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.setSeriesURLGenerator((-182), (CategoryURLGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setSeriesToolTipGenerator((-3287), (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("", numberFormat0);
      // Undeclared exception!
      try { 
        barRenderer0.setSeriesToolTipGenerator((-1), (CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      // Undeclared exception!
      try { 
        stackedBarRenderer0.setSeriesItemLabelGenerator((-1861), (CategoryItemLabelGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Number[][] numberArray0 = new Number[13][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.initialise((Graphics2D) null, defaultCaret0, combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Combined_Domain_XYPlot");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        ganttRenderer0.hitTest(924.431928973, 10, (Graphics2D) null, defaultCaret0, combinedRangeCategoryPlot0, subCategoryAxis0, (ValueAxis) null, taskSeriesCollection0, 0, 396, true, (CategoryItemRendererState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryItemRendererState categoryItemRendererState0 = ganttRenderer0.createState((PlotRenderingInfo) null);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.hitTest(0.0, 0.0F, (Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, categoryAxis0, numberAxis3D0, taskSeriesCollection0, 500, 6471, true, categoryItemRendererState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6471, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.getRangeAxis((CategoryPlot) null, (-11));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("h&ZjY=.(4+JX3.U6][");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, subCategoryAxis0, numberAxis3D0, scatterRenderer0);
      // Undeclared exception!
      try { 
        scatterRenderer0.getLegendItem(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        ganttRenderer0.getItemMiddle(boxAndWhiskerRenderer0.ZERO, boxAndWhiskerRenderer0.ZERO, defaultKeyedValues2DDataset0, categoryAxis0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      MockDate mockDate0 = new MockDate((byte) (-49));
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      Hour hour0 = new Hour((byte)7, day0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (byte) (-49), 23);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(0, (byte)7, 2.0, (-397.208));
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      LegendTitle legendTitle0 = new LegendTitle(groupedStackedBarRenderer0);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.getItemMiddle(hour0, 0.2, slidingGanttCategoryDataset0, categoryAxis3D0, rectangle2D0, legendTitle0.DEFAULT_POSITION);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        areaRenderer0.getDomainAxis((CategoryPlot) null, taskSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-1.0), (double) defaultPolarItemRenderer0.ZERO);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        barRenderer3D0.getDomainAxis(combinedRangeCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      String[] stringArray0 = new String[6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[4];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("mGQ#iAM;l>IpI%v");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("mGQ#iAM;l>IpI%v");
      Rectangle2D rectangle2D0 = defaultCaret0.getFrame();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      // Undeclared exception!
      try { 
        ganttRenderer0.drawRangeLine((Graphics2D) null, combinedDomainCategoryPlot0, numberAxis3D0, rectangle2D0, 1.0F, subCategoryAxis0.DEFAULT_TICK_MARK_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2444.296221757, (-2617.832559289255), 0.0, 2444.296221757);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("!Uh]dht{h$r/", scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainCategoryPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 420);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        ganttRenderer0.drawRangeLine(graphics2D0, combinedDomainCategoryPlot0, numberAxis3D0, rectangle2D_Double0, (double) scatterRenderer0.ZERO, jFreeChart0.DEFAULT_BACKGROUND_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("{2}");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      PeriodAxis periodAxis0 = new PeriodAxis("{2}", week0, week0);
      // Undeclared exception!
      try { 
        ganttRenderer0.drawRangeLine(graphics2D0, combinedDomainCategoryPlot0, periodAxis0, (Rectangle2D) null, 1.0F, subCategoryAxis0.DEFAULT_AXIS_LINE_PAINT, periodAxis0.DEFAULT_TICK_MARK_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.39240928132E12) <= upper (1.392409281319E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.drawDomainLine((Graphics2D) null, categoryPlot0, rectangle0, (-3688.2), categoryPlot0.DEFAULT_GRIDLINE_PAINT, categoryPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawBackground((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      NumberAxis numberAxis0 = new NumberAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, numberAxis0, ganttRenderer0);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(0, 0.2, 0.2, 0, categoryAxis3D0.DEFAULT_TICK_LABEL_PAINT, ganttRenderer0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      ganttRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        ganttRenderer0.drawAnnotations((Graphics2D) null, defaultCaret0, categoryAxis3D0, dateAxis0, layer0, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(numberAxis3D0.DEFAULT_TICK_MARK_PAINT, categoryAxis0.DEFAULT_AXIS_LINE_PAINT, categoryAxis0.DEFAULT_TICK_MARK_PAINT, categoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis0, numberAxis3D0, waterfallBarRenderer0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Rectangle2D rectangle2D0 = numberAxis3D0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle((Rectangle2D) defaultCaret0, true, true);
      CategoryItemRendererState categoryItemRendererState0 = scatterRenderer0.initialise((Graphics2D) null, rectangle2D0, categoryPlot0, defaultStatisticalCategoryDataset0, (PlotRenderingInfo) null);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D0, categoryPlot0, categoryAxis0, numberAxis3D0, defaultCategoryDataset0, 0, 0, true, categoryItemRendererState0, defaultCaret0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addEntity(standardEntityCollection0, rectangle2D_Double0, defaultIntervalCategoryDataset0, 4793, 1507, true, 1724.83232842, (-456.4550393365986));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addEntity(standardEntityCollection0, combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, (CategoryDataset) null, 4, (-198), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      GeneralPath generalPath0 = new GeneralPath(categoryStepRenderer0.DEFAULT_SHAPE);
      Rectangle rectangle0 = generalPath0.getBounds();
      Number[][] numberArray0 = new Number[10][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addEntity(standardEntityCollection0, rectangle0, defaultIntervalCategoryDataset0, 6, (-724), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -724
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("Null 'plot' argument.", "Null 'plot' argument.", 0.0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ");
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, (CategoryDataset) null, (PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, categoryAxis0, (ValueAxis) null, (CategoryDataset) null, 10, 2360, false, categoryItemRendererState0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(defaultCategoryItemRenderer0.ZERO, (double) defaultCategoryItemRenderer0.ZERO, defaultCategoryItemRenderer0.ZERO, (double) defaultCategoryItemRenderer0.ZERO, defaultCategoryItemRenderer0.DEFAULT_PAINT, defaultCategoryItemRenderer0.DEFAULT_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      defaultCategoryItemRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, true);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("");
      categoryStepRenderer0.setSeriesURLGenerator(70, (CategoryURLGenerator) standardCategoryURLGenerator0, true);
      assertEquals(1, categoryStepRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getToolTipGenerator(0, 0, false);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = scatterRenderer0.getItemLabelGenerator(3, (-2607), true);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      LegendItem legendItem0 = scatterRenderer0.getLegendItem(3, 2639);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryItemRendererState categoryItemRendererState0 = ganttRenderer0.createState((PlotRenderingInfo) null);
      boolean boolean0 = ganttRenderer0.hitTest(0.05, (-3228.09964775421), (Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, categoryAxis0, numberAxis3D0, taskSeriesCollection0, 0, 0, false, categoryItemRendererState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DateAxis dateAxis0 = new DateAxis();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Thermometer_Plot");
      double[][] doubleArray0 = new double[7][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryItemRendererState categoryItemRendererState0 = ganttRenderer0.createState((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.hitTest(2.0, 0.05, (Graphics2D) null, defaultCaret0, combinedRangeCategoryPlot0, subCategoryAxis0, dateAxis0, defaultIntervalCategoryDataset0, 0, 0, true, categoryItemRendererState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      CategoryItemRendererState categoryItemRendererState0 = ganttRenderer0.createState((PlotRenderingInfo) null);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.hitTest(0.0, 0.0, (Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, categoryAxis0, numberAxis3D0, defaultStatisticalCategoryDataset0, (-820), (-2916), false, categoryItemRendererState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis0, numberAxis3D0, barRenderer3D0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryItemRendererState categoryItemRendererState0 = scatterRenderer0.initialise((Graphics2D) null, defaultCaret0, categoryPlot0, defaultCategoryDataset0, (PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds((Graphics2D) null, defaultCaret0, categoryPlot0, categoryAxis0, numberAxis3D0, defaultCategoryDataset0, 0, (-651), true, categoryItemRendererState0, defaultCaret0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      defaultCategoryItemRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, numberAxis3D0, defaultCategoryItemRenderer0);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultBoxAndWhiskerCategoryDataset0, (-63), (-63), true, (-63), (-63));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("Should never get to here!", numberFormat0);
      scatterRenderer0.setSeriesToolTipGenerator(10, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, defaultStatisticalCategoryDataset0, 10, (-1942), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, numberAxis3D0, defaultCategoryItemRenderer0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      categoryPlot0.setOrientation(plotOrientation0);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultBoxAndWhiskerCategoryDataset0, 500, 10, true, 10, 0.05);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      String[] stringArray0 = new String[3];
      Number[][] numberArray0 = new Number[4][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, (Number[][]) null);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultIntervalCategoryDataset0, 0, (-2773), false, (-840.0), (-2223));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Number[][] numberArray0 = new Number[10][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultIntervalCategoryDataset0, 715, (-517), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis0, numberAxis3D0, barRenderer3D0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.initialise((Graphics2D) null, defaultCaret0, categoryPlot0, defaultCategoryDataset0, (PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        scatterRenderer0.getLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      LegendItemCollection legendItemCollection0 = statisticalLineAndShapeRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2300.94298313), 1118.651, "");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, cyclicNumberAxis0, groupedStackedBarRenderer0);
      ValueAxis valueAxis0 = groupedStackedBarRenderer0.getRangeAxis(categoryPlot0, 3);
      assertEquals(0, valueAxis0.getMinorTickCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedAreaRenderer0.getLegendItemLabelGenerator();
      stackedAreaRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertTrue(stackedAreaRenderer1.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      stackedAreaRenderer0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertEquals(0, stackedAreaRenderer1.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", "X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", "X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ");
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      try { 
        stackedAreaRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertTrue(stackedAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertTrue(stackedAreaRenderer1.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(0, 0.2, 0.2, 0, categoryAxis3D0.DEFAULT_TICK_LABEL_PAINT, ganttRenderer0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      ganttRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        ganttRenderer0.drawAnnotations((Graphics2D) null, defaultCaret0, categoryAxis3D0, dateAxis0, layer0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'orientation' argument.");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.FOREGROUND;
      ganttRenderer0.drawAnnotations((Graphics2D) null, rectangle0, subCategoryAxis0, numberAxis3D0, layer0, (PlotRenderingInfo) null);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("cmaNf1R6@f|a", numberFormat0);
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      // Undeclared exception!
      try { 
        scatterRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultStatisticalCategoryDataset0, (-189), (-1384), true, 0, Double.NaN, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("h&:jY=.(4+J3.U6#[");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, subCategoryAxis0, numberAxis3D0, scatterRenderer0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      scatterRenderer0.updateCrosshairValues(categoryCrosshairState0, 10, 0.0F, 0, 0, 1.0E-8, 10, plotOrientation0);
      assertEquals(0, scatterRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      scatterRenderer0.updateCrosshairValues((CategoryCrosshairState) null, 2.0F, "Base item URL generator not cloneable.", 360, (-3180), (-5227.061425840741), 500, plotOrientation0);
      assertEquals(0, scatterRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        scatterRenderer0.updateCrosshairValues(categoryCrosshairState0, scatterRenderer0.ZERO, boxAndWhiskerRenderer0.ZERO, (double) scatterRenderer0.ZERO, (-3158), 0, 0.0, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      // Undeclared exception!
      try { 
        scatterRenderer0.updateCrosshairValues(categoryCrosshairState0, 10, 0.0F, 0, 0, 1.0E-8, 10, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, subCategoryAxis0, numberAxis3D0, scatterRenderer0);
      DrawingSupplier drawingSupplier0 = scatterRenderer0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", 0.2, 0.0, 0.0);
      ganttRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer1 = (GroupedStackedBarRenderer)groupedStackedBarRenderer0.clone();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = (StandardCategorySeriesLabelGenerator)groupedStackedBarRenderer0.getLegendItemLabelGenerator();
      assertTrue(groupedStackedBarRenderer0.equals((Object)groupedStackedBarRenderer1));
      
      groupedStackedBarRenderer1.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      boolean boolean0 = groupedStackedBarRenderer0.equals(groupedStackedBarRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      ganttRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      GanttRenderer ganttRenderer1 = new GanttRenderer();
      boolean boolean0 = ganttRenderer0.equals(ganttRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      IntervalBarRenderer intervalBarRenderer1 = new IntervalBarRenderer();
      assertTrue(intervalBarRenderer1.equals((Object)intervalBarRenderer0));
      
      DecimalFormat decimalFormat0 = new DecimalFormat("1J\\kx|{s");
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("1J\\kx|{s", decimalFormat0);
      intervalBarRenderer1.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      boolean boolean0 = intervalBarRenderer0.equals(intervalBarRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      GanttRenderer ganttRenderer1 = new GanttRenderer();
      DateFormat dateFormat0 = DateFormat.getTimeInstance(2);
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("b v?<;", dateFormat0);
      ganttRenderer1.setSeriesToolTipGenerator(2, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
      boolean boolean0 = ganttRenderer1.equals(ganttRenderer0);
      assertTrue(ganttRenderer0.equals((Object)ganttRenderer1));
      assertFalse(ganttRenderer1.equals((Object)ganttRenderer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer1 = (GroupedStackedBarRenderer)groupedStackedBarRenderer0.clone();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("", decimalFormat0);
      groupedStackedBarRenderer1.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      groupedStackedBarRenderer0.equals(groupedStackedBarRenderer1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      minMaxCategoryRenderer0.setPlot(categoryPlot0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getLegendItem(15, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Size2D size2D0 = new Size2D(12.0, 8.0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 1508.02419137, 1508.02419137, rectangleAnchor0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(xYIntervalSeriesCollection0, valueAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      // Undeclared exception!
      try { 
        scatterRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, (Rectangle2D) null, valueAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      // Undeclared exception!
      try { 
        scatterRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, (Rectangle2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0.DEFAULT_INSETS, (LengthAdjustmentType) null, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      GeneralPath generalPath0 = new GeneralPath(categoryStepRenderer0.DEFAULT_SHAPE);
      Rectangle rectangle0 = generalPath0.getBounds();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Rectangle2D rectangle2D0 = combinedDomainXYPlot0.DEFAULT_INSETS.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      // Undeclared exception!
      try { 
        categoryStepRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, rectangle2D0, (RectangleInsets) null, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      // Undeclared exception!
      try { 
        categoryStepRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle2D_Double0, rectangle2D_Double0, (RectangleInsets) null, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle rectangle0 = new Rectangle(32, 366);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, numberAxis3D0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3618, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Stroke stroke0 = spiderWebPlot0.getAxisLineStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 1.0F, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT, stroke0, stackedAreaRenderer0.DEFAULT_PAINT, stroke0, 1.0F);
      stackedAreaRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, numberAxis3D0, intervalMarker0, rectangle0);
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, groupedStackedBarRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeCategoryPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1042.0), 4.0, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 0.0F);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      LogAxis logAxis0 = new LogAxis();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      stackedAreaRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, logAxis0, intervalMarker0, rectangle2D_Double0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      NumberAxis numberAxis0 = new NumberAxis("");
      IntervalMarker intervalMarker0 = new IntervalMarker(500, 5, statisticalBarRenderer0.DEFAULT_PAINT);
      statisticalBarRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, numberAxis0, intervalMarker0, rectangle2D_Double0);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      NumberAxis numberAxis0 = new NumberAxis("org.jfree.chart.renderer.category.IntervalBarRenderer");
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 8.0, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, numberAxis0, intervalMarker0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      ValueMarker valueMarker0 = new ValueMarker(0.05);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, numberAxis3D0, valueMarker0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      ValueMarker valueMarker0 = new ValueMarker(1.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3017, "F");
      Locale locale0 = Locale.CHINESE;
      PeriodAxis periodAxis0 = new PeriodAxis("F", fixedMillisecond0, fixedMillisecond0, simpleTimeZone0, locale0);
      stackedAreaRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, periodAxis0, valueMarker0, defaultCaret0);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(0.0F, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      lineRenderer3D0.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, numberAxis3D0, categoryMarker0, defaultCaret0);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryMarker categoryMarker0 = new CategoryMarker(defaultCategoryItemRenderer0.ZERO, defaultCategoryItemRenderer0.DEFAULT_PAINT, defaultCategoryItemRenderer0.DEFAULT_STROKE);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) defaultCategoryItemRenderer0.ZERO);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, (CategoryAxis) null, cyclicNumberAxis0, defaultCategoryItemRenderer0);
      defaultCategoryItemRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, (CategoryAxis) null, categoryMarker0, (Rectangle2D) null);
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryMarker categoryMarker0 = new CategoryMarker(defaultCategoryItemRenderer0.ZERO, defaultCategoryItemRenderer0.DEFAULT_PAINT, defaultCategoryItemRenderer0.DEFAULT_STROKE);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((-3694.8108201429), (Comparable) defaultCategoryItemRenderer0.ZERO, (Comparable) defaultCategoryItemRenderer0.ZERO);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) defaultCategoryItemRenderer0.ZERO);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, (CategoryAxis) null, cyclicNumberAxis0, defaultCategoryItemRenderer0);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, (CategoryAxis) null, categoryMarker0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      MockDate mockDate0 = new MockDate(160, 160, 648, 1, 55, 55);
      Month month0 = new Month(mockDate0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Locale locale0 = Locale.ITALIAN;
      PeriodAxis periodAxis0 = new PeriodAxis("", month0, month0, simpleTimeZone0, locale0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle2D rectangle2D0 = rectangle0.getFrame();
      ganttRenderer0.drawRangeLine((Graphics2D) null, (CategoryPlot) null, periodAxis0, rectangle2D0, 0.0, periodAxis0.DEFAULT_AXIS_LABEL_PAINT, periodAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("", subCategoryAxis0.DEFAULT_TICK_LABEL_FONT, combinedDomainCategoryPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 118, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      ganttRenderer0.drawRangeLine(graphics2D0, combinedDomainCategoryPlot0, numberAxis3D0, defaultCaret0, 0.6428571428571429, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT, subCategoryAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JInternalFrame jInternalFrame0 = new JInternalFrame("Unknown layer.", false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-3633.0718F), 0, 1.0F, 0.0F);
      Rectangle2D rectangle2D0 = rectangle0.createIntersection(rectangle2D_Float0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 3);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      PiePlot3D piePlot3D0 = new PiePlot3D(defaultPieDataset0);
      Stroke stroke0 = piePlot3D0.getLabelLinkStroke();
      defaultCategoryItemRenderer0.drawDomainLine(graphics2D0, combinedDomainCategoryPlot0, rectangle2D0, 2000.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, stroke0);
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null, 1.0F, (Paint) null, statisticalLineAndShapeRenderer0.DEFAULT_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null, 10, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      boxAndWhiskerRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) null, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedDomainCategoryPlot0, defaultStatisticalCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = scatterRenderer0.getLegendItemLabelGenerator();
      scatterRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
      assertTrue(scatterRenderer0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setSeriesURLGenerator(2, (CategoryURLGenerator) null, false);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      stackedAreaRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertEquals(2.0, stackedAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      stackedBarRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      assertEquals(3, stackedBarRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setSeriesItemLabelGenerator(1, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      assertEquals("{2}", standardCategoryItemLabelGenerator0.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      scatterRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultKeyedValues2DDataset0, 1, 338, false, 846.097648537937, 0.0, true);
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.initialise((Graphics2D) null, defaultCaret0, (CategoryPlot) null, defaultKeyedValues2DDataset0, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setSeriesURLGenerator(1730, (CategoryURLGenerator) null);
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryURLGenerator categoryURLGenerator0 = minMaxCategoryRenderer0.getSeriesURLGenerator((-613));
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      JInternalFrame jInternalFrame0 = new JInternalFrame("", false, false, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.createHotSpotShape((Graphics2D) null, rectangle0, categoryPlot0, categoryAxis0, (ValueAxis) null, defaultStatisticalCategoryDataset0, 1, 0, true, categoryItemRendererState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      intervalBarRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      IntervalBarRenderer intervalBarRenderer1 = new IntervalBarRenderer();
      boolean boolean0 = intervalBarRenderer0.equals(intervalBarRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = scatterRenderer0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setSeriesToolTipGenerator(420, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator1 = (IntervalCategoryToolTipGenerator)stackedAreaRenderer0.getToolTipGenerator(420, 334, false);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, subCategoryAxis0, numberAxis3D0, scatterRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, categoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      defaultCategoryItemRenderer0.drawBackground(graphics2D0, categoryPlot0, defaultCaret0);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = intervalBarRenderer0.getSeriesItemLabelGenerator(2);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedAreaRenderer0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      stackedBarRenderer0.removeAnnotations();
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("}C;");
      ganttRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      CategoryURLGenerator categoryURLGenerator0 = ganttRenderer0.getBaseURLGenerator();
      assertSame(categoryURLGenerator0, standardCategoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryURLGenerator categoryURLGenerator0 = ganttRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(groupedStackedBarRenderer0.DEFAULT_PAINT, lineRenderer3D0.DEFAULT_OUTLINE_PAINT, lineRenderer3D0.DEFAULT_OUTLINE_PAINT, groupedStackedBarRenderer0.DEFAULT_PAINT);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.drawOutline((Graphics2D) null, (CategoryPlot) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      intervalBarRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem(10, 10);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Rectangle rectangle0 = new Rectangle(12, (-1228));
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.getItemMiddle(10, 12, defaultIntervalCategoryDataset0, categoryAxis3D0, rectangle0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      int int0 = boxAndWhiskerRenderer0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryPlot categoryPlot0 = new CategoryPlot(jDBCCategoryDataset0, subCategoryAxis0, numberAxis3D0, ganttRenderer0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.initialise((Graphics2D) null, defaultCaret0, categoryPlot0, jDBCCategoryDataset0, (PlotRenderingInfo) null);
      Rectangle2D rectangle2D0 = ganttRenderer0.createHotSpotBounds((Graphics2D) null, defaultCaret0, categoryPlot0, subCategoryAxis0, numberAxis3D0, jDBCCategoryDataset0, (-2788), 500, false, categoryItemRendererState0, defaultCaret0);
      assertNull(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesItemLabelGenerator((-1433), (CategoryItemLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }
}
