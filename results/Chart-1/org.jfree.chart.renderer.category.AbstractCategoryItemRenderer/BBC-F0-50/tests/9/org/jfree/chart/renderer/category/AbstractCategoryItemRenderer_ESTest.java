/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 15:36:37 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.LookupOp;
import java.awt.image.ShortLookupTable;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      statisticalLineAndShapeRenderer0.updateCrosshairValues(categoryCrosshairState0, 1.0F, 500, 0.05, 10, 10, 1.0F, plotOrientation0);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("v#", 0.2, (double) groupedStackedBarRenderer0.ZERO);
      Layer layer0 = Layer.BACKGROUND;
      groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      boolean boolean0 = groupedStackedBarRenderer0.removeAnnotation(categoryTextAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      boxAndWhiskerRenderer0.setSeriesItemLabelGenerator(1, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Layer layer0 = Layer.BACKGROUND;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      GeneralPath generalPath0 = new GeneralPath(groupedStackedBarRenderer0.DEFAULT_SHAPE);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)generalPath0.getBounds2D();
      stackedBarRenderer3D0.drawAnnotations((Graphics2D) null, rectangle2D_Float0, (CategoryAxis) null, (ValueAxis) null, layer0, (PlotRenderingInfo) null);
      assertEquals(6.0F, rectangle2D_Float0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.setSeriesURLGenerator(0, (CategoryURLGenerator) null);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setSeriesToolTipGenerator(1, (CategoryToolTipGenerator) null);
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      groupedStackedBarRenderer0.drawDomainLine(graphics2D0, categoryPlot0, rectangle2D_Double0, 300, jFreeChart0.DEFAULT_BACKGROUND_PAINT, categoryPlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      Number[][] numberArray0 = new Number[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      categoryStepRenderer0.addEntity(standardEntityCollection0, categoryStepRenderer_State0.line, defaultIntervalCategoryDataset0, 0, 0, false, 978.92, 1.0F);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((double) 2.0F, (double) 2.0F, (Comparable) true, (Comparable) false);
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      statisticalLineAndShapeRenderer0.initialise(graphics2D0, rectangle2D_Double0, categoryPlot0, defaultStatisticalCategoryDataset0, plotRenderingInfo0);
      assertEquals(1, statisticalLineAndShapeRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis3D0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = statisticalLineAndShapeRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, categoryPlot0, defaultStatisticalCategoryDataset0, plotRenderingInfo0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)stackedAreaRenderer0.getToolTipGenerator(10, (-1), false);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryURLGenerator categoryURLGenerator0 = ganttRenderer0.getSeriesURLGenerator((-2748));
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ValueAxis valueAxis0 = lineRenderer3D0.getRangeAxis(categoryPlot0, 10);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      numberAxis3D0.setAxisLineVisible(false);
      ValueAxis valueAxis0 = lineRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, 1);
      assertNull(valueAxis0.getLabelURL());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("org.jfree.chart.entity.PlotEntity", stringArray0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(symbolAxis0);
      ValueAxis valueAxis0 = lineRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, 1);
      assertEquals(0.05, valueAxis0.getUpperMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-576.635295));
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, (CategoryAxis) null, cyclicNumberAxis0, categoryStepRenderer0);
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)layeredBarRenderer0.getRangeAxis(categoryPlot0, 10);
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryPlot categoryPlot0 = lineRenderer3D0.getPlot();
      assertNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      CategoryPlot categoryPlot1 = statisticalLineAndShapeRenderer0.getPlot();
      assertFalse(categoryPlot1.isDomainPannable());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getItemLabelGenerator(94, 1049, true);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getItemLabelGenerator((-2190), 11, false);
      assertSame(categoryItemLabelGenerator0, intervalCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DrawingSupplier drawingSupplier0 = stackedBarRenderer3D0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      DrawingSupplier drawingSupplier0 = statisticalLineAndShapeRenderer0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis categoryAxis0 = boxAndWhiskerRenderer0.getDomainAxis(categoryPlot0, defaultStatisticalCategoryDataset0);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      CategoryAxis categoryAxis0 = statisticalLineAndShapeRenderer0.getDomainAxis(combinedDomainCategoryPlot0, (CategoryDataset) null);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getBaseToolTipGenerator();
      assertSame(categoryToolTipGenerator0, intervalCategoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)statisticalLineAndShapeRenderer0.getBaseItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Range range0 = lineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((double) 2.0F, (double) 2.0F, (Comparable) true, (Comparable) false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertEquals(4.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Range range0 = groupedStackedBarRenderer0.findRangeBounds((CategoryDataset) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((double) 0.0F, 0.05, (Comparable) 0.05, (Comparable) true);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds(defaultStatisticalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.05, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((Number) 420, (Number) 0.2, (Comparable) 0.2, (Comparable) groupedStackedBarRenderer0.ZERO);
      Range range0 = groupedStackedBarRenderer0.findRangeBounds(defaultStatisticalCategoryDataset0);
      assertEquals(420.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", scatterRenderer0.ZERO, 1.5707963267948966);
      boolean boolean0 = stackedBarRenderer0.equals(categoryTextAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Requires p > 0.");
      NumberAxis numberAxis0 = new NumberAxis();
      double[][] doubleArray0 = new double[0][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = ganttRenderer0.createState(plotRenderingInfo0);
      Rectangle2D rectangle2D1 = intervalBarRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D0, combinedRangeCategoryPlot0, extendedCategoryAxis0, numberAxis0, defaultIntervalCategoryDataset0, 500, (-3309), false, categoryItemRendererState0, rectangle2D0);
      assertNull(rectangle2D1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.setSeriesURLGenerator((-1077), (CategoryURLGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.setSeriesToolTipGenerator((-270), (CategoryToolTipGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setSeriesItemLabelGenerator((-1353), (CategoryItemLabelGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setSeriesItemLabelGenerator((-194), (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, (CategoryPlot) null, taskSeriesCollection0, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      DateAxis dateAxis0 = new DateAxis();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, dateAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.hitTest(0.0, (-614.1369800702912), (Graphics2D) null, rectangle2D0, (CategoryPlot) null, categoryAxis0, dateAxis0, (CategoryDataset) null, 8, (-1), true, categoryItemRendererState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1.0), 978.0, 1.0F, 1.0F);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.hitTest((-3359.8992), 1244.097575827169, (Graphics2D) null, rectangle0, categoryPlot0, (CategoryAxis) null, numberAxis3D0, defaultStatisticalCategoryDataset0, 10, 10, true, (CategoryItemRendererState) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      double[][] doubleArray0 = new double[8][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        ganttRenderer0.hitTest(0.0, 2.0F, graphics2D0, rectangle2D_Double0, combinedDomainCategoryPlot0, categoryAxis3D0, numberAxis3D0, defaultIntervalCategoryDataset0, 10, 8, true, categoryStepRenderer_State0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-983.00491));
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.hitTest(0.0, 0.0, (Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, (CategoryAxis) null, cyclicNumberAxis0, defaultStatisticalCategoryDataset0, 10, (-152), true, categoryItemRendererState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.getRangeAxis((CategoryPlot) null, (-2038));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      Number[][] numberArray0 = new Number[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getDomainAxisEdge();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.getItemMiddle(0.2, 0.2, defaultIntervalCategoryDataset0, categoryAxis3D0, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.getDomainAxis((CategoryPlot) null, defaultKeyedValues2DDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2300), 10);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.getDomainAxis(combinedRangeCategoryPlot0, slidingGanttCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Number[][] numberArray0 = new Number[4][2];
      Number[] numberArray1 = new Number[9];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        scatterRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 10, 10);
      // Undeclared exception!
      try { 
        lineRenderer3D0.findRangeBounds(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[8];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(3, 1837, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ValueMarker valueMarker0 = new ValueMarker(10, ganttRenderer0.DEFAULT_PAINT, ganttRenderer0.DEFAULT_STROKE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("", regularTimePeriod0, fixedMillisecond0);
      // Undeclared exception!
      try { 
        ganttRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, periodAxis0, valueMarker0, rectangle2D_Double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.392409281321E12) <= upper (1.39240928132E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.0, (double) groupedStackedBarRenderer0.ZERO, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DateAxis dateAxis0 = new DateAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_SHADOW_PAINT;
      // Undeclared exception!
      try { 
        scatterRenderer0.drawRangeLine(graphics2D0, combinedDomainCategoryPlot0, dateAxis0, rectangle2D_Float0, 1.0F, color0, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(1.0F, 1985.3, (-681.8187681069), (-681.8187681069), 2535.41864012956, (double) ganttRenderer0.ZERO);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        ganttRenderer0.drawOutline((Graphics2D) null, (CategoryPlot) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Locale locale0 = new Locale("");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", numberFormat0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultStatisticalCategoryDataset0, 10, 5, true, 3, 1.0F, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(4, 4, 4);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Locale locale0 = new Locale(",\"7:&:[Sehc0Aj");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator(",\"7:&:[Sehc0Aj", numberFormat0);
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawItemLabel(graphics2D0, plotOrientation0, defaultStatisticalCategoryDataset0, 4, 2729, true, 3782.21773187, 0.0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(305, 2470, 7);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Locale locale0 = new Locale("Null 'info' argument.");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", numberFormat0);
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawItemLabel(graphics2D0, plotOrientation0, defaultStatisticalCategoryDataset0, (-1), 3, false, 2470, 575.5122, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, compassPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 1, 10, 15, 1, 10, true, true, true, true, false, true, true);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1);
      CategoryMarker categoryMarker0 = new CategoryMarker(fixedMillisecond0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("ZOOM_IN_RANGE");
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.drawDomainMarker(graphics2D0, (CategoryPlot) null, categoryAxis3D0, categoryMarker0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(6, 6);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null, categoryAxis3D0.DEFAULT_AXIS_LINE_PAINT, categoryAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainMarker(graphics2D0, categoryPlot0, categoryAxis3D0, categoryMarker0, rectangle2D_Double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("v#", combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 60, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.drawBackground(graphics2D0, (CategoryPlot) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-111.839729331));
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1.0F, 0.05);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.drawAnnotations((Graphics2D) null, (Rectangle2D) null, (CategoryAxis) null, cyclicNumberAxis0, (Layer) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, 0.0);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, rectangle2D_Double0, (RectangleInsets) null, lengthAdjustmentType0, (RectangleAnchor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      // Undeclared exception!
      try { 
        lineRenderer3D0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, (Rectangle2D) null, combinedDomainCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity(standardEntityCollection0, combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, (CategoryDataset) null, (-4986), 10, true, 0.0, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = stackedAreaRenderer0.createState(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(entityCollection0, stackedAreaRenderer0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, (-2153), (-2153), false, 950.30699457, (-2432.3672266846224));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addEntity(standardEntityCollection0, stackedBarRenderer3D0.DEFAULT_SHAPE, (CategoryDataset) null, 3, (-1), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity((EntityCollection) null, groupedStackedBarRenderer0.DEFAULT_SHAPE, defaultKeyedValues2DDataset0, (-2323), (-1104), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", true, 2341.0753109);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Nuls 'strokc' argument.");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1716.7401022197, (-330.01445));
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 50);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.createHotSpotBounds((Graphics2D) null, rectangle0, combinedDomainCategoryPlot0, extendedCategoryAxis0, cyclicNumberAxis0, slidingGanttCategoryDataset0, 9, 15, false, (CategoryItemRendererState) null, (Rectangle2D) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("j/b.g,#<]+2Q\":L= ", statisticalBarRenderer0.ZERO, (double) statisticalBarRenderer0.ZERO, 3.0);
      Layer layer0 = Layer.FOREGROUND;
      statisticalBarRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, true);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      CategoryURLGenerator categoryURLGenerator0 = lineAndShapeRenderer0.getURLGenerator(1, 1, false);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getToolTipGenerator(10, (-1), false);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = scatterRenderer0.getSeriesToolTipGenerator(5);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0F, 960.3292549, (double) ganttRenderer0.ZERO, 1677.0160051);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = ganttRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.createHotSpotBounds(graphics2D0, rectangle2D_Double0, categoryPlot0, (CategoryAxis) null, numberAxis3D0, defaultKeyedValues2DDataset0, 1706, (-3458), false, categoryItemRendererState0, rectangle2D_Double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      scatterRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, spiderWebPlot0.DEFAULT_LEGEND_ITEM_BOX, defaultKeyedValues2DDataset0, 10, 1, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = stackedAreaRenderer0.createState(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(entityCollection0, stackedAreaRenderer0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, 3, 9, false, (-2232.14152), (-2153));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultKeyedValues2DDataset0, 71, (-1932), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      lineRenderer3D0.setPlot(combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.getLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LegendItemCollection legendItemCollection0 = lineRenderer3D0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, 12.0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, extendedCategoryAxis0, cyclicNumberAxis0, stackedBarRenderer3D0);
      ValueAxis valueAxis0 = stackedBarRenderer3D0.getRangeAxis(categoryPlot0, 1416);
      assertEquals(0.05, valueAxis0.getUpperMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      ValueAxis valueAxis0 = lineRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      statisticalLineAndShapeRenderer0.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertTrue(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedAreaRenderer0.getLegendItemLabelGenerator();
      stackedAreaRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertEquals(0, stackedAreaRenderer1.getRowCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertEquals(3, statisticalLineAndShapeRenderer1.getDefaultEntityRadius());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      Object object0 = stackedAreaRenderer0.clone();
      assertTrue(object0.equals((Object)stackedAreaRenderer0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("y[Nd", categoryPlot0);
      MockDate mockDate0 = new MockDate(500);
      TimeZone timeZone0 = TimeZone.getTimeZone("|TC Y`'p_-.`");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      Second second0 = new Second(15, minute0);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", second0, 0.05, 2410.42);
      Layer layer0 = Layer.BACKGROUND;
      statisticalLineAndShapeRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(680, 1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      // Undeclared exception!
      jFreeChart0.createBufferedImage(4140, 1963);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 895);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawItemLabel(graphics2D0, plotOrientation0, (CategoryDataset) null, 2, (-1), false, 2111.590841368, 0.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) groupedStackedBarRenderer0.ZERO, (double) groupedStackedBarRenderer0.ZERO);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(48.04904586, 48.04904586);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      stackedBarRenderer3D0.drawItemLabel((Graphics2D) null, plotOrientation0, (CategoryDataset) null, 10, 109, false, 5.0E-9, 180.0, true);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.updateCrosshairValues(categoryCrosshairState0, 500, 10, 2.0F, 500, 0.05, 0.05, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.updateCrosshairValues(categoryCrosshairState0, true, true, 0.2, (-2768), 2.0, (-2023.1344420514), (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis3D0, numberAxis3D0, statisticalLineAndShapeRenderer0);
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      statisticalLineAndShapeRenderer0.updateCrosshairValues((CategoryCrosshairState) null, 1.0F, true, 3264.0182, 10, 0.0F, 500, plotOrientation0);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0, 1967.3635375, "");
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(cyclicNumberAxis0.DEFAULT_TICK_UNIT, (-591.0), true, 2.0F, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT, ganttRenderer0.DEFAULT_OUTLINE_STROKE);
      ganttRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", 0.2, 3957.6);
      Layer layer0 = Layer.BACKGROUND;
      intervalBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("org.jfree.chart.util.PaintList");
      ganttRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("");
      ganttRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, false);
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      ganttRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      GanttRenderer ganttRenderer1 = new GanttRenderer();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      ganttRenderer1.setSeriesToolTipGenerator(3956, (CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, false);
      boolean boolean0 = ganttRenderer1.equals(ganttRenderer0);
      assertTrue(ganttRenderer0.equals((Object)ganttRenderer1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 151, 151);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingCategoryDataset0, tableOrder0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      ganttRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0);
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", dateFormat0);
      intervalBarRenderer0.setSeriesItemLabelGenerator(86, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem(10, 768);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("UfM ");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      combinedDomainCategoryPlot0.setRenderer(1, (CategoryItemRenderer) minMaxCategoryRenderer0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getLegendItem(5, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 10, (double) scatterRenderer0.ZERO, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-3181.38), 0.0F);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedBarRenderer3D0.calculateRangeMarkerTextAnchorPoint(graphics2D0, (PlotOrientation) null, rectangle2D_Float0, rectangle2D_Float0, multiplePiePlot0.DEFAULT_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(0.0F, 1.0F, 300, 1121.49F, (-4025.0354F), 0.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.5F);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      BorderArrangement borderArrangement0 = new BorderArrangement();
      LegendTitle legendTitle0 = new LegendTitle(polarPlot0, borderArrangement0, borderArrangement0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicLocation();
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedBarRenderer3D0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle2D0, rectangle2D_Double0, categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Rectangle rectangle0 = new Rectangle();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      PiePlot piePlot0 = new PiePlot(jDBCPieDataset0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle0, rectangle0, piePlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      GeneralPath generalPath0 = new GeneralPath(stackedBarRenderer3D0.DEFAULT_SHAPE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Rectangle rectangle0 = generalPath0.getBounds();
      RectangleInsets rectangleInsets0 = new RectangleInsets((double) lineRenderer3D0.ZERO, (-3.0F), 8.0, (-1588.403956544));
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      Point2D.Double point2D_Double0 = (Point2D.Double)lineRenderer3D0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, rectangle0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals((-6.0), point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 2.0F);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(5, 500, 5);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      short[] shortArray0 = new short[7];
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(10, shortArray0);
      JFreeChart jFreeChart0 = new JFreeChart("AxisLabelEntity: ", categoryPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      Rectangle2D rectangle2D0 = lookupOp0.getBounds2D(bufferedImage0);
      ganttRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, numberAxis3D0, intervalMarker0, rectangle2D0);
      assertEquals(1, ganttRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0E-8, 0.05, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(500, 3, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ganttRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, numberAxis3D0, intervalMarker0, rectangle2D0);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      IntervalMarker intervalMarker0 = new IntervalMarker((-2814.996), 0.05);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      ganttRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, intervalMarker0, rectangle2D0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(".x", combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2089, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 1.0);
      IntervalMarker intervalMarker0 = new IntervalMarker(15, 0.0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      lineRenderer3D0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, intervalMarker0, rectangle0);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      NumberAxis numberAxis0 = new NumberAxis();
      IntervalMarker intervalMarker0 = new IntervalMarker((double) statisticalLineAndShapeRenderer0.ZERO, 1020.61404334739);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("Base tool tip generator not cloneable.", ganttRenderer0.DEFAULT_VALUE_LABEL_FONT, multiplePiePlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 3163, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        ganttRenderer0.drawRangeMarker(graphics2D0, (CategoryPlot) null, numberAxis0, intervalMarker0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ValueMarker valueMarker0 = new ValueMarker(0.0, statisticalLineAndShapeRenderer0.DEFAULT_PAINT, statisticalLineAndShapeRenderer0.DEFAULT_STROKE);
      valueMarker0.setLabel("Null 'annotation' argument.");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ganttRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, numberAxis3D0, valueMarker0, rectangle2D_Double0);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ValueMarker valueMarker0 = new ValueMarker((-2049.3));
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ganttRenderer0.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, numberAxis3D0, valueMarker0, (Rectangle2D) null);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(13, 500, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0E-8, categoryPlot0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_OUTLINE_STROKE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ganttRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, numberAxis3D0, valueMarker0, rectangle2D_Double0);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(22, 768, 2490.50876, 0.0, chartRenderingInfo0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0.0F, groupedStackedBarRenderer0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      statisticalLineAndShapeRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, numberAxis3D0, categoryMarker0, rectangle2D0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryMarker categoryMarker0 = new CategoryMarker(statisticalLineAndShapeRenderer0.ZERO, jFreeChart0.DEFAULT_BACKGROUND_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      categoryMarker0.setLabel("iaR7:3%% V7+3Qd");
      defaultStatisticalCategoryDataset0.add((Number) 300, (Number) 0.2, (Comparable) 0.2, (Comparable) groupedStackedBarRenderer0.ZERO);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      statisticalLineAndShapeRenderer0.drawDomainMarker(graphics2D0, categoryPlot0, categoryAxis3D0, categoryMarker0, rectangle2D_Double0);
      assertEquals(315.21, numberAxis3D0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)statisticalLineAndShapeRenderer0.lookupSeriesShape(10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 300, 7.2E7, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CategoryMarker categoryMarker0 = new CategoryMarker(statisticalLineAndShapeRenderer0.ZERO, jFreeChart0.DEFAULT_BACKGROUND_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      statisticalLineAndShapeRenderer0.drawDomainMarker(graphics2D0, categoryPlot0, categoryAxis3D0, categoryMarker0, rectangle2D_Double0);
      assertEquals(1, categoryPlot0.getRendererCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 300, 7.2E7, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CategoryMarker categoryMarker0 = new CategoryMarker(statisticalLineAndShapeRenderer0.ZERO, jFreeChart0.DEFAULT_BACKGROUND_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      defaultStatisticalCategoryDataset0.add((Number) 420, (Number) 0.2, (Comparable) 0.2, (Comparable) groupedStackedBarRenderer0.ZERO);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      statisticalLineAndShapeRenderer0.drawDomainMarker(graphics2D0, categoryPlot0, categoryAxis3D0, categoryMarker0, rectangle2D_Double0);
      assertEquals(441.21, numberAxis3D0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 10, (double) scatterRenderer0.ZERO, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DateAxis dateAxis0 = new DateAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      scatterRenderer0.drawRangeLine(graphics2D0, combinedDomainCategoryPlot0, dateAxis0, rectangle2D_Float0, (-2259.0), boxAndWhiskerRenderer0.DEFAULT_PAINT, dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawRangeLine((Graphics2D) null, categoryPlot0, numberAxis3D0, rectangle2D_Float0, 1.0E-8, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        areaRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D0, 1.0, stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.drawDomainLine((Graphics2D) null, (CategoryPlot) null, defaultCaret0, 0.5235987755982988, (Paint) null, stackedBarRenderer3D0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) groupedStackedBarRenderer0.ZERO, (double) groupedStackedBarRenderer0.ZERO);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, defaultCaret0, 0.2, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, stackedBarRenderer3D0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      statisticalLineAndShapeRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Range range0 = scatterRenderer0.findRangeBounds((CategoryDataset) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, defaultStatisticalCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, defaultCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis3D0, numberAxis3D0, statisticalLineAndShapeRenderer0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, categoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)statisticalLineAndShapeRenderer0.lookupSeriesShape(10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 300, 7.2E7, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      defaultStatisticalCategoryDataset0.add((Number) 15, (Number) 1024, (Comparable) 0.05, (Comparable) "ZOOM_RANGE_BOTH");
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.initialise(graphics2D0, rectangle2D_Double0, categoryPlot0, defaultStatisticalCategoryDataset0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("nC-7z", "{8QWNxbMqB*i`", "nC-7z");
      intervalBarRenderer0.setSeriesURLGenerator(360, (CategoryURLGenerator) standardCategoryURLGenerator0, true);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setSeriesURLGenerator(5, (CategoryURLGenerator) null, false);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("", dateFormat0);
      statisticalBarRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, true);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("lV\"pSxVV/ ]7RZ*6Wzc", numberFormat0, numberFormat0);
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertTrue(statisticalLineAndShapeRenderer1.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setSeriesItemLabelGenerator(94, (CategoryItemLabelGenerator) null, false);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesURLGenerator((-306), (CategoryURLGenerator) standardCategoryURLGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = groupedStackedBarRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = intervalBarRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 10, (double) scatterRenderer0.ZERO, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DateAxis dateAxis0 = new DateAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotShape(graphics2D0, rectangle2D_Float0, combinedDomainCategoryPlot0, categoryAxis3D0, dateAxis0, (CategoryDataset) null, 15, 10, false, categoryStepRenderer_State0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0, 1.0F);
      int int0 = stackedBarRenderer3D0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.setSeriesToolTipGenerator((-3561), (CategoryToolTipGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      groupedStackedBarRenderer0.drawBackground(graphics2D0, categoryPlot0, rectangle2D_Double0);
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getSeriesItemLabelGenerator(500);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalLineAndShapeRenderer0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.removeAnnotations();
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      try { 
        statisticalLineAndShapeRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = groupedStackedBarRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      double[][] doubleArray0 = new double[2][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        intervalBarRenderer0.addEntity(standardEntityCollection0, ganttRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 2232, 86, false, 563.83060456, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ganttRenderer0.drawOutline(graphics2D0, categoryPlot0, rectangle2D0);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      stackedBarRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      Month month0 = new Month(6, 6);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.getItemMiddle(month0, month0, defaultBoxAndWhiskerCategoryDataset0, (CategoryAxis) null, rectangle2D_Float0, (RectangleEdge) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = scatterRenderer0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      int int0 = levelRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      intervalBarRenderer0.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = intervalBarRenderer0.getLegendItemLabelGenerator();
      intervalBarRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      double[][] doubleArray0 = new double[5][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = lineRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("", dateFormat0);
      statisticalBarRenderer0.setSeriesItemLabelGenerator(15, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)statisticalBarRenderer0.getItemLabelGenerator(15, 10, false);
      assertEquals("", intervalCategoryItemLabelGenerator1.getLabelFormat());
  }
}
