/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 15:36:15 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.JInternalFrame;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.border.BevelBorder;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.Crosshair;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("vWd3g*}$y8=<-");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      defaultCategoryItemRenderer0.setPlot(combinedDomainCategoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 362, (-1));
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addEntity(standardEntityCollection0, (Shape) null, slidingGanttCategoryDataset0, (-1), (-1456), false, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, (-1031.94656974));
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, numberAxis3D0, barRenderer3D0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      barRenderer3D0.updateCrosshairValues(categoryCrosshairState0, numberTickUnit0, numberTickUnit0, 1, 1, (-909.0), 703.5339477, plotOrientation0);
      assertTrue(barRenderer3D0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, (-6.464286753686098));
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("LXO(wW^`(74m6;~%MY");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, "LXO(wW^`(74m6;~%MY");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, cyclicNumberAxis0, barRenderer3D0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("v^]Ow|mA&G-ha~6.+_j", false, false, true);
      Rectangle rectangle1 = jInternalFrame0.getNormalBounds();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 0, categoryPlot0.DEFAULT_OUTLINE_PAINT);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      Point2D.Double point2D_Double0 = (Point2D.Double)barRenderer3D0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, rectangle1, fastScatterPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals((-8.0), point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, (-6.464286753686098));
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("LXO(wW^`(74m6;~%MY");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, "LXO(wW^`(74m6;~%MY");
      JInternalFrame jInternalFrame0 = new JInternalFrame("v^]Ow|mA&G-ha~6.+_j", false, false, true);
      Rectangle rectangle1 = jInternalFrame0.getNormalBounds();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      IntervalMarker intervalMarker0 = new IntervalMarker(1672.43699, (-1024.83), extendedCategoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      Point2D.Double point2D_Double0 = (Point2D.Double)barRenderer3D0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle1, rectangle0, cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("e", 0.2, (double) levelRenderer0.ZERO, 0.2);
      Layer layer0 = Layer.BACKGROUND;
      levelRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      boolean boolean0 = levelRenderer0.removeAnnotation(categoryPointerAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 9, 3684);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      Rectangle rectangle0 = new Rectangle(3684, 3684);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge((-1060));
      double double0 = ganttRenderer0.getItemMiddle(0.2, levelRenderer0.ZERO, slidingGanttCategoryDataset0, categoryAxis3D0, rectangle0, rectangleEdge0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = chartPanel0.getBounds();
      ganttRenderer0.drawOutline(graphics2D0, categoryPlot0, rectangle0);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("]@k(]Sg-?}0,%e\"", combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, 1000.0, 3003.16709506, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      scatterRenderer0.drawBackground(graphics2D0, combinedRangeCategoryPlot0, rectangle2D0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[9];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      barRenderer0.addEntity(standardEntityCollection0, rectangle2D0, defaultIntervalCategoryDataset0, 3, 3, false, 3.0, 0.2);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      Layer layer0 = Layer.FOREGROUND;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      lineAndShapeRenderer0.drawAnnotations((Graphics2D) null, (Rectangle2D) null, categoryAxis3D0, numberAxis3D0, layer0, plotRenderingInfo0);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      levelRenderer0.addEntity(standardEntityCollection0, rectangle0, defaultIntervalCategoryDataset0, 0, 0, true);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.initialise((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, defaultCategoryDataset0, (PlotRenderingInfo) null);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = groupedStackedBarRenderer0.getSeriesURLGenerator(1);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = scatterRenderer0.getSeriesItemLabelGenerator(1);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("$gqK4");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, numberAxis3D0, stackedBarRenderer3D0);
      stackedBarRenderer3D0.initialise((Graphics2D) null, defaultCaret0, categoryPlot0, defaultIntervalCategoryDataset0, (PlotRenderingInfo) null);
      int int0 = stackedBarRenderer3D0.getRowCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(".B?Tmxrl~>Vv!k)V#");
      logarithmicAxis0.setUpperBound(0.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logarithmicAxis0);
      LogarithmicAxis logarithmicAxis1 = (LogarithmicAxis)levelRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 4);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, 0.0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(8.0, 855.9006, "org.jfree.chart.renderer.category.GanttRenderer");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)barRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, 10);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryPlot categoryPlot0 = ganttRenderer0.getPlot();
      assertNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("LXO(wW^`(74m6;~%MY");
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, extendedCategoryAxis0, numberAxis0, categoryStepRenderer0);
      CategoryPlot categoryPlot1 = categoryStepRenderer0.getPlot();
      assertEquals(1, categoryPlot1.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator(".png", dateFormat0);
      ganttRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = ganttRenderer0.getItemLabelGenerator((-3512), 84, false);
      assertSame(categoryItemLabelGenerator0, standardCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DrawingSupplier drawingSupplier0 = boxAndWhiskerRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      double[][] doubleArray0 = new double[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, numberAxis3D0, barRenderer3D0);
      DrawingSupplier drawingSupplier0 = barRenderer3D0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis categoryAxis0 = statisticalLineAndShapeRenderer0.getDomainAxis(combinedRangeCategoryPlot0, (CategoryDataset) null);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      double[][] doubleArray0 = new double[20][4];
      categoryAxis0.setMinorTickMarkOutsideLength((-716.0F));
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, numberAxis3D0, barRenderer3D0);
      barRenderer3D0.getDomainAxis(categoryPlot0, defaultIntervalCategoryDataset0);
      assertEquals((-5.0E-9), numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(5.0E-9, numberAxis3D0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      double[][] doubleArray0 = new double[20][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      categoryAxis0.setLabelAngle(2.0F);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, numberAxis3D0, barRenderer3D0);
      barRenderer3D0.getDomainAxis(categoryPlot0, defaultIntervalCategoryDataset0);
      assertEquals((-5.0E-9), numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(5.0E-9, numberAxis3D0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = groupedStackedBarRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)statisticalLineAndShapeRenderer0.getBaseItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Range range0 = levelRenderer0.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      double[][] doubleArray0 = new double[20][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = barRenderer3D0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[3] = 0.05;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = lineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0.025, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, 0.0);
      Range range0 = barRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Number[][] numberArray0 = new Number[2][8];
      Number[] numberArray1 = new Number[4];
      numberArray1[1] = (Number) 0.2;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = ganttRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.2, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Number[][] numberArray0 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = stackedBarRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      Range range0 = stackedBarRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(1.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1540.216146424968);
      doubleArray0[3] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = defaultCategoryItemRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals((-1540.216146424968), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = statisticalLineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      boolean boolean0 = defaultCategoryItemRenderer0.equals(levelRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("$gqK4");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, numberAxis3D0, stackedBarRenderer3D0);
      stackedBarRenderer3D0.initialise((Graphics2D) null, defaultCaret0, categoryPlot0, defaultIntervalCategoryDataset0, (PlotRenderingInfo) null);
      CategoryItemRendererState categoryItemRendererState0 = stackedBarRenderer3D0.createState((PlotRenderingInfo) null);
      assertEquals(1, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2, 1, 28, (-1), 2, (-1), true, false, true, true, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryItemRendererState categoryItemRendererState0 = stackedBarRenderer3D0.createState((PlotRenderingInfo) null);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, (double) levelRenderer0.ZERO);
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) defaultCategoryItemRenderer0.ZERO, 0, (String) null);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, extendedCategoryAxis0, cyclicNumberAxis0, defaultCategoryItemRenderer0);
      CategoryItemRendererState categoryItemRendererState0 = defaultCategoryItemRenderer0.initialise((Graphics2D) null, rectangle0, categoryPlot0, defaultStatisticalCategoryDataset0, (PlotRenderingInfo) null);
      Rectangle2D rectangle2D0 = stackedBarRenderer3D0.createHotSpotBounds((Graphics2D) null, rectangle0, categoryPlot0, extendedCategoryAxis0, cyclicNumberAxis0, defaultStatisticalCategoryDataset0, 500, 186, true, categoryItemRendererState0, rectangle0);
      assertNull(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = (BoxAndWhiskerRenderer)boxAndWhiskerRenderer0.clone();
      assertFalse(boxAndWhiskerRenderer1.isMeanVisible());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, 0.0);
      // Undeclared exception!
      try { 
        barRenderer3D0.setSeriesURLGenerator((-1394), (CategoryURLGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(statisticalLineAndShapeRenderer0.DEFAULT_VALUE_LABEL_PAINT, ganttRenderer0.DEFAULT_PAINT, statisticalLineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT, lineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("t`+NECXp");
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.setSeriesURLGenerator((-21), (CategoryURLGenerator) standardCategoryURLGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesToolTipGenerator((-1), (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesToolTipGenerator((-1676), (CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateFormat dateFormat0 = DateFormat.getInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("}u", dateFormat0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.setSeriesItemLabelGenerator((-1), (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.setSeriesItemLabelGenerator((-311), (CategoryItemLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2266), (-2266));
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      NumberAxis numberAxis0 = new NumberAxis("CategoryLabelWidthType.RANGE");
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingGanttCategoryDataset0, extendedCategoryAxis0, numberAxis0, barRenderer3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        barRenderer3D0.initialise((Graphics2D) null, rectangle0, categoryPlot0, slidingGanttCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, defaultMultiValueCategoryDataset0, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("+<9?[QQ");
      NumberAxis numberAxis0 = new NumberAxis();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1.0F, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.hitTest(768, (double) defaultCategoryItemRenderer0.ZERO, graphics2D0, rectangle2D_Float0, combinedRangeCategoryPlot0, extendedCategoryAxis0, numberAxis0, taskSeriesCollection0, 200, 10, false, categoryStepRenderer_State0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 200, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-7.66016752810261), (-7.66016752810261));
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("LXO(wW^`(74m6;~%MY");
      NumberAxis numberAxis0 = new NumberAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, numberAxis0, barRenderer3D0);
      CategoryItemRendererState categoryItemRendererState0 = barRenderer3D0.initialise((Graphics2D) null, rectangle0, categoryPlot0, defaultIntervalCategoryDataset0, (PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        barRenderer3D0.hitTest(373.92979944, 0.0F, (Graphics2D) null, rectangle0, categoryPlot0, extendedCategoryAxis0, numberAxis0, defaultIntervalCategoryDataset0, 4, 16, false, categoryItemRendererState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("z&dtOvAsS}4MdPymy");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("z&dtOvAsS}4MdPymy");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, numberAxis3D0, stackedBarRenderer3D0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.hitTest(0.05, 10, (Graphics2D) null, defaultCaret0, categoryPlot0, extendedCategoryAxis0, numberAxis3D0, defaultIntervalCategoryDataset0, (-4458), (-3581), true, categoryItemRendererState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3581
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.getRangeAxis((CategoryPlot) null, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 9, 3713);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge((-1060));
      // Undeclared exception!
      try { 
        ganttRenderer0.getItemMiddle(0.2, levelRenderer0.ZERO, slidingGanttCategoryDataset0, categoryAxis3D0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      // Undeclared exception!
      try { 
        intervalBarRenderer0.getDomainAxis((CategoryPlot) null, defaultBoxAndWhiskerCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getDomainAxis(categoryPlot0, defaultBoxAndWhiskerCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-3), 158);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[5];
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        levelRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(1620.564039374558, 0.0);
      // Undeclared exception!
      try { 
        barRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      Number[][] numberArray0 = new Number[8][5];
      Number[] numberArray1 = new Number[1];
      numberArray0[1] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        barRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 10, (-1370.3358F), 10);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, valueAxis0, rectangle2D_Float0, 0.0, lineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT, lineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0);
      RectangleInsets rectangleInsets0 = intervalMarker0.getLabelOffset();
      Rectangle rectangle0 = new Rectangle();
      Rectangle2D rectangle2D0 = rectangleInsets0.createOutsetRectangle((Rectangle2D) rectangle0, true, false);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.drawOutline((Graphics2D) null, (CategoryPlot) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryMarker categoryMarker0 = new CategoryMarker(statisticalBarRenderer0.ZERO, lineAndShapeRenderer0.DEFAULT_PAINT, categoryPlot0.DEFAULT_GRIDLINE_STROKE);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.drawDomainMarker((Graphics2D) null, (CategoryPlot) null, categoryAxis0, categoryMarker0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'hotspot' argument.");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, numberAxis3D0, defaultCategoryItemRenderer0);
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, categoryAxis3D0, categoryMarker0, rectangle2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D_Float0, 0.0, dateAxis0.DEFAULT_TICK_MARK_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(52, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawBackground(graphics2D0, combinedDomainCategoryPlot0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1.0F);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, categoryAxis0, cyclicNumberAxis0, (CategoryDataset) null, (-1959), 8, true, (CategoryItemRendererState) null, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      BevelBorder bevelBorder0 = new BevelBorder(2012);
      JRadioButton jRadioButton0 = new JRadioButton();
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) jRadioButton0, (-312), 10, 10, 10);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds((Graphics2D) null, rectangle0, combinedDomainCategoryPlot0, categoryAxis0, dateAxis0, jDBCCategoryDataset0, 0, 2012, false, (CategoryItemRendererState) null, rectangle0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2012, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", 12.0, 8.0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(ganttRenderer0.DEFAULT_PAINT, categoryTextAnnotation0.DEFAULT_PAINT, stackedBarRenderer3D0.DEFAULT_WALL_PAINT, stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      IntervalMarker intervalMarker0 = new IntervalMarker(1723.904, 0.05, waterfallBarRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      // Undeclared exception!
      try { 
        levelRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, dateAxis0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultCategoryDataset0, tableOrder0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        levelRenderer0.addEntity(standardEntityCollection0, spiderWebPlot0.DEFAULT_LEGEND_ITEM_BOX, defaultCategoryDataset0, 4322, 10, true, 1.0F, (-387.84725877));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4322, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, 0.0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity(standardEntityCollection0, barRenderer3D0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, (-1), 1, false, 2.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      GeneralPath generalPath0 = new GeneralPath();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.addEntity((EntityCollection) null, generalPath0, defaultIntervalCategoryDataset0, 0, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.addEntity(standardEntityCollection0, rectangle2D0, defaultCategoryDataset0, 10, 10, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", false, 500, 1.0F);
      // Undeclared exception!
      try { 
        levelRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(0.0, 0.0);
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("LXO(wW^`(74m6;~%MY");
      NumberAxis numberAxis0 = new NumberAxis("LXO(wW^`(74m6;~%MY");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, numberAxis0, barRenderer3D0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds((Graphics2D) null, rectangle0, categoryPlot0, extendedCategoryAxis0, numberAxis0, defaultIntervalCategoryDataset0, 0, 500, false, (CategoryItemRendererState) null, (Rectangle2D) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 500
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, true);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.setSeriesURLGenerator(424, (CategoryURLGenerator) null, true);
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer3D0.getURLGenerator(213, 213, false);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, true);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      stackedBarRenderer0.setSeriesToolTipGenerator(5, (CategoryToolTipGenerator) null, true);
      assertEquals(0, stackedBarRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getToolTipGenerator(0, 0, false);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("orsI/!cLEt)3!Kk", dateFormat0);
      levelRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DateFormat dateFormat0 = DateFormat.getInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("Can't evaluate the week.", dateFormat0);
      statisticalBarRenderer0.setSeriesItemLabelGenerator(3, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = ganttRenderer0.getItemLabelGenerator((-3512), 84, false);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = layeredBarRenderer0.getSeriesToolTipGenerator(1293);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("+<9?[QQ");
      NumberAxis numberAxis0 = new NumberAxis();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(82, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryItemRendererState categoryItemRendererState0 = defaultCategoryItemRenderer0.initialise(graphics2D0, rectangle2D_Float0, combinedRangeCategoryPlot0, taskSeriesCollection0, (PlotRenderingInfo) null);
      boolean boolean0 = barRenderer3D0.hitTest(768, 530.0, graphics2D0, rectangle2D_Float0, combinedRangeCategoryPlot0, extendedCategoryAxis0, numberAxis0, taskSeriesCollection0, 17, 3, false, categoryItemRendererState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      NumberAxis numberAxis0 = new NumberAxis();
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds((Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, categoryAxis0, numberAxis0, defaultIntervalCategoryDataset0, 717, 0, true, (CategoryItemRendererState) null, defaultCaret0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      statisticalLineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(3802.9F, (-173.0F), 3241.283F, (-2998.1F), 2704.6926F, 0.0F);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, roundRectangle2D_Float0, taskSeriesCollection0, (-1973), (-2438), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("vWd3g*}$y8=<-");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      defaultCategoryItemRenderer0.setPlot(combinedDomainCategoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-473), 10);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addEntity(standardEntityCollection0, (Shape) null, slidingGanttCategoryDataset0, (-512), 18, false, 4.0, (-473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 9, 863);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.addEntity(standardEntityCollection0, (Shape) null, slidingGanttCategoryDataset0, (-1443), (-1), true, 0.0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        levelRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultCategoryDataset0, (-2144), (-1340), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("vWd3g*}$y8=<-");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      defaultCategoryItemRenderer0.setPlot(combinedDomainCategoryPlot0);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.getLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItemCollection legendItemCollection0 = minMaxCategoryRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("5Ha!)");
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis("5Ha!)", stringArray0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, extendedCategoryAxis0, symbolAxis0, stackedBarRenderer3D0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      ValueAxis valueAxis0 = lineRenderer3D0.getRangeAxis(categoryPlot0, (-2052));
      assertEquals(0.0, valueAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueAxis valueAxis0 = statisticalBarRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      assertNull(valueAxis0.getLabelURL());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      Object object0 = statisticalLineAndShapeRenderer0.clone();
      assertTrue(object0.equals((Object)statisticalLineAndShapeRenderer0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertTrue(statisticalLineAndShapeRenderer1.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis0, numberAxis3D0, lineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("FcnP@USH/D~", 15, 0.2);
      Layer layer0 = Layer.FOREGROUND;
      lineAndShapeRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(730, 500, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      // Undeclared exception!
      try { 
        scatterRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, jDBCCategoryDataset0, 500, 10, true, 0.05, 1.0E-8, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      double[][] doubleArray0 = new double[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, numberAxis3D0, barRenderer3D0);
      barRenderer3D0.updateCrosshairValues(categoryCrosshairState0, true, true, 1.0F, 1, 3455.38384381802, 1.0F, plotOrientation0);
      assertEquals(0, barRenderer3D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(454.6779, 454.6779);
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultTableXYDataset0, numberAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      barRenderer3D0.updateCrosshairValues((CategoryCrosshairState) null, 10, true, 1.0F, (-3319), 1712.232511732, 0.0, plotOrientation0);
      assertTrue(barRenderer3D0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.updateCrosshairValues(categoryCrosshairState0, 1.0F, 10, (-30.0), 10, 10, (double) minMaxCategoryRenderer0.ZERO, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        barRenderer3D0.updateCrosshairValues(categoryCrosshairState0, true, true, 1.0F, 1, 3455.38384381802, 1.0F, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)lineAndShapeRenderer0.lookupLegendShape(0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      double[][] doubleArray0 = new double[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("wAeQnmV[");
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.getItemMiddle(8.0, 0.5F, defaultIntervalCategoryDataset0, subCategoryAxis0, rectangle2D_Double0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(statisticalLineAndShapeRenderer0.ZERO, (-1.0), statisticalLineAndShapeRenderer0.ZERO, (double) lineAndShapeRenderer0.ZERO, lineAndShapeRenderer0.DEFAULT_PAINT, lineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      statisticalLineAndShapeRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      statisticalLineAndShapeRenderer0.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalLineAndShapeRenderer0.getLegendItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("u[<{#[");
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("Y<ZKV0oeq}'0MQ", "Y<ZKV0oeq}'0MQ", "R");
      lineAndShapeRenderer0.setSeriesURLGenerator(2357, (CategoryURLGenerator) standardCategoryURLGenerator0);
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("n)f%", decimalFormatSymbols0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("v", decimalFormat0);
      lineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[6];
      categoryItemRendererArray0[0] = (CategoryItemRenderer) minMaxCategoryRenderer0;
      combinedRangeCategoryPlot0.setRenderers(categoryItemRendererArray0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getLegendItem((byte)0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("CategoryAnchor.END", combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(249, 6);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 10, (-2515.494F));
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, (PlotOrientation) null, rectangle2D_Float0, rectangle2D_Float0, combinedDomainCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Rectangle2D rectangle2D0 = rectangle0.getFrame();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      JFreeChart jFreeChart0 = new JFreeChart(polarPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend(0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicAnchor();
      Point2D.Double point2D_Double0 = (Point2D.Double)levelRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, rectangle0, polarPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      Rectangle rectangle0 = new Rectangle();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      IntervalMarker intervalMarker0 = new IntervalMarker(0, 3.0, stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT);
      RectangleAnchor rectangleAnchor0 = intervalMarker0.getLabelAnchor();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle0, rectangle0, (RectangleInsets) null, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("vWd3g*}$y8=<-");
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 41, 2201, (-1), (-1), 0, 34, true, true, true, false, false, true, true);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Crosshair crosshair0 = new Crosshair();
      RectangleAnchor rectangleAnchor0 = crosshair0.getLabelAnchor();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, subCategoryAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2331.984, 1399.63426);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1353, 791);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_FONT, spiderWebPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      LogAxis logAxis0 = new LogAxis("");
      IntervalMarker intervalMarker0 = new IntervalMarker(2800.98746839, 2161.3674);
      ganttRenderer0.drawRangeMarker(graphics2D0, (CategoryPlot) null, logAxis0, intervalMarker0, (Rectangle2D) null);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("wAeQnmV[", lineAndShapeRenderer0.DEFAULT_VALUE_LABEL_FONT, polarPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("wAeQnmV[");
      CategoryMarker categoryMarker0 = new CategoryMarker(10, ganttRenderer0.DEFAULT_VALUE_LABEL_PAINT, stackedBarRenderer3D0.DEFAULT_STROKE);
      ganttRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, categoryMarker0, (Rectangle2D) null);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 300, (double) 0.0F, (double) 2.0F, chartRenderingInfo0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ValueMarker valueMarker0 = new ValueMarker(0.0F);
      valueMarker0.setLabel("org.jfree.chart.renderer.category.StackedAreaRenderer");
      ganttRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, valueMarker0, rectangle2D_Float0);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ValueMarker valueMarker0 = new ValueMarker(3.0);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("6iy", zoneInfo0);
      ganttRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, dateAxis0, valueMarker0, (Rectangle2D) null);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 10, chartRenderingInfo0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      ValueMarker valueMarker0 = new ValueMarker(2.5E-5, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      ganttRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, valueMarker0, rectangle2D_Float0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(476.753, 0.5);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1520.69708104), 40.52843, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      JFreeChart jFreeChart0 = new JFreeChart("RectangleAnchor.TOP", combinedRangeCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 3.0, (double) 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        ganttRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, intervalMarker0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, numberAxis3D0, lineAndShapeRenderer0);
      CategoryMarker categoryMarker0 = new CategoryMarker(barRenderer0.ZERO);
      lineAndShapeRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, categoryAxis3D0, categoryMarker0, (Rectangle2D) null);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.drawRangeLine(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, rectangle2D_Float0, 2.0, defaultCategoryItemRenderer0.DEFAULT_VALUE_LABEL_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(7, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      levelRenderer0.drawDomainLine(graphics2D0, combinedRangeCategoryPlot0, rectangle2D_Float0, 0.0, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 1.0F, 10, 10);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Stroke stroke0 = levelRenderer0.getBaseOutlineStroke();
      // Undeclared exception!
      try { 
        levelRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D_Float0, (-2144.992559781108), (Paint) null, stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-2735.527F), 1.0F, (-2735.527F), (-495.12476F));
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D_Float0, 5.0E-9, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      DateAxis dateAxis0 = new DateAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis3D0, dateAxis0, statisticalLineAndShapeRenderer0);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.7976931348623157E308), "Null 'plot' argument.");
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis3D0, cyclicNumberAxis0, statisticalLineAndShapeRenderer0);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(454.6779, 454.6779);
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      NumberAxis numberAxis0 = new NumberAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, (CategoryAxis) null, numberAxis0, barRenderer3D0);
      CategoryItemRendererState categoryItemRendererState0 = barRenderer3D0.initialise((Graphics2D) null, rectangle0, categoryPlot0, (CategoryDataset) null, (PlotRenderingInfo) null);
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("$gqK4");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, numberAxis3D0, stackedBarRenderer3D0);
      stackedBarRenderer3D0.initialise((Graphics2D) null, defaultCaret0, categoryPlot0, defaultIntervalCategoryDataset0, (PlotRenderingInfo) null);
      int int0 = stackedBarRenderer3D0.getColumnCount();
      assertEquals(8, stackedBarRenderer3D0.getRowCount());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("ik~;0AZ<rFB");
      lineAndShapeRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("/{n3 |<Qeey=V;7G");
      statisticalBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, false);
      try { 
        statisticalBarRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setSeriesURLGenerator(8, (CategoryURLGenerator) null, false);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      lineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("I#OWGs)L#", mockSimpleDateFormat0);
      lineAndShapeRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertTrue(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("org.jfree.data.time.DateRange", numberFormat0);
      lineAndShapeRenderer0.setSeriesItemLabelGenerator(11, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DateFormat dateFormat0 = DateFormat.getInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("", dateFormat0);
      statisticalBarRenderer0.setSeriesItemLabelGenerator(4142, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, jDBCCategoryDataset0, (-1461), 500, true, 10, 1432.1158344783, true);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = boxAndWhiskerRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable((TableModel) null, defaultTableColumnModel0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1058);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      LogAxis logAxis0 = new LogAxis("");
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.createHotSpotShape((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, extendedCategoryAxis0, logAxis0, defaultMultiValueCategoryDataset0, 0, 0, false, (CategoryItemRendererState) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      int int0 = stackedBarRenderer3D0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setSeriesToolTipGenerator(90, (CategoryToolTipGenerator) null);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertTrue(statisticalLineAndShapeRenderer1.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(3639.915622012, 10.0);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer3D0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.removeAnnotations();
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, subCategoryAxis0, (ValueAxis) null, levelRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(102, 102, chartRenderingInfo0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.hitTest(2079.33729722785, 0.0, graphics2D0, (Rectangle2D) null, categoryPlot0, subCategoryAxis0, (ValueAxis) null, (CategoryDataset) null, 102, 680, false, categoryItemRendererState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      lineAndShapeRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem((byte)1, 10);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, (-3413), 566);
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      // Undeclared exception!
      try { 
        barRenderer3D0.getItemMiddle(false, numberAxis3D0.DEFAULT_TICK_UNIT, slidingCategoryDataset0, categoryAxis0, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = minMaxCategoryRenderer0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      int int0 = stackedBarRenderer3D0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertEquals(2.0, statisticalLineAndShapeRenderer1.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("Null 'hotspot' argument.", "Null 'hotspot' argument.", (double) lineAndShapeRenderer0.ZERO);
      statisticalLineAndShapeRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      boolean boolean0 = lineAndShapeRenderer0.equals(statisticalLineAndShapeRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = ganttRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setSeriesItemLabelGenerator(Integer.MAX_VALUE, (CategoryItemLabelGenerator) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }
}
