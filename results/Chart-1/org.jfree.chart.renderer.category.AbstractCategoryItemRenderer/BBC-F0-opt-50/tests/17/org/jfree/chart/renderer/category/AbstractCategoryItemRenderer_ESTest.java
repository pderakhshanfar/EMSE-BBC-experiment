/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 10:39:21 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.JToggleButton;
import javax.swing.TransferHandler;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) ganttRenderer0.ZERO);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemRendererState categoryItemRendererState0 = statisticalBarRenderer0.initialise(graphics2D0, rectangle2D_Double0, combinedRangeCategoryPlot0, (CategoryDataset) null, (PlotRenderingInfo) null);
      boolean boolean0 = groupedStackedBarRenderer0.hitTest(0.0, (double) ganttRenderer0.ZERO, graphics2D0, rectangle2D_Double0, combinedRangeCategoryPlot0, (CategoryAxis) null, cyclicNumberAxis0, (CategoryDataset) null, 500, 10, false, categoryItemRendererState0);
      assertFalse(boolean0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(10, 10);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D rectangle2D0 = rectangle0.createIntersection(rectangle2D_Float0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0F);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      RectangleAnchor rectangleAnchor0 = intervalMarker0.getLabelAnchor();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      Point2D.Double point2D_Double0 = (Point2D.Double)ganttRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Float0, rectangle2D0, combinedDomainXYPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(8.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("", areaRenderer0.DEFAULT_VALUE_LABEL_FONT, piePlot3D0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(179, 10, 2323.510336, 4.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(symbolAxis0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      statisticalLineAndShapeRenderer0.drawDomainLine(graphics2D0, combinedRangeCategoryPlot0, rectangle2D_Float0, 0.0, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, symbolAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("YGb/<9JX");
      FontRenderContext fontRenderContext0 = new FontRenderContext((AffineTransform) null, true, true);
      Rectangle2D rectangle2D0 = statisticalLineAndShapeRenderer0.DEFAULT_VALUE_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.getItemMiddle(statisticalLineAndShapeRenderer0.ZERO, (Comparable) null, defaultCategoryDataset0, categoryAxis0, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(boxAndWhiskerRenderer0.ZERO, (double) boxAndWhiskerRenderer0.ZERO, boxAndWhiskerRenderer0.ZERO, (double) boxAndWhiskerRenderer0.ZERO, boxAndWhiskerRenderer0.DEFAULT_PAINT, boxAndWhiskerRenderer0.DEFAULT_STROKE);
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      stackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      boolean boolean0 = stackedBarRenderer0.removeAnnotation(categoryLineAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(8, 8, 8);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      categoryStepRenderer0.drawBackground(graphics2D0, combinedRangeCategoryPlot0, rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis("({0}, {1}) = {2}");
      Layer layer0 = Layer.BACKGROUND;
      lineRenderer3D0.drawAnnotations((Graphics2D) null, rectangle2D_Float0, categoryAxis3D0, logAxis0, layer0, plotRenderingInfo0);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Number[][] numberArray0 = new Number[3][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ganttRenderer0.addEntity(standardEntityCollection0, statisticalBarRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 1, 0, false, (-1.0), 1);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      double[][] doubleArray0 = new double[7][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      ganttRenderer0.addEntity(standardEntityCollection0, categoryStepRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 5, 5, true);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setSeriesItemLabelGenerator(2804, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("AreaRendererEndType.TRUNCATE", 3.0, (double) scatterRenderer0.ZERO, (double) intervalBarRenderer0.ZERO);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("AreaRendererEndType.TRUNCATE");
      NumberAxis numberAxis0 = new NumberAxis();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryAnchor categoryAnchor0 = CategoryAnchor.START;
      categoryPointerAnnotation0.setCategoryAnchor(categoryAnchor0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, subCategoryAxis0, numberAxis0, lineRenderer3D0);
      lineRenderer3D0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      // Undeclared exception!
      jFreeChart0.createBufferedImage(500, 627);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      Line2D.Double line2D_Double0 = new Line2D.Double((-2335.3497675892954), (double) layeredBarRenderer0.ZERO, 0.0, 2.0);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = lineAndShapeRenderer0.initialise((Graphics2D) null, rectangle0, combinedDomainCategoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(768, 10, (double) 1024, 10.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(3811.2492772, (-2320.99), 0.0, 300);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      scatterRenderer0.initialise(graphics2D0, rectangle2D_Double0, combinedDomainCategoryPlot0, defaultIntervalCategoryDataset0, plotRenderingInfo0);
      assertEquals(6, scatterRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0E8);
      FontRenderContext fontRenderContext0 = new FontRenderContext((AffineTransform) null, false, false);
      Rectangle2D rectangle2D0 = cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT.getStringBounds("<&)lVKXmtQOJ", fontRenderContext0);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.initialise(graphics2D0, rectangle2D0, combinedRangeCategoryPlot0, defaultMultiValueCategoryDataset0, plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)lineRenderer3D0.getToolTipGenerator(9999, 5, true);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ValueAxis valueAxis0 = boxAndWhiskerRenderer0.getRangeAxis(combinedDomainCategoryPlot0, 10);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      ValueAxis valueAxis1 = lineRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, 12);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3, 0.0, "({0}, {1}) = {3} - {4}");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)boxAndWhiskerRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 10);
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1183.557565795065), 12.0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, (CategoryAxis) null, cyclicNumberAxis0, lineRenderer3D0);
      ValueAxis valueAxis0 = lineRenderer3D0.getRangeAxis(categoryPlot0, 1131);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("-)=+Q");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, numberAxis3D0, scatterRenderer0);
      CategoryPlot categoryPlot1 = scatterRenderer0.getPlot();
      assertFalse(categoryPlot1.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      LegendItemCollection legendItemCollection0 = areaRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = minMaxCategoryRenderer0.getLegendItemLabelGenerator();
      assertNotNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Number[][] numberArray0 = new Number[4][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'hotspot' argument.");
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale((-1496.0979743), 2.5, subCategoryAxis0.DEFAULT_AXIS_LABEL_PAINT);
      NumberAxis numberAxis0 = new NumberAxis();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, numberAxis0);
      double double0 = ganttRenderer0.getItemMiddle(0.0, 0.0, defaultIntervalCategoryDataset0, subCategoryAxis0, rectangle2D_Double0, paintScaleLegend0.DEFAULT_POSITION);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      lineRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = lineRenderer3D0.getItemLabelGenerator(12, 12, true);
      assertSame(categoryItemLabelGenerator0, intervalCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis numberAxis0 = new NumberAxis("AreaRendererEndType.TRUNCATE");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, numberAxis0, lineRenderer3D0);
      DrawingSupplier drawingSupplier0 = lineRenderer3D0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      CategoryAxis categoryAxis0 = statisticalLineAndShapeRenderer0.getDomainAxis(combinedDomainCategoryPlot0, (CategoryDataset) null);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      int int0 = statisticalLineAndShapeRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineRenderer3D0.getBaseToolTipGenerator();
      assertSame(categoryToolTipGenerator0, boxAndWhiskerToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)lineRenderer3D0.getBaseItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Range range0 = groupedStackedBarRenderer0.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Number[][] numberArray0 = new Number[1][8];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 10;
      numberArray1[1] = combinedRangeCategoryPlot0.ZERO;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Number[][] numberArray0 = new Number[1][8];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 10;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(10.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = stackedAreaRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(3.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      Range range0 = stackedBarRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) 3.0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Range range0 = scatterRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(3.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      boolean boolean0 = lineRenderer3D0.equals(lineRenderer3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 1, 10, 10, true, false, false, false, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = ganttRenderer0.createState(plotRenderingInfo0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(768, 3);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Object[][] objectArray0 = new Object[0][0];
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) ganttRenderer0;
      objectArray1[1] = (Object) chartPanel0;
      objectArray1[2] = (Object) chartPanel0;
      objectArray1[3] = (Object) standardEntityCollection0;
      objectArray1[4] = (Object) groupedStackedBarRenderer0;
      objectArray1[5] = (Object) chartPanel0;
      JTable jTable0 = new JTable(objectArray0, objectArray1);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(300);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("PRINT");
      DateAxis dateAxis0 = new DateAxis();
      Rectangle2D rectangle2D0 = groupedStackedBarRenderer0.createHotSpotBounds(graphics2D0, rectangle0, combinedRangeCategoryPlot0, subCategoryAxis0, dateAxis0, taskSeriesCollection0, 1951, 300, true, categoryItemRendererState0, rectangle0);
      assertNull(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, true);
      LineAndShapeRenderer lineAndShapeRenderer1 = (LineAndShapeRenderer)lineAndShapeRenderer0.clone();
      assertTrue(lineAndShapeRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultMultiValueCategoryDataset0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        intervalBarRenderer0.updateCrosshairValues(categoryCrosshairState0, 0.25, 0.25, 1024, 4, 4, 10, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesURLGenerator((-183), (CategoryURLGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.setSeriesURLGenerator((-1), (CategoryURLGenerator) customCategoryURLGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.setSeriesToolTipGenerator((-6068), (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.setSeriesToolTipGenerator((-543), (CategoryToolTipGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesItemLabelGenerator((-1), (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, "mZT,yM+");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis0, cyclicNumberAxis0, stackedBarRenderer3D0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, 8.0, 4.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.initialise(graphics2D0, (Rectangle2D) null, categoryPlot0, defaultMultiValueCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, (CategoryPlot) null, defaultMultiValueCategoryDataset0, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.hitTest(534.8750773661698, 500, (Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, categoryAxis3D0, cyclicNumberAxis0, defaultMultiValueCategoryDataset0, 1, 300, true, (CategoryItemRendererState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(8, 8, 8);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = groupedStackedBarRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.hitTest(0.0, 15, graphics2D0, rectangle2D_Float0, combinedRangeCategoryPlot0, categoryAxis3D0, (ValueAxis) null, taskSeriesCollection0, 1809, 17, true, categoryItemRendererState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      Number[][] numberArray0 = new Number[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.hitTest(1571.843289, 15, (Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, (CategoryAxis) null, valueAxis0, defaultIntervalCategoryDataset0, 0, (-2524), false, categoryStepRenderer_State0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.getRangeAxis((CategoryPlot) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Point point0 = new Point(0, (-2128));
      Rectangle rectangle0 = new Rectangle(point0);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.createIntersection(rectangle0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.getItemMiddle(boxAndWhiskerRenderer0.ZERO, boxAndWhiskerRenderer0.ZERO, defaultMultiValueCategoryDataset0, (CategoryAxis) null, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.getDomainAxis((CategoryPlot) null, defaultKeyedValues2DDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        ganttRenderer0.getDomainAxis(combinedDomainCategoryPlot0, defaultCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Comparable<CustomCategoryURLGenerator>[] comparableArray0 = (Comparable<CustomCategoryURLGenerator>[]) Array.newInstance(Comparable.class, 6);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Number[][] numberArray0 = new Number[5][3];
      Number[] numberArray1 = new Number[9];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Comparable<BarRenderer3D>[] comparableArray0 = (Comparable<BarRenderer3D>[]) Array.newInstance(Comparable.class, 1);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        lineRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, (ValueAxis) null, rectangle2D_Float0, 0.2, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT, waterfallBarRenderer0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      TransferHandler transferHandler0 = new TransferHandler("+##[:>H* e_WfPh2fy");
      Point point0 = transferHandler0.getDragImageOffset();
      BorderLayout borderLayout0 = new BorderLayout();
      ImageIcon imageIcon0 = new ImageIcon("", "+##[:>H* e_WfPh2fy");
      JToggleButton jToggleButton0 = new JToggleButton(imageIcon0, true);
      Dimension dimension0 = borderLayout0.preferredLayoutSize(jToggleButton0);
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      // Undeclared exception!
      try { 
        scatterRenderer0.drawOutline((Graphics2D) null, combinedRangeCategoryPlot0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("n.", decimalFormat0, decimalFormat0);
      boxAndWhiskerRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawItemLabel(graphics2D0, plotOrientation0, defaultMultiValueCategoryDataset0, 1296, 2166, false, 10, 5619.7604, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1296, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      BufferedImage bufferedImage0 = new BufferedImage(1330, 1330, 13);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawItemLabel(graphics2D0, (PlotOrientation) null, defaultMultiValueCategoryDataset0, (-578), 1289, false, 2.0E9, 2119, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawDomainMarker((Graphics2D) null, combinedDomainCategoryPlot0, categoryAxis3D0, categoryMarker0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, subCategoryAxis0, (ValueAxis) null, boxAndWhiskerRenderer0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, subCategoryAxis0, categoryMarker0, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, (Rectangle2D) null, 10, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawBackground((Graphics2D) null, combinedDomainCategoryPlot0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Line2D.Double line2D_Double0 = new Line2D.Double(18.839822, 0.0F, 820.43, 808.9292899392898);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      DateAxis dateAxis0 = new DateAxis();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.drawAnnotations(graphics2D0, rectangle2D0, extendedCategoryAxis0, dateAxis0, (Layer) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(500, Float.NEGATIVE_INFINITY, 10, 0.0F);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, categoryAxis3D0, (ValueAxis) null, (CategoryDataset) null, 22, 10, false, categoryStepRenderer_State0, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(10);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, (ValueAxis) null, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1377);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, (Rectangle2D) null, polarPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      Shape shape0 = defaultXYItemRenderer0.getLegendLine();
      // Undeclared exception!
      try { 
        intervalBarRenderer0.addEntity(standardEntityCollection0, shape0, defaultIntervalCategoryDataset0, 67, (-2497), true, (-671.790810609), (-2497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        ganttRenderer0.addEntity(standardEntityCollection0, groupedStackedBarRenderer0.DEFAULT_SHAPE, taskSeriesCollection0, (-2), (-2), true, 0.65, 0.65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, line2D_Float0, taskSeriesCollection0, (-937), (-937), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(10, 1.0F, 45.0, 1.0F, groupedStackedBarRenderer0.DEFAULT_PAINT, groupedStackedBarRenderer0.DEFAULT_STROKE);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Range range0 = scatterRenderer0.findRangeBounds((CategoryDataset) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(0.2, (double) ganttRenderer0.ZERO, boxAndWhiskerRenderer0.ZERO, 0.2, boxAndWhiskerRenderer0.DEFAULT_PAINT, ganttRenderer0.DEFAULT_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryURLGenerator categoryURLGenerator0 = lineRenderer3D0.getURLGenerator(18, 18, true);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, true);
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setSeriesToolTipGenerator(1499, (CategoryToolTipGenerator) null, true);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineRenderer3D0.getToolTipGenerator(9999, 5, true);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = lineRenderer3D0.getItemLabelGenerator(12, 12, true);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = areaRenderer0.getSeriesToolTipGenerator(95);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("HfDJN`\"x9Ghe");
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, extendedCategoryAxis0, logAxis0, defaultMultiValueCategoryDataset0, 10, (-1100), false, categoryItemRendererState0, (Rectangle2D) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(4, 4, 4);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, (ValueAxis) null, statisticalLineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.createHotSpotBounds(graphics2D0, rectangle2D_Float0, categoryPlot0, categoryAxis3D0, (ValueAxis) null, taskSeriesCollection0, 768, 2684, true, categoryStepRenderer_State0, rectangle2D_Float0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2684, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity((EntityCollection) null, combinedRangeCategoryPlot0.DEFAULT_LEGEND_ITEM_BOX, (CategoryDataset) null, 51, 10, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.StandardCategoryURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      GeneralPath generalPath0 = new GeneralPath(lineRenderer3D0.DEFAULT_SHAPE);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity((EntityCollection) null, generalPath0, defaultBoxAndWhiskerCategoryDataset0, 1225, (-4609), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1225, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ganttRenderer0.setPlot(combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        ganttRenderer0.addEntity(standardEntityCollection0, (Shape) null, taskSeriesCollection0, 10, 10, false, 10, 1.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.addEntity((EntityCollection) null, (Shape) null, taskSeriesCollection0, 1197, 16, false, 1.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.addEntity(standardEntityCollection0, (Shape) null, taskSeriesCollection0, 4, 4, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("HfDJN`\"x9Ghe");
      LogAxis logAxis0 = new LogAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, extendedCategoryAxis0, logAxis0, boxAndWhiskerRenderer0);
      boxAndWhiskerRenderer0.getRangeAxis(categoryPlot0, 10);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueAxis valueAxis0 = statisticalLineAndShapeRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      assertTrue(valueAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      lineRenderer3D0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      LineRenderer3D lineRenderer3D1 = (LineRenderer3D)lineRenderer3D0.clone();
      assertTrue(lineRenderer3D1.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("({0}, {1}) = {2}");
      lineRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
      try { 
        lineRenderer3D0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      lineRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, true);
      LineRenderer3D lineRenderer3D1 = (LineRenderer3D)lineRenderer3D0.clone();
      assertEquals(8.0, lineRenderer3D1.getYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      LineRenderer3D lineRenderer3D1 = (LineRenderer3D)lineRenderer3D0.clone();
      assertEquals(3, lineRenderer3D1.getDefaultEntityRadius());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0, true);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      stackedBarRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      StackedBarRenderer3D stackedBarRenderer3D1 = (StackedBarRenderer3D)stackedBarRenderer3D0.clone();
      assertTrue(stackedBarRenderer3D1.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("X.^F)Q}klZdgf", numberFormat0);
      boxAndWhiskerRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawItemLabel((Graphics2D) null, (PlotOrientation) null, defaultMultiValueCategoryDataset0, (-308), 18, false, (-3506.5215), 0.0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultMultiValueCategoryDataset0, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      intervalBarRenderer0.updateCrosshairValues((CategoryCrosshairState) null, 3.0, 1.0F, 1.0, 10, 0.0, 3.0, plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        ganttRenderer0.updateCrosshairValues(categoryCrosshairState0, 0.2, boxAndWhiskerRenderer0.ZERO, 500.0, (-6), 546.0, 0.0, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DrawingSupplier drawingSupplier0 = ganttRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      assertTrue(lineRenderer3D1.equals((Object)lineRenderer3D0));
      
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Null 'create' argument.", 12.0, (-797.189877269), 12.0);
      lineRenderer3D1.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      boolean boolean0 = lineRenderer3D0.equals(lineRenderer3D1);
      assertFalse(lineRenderer3D1.equals((Object)lineRenderer3D0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("R(4L^+}", 12.0, 8.0);
      Layer layer0 = Layer.BACKGROUND;
      lineRenderer3D0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      boolean boolean0 = lineRenderer3D0.equals(lineRenderer3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      assertTrue(lineRenderer3D1.equals((Object)lineRenderer3D0));
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      lineRenderer3D1.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      boolean boolean0 = lineRenderer3D0.equals(lineRenderer3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = new BoxAndWhiskerRenderer();
      assertTrue(boxAndWhiskerRenderer1.equals((Object)boxAndWhiskerRenderer0));
      
      boxAndWhiskerRenderer1.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      boolean boolean0 = boxAndWhiskerRenderer1.equals(boxAndWhiskerRenderer0);
      assertFalse(boxAndWhiskerRenderer1.equals((Object)boxAndWhiskerRenderer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = new BoxAndWhiskerRenderer();
      boolean boolean0 = boxAndWhiskerRenderer0.equals(boxAndWhiskerRenderer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LegendItem legendItem0 = levelRenderer0.getLegendItem((-1), (-1));
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      levelRenderer0.setPlot(combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        levelRenderer0.getLegendItem(4457, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, (Rectangle2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(8, 8, 8);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      TimeSeries timeSeries0 = new TimeSeries(true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, (ValueAxis) null, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      Point2D.Double point2D_Double0 = (Point2D.Double)statisticalLineAndShapeRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle2D_Float0, rectangle2D_Float0, categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker((double) ganttRenderer0.ZERO, (-365.418821294));
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      RectangleAnchor rectangleAnchor0 = intervalMarker0.getLabelAnchor();
      // Undeclared exception!
      try { 
        ganttRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle2D_Float0, rectangle2D_Float0, combinedRangeCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("The 'data' array must have length == 2.", ganttRenderer0.DEFAULT_VALUE_LABEL_FONT, multiplePiePlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle rectangle0 = chartPanel0.getBounds();
      Point2D.Double point2D_Double0 = (Point2D.Double)ganttRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle0, numberAxis3D0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(2.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      // Undeclared exception!
      try { 
        ganttRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, thermometerPlot0.DEFAULT_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(4, 4, 4);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.2, 0.2);
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("h&");
      ganttRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, logarithmicAxis0, intervalMarker0, rectangle2D_Float0);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(8, 8, 8);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker((-302.53168F), 3.0);
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      ganttRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, dateAxis0, intervalMarker0, rectangle2D_Float0);
      assertFalse(dateAxis0.isVerticalTickLabels());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(4, 4, 4);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, 0.2, ganttRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("h&");
      ganttRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, logarithmicAxis0, intervalMarker0, rectangle2D_Float0);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker((double) ganttRenderer0.ZERO, (-365.418821294));
      DateAxis dateAxis0 = new DateAxis();
      ganttRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, dateAxis0, intervalMarker0, rectangle2D_Float0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      intervalBarRenderer0.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, (ValueAxis) null, categoryMarker0, (Rectangle2D) null);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ValueMarker valueMarker0 = new ValueMarker(0.2, ganttRenderer0.DEFAULT_OUTLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE, ganttRenderer0.DEFAULT_OUTLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 10);
      valueMarker0.setLabel("g(");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ganttRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, valueMarker0, rectangle2D_Double0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedRangeCategoryPlot0.setOrientation(plotOrientation0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, 10);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ganttRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, valueMarker0, rectangle2D_Double0);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("20K^ZA,", stringArray0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(symbolAxis0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ValueMarker valueMarker0 = new ValueMarker((-4058.623171995907), boxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_PAINT, boxAndWhiskerRenderer0.DEFAULT_STROKE);
      ganttRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, symbolAxis0, valueMarker0, (Rectangle2D) null);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis("20K^ZA,", stringArray0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(symbolAxis0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, symbolAxis0.DEFAULT_GRID_BAND_ALTERNATE_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      // Undeclared exception!
      try { 
        ganttRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, symbolAxis0, valueMarker0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("==");
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, subCategoryAxis0, (ValueAxis) null, boxAndWhiskerRenderer0);
      boxAndWhiskerRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, subCategoryAxis0, categoryMarker0, (Rectangle2D) null);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Paint paint0 = minMaxCategoryRenderer0.getGroupPaint();
      ganttRenderer0.drawRangeLine((Graphics2D) null, (CategoryPlot) null, numberAxis3D0, (Rectangle2D) null, (-401.712022697321), paint0, minMaxCategoryRenderer0.DEFAULT_STROKE);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, (Rectangle2D) null, 10, (Paint) null, defaultPolarItemRenderer0.DEFAULT_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryPlot categoryPlot0 = boxAndWhiskerRenderer0.getPlot();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainLine((Graphics2D) null, (CategoryPlot) null, (Rectangle2D) null, (-308), categoryPlot0.DEFAULT_BACKGROUND_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) 0.2;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("pl3r1irpY8b");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("pl3r1irpY8b");
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, numberAxis3D0, lineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("pl3r1irpY8b", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      jFreeChart0.createBufferedImage(500, 500, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.initialise(graphics2D0, rectangle2D_Double0, combinedRangeCategoryPlot0, (CategoryDataset) null, (PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.getLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      // Undeclared exception!
      try { 
        areaRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("({0}, {1}) = {2}");
      areaRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("LGPL", "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      defaultCategoryItemRenderer0.setSeriesURLGenerator(10, (CategoryURLGenerator) standardCategoryURLGenerator0, false);
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      lineRenderer3D0.setSeriesURLGenerator(10, (CategoryURLGenerator) standardCategoryURLGenerator0, true);
      CategoryURLGenerator categoryURLGenerator0 = lineRenderer3D0.getURLGenerator(10, 10, false);
      assertSame(categoryURLGenerator0, standardCategoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, false);
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setSeriesToolTipGenerator(4, (CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, false);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      intervalBarRenderer0.setSeriesItemLabelGenerator(1, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      assertFalse(intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      intervalBarRenderer0.setSeriesItemLabelGenerator(1, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      assertEquals(1, intervalBarRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      boxAndWhiskerRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultMultiValueCategoryDataset0, 1024, 3, true, 1.0, (-1.0), false);
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      statisticalLineAndShapeRenderer0.setSeriesURLGenerator(4, (CategoryURLGenerator) null);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = layeredBarRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getSeriesURLGenerator((-2021));
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = lineRenderer3D0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(4, 4, 4);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.createState(plotRenderingInfo0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2259.0F, (-1286.855F), 1024, 200);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.createHotSpotShape(graphics2D0, rectangle2D_Float0, combinedRangeCategoryPlot0, categoryAxis3D0, (ValueAxis) null, taskSeriesCollection0, 768, 200, false, categoryItemRendererState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      int int0 = statisticalLineAndShapeRenderer0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      groupedStackedBarRenderer0.setSeriesToolTipGenerator(1, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      boolean boolean0 = lineRenderer3D0.equals(lineRenderer3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = levelRenderer0.getSeriesItemLabelGenerator(1);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = areaRenderer0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.removeAnnotations();
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      TransferHandler transferHandler0 = new TransferHandler("+##[:>H* e_WfPh2fy");
      Point point0 = transferHandler0.getDragImageOffset();
      Dimension dimension0 = new Dimension(10, 0);
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      scatterRenderer0.drawOutline(graphics2D0, combinedRangeCategoryPlot0, rectangle0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      int int0 = ganttRenderer0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      lineRenderer3D0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      LineRenderer3D lineRenderer3D1 = (LineRenderer3D)lineRenderer3D0.clone();
      assertTrue(lineRenderer3D1.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Range range0 = lineRenderer3D0.findRangeBounds((CategoryDataset) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis categoryAxis0 = stackedBarRenderer3D0.getDomainAxis(combinedRangeCategoryPlot0, (CategoryDataset) null);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineRenderer3D0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.setSeriesItemLabelGenerator((-1100), (CategoryItemLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }
}
