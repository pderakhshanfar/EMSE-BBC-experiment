/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 14:49:16 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.text.DateFormatSymbols;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JTable;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.ObjectList;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 10, 10);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, combinedRangeCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, slidingCategoryDataset0, 5, 2, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      Layer layer0 = Layer.BACKGROUND;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(0.2, 3.0, 0.2, (double) layeredBarRenderer0.ZERO, scatterRenderer0.DEFAULT_OUTLINE_PAINT, layeredBarRenderer0.DEFAULT_STROKE);
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      boolean boolean0 = scatterRenderer0.removeAnnotation(categoryLineAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Rotation type not recognised.");
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = levelRenderer0.getItemMiddle(0, ganttRenderer0.ZERO, defaultKeyedValues2DDataset0, subCategoryAxis0, defaultCaret0, rectangleEdge0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-813.28), 0.0, 1.0, 0.0);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.0, (double) 5, (ChartRenderingInfo) null);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      categoryStepRenderer0.drawBackground(graphics2D0, categoryPlot0, rectangle2D_Double0);
      assertTrue(categoryPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ni%0m*ihzVJ.(Tqy");
      Layer layer0 = Layer.FOREGROUND;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      layeredBarRenderer0.drawAnnotations((Graphics2D) null, (Rectangle2D) null, subCategoryAxis0, numberAxis3D0, layer0, plotRenderingInfo0);
      assertTrue(numberAxis3D0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      minMaxCategoryRenderer0.addEntity(standardEntityCollection0, layeredBarRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 0, 0, true, 1009.8, 1020.57977216389);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(3388, (CategoryToolTipGenerator) null);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)statisticalLineAndShapeRenderer0.lookupSeriesShape((-6));
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.ENGLISH;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0, locale0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(430, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      statisticalLineAndShapeRenderer0.drawDomainLine(graphics2D0, combinedRangeCategoryPlot0, rectangle2D_Double0, 0.2, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, basicStroke0);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, rectangle2D0, 5334.7557111, combinedDomainCategoryPlot0.DEFAULT_BACKGROUND_PAINT, lineRenderer3D0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      Number[][] numberArray0 = new Number[5][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      layeredBarRenderer0.addEntity(standardEntityCollection0, ganttRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 4, 0, true);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(10, 15, 10, 10);
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(".");
      CategoryPlot categoryPlot0 = new CategoryPlot(jDBCCategoryDataset0, categoryAxis3D0, moduloAxis0, statisticalBarRenderer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = statisticalBarRenderer0.initialise(graphics2D0, rectangle0, categoryPlot0, jDBCCategoryDataset0, plotRenderingInfo0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getURLGenerator(6137, (-1), true);
      assertSame(categoryURLGenerator0, standardCategoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(930.71);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Paint paint0 = thermometerPlot0.getSubrangePaint((-1));
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(1.0F);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(xYBoxAndWhiskerRenderer0.DEFAULT_PAINT, xYBoxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_PAINT, thermometerPlot0.DEFAULT_BACKGROUND_PAINT, paint0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      ValueAxis valueAxis0 = waterfallBarRenderer0.getRangeAxis(combinedDomainCategoryPlot0, (-258));
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2688.58407623);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(5061);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(xYBoxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_PAINT, lineRenderer3D0.DEFAULT_OUTLINE_PAINT, ganttRenderer0.DEFAULT_VALUE_LABEL_PAINT, thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      ValueAxis valueAxis1 = waterfallBarRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 797);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      ValueAxis valueAxis0 = ganttRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 4510);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)waterfallBarRenderer0.getRangeAxis(combinedRangeCategoryPlot0, (-123));
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-4601.421778062632));
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)waterfallBarRenderer0.getRangeAxis(combinedRangeCategoryPlot0, (-1));
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryPlot categoryPlot0 = boxAndWhiskerRenderer0.getPlot();
      assertNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ganttRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, (CategoryDataset) null, (PlotRenderingInfo) null);
      ganttRenderer0.getPlot();
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0, ganttRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      lineRenderer3D0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator1 = lineRenderer3D0.getLegendItemURLGenerator();
      assertSame(categorySeriesLabelGenerator1, categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DrawingSupplier drawingSupplier0 = scatterRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-2656.5454276), (-2656.5454276), false);
      NumberAxis numberAxis0 = new NumberAxis("ZOOM_OUT_BOTH");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      CategoryAxis categoryAxis0 = stackedBarRenderer3D0.getDomainAxis(combinedRangeCategoryPlot0, (CategoryDataset) null);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      CategoryPlot categoryPlot0 = new CategoryPlot(jDBCCategoryDataset0, categoryAxis3D0, dateAxis0, boxAndWhiskerRenderer0);
      CategoryAxis categoryAxis0 = boxAndWhiskerRenderer0.getDomainAxis(categoryPlot0, jDBCCategoryDataset0);
      assertTrue(categoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      int int0 = ganttRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedBarRenderer3D0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("({0}, {1}) = {3} - {4}", numberFormat0);
      lineRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineRenderer3D0.getBaseToolTipGenerator();
      assertSame(categoryToolTipGenerator0, standardCategoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = lineRenderer3D0.getBaseItemLabelGenerator();
      assertSame(categoryItemLabelGenerator0, intervalCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Range range0 = categoryStepRenderer0.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1.0F;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = defaultCategoryItemRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Range range0 = lineRenderer3D0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.addValue((-4071.59), (Comparable) ganttRenderer0.ZERO, (Comparable) 0.2);
      defaultKeyedValues2DDataset0.setValue((Number) ganttRenderer0.ZERO, (Comparable) ganttRenderer0.ZERO, (Comparable) 3.0);
      Range range0 = ganttRenderer0.findRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(4071.59, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.addValue((Number) ganttRenderer0.ZERO, (Comparable) ganttRenderer0.ZERO, (Comparable) ganttRenderer0.ZERO);
      Range range0 = ganttRenderer0.findRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) 3.0, (Comparable) ganttRenderer0.ZERO, (Comparable) ganttRenderer0.ZERO);
      Range range0 = ganttRenderer0.findRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(3.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) (-3.417634996582365E-5), (Comparable) 0.05, (Comparable) 0.05);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Range range0 = ganttRenderer0.findRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals((-3.417634996582365E-5), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Shape shape0 = statisticalLineAndShapeRenderer0.lookupSeriesShape((-6));
      boolean boolean0 = statisticalLineAndShapeRenderer0.equals(shape0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState((PlotRenderingInfo) null);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = intervalBarRenderer0.createState(plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState((PlotRenderingInfo) null);
      CategoryAxis categoryAxis0 = new CategoryAxis("{pn9N*LB#`ieqz");
      DateAxis dateAxis0 = new DateAxis(":W6,g(igOd");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), 10);
      Rectangle2D rectangle2D1 = ganttRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis0, dateAxis0, slidingGanttCategoryDataset0, (-4960), 10, false, categoryItemRendererState0, rectangle2D0);
      assertNull(rectangle2D1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.updateCrosshairValues(categoryCrosshairState0, 0.2, 3.0, 3918.3185, (-1), 0.5, 1.0, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesURLGenerator((-1), (CategoryURLGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      // Undeclared exception!
      try { 
        intervalBarRenderer0.setSeriesURLGenerator((-1), (CategoryURLGenerator) standardCategoryURLGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setSeriesToolTipGenerator((-1349), (CategoryToolTipGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      // Undeclared exception!
      try { 
        stackedBarRenderer0.setSeriesItemLabelGenerator((-2752), (CategoryItemLabelGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setSeriesItemLabelGenerator((-3566), (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Xc>Ca2-9-");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, subCategoryAxis0, cyclicNumberAxis0, statisticalBarRenderer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.initialise(graphics2D0, rectangle0, categoryPlot0, taskSeriesCollection0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        layeredBarRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, defaultCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(10, 15, 10, 10);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Xc>Ca2-97");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, ")L,<o14?)");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.hitTest(75.0, 2.0F, graphics2D0, rectangle0, combinedRangeCategoryPlot0, subCategoryAxis0, cyclicNumberAxis0, (CategoryDataset) null, 10, 2196, true, (CategoryItemRendererState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(10, 15, 10, 10);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'percentFormat' argument.");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, (double) statisticalBarRenderer0.ZERO);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.hitTest(15, 1.0F, graphics2D0, rectangle0, (CategoryPlot) null, subCategoryAxis0, cyclicNumberAxis0, defaultCategoryDataset0, 11, 10, false, categoryStepRenderer_State0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DateAxis dateAxis0 = new DateAxis("-uR^v*[QN(!9NMF[_A");
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.hitTest((-2615.1085), 3.0, (Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, categoryAxis3D0, dateAxis0, defaultIntervalCategoryDataset0, 500, 10, true, categoryItemRendererState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      LogAxis logAxis0 = new LogAxis();
      double[][] doubleArray0 = new double[5][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        levelRenderer0.hitTest((double) defaultCategoryItemRenderer0.ZERO, 0.0, (Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, categoryAxis3D0, logAxis0, defaultIntervalCategoryDataset0, 500, (-5047), true, categoryItemRendererState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5047
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT, stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT, stackedBarRenderer3D0.DEFAULT_PAINT, stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.getRangeAxis((CategoryPlot) null, 117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'plot' argument.");
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        lineRenderer3D0.getItemMiddle(true, 0.2, defaultCategoryDataset0, categoryAxis0, rectangle0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 51, (-630));
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.getDomainAxis((CategoryPlot) null, slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 3.0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.getDomainAxis(combinedDomainCategoryPlot0, defaultCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 1297, 1297);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][4];
      Number[] numberArray1 = new Number[7];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      String[] stringArray0 = new String[1];
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, numberArray0);
      // Undeclared exception!
      try { 
        ganttRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[7];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        ganttRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      NumberAxis numberAxis0 = new NumberAxis("");
      IntervalMarker intervalMarker0 = new IntervalMarker((-1071.6667420175627), 5.0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, numberAxis0, intervalMarker0, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      Locale locale0 = Locale.ITALY;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DateAxis dateAxis0 = new DateAxis("", timeZone0, locale0);
      // Undeclared exception!
      try { 
        ganttRenderer0.drawRangeLine((Graphics2D) null, combinedDomainCategoryPlot0, dateAxis0, rectangle2D0, 0.0F, dateAxis0.DEFAULT_AXIS_LINE_PAINT, dateAxis0.DEFAULT_AXIS_LINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        ganttRenderer0.drawRangeLine(graphics2D0, combinedDomainCategoryPlot0, dateAxis0, defaultCaret0, 0, dateAxis0.DEFAULT_AXIS_LABEL_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Week week0 = new Week();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null, week0, week0);
      Line2D.Double line2D_Double0 = new Line2D.Double(0.0, 2.0, 0.05, (double) minMaxCategoryRenderer0.ZERO);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      LegendTitle legendTitle0 = new LegendTitle(minMaxCategoryRenderer0);
      Paint paint0 = legendTitle0.getItemPaint();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, periodAxis0, rectangle2D0, 1.0F, paint0, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.39240928132E12) <= upper (1.392409281319E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)statisticalLineAndShapeRenderer0.lookupSeriesShape(0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawOutline((Graphics2D) null, (CategoryPlot) null, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("s:#UD{*", numberFormat0, numberFormat0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultCategoryDataset0, 1340, 10, false, 1.0F, 10, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("Y", numberFormat0, numberFormat0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      BufferedImage bufferedImage0 = new BufferedImage(3, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.drawItemLabel(graphics2D0, plotOrientation0, defaultCategoryDataset0, 10, 981, true, 0.0, 0.0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("Y", numberFormat0, numberFormat0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      BufferedImage bufferedImage0 = new BufferedImage(3, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.drawItemLabel(graphics2D0, plotOrientation0, defaultCategoryDataset0, (-486), 10, false, 4, 0.0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      CategoryAxis categoryAxis0 = new CategoryAxis("ZrW2U^}d &");
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_PAINT, categoryAxis0.DEFAULT_AXIS_LINE_STROKE, ganttRenderer0.DEFAULT_VALUE_LABEL_PAINT, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      // Undeclared exception!
      try { 
        ganttRenderer0.drawDomainMarker((Graphics2D) null, combinedDomainCategoryPlot0, categoryAxis0, categoryMarker0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Line2D.Double line2D_Double0 = new Line2D.Double(3.0, 0.0, 10, 1.0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.drawBackground((Graphics2D) null, categoryPlot0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        ganttRenderer0.drawAnnotations((Graphics2D) null, (Rectangle2D) null, categoryAxis3D0, numberAxis3D0, (Layer) null, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Locale locale0 = Locale.GERMANY;
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, (CategoryAxis) null, dateAxis0, (CategoryDataset) null, 500, 209, false, categoryItemRendererState0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1031.358283228), (-4020.30875686), (-1031.358283228), 2000.0);
      Rectangle rectangle0 = new Rectangle((-3213), 7, 7, 11);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3213), "=Ktl~k#x");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        ganttRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D_Double0, combinedDomainCategoryPlot0, categoryAxis0, cyclicNumberAxis0, defaultIntervalCategoryDataset0, 11, 10, false, categoryItemRendererState0, rectangle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState((PlotRenderingInfo) null);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 1);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, categoryPlot0, (CategoryAxis) null, cyclicNumberAxis0, slidingGanttCategoryDataset0, 1, (-740), true, categoryItemRendererState0, rectangle2D_Float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      // Undeclared exception!
      try { 
        ganttRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, (Rectangle2D) null, combinedDomainCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      // Undeclared exception!
      try { 
        layeredBarRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0.DEFAULT_INSETS, (LengthAdjustmentType) null, (RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryStepRenderer_State0.getEntityCollection();
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addEntity(entityCollection0, categoryStepRenderer_State0.line, defaultIntervalCategoryDataset0, (-3289), (-3289), true, 0.2, 881.4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, lineRenderer3D0.DEFAULT_SHAPE, (CategoryDataset) null, 0, 5, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity((EntityCollection) null, lineAndShapeRenderer0.DEFAULT_SHAPE, defaultCategoryDataset0, (-282), 2, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("N=mr!Lamr(@3dl[g-", stackedBarRenderer0.ZERO, 0.2, 0.0);
      // Undeclared exception!
      try { 
        stackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      // Undeclared exception!
      try { 
        layeredBarRenderer0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(2141, (-1364.4605675652733), 2138, 1, minMaxCategoryRenderer0.DEFAULT_OUTLINE_PAINT, minMaxCategoryRenderer0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      minMaxCategoryRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) null, true);
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("$Po{~oe1=5");
      lineAndShapeRenderer0.setSeriesURLGenerator(25, (CategoryURLGenerator) standardCategoryURLGenerator0, true);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CategoryURLGenerator categoryURLGenerator0 = barRenderer3D0.getURLGenerator(1581, 1581, true);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      statisticalLineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineAndShapeRenderer0.getToolTipGenerator(10, 364, true);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      MeterPlot meterPlot0 = new MeterPlot();
      NumberFormat numberFormat0 = meterPlot0.getTickLabelFormat();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("r,mk", numberFormat0);
      lineRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getItemLabelGenerator(10, 10, false);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineAndShapeRenderer0.getSeriesToolTipGenerator(2);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(10, 15, 10, 10);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Xc>Ca2-97");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, ")L,<o14?)");
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryItemRendererState categoryItemRendererState0 = statisticalBarRenderer0.initialise(graphics2D0, rectangle0, combinedRangeCategoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
      boolean boolean0 = statisticalBarRenderer0.hitTest((-3574.525), 10, graphics2D0, rectangle0, combinedRangeCategoryPlot0, subCategoryAxis0, cyclicNumberAxis0, (CategoryDataset) null, 1008, 0, true, categoryItemRendererState0);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertFalse(boolean0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(jDBCCategoryDataset0, 2, 120);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, categoryPlot0, categoryAxis3D0, valueAxis0, slidingCategoryDataset0, 10, 120, true, categoryItemRendererState0, (Rectangle2D) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 4, 4);
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity((EntityCollection) null, lineAndShapeRenderer0.DEFAULT_SHAPE, slidingCategoryDataset0, 4, 2597, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addEntity((EntityCollection) null, defaultCategoryItemRenderer0.DEFAULT_SHAPE, defaultKeyedValues2DDataset0, 1718, 2493, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1718, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis0, numberAxis3D0, minMaxCategoryRenderer0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultBoxAndWhiskerCategoryDataset0, (-1), 500, true, 1.0F, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultBoxAndWhiskerCategoryDataset0, (-1), 500, true, 1.0F, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 620, 1);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, (Shape) null, slidingCategoryDataset0, 5, (-1264), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis3D0, periodAxis0, ganttRenderer0);
      // Undeclared exception!
      try { 
        ganttRenderer0.getLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      LegendItemCollection legendItemCollection0 = ganttRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'generator' argument.", stringArray0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis0, symbolAxis0, ganttRenderer0);
      ValueAxis valueAxis0 = ganttRenderer0.getRangeAxis(categoryPlot0, 10);
      assertNull(valueAxis0.getLabelURL());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      ValueAxis valueAxis0 = waterfallBarRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      assertTrue(valueAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertEquals(0, statisticalLineAndShapeRenderer1.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = (DefaultCategoryItemRenderer)defaultCategoryItemRenderer0.clone();
      assertTrue(defaultCategoryItemRenderer1.getBaseLinesVisible());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(10, 15, 10, 10);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("l&s", statisticalBarRenderer0.ZERO, 10);
      Layer layer0 = Layer.BACKGROUND;
      statisticalBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Xc>Ca2-97");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, ")L,<o14?)");
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawAnnotations(graphics2D0, rectangle0, subCategoryAxis0, cyclicNumberAxis0, layer0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("Y", numberFormat0, numberFormat0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      BufferedImage bufferedImage0 = new BufferedImage(12, 7, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.drawItemLabel(graphics2D0, plotOrientation0, (CategoryDataset) null, 4, 951, false, 0.0, 0.0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("iR|=4@`m", range0);
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, (CategoryAxis) null, moduloAxis0, statisticalLineAndShapeRenderer0);
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      statisticalLineAndShapeRenderer0.updateCrosshairValues(categoryCrosshairState0, 1.0F, 1.0F, 1.0E-8, 500, 0.05, 500, plotOrientation0);
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.updateCrosshairValues((CategoryCrosshairState) null, "{2}", boxAndWhiskerRenderer0.ZERO, 4.0, 7, (double) boxAndWhiskerRenderer0.ZERO, 4.0, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(".");
      CategoryPlot categoryPlot0 = new CategoryPlot(jDBCCategoryDataset0, categoryAxis3D0, moduloAxis0, statisticalBarRenderer0);
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      statisticalLineAndShapeRenderer0.updateCrosshairValues((CategoryCrosshairState) null, true, false, 1828.824205, 1086, 0.0, (-0.245645), plotOrientation0);
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("iR|=4@`m", range0);
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, (CategoryAxis) null, moduloAxis0, statisticalLineAndShapeRenderer0);
      DrawingSupplier drawingSupplier0 = statisticalLineAndShapeRenderer0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      boolean boolean0 = lineRenderer3D0.equals(lineRenderer3D1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem(10, 0);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      minMaxCategoryRenderer0.setPlot(combinedDomainCategoryPlot0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getLegendItem(10, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(10, 15, 10, 10);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Xc>Ca2-97");
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, (PlotOrientation) null, rectangle2D0, rectangle0, subCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS, (LengthAdjustmentType) null, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      Point2D.Double point2D_Double0 = (Point2D.Double)ganttRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, rectangle2D0, combinedDomainCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(4.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(3.0, (double) layeredBarRenderer0.ZERO, 0.2, 0.0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Point2D.Double point2D_Double0 = (Point2D.Double)layeredBarRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle2D_Double0, combinedDomainCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0, (-1576), 0.0, 1754.500401288999);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Point2D.Double point2D_Double0 = (Point2D.Double)boxAndWhiskerRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle2D_Double0, combinedDomainCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)statisticalLineAndShapeRenderer0.lookupSeriesShape(0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, (-3455.598827), 200);
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainCategoryPlot0, columnArrangement0, columnArrangement0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicAnchor();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle2D_Double0, defaultCaret0, combinedDomainCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle((-818), 10, 2383, 4);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      IntervalMarker intervalMarker0 = new IntervalMarker((-2584.1421839901), 1.0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      statisticalLineAndShapeRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, logarithmicAxis0, intervalMarker0, rectangle0);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle((-80), (-3105), (-80), 2941);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("\"UdspXc!EDq6dX8fTQ#");
      IntervalMarker intervalMarker0 = new IntervalMarker((double) waterfallBarRenderer0.ZERO, 3519.1637);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      statisticalLineAndShapeRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, logarithmicAxis0, intervalMarker0, rectangle0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)statisticalLineAndShapeRenderer0.lookupSeriesShape(1431);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(269.0, (-3.0));
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2110);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      IntervalMarker intervalMarker0 = new IntervalMarker((-2393.457239483726), 15, statisticalLineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT);
      barRenderer3D0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, intervalMarker0, rectangle2D_Double0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0, 25.5, statisticalLineAndShapeRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      statisticalLineAndShapeRenderer0.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, dateAxis0, intervalMarker0, rectangle2D0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DateAxis dateAxis0 = new DateAxis();
      ValueMarker valueMarker0 = new ValueMarker((double) ganttRenderer0.ZERO);
      valueMarker0.setLabel("(D9c9HI#<'U.1w");
      levelRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, dateAxis0, valueMarker0, defaultCaret0);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(5, 5, 5);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainCategoryPlot0.setOrientation(plotOrientation0);
      DateAxis dateAxis0 = new DateAxis();
      ValueMarker valueMarker0 = new ValueMarker(1.0E-8, dateAxis0.DEFAULT_AXIS_LINE_PAINT, dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      levelRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, dateAxis0, valueMarker0, defaultCaret0);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      ValueMarker valueMarker0 = new ValueMarker((-1608.2464));
      statisticalLineAndShapeRenderer0.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, numberAxis0, valueMarker0, rectangle2D0);
      assertNull(numberAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(10, 15, 10, 10);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DateAxis dateAxis0 = new DateAxis();
      ValueMarker valueMarker0 = new ValueMarker(0.0, levelRenderer0.DEFAULT_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      levelRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, dateAxis0, valueMarker0, rectangle0);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, spiderWebPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, (-1.0F), 0.0F, (-1244.4F));
      scatterRenderer0.drawRangeMarker(graphics2D0, (CategoryPlot) null, logarithmicAxis0, (Marker) null, rectangle2D_Float0);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stroke stroke0 = combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      ganttRenderer0.drawRangeLine((Graphics2D) null, combinedDomainCategoryPlot0, dateAxis0, rectangle2D0, 2.0, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT, stroke0);
      assertEquals(1, ganttRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, rectangle2D0, (double) lineRenderer3D0.ZERO, lineRenderer3D0.DEFAULT_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, rectangle2D0, 1.0F, (Paint) null, boxAndWhiskerRenderer0.DEFAULT_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = ganttRenderer0.findRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Range range0 = scatterRenderer0.findRangeBounds((CategoryDataset) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Line2D.Double line2D_Double0 = new Line2D.Double(3.0, (-1.0571151897421516), 10, 1.0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.initialise((Graphics2D) null, rectangle2D0, categoryPlot0, defaultStatisticalCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      NumberAxis numberAxis0 = new NumberAxis("iG*/`f#&%");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      double[][] doubleArray0 = new double[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        scatterRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, false);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("");
      lineAndShapeRenderer0.setSeriesURLGenerator(2, (CategoryURLGenerator) standardCategoryURLGenerator0, false);
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setSeriesToolTipGenerator(2, (CategoryToolTipGenerator) null, true);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(12.0, (double) lineRenderer3D0.ZERO, true);
      stackedBarRenderer3D0.setSeriesToolTipGenerator(5, (CategoryToolTipGenerator) null, false);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      MeterPlot meterPlot0 = new MeterPlot();
      NumberFormat numberFormat0 = meterPlot0.getTickLabelFormat();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", numberFormat0);
      lineRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setSeriesItemLabelGenerator(500, (CategoryItemLabelGenerator) null, false);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultIntervalCategoryDataset0, 10, 10, true, 10, 1.0F, false);
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("ItemLabelGenerator not cloneable.", numberFormat0, numberFormat0);
      statisticalLineAndShapeRenderer0.setSeriesItemLabelGenerator(10, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator1 = (StandardCategoryItemLabelGenerator)statisticalLineAndShapeRenderer0.getItemLabelGenerator(10, 4, false);
      assertEquals("ItemLabelGenerator not cloneable.", standardCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("T?*0EM1", "T?*0EM1", "[F)?JeSJf7lK)f;l!WW");
      barRenderer3D0.setSeriesURLGenerator(0, (CategoryURLGenerator) standardCategoryURLGenerator0);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(15, (double) minMaxCategoryRenderer0.ZERO);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = barRenderer3D0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      CategoryURLGenerator categoryURLGenerator0 = lineAndShapeRenderer0.getSeriesURLGenerator((-1544));
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = lineRenderer3D0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryItemRendererState categoryItemRendererState0 = ganttRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, (CategoryDataset) null, (PlotRenderingInfo) null);
      CategoryAxis categoryAxis0 = new CategoryAxis("TaskSeriesCollection.remove(): index outside valid range.");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) ganttRenderer0.ZERO);
      // Undeclared exception!
      try { 
        ganttRenderer0.createHotSpotShape((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, categoryAxis0, cyclicNumberAxis0, (CategoryDataset) null, 10, 500, true, categoryItemRendererState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      LineRenderer3D lineRenderer3D1 = (LineRenderer3D)lineRenderer3D0.clone();
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer0.getLegendItemLabelGenerator();
      defaultCategoryItemRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = (DefaultCategoryItemRenderer)defaultCategoryItemRenderer0.clone();
      assertFalse(defaultCategoryItemRenderer1.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      int int0 = waterfallBarRenderer0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) lineAndShapeRenderer0.ZERO);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      NumberFormat numberFormat0 = meterPlot0.getTickLabelFormat();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("", numberFormat0);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesToolTipGenerator((-166), (CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null);
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("tf>9A)tRf*2pIA");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "34+";
      stringArray0[1] = "tf>9A)tRf*2pIA";
      stringArray0[2] = "tf>9A)tRf*2pIA";
      stringArray0[3] = "tf>9A)tRf*2pIA";
      stringArray0[4] = "34+";
      stringArray0[5] = "tf>9A)tRf*2pIA";
      stringArray0[6] = "tf>9A)tRf*2pIA";
      SymbolAxis symbolAxis0 = new SymbolAxis("tf>9A)tRf*2pIA", stringArray0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis3D0, symbolAxis0, minMaxCategoryRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("34+", minMaxCategoryRenderer0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      // Undeclared exception!
      jFreeChart0.createBufferedImage(244, 500);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = lineAndShapeRenderer0.getSeriesItemLabelGenerator((-1333));
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = lineRenderer3D0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.removeAnnotations();
      assertTrue(barRenderer3D0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      try { 
        statisticalLineAndShapeRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addEntity(standardEntityCollection0, statisticalLineAndShapeRenderer0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, 0, 1005, false, (double) boxAndWhiskerRenderer0.ZERO, (-1408));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      Vector<String> vector0 = new Vector<String>();
      Stack<ObjectList> stack0 = new Stack<ObjectList>();
      JTable jTable0 = new JTable(vector0, stack0);
      Rectangle rectangle0 = jTable0.getCellRect(15, 13, true);
      statisticalLineAndShapeRenderer0.drawOutline(graphics2D0, combinedDomainCategoryPlot0, rectangle0);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(12.0, (double) lineRenderer3D0.ZERO, true);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)scatterRenderer0.lookupLegendShape(1297);
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'hotspot' argument.");
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        lineRenderer3D0.getItemMiddle(scatterRenderer0.ZERO, stackedBarRenderer3D0.ZERO, (CategoryDataset) null, categoryAxis0, rectangle2D_Double0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      int int0 = ganttRenderer0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2712.0767F, 542.7047F, 500, 2712.0767F);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CategoryItemRendererState categoryItemRendererState0 = lineRenderer3D0.initialise((Graphics2D) null, rectangle2D_Float0, combinedDomainCategoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        ganttRenderer0.calculateBarW0(combinedDomainCategoryPlot0, plotOrientation0, rectangle2D_Float0, categoryAxis3D0, categoryItemRendererState0, 1989, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: 7
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertTrue(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(defaultCategoryItemRenderer0.ZERO, (double) defaultCategoryItemRenderer0.ZERO, defaultCategoryItemRenderer0.ZERO, (double) defaultCategoryItemRenderer0.ZERO, defaultCategoryItemRenderer0.DEFAULT_VALUE_LABEL_PAINT, defaultCategoryItemRenderer0.DEFAULT_OUTLINE_STROKE);
      defaultCategoryItemRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      boxAndWhiskerRenderer0.setSeriesItemLabelGenerator(7, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
  }
}
