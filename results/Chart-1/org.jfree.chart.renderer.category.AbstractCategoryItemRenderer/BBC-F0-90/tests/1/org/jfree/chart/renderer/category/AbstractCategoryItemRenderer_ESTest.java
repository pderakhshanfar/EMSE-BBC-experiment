/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 14:48:38 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 33, 3);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addEntity(standardEntityCollection0, minMaxCategoryRenderer0.DEFAULT_SHAPE, slidingGanttCategoryDataset0, 3, (-472), true, (double) minMaxCategoryRenderer0.ZERO, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      statisticalLineAndShapeRenderer0.setPlot(combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultStatisticalCategoryDataset0, 10, 82, true, 1.0F, (-725.908803));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      JFreeChart jFreeChart0 = new JFreeChart("2+", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 10, 10, 10, 0, 15, false, false, true, false, false, false);
      Rectangle rectangle0 = chartPanel0.getBounds();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      Point2D.Double point2D_Double0 = (Point2D.Double)statisticalBarRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, rectangle0, categoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(4.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(811.2354947802373, "&");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      Rectangle2D rectangle2D0 = cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer0.getBlockAnchor();
      Point2D.Double point2D_Double0 = (Point2D.Double)scatterRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, rectangle0, cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Layer layer0 = Layer.BACKGROUND;
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(levelRenderer0.ZERO, (-413.1098857860093), levelRenderer0.ZERO, 4655.66, levelRenderer0.DEFAULT_OUTLINE_PAINT, levelRenderer0.DEFAULT_OUTLINE_STROKE);
      levelRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      boolean boolean0 = levelRenderer0.removeAnnotation(categoryLineAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      scatterRenderer0.setSeriesToolTipGenerator(2536, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setSeriesItemLabelGenerator(90, (CategoryItemLabelGenerator) null);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("s9", combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1331);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      levelRenderer0.drawOutline(graphics2D0, combinedRangeCategoryPlot0, rectangle2D_Double0);
      assertTrue(levelRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      double[][] doubleArray0 = new double[5][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      scatterRenderer0.initialise((Graphics2D) null, rectangle2D_Double0, combinedDomainCategoryPlot0, defaultIntervalCategoryDataset0, (PlotRenderingInfo) null);
      assertEquals(5, scatterRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, (-1389.572), false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      BufferedImage bufferedImage0 = new BufferedImage(1004, 11, 11);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1981.6794380569), (-0.7853981633974483), "K");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, subCategoryAxis0, cyclicNumberAxis0, stackedBarRenderer3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = stackedBarRenderer3D0.initialise(graphics2D0, rectangle0, categoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo0);
      assertEquals(5.3999999999999995, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer");
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis3D0, numberAxis3D0, stackedBarRenderer3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = stackedBarRenderer3D0.initialise((Graphics2D) null, rectangle2D_Double0, categoryPlot0, defaultCategoryDataset0, plotRenderingInfo0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      minMaxCategoryRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      CategoryToolTipGenerator categoryToolTipGenerator0 = minMaxCategoryRenderer0.getToolTipGenerator(2129, (-2690), false);
      assertSame(categoryToolTipGenerator0, intervalCategoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = scatterRenderer0.getSeriesToolTipGenerator(0);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ValueAxis valueAxis0 = levelRenderer0.getRangeAxis(categoryPlot0, 10);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = minMaxCategoryRenderer0.getPlot();
      assertNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      CategoryAxis categoryAxis0 = new CategoryAxis("({0}, {1}) = {3} - {4}");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, (ValueAxis) null, minMaxCategoryRenderer0);
      CategoryPlot categoryPlot1 = minMaxCategoryRenderer0.getPlot();
      assertTrue(categoryPlot1.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = lineRenderer3D0.getLegendItemLabelGenerator();
      lineRenderer3D0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator1 = lineRenderer3D0.getLegendItemURLGenerator();
      assertSame(categorySeriesLabelGenerator1, categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.addValue((Number) levelRenderer0.ZERO, (Comparable) levelRenderer0.ZERO, (Comparable) 0.2);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("{RS`N+WQ/&:f0");
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect((-3396));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      double double0 = levelRenderer0.getItemMiddle("{RS`N+WQ/&:f0", "{RS`N+WQ/&:f0", defaultCategoryDataset0, subCategoryAxis0, rectangle0, rectangleEdge0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.addValue((Number) levelRenderer0.ZERO, (Comparable) levelRenderer0.ZERO, (Comparable) 0.2);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("{RS`N+WQ/&:f0");
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      double double0 = levelRenderer0.getItemMiddle("{RS`N+WQ/&:f0", "{RS`N+WQ/&:f0", defaultCategoryDataset0, subCategoryAxis0, rectangle0, rectangleEdge0);
      assertEquals((-5.4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = minMaxCategoryRenderer0.getItemLabelGenerator(90, 90, true);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("({0}, {1}) = {2}", numberFormat0, numberFormat0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = minMaxCategoryRenderer0.getItemLabelGenerator(10, 10, false);
      assertSame(categoryItemLabelGenerator0, standardCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DrawingSupplier drawingSupplier0 = scatterRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis categoryAxis0 = stackedAreaRenderer0.getDomainAxis(categoryPlot0, (CategoryDataset) null);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(jDBCCategoryDataset0, extendedCategoryAxis0, (ValueAxis) null, layeredBarRenderer0);
      CategoryAxis categoryAxis0 = boxAndWhiskerRenderer0.getDomainAxis(categoryPlot0, jDBCCategoryDataset0);
      assertTrue(categoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = minMaxCategoryRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((double) 1.0F, (Comparable) "SAVE", (Comparable) ganttRenderer0.ZERO);
      defaultKeyedValues2DDataset0.addValue((Number) 0, (Comparable) true, (Comparable) ganttRenderer0.ZERO);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Range range0 = levelRenderer0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.addValue((Number) 10, (Comparable) false, (Comparable) 10);
      Range range0 = levelRenderer0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertEquals(10.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[6];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = levelRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.addValue((Number) 10, (Comparable) 1.0F, (Comparable) 1.0F);
      Range range0 = levelRenderer0.findRangeBounds(defaultCategoryDataset0);
      assertEquals(10.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Range range0 = stackedAreaRenderer0.findRangeBounds(jDBCCategoryDataset0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      boolean boolean0 = minMaxCategoryRenderer0.equals(minMaxCategoryRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      boolean boolean0 = minMaxCategoryRenderer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 1.0F, 1.0F, 3.0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 10, 10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = stackedBarRenderer3D0.createState(plotRenderingInfo0);
      Rectangle2D rectangle2D0 = stackedBarRenderer3D0.createHotSpotBounds((Graphics2D) null, rectangle2D_Double0, combinedDomainCategoryPlot0, categoryAxis0, (ValueAxis) null, slidingCategoryDataset0, (-1656), 10, false, categoryItemRendererState0, rectangle2D_Double0);
      assertNull(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.updateCrosshairValues(categoryCrosshairState0, 0.2, 0.2, 10, 1673, 10, 12.0, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.setSeriesURLGenerator((-188), (CategoryURLGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesURLGenerator((-804), (CategoryURLGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      // Undeclared exception!
      try { 
        barRenderer3D0.setSeriesToolTipGenerator((-550), (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.setSeriesItemLabelGenerator((-7), (CategoryItemLabelGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.2, 10, 1.0F, (double) levelRenderer0.ZERO, 10, 1.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(scatterRenderer0.DEFAULT_OUTLINE_PAINT, levelRenderer0.DEFAULT_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_PAINT, scatterRenderer0.DEFAULT_OUTLINE_PAINT);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.initialise((Graphics2D) null, rectangle2D0, categoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Line2D.Double line2D_Double0 = new Line2D.Double((-1806.1199716), (-183.664358), 0.0, 314.024189);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      NumberAxis numberAxis0 = new NumberAxis();
      // Undeclared exception!
      try { 
        scatterRenderer0.hitTest(2978.0, (-183.664358), (Graphics2D) null, rectangle0, (CategoryPlot) null, categoryAxis3D0, numberAxis0, (CategoryDataset) null, 0, 851, true, categoryStepRenderer_State0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle(10, 10, 10, 10);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("P4fo Z\u0005}W~yIyRRgy");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("P4fo Z\u0005}W~yIyRRgy");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        scatterRenderer0.hitTest(500, (-607.6806539), (Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, categoryAxis3D0, numberAxis3D0, jDBCCategoryDataset0, 10, 10, true, categoryStepRenderer_State0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      Rectangle rectangle0 = new Rectangle(0, 10);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      PeriodAxis periodAxis0 = new PeriodAxis("#?a");
      // Undeclared exception!
      try { 
        scatterRenderer0.hitTest((-433.8232053137), 1.0, (Graphics2D) null, rectangle0, (CategoryPlot) null, subCategoryAxis0, periodAxis0, taskSeriesCollection0, 0, (-968), false, categoryItemRendererState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.getRangeAxis((CategoryPlot) null, 89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)lineRenderer3D0.lookupLegendShape((-1632));
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("P[kq");
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      // Undeclared exception!
      try { 
        scatterRenderer0.getItemMiddle((-3.0), 6.0, defaultCategoryDataset0, subCategoryAxis0, rectangle2D_Double0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-1142), 3);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      // Undeclared exception!
      try { 
        scatterRenderer0.getItemMiddle(2.0, 0.0, slidingCategoryDataset0, categoryAxis0, rectangle2D_Double0, rectangleEdge0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.getDomainAxis((CategoryPlot) null, defaultStatisticalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.getDomainAxis(combinedDomainCategoryPlot0, defaultCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 9, (-951));
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      double[][] doubleArray0 = new double[8][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-2), 10);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        levelRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-2308), (-2308));
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.findRangeBounds(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<BarRenderer> stack0 = new Stack<BarRenderer>();
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) 0.2, (Comparable) 0.2);
      // Undeclared exception!
      try { 
        levelRenderer0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (Infinity) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Number[][] numberArray0 = new Number[5][8];
      Number[] numberArray1 = new Number[5];
      numberArray0[1] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 5, 119);
      // Undeclared exception!
      try { 
        scatterRenderer0.findRangeBounds(slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1.0F, 10);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ValueMarker valueMarker0 = new ValueMarker(0.0, stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), 0.2);
      // Undeclared exception!
      try { 
        ganttRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, cyclicNumberAxis0, valueMarker0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainCategoryPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_STROKE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1.0), 0.0, 10, 4.7161240493);
      MockDate mockDate0 = new MockDate((-2492L));
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = new Locale("", "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer", "");
      Month month0 = new Month(mockDate0, zoneInfo0, locale0);
      Week week0 = new Week();
      PeriodAxis periodAxis0 = new PeriodAxis("", month0, week0);
      // Undeclared exception!
      try { 
        ganttRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, periodAxis0, valueMarker0, rectangle2D_Double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.39240928132E12) <= upper (1.392409281319E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      SegmentedTimeline segmentedTimeline0 = new SegmentedTimeline(0L, 0, 3329);
      dateAxis0.setTimeline(segmentedTimeline0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ValueMarker valueMarker0 = new ValueMarker(0.2);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        ganttRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, dateAxis0, valueMarker0, rectangle2D_Double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.SegmentedTimeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DateAxis dateAxis0 = new DateAxis();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, dateAxis0, rectangle2D_Double0, 1.0F, dateAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 13);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("IGjeR]8o`V'd");
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(1.0E-100, (double) boxAndWhiskerRenderer0.ZERO, (-885.4879284), 1169.444, 3421.753883, 2007.733);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawRangeLine(graphics2D0, combinedDomainCategoryPlot0, logarithmicAxis0, rectangle2D0, 0.05, (Paint) null, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Week week0 = new Week(10, 10);
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.data.pie.DefaultPieDataset", week0, week0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawRangeLine((Graphics2D) null, combinedDomainCategoryPlot0, periodAxis0, rectangle2D_Double0, 0.0, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, periodAxis0.DEFAULT_TICK_MARK_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.39240928132E12) <= upper (1.392409281319E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Locale locale0 = JComponent.getDefaultLocale();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("M0^;[ 8}n`a", numberFormat0, numberFormat0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      JFreeChart jFreeChart0 = new JFreeChart("{2}", categoryAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 1.0F, (-8.86242601072943), chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawItemLabel(graphics2D0, plotOrientation0, defaultBoxAndWhiskerCategoryDataset0, 45, 930, false, 1.0, 10, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("({0}, {1}) = {2}", numberFormat0, numberFormat0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, (ValueAxis) null, scatterRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("3\"uM", scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 1.0F, 0.2, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawItemLabel(graphics2D0, plotOrientation0, (CategoryDataset) null, 45, 3, true, Double.NEGATIVE_INFINITY, 0.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("({0}, {1}) = {2}", numberFormat0, numberFormat0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("{2}", scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeCategoryPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawItemLabel(graphics2D0, plotOrientation0, defaultMultiValueCategoryDataset0, (-1304), (-1021), true, 13, 1.0F, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.2, 10, 1.0F, (double) levelRenderer0.ZERO, 10, 1.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, subCategoryAxis0, categoryMarker0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1.0F, 10);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D0, (-114.6550274), minMaxCategoryRenderer0.DEFAULT_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        levelRenderer0.drawBackground((Graphics2D) null, categoryPlot0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("org.jfree.data.xy.CategoryTableXYDataset", true, 1.0E-8);
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Ba%e item URL generator not loneable.");
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis3D0, dateAxis0, scatterRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 56, 0.05, (double) 2.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawAnnotations(graphics2D0, rectangle2D0, categoryAxis3D0, dateAxis0, layer0, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      CategoryAxis categoryAxis0 = new CategoryAxis("j%Mhid6R6~5nO");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("j%Mhid6R6~5nO");
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.createHotSpotBounds((Graphics2D) null, rectangle2D_Double0, combinedDomainCategoryPlot0, categoryAxis0, logarithmicAxis0, defaultKeyedValues2DDataset0, 500, (-1516), true, categoryItemRendererState0, rectangle2D_Double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      LevelRenderer levelRenderer0 = new LevelRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      // Undeclared exception!
      try { 
        levelRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, multiplePiePlot0.DEFAULT_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) ganttRenderer0.ZERO, "AU800%`<6IPlNum");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(timeSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer0.getBlockAnchor();
      // Undeclared exception!
      try { 
        scatterRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, (Rectangle2D) null, polarPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, (-425));
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, slidingGanttCategoryDataset0, (-425), 10, true, (-152.248498781541), (-1124.3524));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity(standardEntityCollection0, layeredBarRenderer0.DEFAULT_SHAPE, (CategoryDataset) null, 3, (-2919), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity(standardEntityCollection0, levelRenderer0.DEFAULT_SHAPE, defaultCategoryDataset0, (-1358), (-1358), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(scatterRenderer0.ZERO, (-240.488414517), scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, scatterRenderer0.DEFAULT_PAINT, scatterRenderer0.DEFAULT_STROKE);
      // Undeclared exception!
      try { 
        scatterRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.addValue((Number) levelRenderer0.ZERO, (Comparable) 0.2, (Comparable) levelRenderer0.ZERO);
      Range range0 = levelRenderer0.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Range range0 = levelRenderer0.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Range range0 = levelRenderer0.findRangeBounds((CategoryDataset) null, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("7@~c^OM;97", "Base tool tip generator not cloneable.", "$mo}ZtZHCxWSdHDfyH|");
      stackedBarRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setSeriesURLGenerator(3350, (CategoryURLGenerator) null, true);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryURLGenerator categoryURLGenerator0 = levelRenderer0.getURLGenerator(10, 10, false);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, true);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      areaRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      assertFalse(areaRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("`5;zy");
      LogAxis logAxis0 = new LogAxis();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      // Undeclared exception!
      try { 
        areaRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, subCategoryAxis0, logAxis0, defaultStatisticalCategoryDataset0, (-90), (-596), false, categoryItemRendererState0, (Rectangle2D) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle(3, 10);
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'hotspot' argument.");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.entity.AxisEntity");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds(graphics2D0, rectangle0, combinedDomainCategoryPlot0, categoryAxis0, logarithmicAxis0, (CategoryDataset) null, (-1649), (-994), true, categoryItemRendererState0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setSeriesURLGenerator(614, (CategoryURLGenerator) customCategoryURLGenerator0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity(standardEntityCollection0, minMaxCategoryRenderer0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, 614, 5, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 614, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = stackedBarRenderer3D0.createState(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1461, 1461);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.addEntity(entityCollection0, (Shape) null, slidingGanttCategoryDataset0, 1461, 1461, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      GeneralPath generalPath0 = new GeneralPath(categoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity(standardEntityCollection0, generalPath0, defaultMultiValueCategoryDataset0, 944, 2, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 944, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      LegendItemCollection legendItemCollection0 = scatterRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DateAxis dateAxis0 = new DateAxis("yRSJk0\n}Vt_w`(.");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 1573);
      assertEquals(1.0, valueAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueAxis valueAxis0 = levelRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      assertEquals(2.0F, valueAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      minMaxCategoryRenderer0.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = (MinMaxCategoryRenderer)minMaxCategoryRenderer0.clone();
      assertTrue(minMaxCategoryRenderer1.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      minMaxCategoryRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = (MinMaxCategoryRenderer)minMaxCategoryRenderer0.clone();
      assertTrue(minMaxCategoryRenderer1.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = (MinMaxCategoryRenderer)minMaxCategoryRenderer0.clone();
      assertTrue(minMaxCategoryRenderer1.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("P4fo Z\u0005}W~yIyRRgy");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("P4fo Z\u0005}W~yIyRRgy");
      Layer layer0 = Layer.BACKGROUND;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("P4fo Z\u0005}W~yIyRRgy", 0, 0.05, (-30.0));
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      // Undeclared exception!
      try { 
        scatterRenderer0.drawAnnotations((Graphics2D) null, defaultCaret0, categoryAxis3D0, numberAxis3D0, layer0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryTextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Base item URL generator not cloneable.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart("'!2&N%m,<hmP", scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      Layer layer0 = Layer.FOREGROUND;
      scatterRenderer0.drawAnnotations(graphics2D0, (Rectangle2D) null, categoryAxis0, numberAxis3D0, layer0, plotRenderingInfo0);
      assertEquals(1, scatterRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      // Undeclared exception!
      try { 
        scatterRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, (CategoryDataset) null, 41, 0, false, 0.0, 41, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      scatterRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, (CategoryDataset) null, 10, (-1), false, 0.0, 0.0, false);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false, true, true, true, false);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      scatterRenderer0.updateCrosshairValues((CategoryCrosshairState) null, levelRenderer0.ZERO, levelRenderer0.ZERO, (-2655.9812), 585, (-2947.9647), 1.0F, plotOrientation0);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        scatterRenderer0.updateCrosshairValues(categoryCrosshairState0, (Comparable) null, 0.2, 1673, 1, 8.0, 135.0, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(jDBCCategoryDataset0, categoryAxis0, (ValueAxis) null, minMaxCategoryRenderer0);
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      minMaxCategoryRenderer0.updateCrosshairValues(categoryCrosshairState0, scatterRenderer0.ZERO, "({0}, {1}) = {3} - {4}", (double) scatterRenderer0.ZERO, 1, 2.5E-6, 1, plotOrientation0);
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, (ValueAxis) null, minMaxCategoryRenderer0);
      DrawingSupplier drawingSupplier0 = minMaxCategoryRenderer0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Shape shape0 = lineRenderer3D0.lookupLegendShape((-1632));
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      double[][] doubleArray0 = new double[5][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, shape0, defaultIntervalCategoryDataset0, 84, 84, false, 6.0, 12.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Millisecond millisecond0 = new Millisecond();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Z5~cr-<s6(", millisecond0, 54.352556, 4.0);
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer0.equals(scatterRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", 0.05, 924.84000425384, (-30.0));
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer0.equals(scatterRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      assertTrue(scatterRenderer1.equals((Object)scatterRenderer0));
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      scatterRenderer1.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      boolean boolean0 = scatterRenderer1.equals(scatterRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      assertTrue(scatterRenderer1.equals((Object)scatterRenderer0));
      
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("({0}, {1}) = {3} - {4}", "({0}, {1}) = {2}", "");
      scatterRenderer1.setSeriesURLGenerator(9, (CategoryURLGenerator) standardCategoryURLGenerator0, false);
      boolean boolean0 = scatterRenderer1.equals(scatterRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      scatterRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer0.equals(scatterRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer1.equals(scatterRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem((-531), (-531));
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      CategoryAxis categoryAxis0 = new CategoryAxis("({0}, {1}) = {3} - {4}");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, (ValueAxis) null, minMaxCategoryRenderer0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getLegendItem((-2470), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Rectangle rectangle0 = new Rectangle(10, 10, (-2147), 10);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      LegendTitle legendTitle0 = new LegendTitle(levelRenderer0, columnArrangement0, columnArrangement0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicLocation();
      // Undeclared exception!
      try { 
        levelRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle0, rectangle0, numberAxis3D0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      LevelRenderer levelRenderer0 = new LevelRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Point2D.Double point2D_Double0 = (Point2D.Double)levelRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle2D_Double0, combinedRangeCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.2, 10, 1.0F, (double) levelRenderer0.ZERO, 10, 1.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Point2D.Double point2D_Double0 = (Point2D.Double)scatterRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle2D0, rectangle2D0, categoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      LabelBlock labelBlock0 = new LabelBlock("36YLJAd{]_:wC9#^J", statisticalBarRenderer0.DEFAULT_VALUE_LABEL_FONT, statisticalBarRenderer0.DEFAULT_PAINT);
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      // Undeclared exception!
      try { 
        scatterRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, (RectangleInsets) null, (LengthAdjustmentType) null, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DateAxis dateAxis0 = new DateAxis();
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(10);
      JColorChooser jColorChooser0 = new JColorChooser();
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jColorChooser0, 2, 10, 500, 10);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker((double) boxAndWhiskerRenderer0.ZERO, 2413.38911, levelRenderer0.DEFAULT_OUTLINE_PAINT);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      intervalMarker0.setLabel("({0}, {1}) = {3} - {4}");
      barRenderer3D0.drawRangeMarker(graphics2D0, categoryPlot0, dateAxis0, intervalMarker0, rectangle0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(420, 768, 2.0, (double) 420, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2715.2522, "COPY");
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 50000.0);
      EtchedBorder etchedBorder0 = new EtchedBorder(3);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) chartPanel0, (Border) etchedBorder0, 10, 13, 0, 500);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      ganttRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, intervalMarker0, rectangle0);
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 420, (double) 10, (double) 1.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2079.36296322401, "ZOOM_IN_DOMAIN");
      IntervalMarker intervalMarker0 = new IntervalMarker((-3220.6), 0.75);
      EtchedBorder etchedBorder0 = new EtchedBorder((-1));
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) chartPanel0, (Border) etchedBorder0, (-1), (-1738), 67, (-2663));
      ganttRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, cyclicNumberAxis0, intervalMarker0, rectangle0);
      assertEquals(1.0, rectangle0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      IntervalMarker intervalMarker0 = new IntervalMarker(1919.3828783, (double) levelRenderer0.ZERO);
      barRenderer3D0.drawRangeMarker((Graphics2D) null, categoryPlot0, cyclicNumberAxis0, intervalMarker0, rectangle2D0);
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(0.2, 10, 1.0F, (double) levelRenderer0.ZERO, 10, 1.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1623.48, (-194.0146798));
      barRenderer3D0.drawRangeMarker((Graphics2D) null, categoryPlot0, cyclicNumberAxis0, (Marker) null, rectangle2D0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ValueMarker valueMarker0 = new ValueMarker(0.05);
      valueMarker0.setLabel("org.jfree.chart.renderer.RenderAttributes");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ganttRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, dateAxis0, valueMarker0, rectangle2D_Double0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      BufferedImage bufferedImage0 = new BufferedImage(2418, 500, 2);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(0);
      SystemColor systemColor0 = SystemColor.menu;
      JColorChooser jColorChooser0 = new JColorChooser(systemColor0);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jColorChooser0, 2, (-1185), 2418, 0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ValueMarker valueMarker0 = new ValueMarker(0.0, ganttRenderer0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_GRIDLINE_STROKE);
      Rectangle2D rectangle2D0 = dateAxis0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0);
      ganttRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, dateAxis0, valueMarker0, rectangle2D0);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      BufferedImage bufferedImage0 = new BufferedImage(2418, 500, 2);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(0);
      SystemColor systemColor0 = SystemColor.menu;
      JColorChooser jColorChooser0 = new JColorChooser(systemColor0);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jColorChooser0, 2, (-1185), 2418, 0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ValueMarker valueMarker0 = new ValueMarker((-1903.861), ganttRenderer0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_GRIDLINE_STROKE);
      Rectangle2D rectangle2D0 = dateAxis0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0);
      ganttRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, dateAxis0, valueMarker0, rectangle2D0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DateAxis dateAxis0 = new DateAxis();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis0, dateAxis0, boxAndWhiskerRenderer0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0.0F);
      boxAndWhiskerRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, categoryAxis0, categoryMarker0, rectangle2D_Double0);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DateAxis dateAxis0 = new DateAxis();
      BufferedImage bufferedImage0 = new BufferedImage(2418, 500, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(0);
      SystemColor systemColor0 = SystemColor.menu;
      JColorChooser jColorChooser0 = new JColorChooser(systemColor0);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jColorChooser0, 2, (-1185), 2418, 0);
      boxAndWhiskerRenderer0.drawRangeLine(graphics2D0, categoryPlot0, dateAxis0, rectangle0, 5000000.0, scatterRenderer0.DEFAULT_OUTLINE_PAINT, scatterRenderer0.DEFAULT_STROKE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'plot' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Base item URL generator not cloneable.", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1200, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(6, 10);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.drawRangeLine(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, rectangle2D0, 0.05, categoryPlot0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(9, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(10);
      stackedBarRenderer3D0.drawDomainLine(graphics2D0, categoryPlot0, rectangle0, 4065.0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1.0F, 10);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D0, 0.0, (Paint) null, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.2);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D0, (-900.97544), combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.addValue((Number) levelRenderer0.ZERO, (Comparable) 0.2, (Comparable) 0.2);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Range range0 = minMaxCategoryRenderer0.findRangeBounds(defaultCategoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      levelRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      Range range0 = levelRenderer0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis("$C-^UT`S*UT&pe|");
      MockDate mockDate0 = new MockDate((-1484), 17, (-1484), (-1484), 17);
      Month month0 = new Month(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("=RmfH4{q2?UQ\"Nh&L+", month0, month0);
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, periodAxis0, minMaxCategoryRenderer0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, defaultCaret0, categoryPlot0, defaultStatisticalCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("o)//*cn9_:P@y^");
      statisticalBarRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        levelRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      scatterRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, false);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer1.equals(scatterRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      String[] stringArray0 = new String[3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-2810), 8);
      // Undeclared exception!
      try { 
        levelRenderer0.addEntity(standardEntityCollection0, categoryPlot0.DEFAULT_LEGEND_ITEM_BOX, slidingCategoryDataset0, 8, 8, true, (-1441.8620583787465), 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("", numberFormat0);
      scatterRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer1.equals(scatterRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(3.0, 4.0, true);
      stackedBarRenderer3D0.setSeriesToolTipGenerator(1119, (CategoryToolTipGenerator) null, false);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("ToJ]*.U5~0buS", numberFormat0);
      statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator(10, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      statisticalLineAndShapeRenderer0.setPlot(combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultStatisticalCategoryDataset0, 10, 10, true, 10, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      areaRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
      assertEquals(1, areaRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setSeriesItemLabelGenerator(15, (CategoryItemLabelGenerator) null, true);
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      levelRenderer0.setSeriesItemLabelGenerator(1700, categoryItemLabelGenerator0, false);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      stackedBarRenderer3D0.setSeriesURLGenerator(10, (CategoryURLGenerator) standardCategoryURLGenerator0);
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer3D0.getURLGenerator(10, 10, true);
      assertSame(categoryURLGenerator0, standardCategoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = boxAndWhiskerRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryURLGenerator categoryURLGenerator0 = lineAndShapeRenderer0.getSeriesURLGenerator(0);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      // Undeclared exception!
      try { 
        levelRenderer0.createHotSpotShape((Graphics2D) null, rectangle2D0, combinedRangeCategoryPlot0, categoryAxis3D0, cyclicNumberAxis0, (CategoryDataset) null, 500, 2346, true, (CategoryItemRendererState) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("({0}, {1}) = {2}", numberFormat0, numberFormat0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = (MinMaxCategoryRenderer)minMaxCategoryRenderer0.clone();
      assertFalse(minMaxCategoryRenderer1.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      minMaxCategoryRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = (MinMaxCategoryRenderer)minMaxCategoryRenderer0.clone();
      assertTrue(minMaxCategoryRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = scatterRenderer0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DateFormat dateFormat0 = DateFormat.getInstance();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("", dateFormat0);
      // Undeclared exception!
      try { 
        levelRenderer0.setSeriesToolTipGenerator((-549), (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      minMaxCategoryRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      CategoryToolTipGenerator categoryToolTipGenerator0 = minMaxCategoryRenderer0.getBaseToolTipGenerator();
      assertSame(categoryToolTipGenerator0, intervalCategoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2418, 500, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(0);
      SystemColor systemColor0 = SystemColor.menu;
      JColorChooser jColorChooser0 = new JColorChooser(systemColor0);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jColorChooser0, 2, (-1185), 2418, 0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.drawBackground(graphics2D0, categoryPlot0, rectangle0);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = stackedAreaRenderer0.getSeriesItemLabelGenerator(1365);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = levelRenderer0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2.9105205391, 2.9105205391, true);
      stackedBarRenderer3D0.removeAnnotations();
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("9J]@'t2T>");
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      try { 
        minMaxCategoryRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryURLGenerator categoryURLGenerator0 = scatterRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = minMaxCategoryRenderer0.getToolTipGenerator(2129, (-2690), false);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.drawOutline((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 10, 3529, (-227), 9, 500, true, true, true, true, false, false);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(0, 3529);
      RectangleEdge rectangleEdge0 = categoryPlot0.getDomainAxisEdge(3529);
      // Undeclared exception!
      try { 
        lineRenderer3D0.getItemMiddle(true, true, defaultCategoryDataset0, (CategoryAxis) null, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      int int0 = areaRenderer0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      statisticalBarRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Range range0 = minMaxCategoryRenderer0.findRangeBounds(defaultCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.initialise((Graphics2D) null, rectangle2D_Double0, categoryPlot0, defaultCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("(%_Grw1|v*k$Gxi[", "(%_Grw1|v*k$Gxi[", (double) scatterRenderer0.ZERO);
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertEquals(1, scatterRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = minMaxCategoryRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesItemLabelGenerator((-293), (CategoryItemLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }
}
