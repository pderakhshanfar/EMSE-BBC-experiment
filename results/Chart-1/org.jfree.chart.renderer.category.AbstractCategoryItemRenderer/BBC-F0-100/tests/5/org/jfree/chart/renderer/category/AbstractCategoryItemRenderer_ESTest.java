/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 19:59:38 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JInternalFrame;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setRenderer((CategoryItemRenderer) boxAndWhiskerRenderer0, false);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      boxAndWhiskerRenderer0.updateCrosshairValues(categoryCrosshairState0, false, 0.2, (-1096.606), 11, (double) levelRenderer0.ZERO, 11, plotOrientation0);
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, dateAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      JFreeChart jFreeChart0 = new JFreeChart("zcTNp2a\"", combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 4627, 0, 748, 10, 10, 10, false, true, true, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      Rectangle2D rectangle2D1 = chartRenderingInfo0.getChartArea();
      Point2D.Double point2D_Double0 = (Point2D.Double)layeredBarRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D1, rectangle2D0, paintScaleLegend0.DEFAULT_PADDING, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals((-1.0), point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, (Rectangle2D) null, thermometerPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(10, 0.0F, 1.0F, 0.0F, 1.7168744F, 1.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Layer layer0 = Layer.BACKGROUND;
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis("ZOOM_IN_DOMAIN");
      lineRenderer3D0.drawAnnotations((Graphics2D) null, rectangle2D0, categoryAxis3D0, logAxis0, layer0, plotRenderingInfo0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.hashCode();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      areaRenderer0.setSeriesURLGenerator(522, (CategoryURLGenerator) null);
      assertEquals(0, areaRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float((-1320.8989F), 0.0F, 1.0F, (-1468.03F), (-250), (-1306.2981F));
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 705);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Locale locale0 = new Locale("R/9d}vlS8;4", "tHh_9=aKG;5T$.3,.");
      DateAxis dateAxis0 = new DateAxis("tHh_9=aKG;5T$.3,.", simpleTimeZone0, locale0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      statisticalLineAndShapeRenderer0.drawDomainLine(graphics2D0, combinedRangeCategoryPlot0, rectangle2D0, (-250.0F), combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT, fastScatterPlot0.DEFAULT_GRIDLINE_STROKE);
      assertNull(fastScatterPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 13, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JFreeChart jFreeChart0 = new JFreeChart("{2}", boxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea((-2516), (-2314));
      levelRenderer0.drawBackground(graphics2D0, categoryPlot0, rectangle2D0);
      assertEquals(0.0, rectangle2D0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      double[][] doubleArray0 = new double[8][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultCategoryItemRenderer0.addEntity(standardEntityCollection0, defaultCategoryItemRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 6, 1, true, 0.01, 0.0);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DateFormat dateFormat0 = DateFormat.getDateInstance(2);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("SeriesRenderingOrder.FORWARD", dateFormat0);
      stackedBarRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, true);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator1 = (IntervalCategoryToolTipGenerator)stackedBarRenderer3D0.getToolTipGenerator(2, 18, false);
      assertEquals("SeriesRenderingOrder.FORWARD", intervalCategoryToolTipGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      ValueAxis valueAxis0 = minMaxCategoryRenderer0.getRangeAxis(categoryPlot0, 3);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-87.40318784848), 10.0);
      cyclicNumberAxis0.setTickUnit(cyclicNumberAxis0.DEFAULT_TICK_UNIT);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      ValueAxis valueAxis0 = minMaxCategoryRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 10);
      assertTrue(valueAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis3D0, valueAxis0, statisticalLineAndShapeRenderer0);
      ValueAxis valueAxis1 = categoryStepRenderer0.getRangeAxis(categoryPlot0, (-378));
      assertFalse(valueAxis1.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(3.0, 3.0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      ValueAxis valueAxis0 = barRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, 10);
      assertEquals(0.0, valueAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryPlot categoryPlot0 = categoryStepRenderer0.getPlot();
      assertNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      combinedDomainCategoryPlot0.setRenderer((CategoryItemRenderer) boxAndWhiskerRenderer0, false);
      CategoryPlot categoryPlot0 = boxAndWhiskerRenderer0.getPlot();
      assertEquals(1, categoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Vector<AreaRenderer> vector0 = new Vector<AreaRenderer>();
      defaultMultiValueCategoryDataset0.add(vector0, defaultCategoryItemRenderer0.ZERO, defaultCategoryItemRenderer0.ZERO);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("l?m-.");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1838.5879), 5, 2.0F, 0.0F);
      double double0 = categoryStepRenderer0.getItemMiddle(defaultCategoryItemRenderer0.ZERO, defaultCategoryItemRenderer0.ZERO, defaultMultiValueCategoryDataset0, extendedCategoryAxis0, rectangle2D_Double0, (RectangleEdge) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      waterfallBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)waterfallBarRenderer0.getItemLabelGenerator((-250), 1447, false);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis categoryAxis0 = stackedBarRenderer3D0.getDomainAxis(combinedRangeCategoryPlot0, (CategoryDataset) null);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = statisticalBarRenderer0.getDomainAxis(combinedDomainCategoryPlot0, (CategoryDataset) null);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalLineAndShapeRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("({0}, {1}) = {3} - {4}", numberFormat0, numberFormat0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = defaultCategoryItemRenderer0.getBaseItemLabelGenerator();
      assertSame(categoryItemLabelGenerator0, standardCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      Number[][] numberArray0 = new Number[4][9];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) categoryStepRenderer0.ZERO;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[1] = (Number) 3.0;
      numberArray0[2] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = categoryStepRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(3.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      Number[][] numberArray0 = new Number[4][9];
      Number[] numberArray1 = new Number[2];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[1] = (Number) 3.0;
      numberArray0[2] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = categoryStepRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[4];
      numberArray1[1] = (Number) 0.05;
      numberArray0[1] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = categoryStepRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.05, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (-1156.7681967471192);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = categoryStepRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals((-1156.7681967471192), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      boolean boolean0 = defaultCategoryItemRenderer0.equals(defaultCategoryItemRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      boolean boolean0 = lineRenderer3D0.equals(standardGradientPaintTransformer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = scatterRenderer0.createState(plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.setSeriesURLGenerator((-250), (CategoryURLGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator((-534), (CategoryToolTipGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator((-3681), (CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesItemLabelGenerator((-2247), (CategoryItemLabelGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("_", mockSimpleDateFormat0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.setSeriesItemLabelGenerator((-1), (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 500);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.initialise((Graphics2D) null, rectangle2D_Double0, combinedRangeCategoryPlot0, slidingGanttCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, (CategoryDataset) null, (PlotRenderingInfo) null);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 3013);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.hitTest(382.625, (-2796.7), (Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, categoryAxis3D0, numberAxis0, slidingGanttCategoryDataset0, 10, 9, false, categoryItemRendererState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      JInternalFrame jInternalFrame0 = new JInternalFrame("", false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      PeriodAxis periodAxis0 = new PeriodAxis("");
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.hitTest(2.0, 1.0, (Graphics2D) null, rectangle0, combinedDomainCategoryPlot0, categoryAxis0, periodAxis0, defaultBoxAndWhiskerCategoryDataset0, 0, (-753), false, (CategoryItemRendererState) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getRangeAxis((CategoryPlot) null, (-5334));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        lineRenderer3D0.getItemMiddle(0.2, 3.0, defaultBoxAndWhiskerCategoryDataset0, (CategoryAxis) null, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.getDomainAxis((CategoryPlot) null, (CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.getDomainAxis(categoryPlot0, defaultCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Number[][] numberArray0 = new Number[6][3];
      Number[] numberArray1 = new Number[8];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[4];
      numberArray0[1] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1674.93407), "YT[m1+n[-");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) lineRenderer3D0.ZERO, 0.0F, 0.2, 0.0);
      TextBox textBox0 = new TextBox();
      Paint paint0 = textBox0.getShadowPaint();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, cyclicNumberAxis0, rectangle2D_Double0, 0.0, paint0, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 2665.95608, 1232.35097, 0.0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      PeriodAxis periodAxis0 = new PeriodAxis(";Tt.+)", regularTimePeriod0, fixedMillisecond0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, periodAxis0, rectangle2D_Double0, 0.0F, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.392409281321E12) <= upper (1.39240928132E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(5, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.drawOutline(graphics2D0, (CategoryPlot) null, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(spiderWebPlot0.DEFAULT_BACKGROUND_PAINT, spiderWebPlot0.DEFAULT_LABEL_SHADOW_PAINT, spiderWebPlot0.DEFAULT_LABEL_OUTLINE_PAINT, spiderWebPlot0.DEFAULT_LABEL_SHADOW_PAINT);
      waterfallBarRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0, true);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.drawItemLabel((Graphics2D) null, (PlotOrientation) null, defaultMultiValueCategoryDataset0, 10, (-203), true, 0.25, 0.0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(spiderWebPlot0.DEFAULT_LABEL_OUTLINE_PAINT, stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT, stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_PAINT, spiderWebPlot0.DEFAULT_BACKGROUND_PAINT);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      waterfallBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      JFreeChart jFreeChart0 = new JFreeChart("{2}", spiderWebPlot0.DEFAULT_LABEL_FONT, spiderWebPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3168, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.drawItemLabel(graphics2D0, (PlotOrientation) null, (CategoryDataset) null, 3168, 3168, true, 0.2, 0.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(minMaxCategoryRenderer0.DEFAULT_OUTLINE_PAINT, spiderWebPlot0.DEFAULT_LABEL_OUTLINE_PAINT, spiderWebPlot0.DEFAULT_BACKGROUND_PAINT, spiderWebPlot0.DEFAULT_OUTLINE_PAINT);
      waterfallBarRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      JFreeChart jFreeChart0 = new JFreeChart("LSn}J&B:`CxR{D'5d[", minMaxCategoryRenderer0.DEFAULT_VALUE_LABEL_FONT, spiderWebPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(8, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.drawItemLabel(graphics2D0, (PlotOrientation) null, defaultBoxAndWhiskerCategoryDataset0, (-752), 1, false, 0.2, (-1.0), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(statisticalLineAndShapeRenderer0.ZERO);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.drawDomainMarker((Graphics2D) null, combinedDomainCategoryPlot0, categoryAxis0, categoryMarker0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(723, 10, 840.35728786, (double) lineRenderer3D0.ZERO, (ChartRenderingInfo) null);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CategoryAxis categoryAxis0 = new CategoryAxis("/r=yV;jBY5!\"}");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.drawAnnotations(graphics2D0, defaultCaret0, categoryAxis0, valueAxis0, (Layer) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      LogAxis logAxis0 = new LogAxis("n?H`5r");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("{2}");
      // Undeclared exception!
      try { 
        levelRenderer0.createHotSpotBounds((Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, extendedCategoryAxis0, logAxis0, defaultBoxAndWhiskerCategoryDataset0, 200, 0, false, categoryItemRendererState0, (Rectangle2D) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(1.0F, 512.401F, 1.0F, 1.7168744F, 10, 143.64252F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      // Undeclared exception!
      try { 
        layeredBarRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, (Rectangle2D) null, categoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, categoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryStepRenderer_State0.getEntityCollection();
      double[][] doubleArray0 = new double[4][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 1, 10);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addEntity(entityCollection0, categoryStepRenderer_State0.line, slidingCategoryDataset0, 10, 10, false, 1.0, 3.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.addEntity(standardEntityCollection0, boxAndWhiskerRenderer0.DEFAULT_SHAPE, defaultKeyedValues2DDataset0, (-1156), (-824), false, (-824), (-304.837811764));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addEntity((EntityCollection) null, lineRenderer3D0.DEFAULT_SHAPE, (CategoryDataset) null, 1853, 1853, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.addEntity(standardEntityCollection0, combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, defaultCategoryDataset0, (-5443), (-5443), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("org.jfree.chart.annotations.XYShapeAnnotation", "org.jfree.chart.annotations.XYShapeAnnotation", 8.0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 633, 5, (-30), 5, 1168, 10, false, true, true, true, false, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("ZOOM_IN_RANGE");
      // Undeclared exception!
      try { 
        levelRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, categoryAxis3D0, (ValueAxis) null, defaultBoxAndWhiskerCategoryDataset0, 1168, (-2113), true, categoryItemRendererState0, (Rectangle2D) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 5139, (-22));
      waterfallBarRenderer0.drawItemLabel((Graphics2D) null, (PlotOrientation) null, slidingGanttCategoryDataset0, (-5443), 5139, true, 15.0, (double) statisticalLineAndShapeRenderer0.ZERO, true);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.updateCrosshairValues(categoryCrosshairState0, true, false, 1.0F, 10, 1.0F, 1.0F, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      Stack<CustomCategoryURLGenerator> stack0 = new Stack<CustomCategoryURLGenerator>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, statisticalBarRenderer0.ZERO, 10);
      Range range0 = categoryStepRenderer0.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      Range range0 = categoryStepRenderer0.findRangeBounds((CategoryDataset) null, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0, true);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(3.0, (double) stackedBarRenderer3D0.ZERO, 0.2, 2500000.0, categoryStepRenderer0.DEFAULT_PAINT, stackedBarRenderer3D0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      categoryStepRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryURLGenerator categoryURLGenerator0 = stackedAreaRenderer0.getURLGenerator(2116, (-1194), true);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setSeriesToolTipGenerator(1, (CategoryToolTipGenerator) null, true);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalLineAndShapeRenderer0.getToolTipGenerator((-1), 0, false);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", numberFormat0);
      statisticalLineAndShapeRenderer0.setSeriesItemLabelGenerator(10, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = waterfallBarRenderer0.getItemLabelGenerator(0, 0, false);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(statisticalBarRenderer0.DEFAULT_OUTLINE_PAINT, statisticalBarRenderer0.DEFAULT_PAINT, statisticalBarRenderer0.DEFAULT_OUTLINE_PAINT, categoryStepRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineAndShapeRenderer0.getSeriesToolTipGenerator(127);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 1.0F, 1.0F, 1.0F);
      NumberAxis numberAxis0 = new NumberAxis();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedDomainCategoryPlot0, (CategoryDataset) null, (PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.hitTest((-256.5), 0.0, (Graphics2D) null, rectangle2D_Float0, combinedDomainCategoryPlot0, categoryAxis0, numberAxis0, (CategoryDataset) null, 3359, 2, true, categoryItemRendererState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(piePlot3D0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis("RawZ5");
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.initialise((Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.createHotSpotBounds((Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, categoryAxis3D0, logAxis0, (CategoryDataset) null, 500, 1024, true, categoryItemRendererState0, defaultCaret0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      categoryStepRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addEntity((EntityCollection) null, defaultCategoryItemRenderer0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, 86, 5, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 86, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("mac os x", numberFormat0);
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, waterfallBarRenderer0.DEFAULT_SHAPE, defaultStatisticalCategoryDataset0, 1729, (-1), false, 1729, (double) stackedAreaRenderer0.ZERO);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1729, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ItemLabelGenerator not cloneable.");
      CategoryPlot categoryPlot0 = new CategoryPlot(jDBCCategoryDataset0, (CategoryAxis) null, numberAxis3D0, waterfallBarRenderer0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.setPlot(categoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, (Shape) null, jDBCCategoryDataset0, 8, 7, true, (-1000.40287113679), (double) waterfallBarRenderer0.ZERO);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultMultiValueCategoryDataset0, (-4), 10, false, 5, 0.2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      double[][] doubleArray0 = new double[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultIntervalCategoryDataset0, (-1525), (-250), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, numberAxis3D0, stackedBarRenderer3D0);
      JFreeChart jFreeChart0 = new JFreeChart("M}", categoryAxis0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      // Undeclared exception!
      jFreeChart0.createBufferedImage(10, 232, (double) 420, (double) 200, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      LegendItemCollection legendItemCollection0 = waterfallBarRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      combinedDomainCategoryPlot0.setRenderer((CategoryItemRenderer) boxAndWhiskerRenderer0, false);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.getLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'annotation' argument.");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logarithmicAxis0);
      ValueAxis valueAxis0 = minMaxCategoryRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = defaultCategoryItemRenderer0.getLegendItemLabelGenerator();
      defaultCategoryItemRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = (DefaultCategoryItemRenderer)defaultCategoryItemRenderer0.clone();
      assertTrue(defaultCategoryItemRenderer1.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("YnDctZ'9a]nG2?>_4*f");
      stackedBarRenderer3D0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      StackedBarRenderer3D stackedBarRenderer3D1 = (StackedBarRenderer3D)stackedBarRenderer3D0.clone();
      assertTrue(stackedBarRenderer3D1.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      lineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
      try { 
        lineAndShapeRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("*:Yq(+1;", numberFormat0);
      defaultCategoryItemRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = (DefaultCategoryItemRenderer)defaultCategoryItemRenderer0.clone();
      assertFalse(defaultCategoryItemRenderer1.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(8.0, 727.0, "Auto Range");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.updateCrosshairValues((CategoryCrosshairState) null, true, 500, 1.0E-8, 2, (-340.98247), 0.0, plotOrientation0);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.updateCrosshairValues(categoryCrosshairState0, 1.0F, waterfallBarRenderer0.ZERO, 366.2, 2, (-1.7976931348623157E308), 2, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, numberAxis3D0, stackedBarRenderer3D0);
      DrawingSupplier drawingSupplier0 = stackedBarRenderer3D0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DrawingSupplier drawingSupplier0 = stackedBarRenderer3D0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", defaultCategoryItemRenderer0.ZERO, (double) defaultCategoryItemRenderer0.ZERO);
      defaultCategoryItemRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = new DefaultCategoryItemRenderer();
      boolean boolean0 = defaultCategoryItemRenderer0.equals(defaultCategoryItemRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = new DefaultCategoryItemRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", defaultCategoryItemRenderer1.ZERO, (double) defaultCategoryItemRenderer1.ZERO, 10.0);
      assertTrue(defaultCategoryItemRenderer1.equals((Object)defaultCategoryItemRenderer0));
      
      Layer layer0 = Layer.BACKGROUND;
      defaultCategoryItemRenderer1.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      boolean boolean0 = defaultCategoryItemRenderer0.equals(defaultCategoryItemRenderer1);
      assertFalse(defaultCategoryItemRenderer1.equals((Object)defaultCategoryItemRenderer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer(false);
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      stackedAreaRenderer1.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      boolean boolean0 = stackedAreaRenderer1.equals(stackedAreaRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = new DefaultCategoryItemRenderer();
      assertTrue(defaultCategoryItemRenderer1.equals((Object)defaultCategoryItemRenderer0));
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("HL-p&d39");
      defaultCategoryItemRenderer1.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      boolean boolean0 = defaultCategoryItemRenderer0.equals(defaultCategoryItemRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      defaultCategoryItemRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = new DefaultCategoryItemRenderer();
      boolean boolean0 = defaultCategoryItemRenderer0.equals(defaultCategoryItemRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("BahCO:-mSc2-Ux1bW", dateFormat0);
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      intervalBarRenderer0.setSeriesItemLabelGenerator(10, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      boolean boolean0 = intervalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer(false);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setPlot(categoryPlot0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getLegendItem(10, 71);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale(0.0, 4.0, categoryPlot0.DEFAULT_CROSSHAIR_PAINT);
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'plot' argument.");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, periodAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      // Undeclared exception!
      try { 
        layeredBarRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, rectangle2D0, (RectangleInsets) null, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      // Undeclared exception!
      try { 
        layeredBarRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, (Rectangle2D) null, (Rectangle2D) null, thermometerPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("{2}", combinedRangeCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedRangeCategoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 15, 10, 10, 0, 10, true, false, false, false, true, true, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle2D_Double0, rectangle0, combinedRangeCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(10, (-1.0F), (-1.0F), 10, 10, 10);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D1 = roundRectangle2D_Double0.getBounds2D();
      Point2D.Double point2D_Double0 = (Point2D.Double)minMaxCategoryRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, rectangle2D1, categoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(8.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      Point2D.Double point2D_Double0 = (Point2D.Double)minMaxCategoryRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, rectangle2D_Double0, categoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals((-4.0), point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      IntervalMarker intervalMarker0 = new IntervalMarker((-121.299346622), 0.0, stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT, stackedBarRenderer3D0.DEFAULT_STROKE, stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT, stackedBarRenderer3D0.DEFAULT_OUTLINE_STROKE, 0.0F);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      stackedBarRenderer3D0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, numberAxis0, intervalMarker0, rectangle2D_Float0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 1.0F, 1.0F, 1.0F);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      NumberAxis numberAxis0 = new NumberAxis();
      stackedBarRenderer3D0.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, numberAxis0, categoryMarker0, rectangle2D_Float0);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("]6tc Y}Wy=[hH=");
      ValueMarker valueMarker0 = new ValueMarker((-568.1), categoryAxis0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      categoryStepRenderer0.drawRangeMarker((Graphics2D) null, (CategoryPlot) null, numberAxis3D0, valueMarker0, rectangle2D_Float0);
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("(");
      ValueMarker valueMarker0 = new ValueMarker(0.0F, statisticalLineAndShapeRenderer0.DEFAULT_PAINT, statisticalLineAndShapeRenderer0.DEFAULT_STROKE);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.drawRangeMarker((Graphics2D) null, (CategoryPlot) null, numberAxis3D0, valueMarker0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Layer layer0 = Layer.BACKGROUND;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, numberAxis3D0, stackedBarRenderer3D0);
      JFreeChart jFreeChart0 = new JFreeChart("PRINT", numberAxis3D0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.2, 969.4);
      categoryPlot0.addRangeMarker((Marker) intervalMarker0, layer0);
      // Undeclared exception!
      jFreeChart0.createBufferedImage(10, 232, (double) 420, (double) 200, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, numberAxis3D0, stackedBarRenderer3D0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      categoryPlot0.addDomainMarker(categoryMarker0);
      JFreeChart jFreeChart0 = new JFreeChart("PRINT", numberAxis3D0.DEFAULT_TICK_LABEL_FONT, categoryPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      // Undeclared exception!
      jFreeChart0.createBufferedImage(10, 232, (double) 420, (double) 200, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1674.93407), "YT[m1+n[-");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Color color0 = Color.darkGray;
      minMaxCategoryRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, cyclicNumberAxis0, rectangle2D_Double0, (-1058.066961873929), color0, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1025.77625), "");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) waterfallBarRenderer0.ZERO, 500, 2.0, (-1674.93407));
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("YT[m1+n[-", combinedRangeCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 5, 12.0, 1.0, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      minMaxCategoryRenderer0.drawRangeLine(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, rectangle2D_Double0, 0.5F, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(10, (-1451.17F), 1.0F, (-1451.17F), 1.0F, 480.42F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainLine((Graphics2D) null, categoryPlot0, rectangle2D0, 1.0F, categoryPlot0.DEFAULT_BACKGROUND_PAINT, categoryPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(10, (-1451.2F), (-1451.2F), 1.0F);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainLine((Graphics2D) null, categoryPlot0, rectangle2D_Float0, 1.0F, (Paint) null, categoryPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      JFreeChart jFreeChart0 = new JFreeChart("E}an^", combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1, 2, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double(2.0, 0.0, 10, (-1374.834825), 135.0, (-3952.50578));
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainLine(graphics2D0, combinedDomainCategoryPlot0, rectangle2D0, 0.0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.setValue((Number) categoryStepRenderer0.ZERO, (Comparable) categoryStepRenderer0.ZERO, (Comparable) 5);
      Range range0 = categoryStepRenderer0.findRangeBounds(jDBCCategoryDataset0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      categoryStepRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      Range range0 = categoryStepRenderer0.findRangeBounds(defaultMultiValueCategoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("%^\"l%QS1b");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F);
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis3D0, cyclicNumberAxis0, lineRenderer3D0);
      ValueAxis valueAxis0 = lineRenderer3D0.getRangeAxis(categoryPlot0, 2709);
      assertFalse(valueAxis0.isInverted());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(3147.6372F, 3147.6372F, (-2324.7239F), 1839.5F);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1688.493F), "UK)c`zf.Qj");
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis3D0, cyclicNumberAxis0, stackedBarRenderer3D0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CategoryItemRendererState categoryItemRendererState0 = stackedBarRenderer3D0.initialise((Graphics2D) null, rectangle2D_Float0, categoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 13, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JFreeChart jFreeChart0 = new JFreeChart("{2}", boxAndWhiskerRenderer0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea((-2516), (-2314));
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.initialise(graphics2D0, rectangle2D0, categoryPlot0, defaultKeyedValues2DDataset0, (PlotRenderingInfo) null);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Vector<GanttRenderer> vector0 = new Vector<GanttRenderer>();
      LogAxis logAxis0 = new LogAxis("");
      NumberTickUnit numberTickUnit0 = logAxis0.getTickUnit();
      defaultMultiValueCategoryDataset0.add(vector0, numberTickUnit0, 10);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(5, 1416);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.initialise((Graphics2D) null, rectangle2D0, categoryPlot0, defaultMultiValueCategoryDataset0, plotRenderingInfo0);
      assertEquals(1, minMaxCategoryRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("$}&N)gI;0");
      defaultCategoryItemRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = new DefaultCategoryItemRenderer();
      boolean boolean0 = defaultCategoryItemRenderer0.equals(defaultCategoryItemRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      defaultCategoryItemRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = (DefaultCategoryItemRenderer)defaultCategoryItemRenderer0.clone();
      assertFalse(defaultCategoryItemRenderer1.getUseSeriesOffset());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setSeriesURLGenerator(10, (CategoryURLGenerator) null, true);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setSeriesURLGenerator(2, (CategoryURLGenerator) null, false);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("mac os x", numberFormat0);
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, false);
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer(false);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      DecimalFormat decimalFormat0 = new DecimalFormat("oQpK>|`k0v!zQp0h");
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("{2}", decimalFormat0);
      statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator(132, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(minMaxCategoryRenderer0.DEFAULT_OUTLINE_PAINT, spiderWebPlot0.DEFAULT_LABEL_OUTLINE_PAINT, spiderWebPlot0.DEFAULT_BACKGROUND_PAINT, spiderWebPlot0.DEFAULT_OUTLINE_PAINT);
      waterfallBarRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      JFreeChart jFreeChart0 = new JFreeChart("LSn}J&B:`CxR{D'5d[", minMaxCategoryRenderer0.DEFAULT_VALUE_LABEL_FONT, spiderWebPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.drawItemLabel(graphics2D0, (PlotOrientation) null, defaultBoxAndWhiskerCategoryDataset0, 10, 1, false, 0.2, (-1.0), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", numberFormat0);
      statisticalLineAndShapeRenderer0.setSeriesItemLabelGenerator(10, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.setSeriesURLGenerator((-471), (CategoryURLGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = categoryStepRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryURLGenerator categoryURLGenerator0 = stackedAreaRenderer0.getSeriesURLGenerator(1729);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = defaultCategoryItemRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, false);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(3427, 3557);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      String[] stringArray0 = new String[0];
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      CategoryItemRendererState categoryItemRendererState0 = statisticalLineAndShapeRenderer0.initialise((Graphics2D) null, rectangle2D0, categoryPlot0, defaultIntervalCategoryDataset0, plotRenderingInfo0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.createHotSpotShape((Graphics2D) null, rectangle2D0, categoryPlot0, categoryAxis3D0, (ValueAxis) null, defaultIntervalCategoryDataset0, (-2025), 0, true, categoryItemRendererState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("=Dg\"7g", numberFormat0, numberFormat0);
      defaultCategoryItemRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = (DefaultCategoryItemRenderer)defaultCategoryItemRenderer0.clone();
      assertEquals(2, defaultCategoryItemRenderer1.getPassCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      int int0 = waterfallBarRenderer0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(304, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = new DefaultCategoryItemRenderer();
      boolean boolean0 = defaultCategoryItemRenderer0.equals(defaultCategoryItemRenderer1);
      assertTrue(defaultCategoryItemRenderer1.equals((Object)defaultCategoryItemRenderer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'plot' argument.");
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis0, logarithmicAxis0, statisticalLineAndShapeRenderer0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawBackground((Graphics2D) null, categoryPlot0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getSeriesItemLabelGenerator(0);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = lineRenderer3D0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      categoryStepRenderer0.removeAnnotations();
      assertEquals(1, categoryStepRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("Null 'hotspot' argument.", "org.jfree.chart.plot.PiePlot", "Null 'hotspot' argument.");
      defaultCategoryItemRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = new DefaultCategoryItemRenderer();
      boolean boolean0 = defaultCategoryItemRenderer0.equals(defaultCategoryItemRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = waterfallBarRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("=528C@H:y^H", lineAndShapeRenderer0.DEFAULT_VALUE_LABEL_FONT, polarPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      statisticalLineAndShapeRenderer0.drawOutline(graphics2D0, combinedRangeCategoryPlot0, rectangle2D0);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem(10, 71);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("l?m-.");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1838.5879), 5, 2.0F, 0.0F);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.getItemMiddle(defaultCategoryItemRenderer0.ZERO, defaultCategoryItemRenderer0.ZERO, defaultMultiValueCategoryDataset0, extendedCategoryAxis0, rectangle2D_Double0, (RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      int int0 = waterfallBarRenderer0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      int int0 = statisticalLineAndShapeRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", (double) lineAndShapeRenderer0.ZERO, (double) lineAndShapeRenderer0.ZERO);
      boolean boolean0 = lineAndShapeRenderer0.removeAnnotation(categoryPointerAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Range range0 = categoryStepRenderer0.findRangeBounds(jDBCCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", (double) lineAndShapeRenderer0.ZERO, (double) lineAndShapeRenderer0.ZERO);
      lineAndShapeRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      boolean boolean0 = lineAndShapeRenderer0.removeAnnotation(categoryPointerAnnotation0);
      assertFalse(boolean0);
  }
}
