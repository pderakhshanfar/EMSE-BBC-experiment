/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 26 22:13:34 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.List;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferDouble;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.InputVerifier;
import javax.swing.JList;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.MatteBorder;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.plaf.multi.MultiTextUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.JTextComponent;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.FixedHeightLayoutCache;
import javax.swing.tree.TreePath;
import javax.swing.tree.VariableHeightLayoutCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.entity.ChartEntity;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarPainter;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.util.DefaultShadowGenerator;
import org.jfree.chart.util.GradientPaintTransformer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Second;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getOrientation();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", logarithmicAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeCategoryPlot0, false);
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle2D_Double0, rectangle2D_Double0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(287.393736499, 287.393736499);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(287.393736499, 0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0, false);
      PlotOrientation plotOrientation0 = chartPanel1.getOrientation();
      IntervalMarker intervalMarker0 = new IntervalMarker(680, 10);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, defaultCaret0, defaultCaret0, (RectangleInsets) null, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)statisticalBarRenderer0.lookupSeriesShape(291);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getUseFillPaint();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("", fixedMillisecond1, fixedMillisecond0);
      periodAxis0.setVerticalTickLabels(false);
      ValueMarker valueMarker0 = new ValueMarker((-1.0));
      valueMarker0.setValue(0.2);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("The number of series keys does not match the data.");
      logarithmicAxis0.setLabelFont(defaultCategoryItemRenderer0.DEFAULT_VALUE_LABEL_FONT);
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawRangeMarker((Graphics2D) null, categoryPlot0, periodAxis0, valueMarker0, rectangle2D_Double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.392409281321E12) <= upper (1.39240928132E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Graphics2D graphics2D0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ValueMarker valueMarker0 = new ValueMarker(1198.1201844);
      ValueMarker valueMarker1 = new ValueMarker(8.0);
      valueMarker1.setValue(4.0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("aN}:");
      logarithmicAxis0.setLabelFont(lineRenderer3D0.DEFAULT_VALUE_LABEL_FONT);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryItemRendererState categoryItemRendererState0 = lineRenderer3D0.initialise((Graphics2D) null, rectangle2D_Double0, combinedRangeCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0, (PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.createHotSpotShape((Graphics2D) null, rectangle2D_Double0, combinedRangeCategoryPlot0, categoryAxis0, logarithmicAxis0, defaultBoxAndWhiskerCategoryDataset0, 500, 680, true, categoryItemRendererState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Vector<String> vector0 = new Vector<String>();
      jFreeChart0.setSubtitles(vector0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, taskSeriesCollection0, (-953), 557, false, 1241.0, 0.0, true);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      LegendTitle legendTitle0 = new LegendTitle(multiplePiePlot0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicAnchor();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, multiplePiePlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 0);
      Rectangle2D rectangle2D0 = cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS.createInsetRectangle((Rectangle2D) rectangle0, true, false);
      statisticalBarRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, cyclicNumberAxis0, rectangle2D0, Double.NaN, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawBackground((Graphics2D) null, combinedRangeCategoryPlot0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-991.5381882828036), 2045.52242399284);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05, "^pTdNTAQD@");
      cyclicNumberAxis0.setMinorTickMarkInsideLength(0.0F);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.getOrientation();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 2.0, cyclicNumberAxis1.DEFAULT_AXIS_LINE_PAINT, groupedStackedBarRenderer0.DEFAULT_OUTLINE_STROKE, cyclicNumberAxis1.DEFAULT_AXIS_LINE_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, 0);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      RectangleAnchor rectangleAnchor0 = intervalMarker0.getLabelAnchor();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, defaultCaret0, defaultCaret0, cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(282.4489283149954, (double) groupedStackedBarRenderer0.ZERO);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueMarker valueMarker0 = new ValueMarker(0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot();
      polarPlot0.getOrientation();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      defaultCategoryItemRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, rectangle2D_Double0, logarithmicAxis0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = new DefaultCategoryItemRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer1.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, cyclicNumberAxis0, valueMarker0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      stackedBarRenderer0.setRenderAsPercentages(false);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      categoryStepRenderer0.getStagger();
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) categoryStepRenderer0.ZERO;
      doubleArray1[2] = 0.2;
      doubleArray1[3] = (double) stackedBarRenderer0.ZERO;
      doubleArray1[4] = (-464.9289022);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) categoryStepRenderer0.ZERO;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2490.27;
      doubleArray2[3] = (double) 5;
      doubleArray2[4] = (double) categoryStepRenderer0.ZERO;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 5;
      doubleArray3[1] = (-616.45472328884);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) categoryStepRenderer0.ZERO;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-616.45472328884);
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Graphics2D graphics2D0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      ValueAxis valueAxis0 = null;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      int int0 = 3;
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) lineRenderer3D0.ZERO;
      numberArray1[1] = (Number) 12.0;
      numberArray1[2] = (Number) groupedStackedBarRenderer0.ZERO;
      numberArray1[3] = (Number) groupedStackedBarRenderer0.ZERO;
      numberArray1[5] = (Number) groupedStackedBarRenderer0.ZERO;
      numberArray1[6] = (Number) 8.0;
      numberArray1[7] = (Number) groupedStackedBarRenderer0.ZERO;
      double double0 = BarRenderer3D.DEFAULT_X_OFFSET;
      numberArray1[8] = (Number) 12.0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      lineRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        layeredBarRenderer0.updateCrosshairValues(categoryCrosshairState0, groupedStackedBarRenderer0.ZERO, 1.0F, 45.0, 24, 12.0, (-1177.21), plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(287.393736499, 287.393736499);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Graphics2D graphics2D0 = null;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(287.393736499, 0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      stackedBarRenderer3D0.drawAnnotations((Graphics2D) null, defaultCaret0, (CategoryAxis) null, cyclicNumberAxis0, layer0, plotRenderingInfo0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      cyclicNumberAxis0.setLeftArrow(multiplePiePlot0.DEFAULT_LEGEND_ITEM_BOX);
      double double0 = 0.0;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getSeriesURLGenerator(1317);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setSeriesURLGenerator((-59), (CategoryURLGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(282.4489283149954, 0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueMarker valueMarker0 = new ValueMarker(0.05);
      valueMarker0.setValue(1.0F);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, logarithmicAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      defaultCategoryItemRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, defaultCaret0, cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, logarithmicAxis0, valueMarker0, defaultCaret0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("5EO^z7G@}Ci|um$");
      periodAxis0.setVerticalTickLabels(false);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.setLimit(1450.28);
      multiplePiePlot0.getPieChart();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getToolTipGenerator(500, 2, true);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      lineRenderer3D1.getColumnCount();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, (-960));
      Dimension dimension0 = new Dimension(61, 36);
      Dimension dimension1 = new Dimension(dimension0);
      Rectangle rectangle0 = new Rectangle(dimension1);
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, taskSeriesCollection0, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(287.393736499, 287.393736499);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(287.393736499, 0);
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZOOM_OUT_BOTH";
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      ActionEvent actionEvent0 = new ActionEvent(stackedAreaRenderer0, 1024, "");
      chartPanel0.actionPerformed(actionEvent0);
      stringArray0[1] = "ZOOM_IN_RANGE";
      stringArray0[2] = "ZOOM_RESET_RANGE";
      stringArray0[3] = "ZOOM_RESET_DOMAIN";
      stringArray0[4] = "";
      Number[][] numberArray0 = new Number[0][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.hitTest(0.0, 1024, (Graphics2D) null, defaultCaret0, combinedRangeCategoryPlot0, (CategoryAxis) null, cyclicNumberAxis0, defaultIntervalCategoryDataset0, 102, 300, true, (CategoryItemRendererState) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 300
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      GroupedStackedBarRenderer groupedStackedBarRenderer1 = new GroupedStackedBarRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("{2}", 0.2, (double) groupedStackedBarRenderer0.ZERO);
      Layer layer0 = Layer.BACKGROUND;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 8.0;
      doubleArray1[2] = 3.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) groupedStackedBarRenderer0.ZERO;
      doubleArray2[1] = 0.2;
      doubleArray2[2] = 0.0;
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      groupedStackedBarRenderer1.setSeriesToolTipGenerator(1736, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
      doubleArray2[3] = 2532.6961;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) groupedStackedBarRenderer1.ZERO;
      doubleArray2[6] = (double) lineRenderer3D0.ZERO;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) groupedStackedBarRenderer1.ZERO;
      doubleArray3[1] = (double) groupedStackedBarRenderer0.ZERO;
      doubleArray3[2] = (-1718.908);
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      lineRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(8.0, 10);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      categoryStepRenderer0.createState(plotRenderingInfo0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Null 'annotation' argument.", 0, 0.05, (-1.5707963267948966));
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("[m]b^d2fwcOB8I-%o{D");
      periodAxis0.setVerticalTickLabels(false);
      ValueMarker valueMarker0 = new ValueMarker((-533.9243540075));
      valueMarker0.setValue((-1.0));
      defaultCategoryItemRenderer0.getItemLabelGenerator(197, 500, true);
      lineAndShapeRenderer0.setSeriesItemLabelGenerator(151, (CategoryItemLabelGenerator) null, false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = new DefaultCategoryItemRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("5EO^z7G@}Ci|um$");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      defaultCategoryItemRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, logarithmicAxis0, valueMarker0, rectangle2D_Double0);
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      lineAndShapeRenderer0.getLegendItemToolTipGenerator();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setGroupPaint(combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      CategoryCrosshairState categoryCrosshairState1 = new CategoryCrosshairState();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.getLegendItem(169, 3643);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      categoryStepRenderer0.getLegendItem(3643, 3643);
      scatterRenderer0.equals("");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getToolTipGenerator(10, 12, false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      lineRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-2192.5150060354413));
      ItemLabelPosition itemLabelPosition0 = candlestickRenderer0.getSeriesNegativeItemLabelPosition(1);
      statisticalBarRenderer0.setNegativeItemLabelPositionFallback(itemLabelPosition0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      lineRenderer3D1.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      intervalBarRenderer0.clearSeriesPaints(true);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.setValue((Number) 3.0, (Comparable) intervalBarRenderer0.ZERO, (Comparable) intervalBarRenderer0.ZERO);
      intervalBarRenderer0.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      categoryStepRenderer0.getLegendItem((-1158), (-1158));
      // Undeclared exception!
      try { 
        intervalBarRenderer0.getItemMiddle(5, categoryStepRenderer0.ZERO, defaultCategoryDataset0, (CategoryAxis) null, (Rectangle2D) null, (RectangleEdge) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(8.0, 925.443431);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D1.hitTest(0.0, (double) lineRenderer3D0.ZERO, (Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, categoryAxis3D0, cyclicNumberAxis0, defaultBoxAndWhiskerCategoryDataset0, 0, 1, true, categoryItemRendererState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(287.393736499, 287.393736499);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Graphics2D graphics2D0 = null;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(287.393736499, 0);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.0, 0, "^pTdLTAQD@");
      CategoryAxis categoryAxis0 = null;
      Layer layer0 = Layer.FOREGROUND;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      stackedBarRenderer3D0.drawAnnotations((Graphics2D) null, defaultCaret0, (CategoryAxis) null, cyclicNumberAxis0, layer0, plotRenderingInfo0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.setLimit(0.0F);
      multiplePiePlot0.getPieChart();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getToolTipGenerator(10, 0, true);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.removeAnnotation((CategoryAnnotation) null);
      lineRenderer3D0.getColumnCount();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 500, 866);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, defaultCaret0, combinedRangeCategoryPlot0, slidingGanttCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(287.393736499, 287.393736499);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(287.393736499, 0);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.0, 0, "^pTdLTAQD@");
      cyclicNumberAxis0.setMinorTickMarkInsideLength(0.0F);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 0.05);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      RectangleAnchor rectangleAnchor0 = intervalMarker0.getLabelAnchor();
      stackedBarRenderer3D0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, defaultCaret0, cyclicNumberAxis1.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.drawRangeLine((Graphics2D) null, (CategoryPlot) null, cyclicNumberAxis1, defaultCaret0, 0.05, categoryPlot0.DEFAULT_GRIDLINE_PAINT, cyclicNumberAxis1.DEFAULT_AXIS_LINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(1435, 62);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("5EO^z7G@}Ci|um$");
      periodAxis0.setVerticalTickLabels(false);
      ValueMarker valueMarker0 = new ValueMarker(10);
      valueMarker0.setValue(0.05);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = new DefaultCategoryItemRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer1.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, logarithmicAxis0, valueMarker0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P7HclUp");
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1.0), " )+ZQ3gQpu)dw");
      cyclicNumberAxis0.setMinorTickMarkInsideLength(1.0F);
      boxAndWhiskerRenderer0.drawRangeMarker((Graphics2D) null, categoryPlot0, cyclicNumberAxis0, (Marker) null, (Rectangle2D) null);
      boxAndWhiskerRenderer0.setFillBox(false);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(4.0, (-1362.4623), categoryPlot0.DEFAULT_GRIDLINE_PAINT);
      boxAndWhiskerRenderer0.drawRangeMarker((Graphics2D) null, categoryPlot0, cyclicNumberAxis0, intervalMarker0, (Rectangle2D) null);
      boxAndWhiskerRenderer0.setFillBox(true);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getUseFillPaint();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      lineAndShapeRenderer0.getRangeAxis(categoryPlot0, 10);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      LineAndShapeRenderer lineAndShapeRenderer1 = new LineAndShapeRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setShadowVisible(true);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      scatterRenderer0.getLegendItemToolTipGenerator();
      stackedAreaRenderer0.setLegendItemToolTipGenerator((CategorySeriesLabelGenerator) null);
      stackedAreaRenderer0.clone();
      stackedBarRenderer3D0.getDrawingSupplier();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(287.393736499, 287.393736499);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(287.393736499, 0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      stackedBarRenderer3D0.drawAnnotations((Graphics2D) null, defaultCaret0, (CategoryAxis) null, cyclicNumberAxis0, layer0, plotRenderingInfo0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 1642.977572, multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, cyclicNumberAxis0, intervalMarker0, defaultCaret0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      String string0 = "Hhk";
      JPasswordField jPasswordField0 = new JPasswordField(string0);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      int int0 = 365;
      defaultCategoryItemRenderer0.getItemShapeVisible(int0, int0);
      Graphics2D graphics2D0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle rectangle0 = new Rectangle();
      double double0 = 1974.84;
      defaultCategoryItemRenderer0.drawDomainLine(graphics2D0, combinedRangeCategoryPlot0, rectangle0, double0, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_STROKE);
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      ValueMarker valueMarker0 = new ValueMarker(periodAxis0.DEFAULT_LOWER_MARGIN);
      valueMarker0.setValue((double) lineRenderer3D0.ZERO);
      defaultCategoryItemRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, periodAxis0, valueMarker0, rectangle0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      CategoryAnnotation categoryAnnotation0 = null;
      lineRenderer3D1.removeAnnotation(categoryAnnotation0);
      lineRenderer3D1.getColumnCount();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      String string0 = "Hhk";
      JPasswordField jPasswordField0 = new JPasswordField(string0);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jPasswordField0.new AccessibleJTextComponent();
      int int0 = (-1);
      Rectangle rectangle0 = jTextComponent_AccessibleJTextComponent0.getTextBounds(int0, int0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Graphics2D graphics2D0 = null;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      int int1 = 1;
      int int2 = (-186);
      int int3 = 0;
      MatteBorder matteBorder0 = new MatteBorder(int1, int2, combinedDomainCategoryPlot0.MINIMUM_HEIGHT_TO_DRAW, int3, systemColor0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      lineRenderer3D0.initialise(graphics2D0, rectangle0, combinedRangeCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
      boolean boolean0 = true;
      List list0 = new List(combinedDomainCategoryPlot0.MINIMUM_HEIGHT_TO_DRAW, boolean0);
      matteBorder0.getBaselineResizeBehavior(list0);
      int int4 = 58;
      int int5 = (-1);
      int int6 = 818;
      AbstractBorder.getInteriorRectangle((Component) jPasswordField0, (Border) matteBorder0, int0, int4, int5, int6);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.getMaximumItemWidth();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      lineRenderer3D0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle0, rectangle0, fastScatterPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.lookupSeriesShape(59);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getBaseShapesFilled();
      Graphics2D graphics2D0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      String string0 = "7";
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null, 152.056413251, lineRenderer3D0.DEFAULT_VALUE_LABEL_PAINT, lineRenderer3D0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryPlot0.getCategoriesForAxis(categoryAxis3D0);
      lineAndShapeRenderer0.getRangeAxis(categoryPlot0, 10);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.findRangeBounds(defaultKeyedValues2DDataset0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      lineAndShapeRenderer0.getRowCount();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(287.393736499, 287.393736499);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Graphics2D graphics2D0 = null;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(287.393736499, 0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) groupedStackedBarRenderer0.ZERO;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0.5F;
      doubleArray1[4] = (double) 1.0F;
      doubleArray1[5] = (double) 10;
      doubleArray1[6] = (double) 1.0F;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 10;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.2;
      doubleArray3[1] = (double) 500;
      doubleArray3[2] = (double) 500;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (-5087.0436563371);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addEntity(standardEntityCollection0, groupedStackedBarRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 10, 10, true, 0.5F, 3.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Graphics2D graphics2D0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      CategoryAnnotation categoryAnnotation0 = null;
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(8.0, 925.443431);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.hitTest((-1682.3450834239), 0, (Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, categoryAxis3D0, cyclicNumberAxis0, defaultBoxAndWhiskerCategoryDataset0, 0, 0, true, categoryItemRendererState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)statisticalBarRenderer0.lookupSeriesShape(59);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(59, 76);
      Graphics2D graphics2D0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      String string0 = "7";
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D_Double0, 0.2, statisticalBarRenderer0.DEFAULT_OUTLINE_PAINT, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ArrayList<ValueMarker> arrayList0 = new ArrayList<ValueMarker>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) lineRenderer3D0.ZERO, (-3011.6404520227325), 9.0, 12.0, (-1391.616253093821), 5.0E10, Double.NaN, (-1692.0359979), (java.util.List) arrayList0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) scatterRenderer0.ZERO, (Comparable) lineRenderer3D0.ZERO);
      lineRenderer3D0.lookupSeriesOutlinePaint(0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Object object0 = areaRenderer0.clone();
      defaultBoxAndWhiskerCategoryDataset0.equals(object0);
      lineRenderer3D0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      String string0 = "Hhk";
      JPasswordField jPasswordField0 = new JPasswordField(string0);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jPasswordField0.new AccessibleJTextComponent();
      int int0 = (-1);
      Rectangle rectangle0 = jTextComponent_AccessibleJTextComponent0.getTextBounds(int0, int0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Graphics2D graphics2D0 = null;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      int int1 = 1;
      int int2 = (-186);
      int int3 = 0;
      MatteBorder matteBorder0 = new MatteBorder(int1, int2, combinedDomainCategoryPlot0.MINIMUM_HEIGHT_TO_DRAW, int3, systemColor0);
      int int4 = 58;
      int int5 = (-1);
      int int6 = 818;
      AbstractBorder.getInteriorRectangle((Component) jPasswordField0, (Border) matteBorder0, int0, int4, int5, int6);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      lineRenderer3D0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle0, rectangle0, fastScatterPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(287.393736499, 287.393736499);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(287.393736499, 0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      stackedBarRenderer3D0.drawAnnotations((Graphics2D) null, defaultCaret0, (CategoryAxis) null, cyclicNumberAxis0, layer0, plotRenderingInfo0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryMarker categoryMarker0 = new CategoryMarker(cyclicNumberAxis0.DEFAULT_TICK_UNIT, stackedBarRenderer3D0.DEFAULT_OUTLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      defaultCategoryItemRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, cyclicNumberAxis0, categoryMarker0, defaultCaret0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, defaultCategoryItemRenderer0.DEFAULT_OUTLINE_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, stackedBarRenderer3D0.DEFAULT_WALL_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, 1.0F);
      defaultBoxAndWhiskerCategoryDataset0.equals(valueMarker0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      lineRenderer3D1.findRangeBounds(defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.lookupSeriesShape(59);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(59, 59);
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setRightArrow(statisticalBarRenderer0.DEFAULT_SHAPE);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      defaultCategoryItemRenderer0.getRangeAxis(combinedRangeCategoryPlot0, (-210));
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Integer integer0 = new Integer(0);
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7Oo!ZMW1eZ*`YF";
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.getOrientation();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      MatteBorder matteBorder0 = new MatteBorder(1, 1454, 200, 10, systemColor0);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) chartPanel0, (Border) matteBorder0, 200, 10, 1024, 16777215);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation1 = polarPlot0.getOrientation();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation1, rectangle0, (Rectangle2D) null, multiplePiePlot0.DEFAULT_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7Oo!ZMW1eZ*`YF";
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot1.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      lineRenderer3D0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultBoxAndWhiskerCategoryDataset0, (-3541), 1, false, 4802.893804914, 15, true);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      intervalMarker0.getGradientPaintTransformer();
      groupedStackedBarRenderer0.setGradientPaintTransformer((GradientPaintTransformer) null);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getLegendItemToolTipGenerator();
      scatterRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      lineRenderer3D0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("Base tool tip generator not cloneable.", 8.0, 12.0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Layer layer0 = Layer.BACKGROUND;
      groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.removeAnnotation(categoryTextAnnotation0);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      layeredBarRenderer0.removeAnnotation(categoryTextAnnotation0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      categoryStepRenderer_State0.getCrosshairState();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      layeredBarRenderer0.updateCrosshairValues((CategoryCrosshairState) null, 0.0, 12.0, 0.0, 1732, 1732, 0.2, plotOrientation0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.lookupLegendShape(1732);
      waterfallBarRenderer0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(287.393736499, 287.393736499);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(287.393736499, 0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      stackedBarRenderer3D0.drawAnnotations((Graphics2D) null, defaultCaret0, (CategoryAxis) null, cyclicNumberAxis0, layer0, plotRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = null;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart1 = multiplePiePlot0.getPieChart();
      RectangleInsets rectangleInsets0 = new RectangleInsets(15, 1.0F, 3.0, 287.393736499);
      multiplePiePlot0.setInsets(rectangleInsets0, false);
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart1, true, true, true, true, false);
      chartPanel1.getZoomRectangle();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = new CombinedRangeCategoryPlot(logAxis0);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      multiplePiePlot0.setPieChart(jFreeChart1);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.drawItem((Graphics2D) null, (CategoryItemRendererState) null, (Rectangle2D) null, combinedRangeCategoryPlot1, categoryAxis0, logAxis0, defaultStatisticalCategoryDataset0, 23, 768, true, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)statisticalBarRenderer0.lookupSeriesShape(59);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(59, 76);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("7");
      ValueMarker valueMarker0 = new ValueMarker(99.27);
      defaultCategoryItemRenderer0.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, periodAxis0, valueMarker0, rectangle2D_Double0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CategoryMarker categoryMarker0 = new CategoryMarker("");
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawDomainMarker((Graphics2D) null, combinedRangeCategoryPlot0, extendedCategoryAxis0, categoryMarker0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      chartRenderingInfo0.equals((Object) null);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      AreaRenderer[] areaRendererArray0 = new AreaRenderer[4];
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      areaRendererArray0[0] = (AreaRenderer) stackedAreaRenderer0;
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer();
      areaRendererArray0[1] = (AreaRenderer) stackedAreaRenderer1;
      StackedAreaRenderer stackedAreaRenderer2 = new StackedAreaRenderer();
      areaRendererArray0[2] = (AreaRenderer) stackedAreaRenderer2;
      AreaRenderer areaRenderer0 = new AreaRenderer();
      areaRendererArray0[3] = areaRenderer0;
      JList<AreaRenderer> jList0 = new JList<AreaRenderer>(areaRendererArray0);
      jList0.getCellBounds(3523, (-505));
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      MatteBorder matteBorder0 = new MatteBorder(10, 10, (-505), 1, systemColor0);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jList0, (Border) matteBorder0, 1, 10, (-493), 304);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      Point2D point2D0 = areaRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle0, combinedDomainCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      combinedDomainCategoryPlot0.findSubplot(plotRenderingInfo0, point2D0);
      // Undeclared exception!
      try { 
        statisticalBarRenderer1.initialise((Graphics2D) null, (Rectangle2D) null, (CategoryPlot) null, defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("Base tool tip generator not cloneable.", 8.0, 12.0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Layer layer0 = Layer.BACKGROUND;
      groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.getBaseItemLabelGenerator();
      lineRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
      lineRenderer3D0.removeAnnotation(categoryTextAnnotation0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      lineRenderer3D0.clone();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      areaRenderer0.getLegendItem(0, 0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      String string0 = "Hhk";
      JPasswordField jPasswordField0 = new JPasswordField(string0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      LineRenderer3D lineRenderer3D2 = new LineRenderer3D();
      CategoryPlot categoryPlot0 = statisticalBarRenderer0.getPlot();
      lineRenderer3D1.setPlot(categoryPlot0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      lineAndShapeRenderer0.getRangeAxis(categoryPlot0, 10);
      String string0 = "=?";
      JPasswordField jPasswordField0 = new JPasswordField(string0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      chartRenderingInfo0.equals(defaultKeyedValues2DDataset0);
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryDataset categoryDataset0 = null;
      lineRenderer3D0.findRangeBounds(categoryDataset0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<ValueMarker> arrayList0 = new ArrayList<ValueMarker>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(8.0, 733.0, 12.0, (double) lineRenderer3D0.ZERO, 4004.969845, 4004.969845, 4004.969845, 733.0, (java.util.List) arrayList0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) lineRenderer3D0.ZERO, (Comparable) 8.0);
      lineRenderer3D0.lookupSeriesOutlinePaint((-1404));
      defaultBoxAndWhiskerCategoryDataset0.equals((Object) null);
      lineRenderer3D0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      lineRenderer3D0.clone();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("Null 'orientation' argument.", numberFormat0);
      stackedBarRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setFillBox(false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.setUseSeriesOffset(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Null 'hotspot' argument.";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "`bT-KP4[8x4Z";
      stringArray0[4] = "7Oo!ZMW1eZ*`YF";
      stringArray0[5] = "";
      stringArray0[6] = "Base item URL generator not cloneable.";
      stringArray0[7] = "Null 'orientation' argument.";
      stringArray0[8] = "";
      Number[][] numberArray0 = new Number[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      lineAndShapeRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultIntervalCategoryDataset0, 15, 834, true, 0.5F, 834, true);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker((double) lineAndShapeRenderer0.ZERO, (double) groupedStackedBarRenderer0.ZERO, lineAndShapeRenderer0.DEFAULT_PAINT);
      intervalMarker0.getGradientPaintTransformer();
      groupedStackedBarRenderer0.setGradientPaintTransformer((GradientPaintTransformer) null);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 1);
      stackedAreaRenderer0.getPreviousHeight(slidingGanttCategoryDataset0, 0, 2524);
      stackedAreaRenderer0.getSeriesToolTipGenerator(515);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      int int0 = 59;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)statisticalBarRenderer0.lookupSeriesShape(59);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(59, 76);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CategoryMarker categoryMarker0 = new CategoryMarker("");
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawDomainMarker((Graphics2D) null, combinedRangeCategoryPlot0, extendedCategoryAxis0, categoryMarker0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.lookupSeriesShape(59);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(59, 76);
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      statisticalBarRenderer1.getToolTipGenerator(59, 2004, true);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      StatisticalBarRenderer statisticalBarRenderer2 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getSeriesItemLabelGenerator(235);
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(702, (CategoryToolTipGenerator) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", 8.0, 12.0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.FOREGROUND;
      groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer1);
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CategoryMarker categoryMarker0 = new CategoryMarker(0.2);
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      // Undeclared exception!
      try { 
        lineRenderer3D1.drawDomainMarker(graphics2D0, (CategoryPlot) null, subCategoryAxis0, categoryMarker0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(59, 76);
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      statisticalBarRenderer1.getToolTipGenerator(59, 2004, true);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      StatisticalBarRenderer statisticalBarRenderer2 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getSeriesItemLabelGenerator(235);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      // Undeclared exception!
      try { 
        layeredBarRenderer0.updateCrosshairValues(categoryCrosshairState0, 3.0, statisticalBarRenderer2.ZERO, (-224.62524217600895), 235, 2.0, 76, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.setSeriesToolTipGenerator((-195), (CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      statisticalBarRenderer0.getBaseItemLabelGenerator();
      statisticalBarRenderer0.setSeriesItemLabelGenerator(48, (CategoryItemLabelGenerator) null, true);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      Layer layer0 = Layer.BACKGROUND;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      CategoryDataset categoryDataset0 = null;
      int int0 = 56;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      Layer layer0 = Layer.BACKGROUND;
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      StatisticalBarRenderer statisticalBarRenderer2 = new StatisticalBarRenderer();
      statisticalBarRenderer2.setShadowVisible(false);
      groupedStackedBarRenderer0.setIncludeBaseInRange(true);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      statisticalBarRenderer1.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.updateCrosshairValues(categoryCrosshairState0, 0.2, 0.2, 1.0, 2736, 0.0, (double) statisticalBarRenderer1.ZERO, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      String string0 = "Hhk";
      JPasswordField jPasswordField0 = new JPasswordField(string0);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jPasswordField0.new AccessibleJTextComponent();
      int int0 = (-1);
      Rectangle rectangle0 = jTextComponent_AccessibleJTextComponent0.getTextBounds(int0, int0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Graphics2D graphics2D0 = null;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      statisticalBarRenderer0.initialise(graphics2D0, rectangle0, combinedDomainCategoryPlot0, defaultStatisticalCategoryDataset0, plotRenderingInfo0);
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      String string1 = "-%rJA";
      String string2 = null;
      double double0 = 293.483;
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string2, string1, rectangle0.x, double0);
      lineRenderer3D0.removeAnnotation(categoryPointerAnnotation0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      lineRenderer3D1.clone();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.getLegendTextPaint(0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      lineAndShapeRenderer0.getRangeAxis(categoryPlot0, 10);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, categoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, (CategoryDataset) null, 1, 10, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      standardCategoryItemLabelGenerator0.equals(layeredBarRenderer0);
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(3.0, 0.005, layeredBarRenderer0.ZERO, 0.1, groupedStackedBarRenderer0.DEFAULT_OUTLINE_PAINT, statisticalBarRenderer0.DEFAULT_OUTLINE_STROKE);
      groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      groupedStackedBarRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setUseOutlinePaint(false);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      groupedStackedBarRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.removeAnnotation((CategoryAnnotation) null);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      lineRenderer3D0.setPlot(categoryPlot0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      lineRenderer3D0.clone();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", waferMapPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(768, 392.97722889256, 1.0F, 420, defaultCategoryItemRenderer0.DEFAULT_OUTLINE_PAINT, waferMapPlot0.DEFAULT_GRIDLINE_STROKE);
      chartRenderingInfo0.equals(categoryLineAnnotation0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      statisticalBarRenderer0.createState(plotRenderingInfo0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      statisticalBarRenderer0.getItemLabelGenerator(0, 0, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      lineRenderer3D1.removeAnnotation((CategoryAnnotation) null);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      lineRenderer3D0.clone();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      Layer layer0 = Layer.BACKGROUND;
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      StatisticalBarRenderer statisticalBarRenderer2 = new StatisticalBarRenderer();
      statisticalBarRenderer2.setShadowVisible(false);
      groupedStackedBarRenderer0.setIncludeBaseInRange(true);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.updateCrosshairValues(categoryCrosshairState0, 0.2, 0.2, 1.0, 2736, 0.0, (double) statisticalBarRenderer1.ZERO, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      Layer layer0 = Layer.BACKGROUND;
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("pG]\"c{1\"[:ff<", 0.2, 5744.647386);
      groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("pG]\"c{1\"[:ff<", 0.2, 0.0, 0.3509650544886417);
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      StatisticalBarRenderer statisticalBarRenderer2 = new StatisticalBarRenderer();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      TextBox textBox0 = new TextBox();
      Paint paint0 = textBox0.getOutlinePaint();
      statisticalBarRenderer0.setErrorIndicatorPaint(paint0);
      statisticalBarRenderer0.getPassCount();
      DefaultShadowGenerator defaultShadowGenerator0 = new DefaultShadowGenerator();
      double double0 = 10.0;
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-276.0238584609465), 6.0, 10.0);
      int int0 = 2879;
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 2879);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 2879
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      String string0 = "";
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", lineRenderer3D0.ZERO, (double) scatterRenderer0.ZERO, 2533.57935);
      lineRenderer3D0.removeAnnotation(categoryPointerAnnotation0);
      lineRenderer3D0.setUseOutlinePaint(false);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getPlot();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.getDomainAxis((CategoryPlot) null, defaultBoxAndWhiskerCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      boolean boolean0 = false;
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      groupedStackedBarRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      groupedStackedBarRenderer0.getShadowPaint();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setUseOutlinePaint(false);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.getUseOutlinePaint();
      lineRenderer3D0.getColumnCount();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("GradientPaintTransformType.VERTICAL", piePlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      int int0 = 0;
      int int1 = 0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-1), 0, byteArray0, 512, false, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      statisticalBarRenderer1.getItemLabelGenerator((-1), 76, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.removeAnnotation((CategoryAnnotation) null);
      statisticalBarRenderer0.getLegendItemToolTipGenerator();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getURLGenerator(94, 999, true);
      // Undeclared exception!
      try { 
        lineRenderer3D0.setSeriesURLGenerator((-2062), (CategoryURLGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.getLegendItems();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      stackedBarRenderer3D0.equals(minMaxCategoryRenderer0);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setShadowVisible(false);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      lineAndShapeRenderer0.clone();
      lineAndShapeRenderer0.getLegendItemLabelGenerator();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      int int0 = 59;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)statisticalBarRenderer0.lookupSeriesShape(59);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(59, 76);
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      boolean boolean0 = false;
      int int1 = 2004;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setRenderer((CategoryItemRenderer) statisticalBarRenderer0);
      // Undeclared exception!
      try { 
        statisticalBarRenderer1.drawBackground((Graphics2D) null, categoryPlot0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      boolean boolean0 = false;
      Color color0 = Color.green;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      int int0 = 3;
      int int1 = (-333);
      lineRenderer3D0.getLegendItem((-333), 3);
      Graphics2D graphics2D0 = null;
      String string0 = null;
      JPasswordField jPasswordField0 = new JPasswordField(string0);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jPasswordField0.new AccessibleJTextComponent();
      int int2 = 3782;
      Rectangle rectangle0 = jTextComponent_AccessibleJTextComponent0.getTextBounds(int1, int2);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = statisticalBarRenderer0.initialise(graphics2D0, rectangle0, combinedDomainCategoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo0);
      lineRenderer3D0.getYOffset();
      double double0 = (-986.0996296143157);
      double double1 = (-1388.49061);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(double0, double1);
      stackedBarRenderer3D0.getBarPainter();
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      statisticalBarRenderer0.clone();
      StatisticalBarRenderer statisticalBarRenderer2 = new StatisticalBarRenderer();
      int int3 = (-12);
      statisticalBarRenderer2.getURLGenerator(int3, int0, boolean0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      int int4 = 3;
      int int5 = 2764;
      periodAxis0.hasListener(jTextComponent_AccessibleJTextComponent0);
      boolean boolean1 = true;
      int int6 = 1504;
      statisticalLineAndShapeRenderer0.drawItem(graphics2D0, categoryItemRendererState0, rectangle0, combinedDomainCategoryPlot0, categoryAxis0, periodAxis0, defaultKeyedValues2DDataset0, int4, int5, boolean1, int6);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getBaseItemLabelGenerator();
      stackedBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.getMaxIcon();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setDrawOutlines(true);
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      minMaxCategoryRenderer0.setObjectIcon(icon0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.getRenderAsPercentages();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Graphics2D graphics2D0 = null;
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      DateAxis dateAxis0 = new DateAxis();
      ValueMarker valueMarker0 = new ValueMarker(0.05);
      MultiTextUI multiTextUI0 = new MultiTextUI();
      int int0 = 1;
      JTextArea jTextArea0 = new JTextArea(int0, combinedDomainCategoryPlot0.MINIMUM_WIDTH_TO_DRAW);
      int int1 = 591;
      Rectangle rectangle0 = multiTextUI0.modelToView((JTextComponent) jTextArea0, int1);
      lineRenderer3D0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, dateAxis0, valueMarker0, rectangle0);
      int int2 = 334;
      stackedBarRenderer0.getLegendItem(int2, rectangle0.height);
      lineRenderer3D0.drawDomainGridline(graphics2D0, combinedDomainCategoryPlot0, rectangle0, rectangle0.width);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("<CY4&?&o?xl}#Fnn", dateFormat0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      String string0 = "";
      boolean boolean0 = false;
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.getBaseToolTipGenerator();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("jf/t", waterfallBarRenderer0.DEFAULT_VALUE_LABEL_FONT, multiplePiePlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 1167, 0, 0, 1, 0, false, true, true, true, true, true, true);
      // Undeclared exception!
      try { 
        chartPanel0.createGraphics2D();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.ChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      statisticalBarRenderer1.getItemLabelGenerator((-1), 76, false);
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      scatterRenderer0.getUseFillPaint();
      defaultCategoryItemRenderer0.getDrawOutlines();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.getXOffset();
      lineRenderer3D0.getYOffset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TableOrder tableOrder1 = TableOrder.BY_COLUMN;
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      statisticalBarRenderer0.getSeriesItemLabelGenerator(396);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      lineAndShapeRenderer0.getRangeAxis(categoryPlot0, 10);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      LineAndShapeRenderer lineAndShapeRenderer1 = new LineAndShapeRenderer();
      stackedBarRenderer3D0.getSeriesToolTipGenerator(10);
      lineAndShapeRenderer1.setBaseToolTipGenerator((CategoryToolTipGenerator) null);
      lineAndShapeRenderer1.getURLGenerator(1, 10, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      lineRenderer3D0.getUseFillPaint();
      lineRenderer3D0.getURLGenerator(1, 10, false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("<CY4&?&o?xl}#Fnn", dateFormat0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.removeAnnotations();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      stackedBarRenderer3D0.setShadowXOffset((double) groupedStackedBarRenderer0.ZERO);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      lineAndShapeRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 10);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.getNegativeItemLabelPositionFallback();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getToolTipGenerator(1, (-2527), false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.setSeriesToolTipGenerator((-2527), (CategoryToolTipGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      statisticalBarRenderer1.getItemLabelGenerator((-1), 76, false);
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      scatterRenderer0.getUseFillPaint();
      defaultCategoryItemRenderer0.getDrawOutlines();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.getXOffset();
      lineRenderer3D0.getYOffset();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 3.0);
      stackedBarRenderer3D0.getBarPainter();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("Base item URL generator not cloneable.");
      groupedStackedBarRenderer0.getLegendItemURLGenerator();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.lookupSeriesShape(59);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(59, 76);
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      statisticalBarRenderer1.getToolTipGenerator(59, 2004, false);
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(2004, (CategoryToolTipGenerator) null, true);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.lookupSeriesOutlinePaint((-2429));
      lineRenderer3D0.getLegendItem(30, 0);
      lineRenderer3D0.getYOffset();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 59);
      stackedBarRenderer3D0.getBarPainter();
      statisticalBarRenderer1.clone();
      statisticalBarRenderer0.getSeriesURLGenerator(3);
      Graphics2D graphics2D0 = null;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        statisticalBarRenderer1.getDomainAxis(combinedDomainCategoryPlot0, defaultCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      lineRenderer3D0.getToolTipGenerator(0, (-1452), false);
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(85, (CategoryToolTipGenerator) null, false);
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      LineRenderer3D lineRenderer3D2 = new LineRenderer3D();
      lineRenderer3D0.lookupSeriesOutlinePaint((-1477));
      lineRenderer3D1.getLegendItem((-1452), 975);
      lineRenderer3D0.getYOffset();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1780.9080646766138, (-313.65));
      StackedBarRenderer3D stackedBarRenderer3D1 = new StackedBarRenderer3D();
      stackedBarRenderer3D1.getBarPainter();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.clone();
      statisticalBarRenderer0.getSeriesURLGenerator((-1452));
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.getLegendItem((-270), 1786);
      stackedBarRenderer3D0.getIncludeBaseInRange();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.getLegendItems();
      stackedBarRenderer3D0.getPlot();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(0, 1);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getSeriesToolTipGenerator(1);
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(1, (CategoryToolTipGenerator) null, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      lineAndShapeRenderer0.getBaseLinesVisible();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = (-1);
      statisticalBarRenderer0.getItemLabelGenerator(0, (-1), false);
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      scatterRenderer0.getUseFillPaint();
      lineRenderer3D0.getDrawOutlines();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      CategoryTextAnnotation categoryTextAnnotation0 = null;
      try {
        categoryTextAnnotation0 = new CategoryTextAnnotation((String) null, 0.2, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.annotations.TextAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-962.56), 0.0);
      stackedBarRenderer3D0.getURLGenerator(1, 1, false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      statisticalBarRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getBaseToolTipGenerator();
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(1, categoryToolTipGenerator0, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.lookupSeriesOutlinePaint(0);
      lineRenderer3D0.getLegendItem(1, 1);
      lineRenderer3D0.getYOffset();
      StackedBarRenderer3D stackedBarRenderer3D1 = new StackedBarRenderer3D(0.0, 0.0);
      stackedBarRenderer3D0.getBarPainter();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "({0}, {1}) = {2}";
      Number[][] numberArray0 = new Number[6][0];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 0.2;
      numberArray1[1] = (Number) 12.0;
      numberArray1[2] = (Number) stackedBarRenderer3D0.ZERO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray1[3] = (Number) bigInteger0;
      numberArray1[4] = (Number) 12.0;
      numberArray1[5] = (Number) 0.2;
      numberArray1[6] = (Number) 3.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      Byte byte0 = new Byte((byte)1);
      numberArray3[0] = (Number) byte0;
      numberArray3[1] = (Number) 0.2;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      double double0 = BarRenderer3D.DEFAULT_X_OFFSET;
      numberArray4[0] = (Number) 12.0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      numberArray5[0] = (Number) 3.0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[1];
      numberArray6[0] = (Number) defaultCategoryItemRenderer0.ZERO;
      numberArray0[5] = numberArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.clearSeriesStrokes(true);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      stackedAreaRenderer0.equals(boxAndWhiskerRenderer0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getBaseURLGenerator();
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Second second0 = new Second();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Second");
      JScrollPane jScrollPane0 = new JScrollPane((Component) null);
      jScrollPane0.getViewportBorderBounds();
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((double) statisticalBarRenderer0.ZERO, 1);
      PaintScaleLegend paintScaleLegend0 = null;
      try {
        paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, (ValueAxis) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
         verifyException("org.jfree.chart.title.PaintScaleLegend", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("<CY4&?&o?xl}#Fnn", dateFormat0);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setAutoPopulateSeriesStroke(true);
      groupedStackedBarRenderer0.setSeriesItemLabelGenerator(1, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      groupedStackedBarRenderer0.getShadowPaint();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("]", "<CY4&?&o?xl}#Fnn", 39.0, 1834.2978974);
      lineRenderer3D0.removeAnnotation(categoryPointerAnnotation0);
      lineRenderer3D0.setUseOutlinePaint(false);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.getUseOutlinePaint();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      lineRenderer3D0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      // Undeclared exception!
      try { 
        lineRenderer3D0.getRangeAxis((CategoryPlot) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      lineAndShapeRenderer0.getRangeAxis(categoryPlot0, 10);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.getNegativeItemLabelPositionFallback();
      Graphics2D graphics2D0 = null;
      int int0 = 79;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 79;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, 79, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 1 and should be 790
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-962.56), 0.0);
      stackedBarRenderer3D0.getURLGenerator(1, 1, false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      statisticalBarRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, true);
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getBaseToolTipGenerator();
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(1, categoryToolTipGenerator0, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.lookupSeriesOutlinePaint(0);
      lineRenderer3D0.getLegendItem(1, 1);
      lineRenderer3D0.getYOffset();
      StackedBarRenderer3D stackedBarRenderer3D1 = new StackedBarRenderer3D(0.0, 0.0);
      stackedBarRenderer3D0.getBarPainter();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("");
      defaultCategoryItemRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      stackedBarRenderer3D0.setShadowYOffset(12.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(0, 1);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getToolTipGenerator(0, 0, false);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1365.722, (double) statisticalBarRenderer0.ZERO);
      statisticalBarRenderer0.getBaseURLGenerator();
      stackedBarRenderer3D0.setSeriesURLGenerator(0, (CategoryURLGenerator) null, false);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      LayeredBarRenderer layeredBarRenderer1 = new LayeredBarRenderer();
      layeredBarRenderer1.setAutoPopulateSeriesPaint(true);
      layeredBarRenderer0.getSeriesBarWidth(1);
      stackedBarRenderer3D0.setIgnoreZeroValues(false);
      double double0 = LineRenderer3D.DEFAULT_X_OFFSET;
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      lineRenderer3D0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      lineRenderer3D0.setUseOutlinePaint(false);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("");
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(0, 1);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getToolTipGenerator(0, 0, false);
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(1, (CategoryToolTipGenerator) null, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      lineAndShapeRenderer0.getBaseLinesVisible();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      statisticalBarRenderer0.getItemLabelGenerator(0, (-1), false);
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      scatterRenderer0.getUseFillPaint();
      lineRenderer3D0.getDrawOutlines();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      lineRenderer3D1.getXOffset();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      statisticalLineAndShapeRenderer0.setErrorIndicatorPaint(lineRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getErrorIndicatorPaint();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      statisticalBarRenderer0.getSeriesVisible(0);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer1.setSeriesShapesFilled((-1), (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.getBaseURLGenerator();
      groupedStackedBarRenderer0.setSeriesURLGenerator(0, (CategoryURLGenerator) null, true);
      BarRenderer.setDefaultShadowsVisible(true);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      groupedStackedBarRenderer0.getItemMargin();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setArtifactPaint(lineRenderer3D0.DEFAULT_OUTLINE_PAINT);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) stackedBarRenderer3D0.ZERO;
      doubleArray2[1] = 8.0;
      doubleArray2[2] = 0.2;
      doubleArray2[3] = 12.0;
      doubleArray2[4] = 0.2;
      doubleArray2[5] = 8.0;
      doubleArray2[6] = 0.2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) boxAndWhiskerRenderer0.ZERO;
      doubleArray3[1] = 0.2;
      doubleArray3[2] = 0.2;
      doubleArray3[3] = 12.0;
      doubleArray3[4] = 8.0;
      doubleArray3[5] = 0.2;
      doubleArray3[6] = 8.0;
      doubleArray3[7] = 12.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-814.603527);
      doubleArray4[1] = 0.2;
      doubleArray4[2] = (double) stackedBarRenderer3D0.ZERO;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = 12.0;
      doubleArray4[5] = (double) stackedBarRenderer3D0.ZERO;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 12.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 12.0;
      doubleArray6[1] = 8.0;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("0F~B,Tx`83>c$");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.getItemMiddle(0.2, 0.2, defaultIntervalCategoryDataset0, categoryAxis3D0, rectangle2D_Double0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.getLegendItems();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setAutoPopulateSeriesOutlineStroke(false);
      stackedBarRenderer3D0.equals(minMaxCategoryRenderer0);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, layeredBarRenderer0.DEFAULT_SHAPE, defaultKeyedValues2DDataset0, (-1103), 746, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getToolTipGenerator(3, 3, false);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null, true);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "tb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.lookupSeriesShape(59);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(59, 76);
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      statisticalBarRenderer1.getToolTipGenerator(59, 2004, false);
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(2004, (CategoryToolTipGenerator) null, true);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.lookupSeriesOutlinePaint(2004);
      lineRenderer3D0.getLegendItem(30, 2004);
      lineRenderer3D0.getYOffset();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2.0, 2004);
      stackedBarRenderer3D0.getBarPainter();
      statisticalBarRenderer1.clone();
      statisticalBarRenderer1.getSeriesURLGenerator(30);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(0, 1);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getToolTipGenerator(0, 0, false);
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(1, (CategoryToolTipGenerator) null, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      lineAndShapeRenderer0.getBaseLinesVisible();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = (-1);
      statisticalBarRenderer0.getItemLabelGenerator(0, (-1), false);
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      scatterRenderer0.getUseFillPaint();
      LineRenderer3D lineRenderer3D1 = new LineRenderer3D();
      lineRenderer3D1.getXOffset();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      statisticalLineAndShapeRenderer0.setErrorIndicatorPaint(lineRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getErrorIndicatorPaint();
      statisticalBarRenderer0.getSeriesVisible(0);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 817);
      // Undeclared exception!
      try { 
        scatterRenderer1.addEntity(standardEntityCollection0, statisticalBarRenderer1.DEFAULT_SHAPE, slidingGanttCategoryDataset0, 1, 0, false, 12.0, 738.1907654879257);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(0, 1);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getToolTipGenerator(0, 0, false);
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(1, (CategoryToolTipGenerator) null, false);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      waterfallBarRenderer0.setShadowXOffset((double) statisticalBarRenderer0.ZERO);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.addEntity(standardEntityCollection0, defaultCategoryItemRenderer0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, 1, (-2132), true, (double) defaultCategoryItemRenderer0.ZERO, (-635.4));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.lookupSeriesShape(59);
      statisticalBarRenderer0.hashCode();
      statisticalBarRenderer0.getErrorIndicatorPaint();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = minMaxCategoryRenderer0.getObjectIcon();
      LegendItemCollection legendItemCollection0 = minMaxCategoryRenderer0.getLegendItems();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.getRenderAsPercentages();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode(stackedAreaRenderer0, false);
      JTree jTree0 = new JTree(defaultMutableTreeNode0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) icon0;
      objectArray0[1] = (Object) rectangle2D_Double0;
      objectArray0[2] = (Object) levelRenderer0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) levelRenderer0;
      objectArray0[5] = (Object) legendItemCollection0;
      TreePath treePath0 = null;
      try {
        treePath0 = new TreePath(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Path elements must be non-null
         //
         verifyException("javax.swing.tree.TreePath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      lineRenderer3D0.findRangeBounds(defaultMultiValueCategoryDataset0);
      lineRenderer3D0.setUseOutlinePaint(false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultMultiValueCategoryDataset0, tableOrder0);
      spiderWebPlot0.getURLGenerator();
      lineRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) null, true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.getURLGenerator((-3140), 1482, true);
      lineRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) null);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      lineRenderer3D0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      lineRenderer3D0.getUseFillPaint();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("ItemLabelGenerator not cloneable.", dateFormat0);
      groupedStackedBarRenderer0.setAutoPopulateSeriesStroke(true);
      groupedStackedBarRenderer0.setSeriesItemLabelGenerator(366, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      intervalCategoryItemLabelGenerator0.equals((Object) null);
      boolean boolean0 = false;
      groupedStackedBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      groupedStackedBarRenderer0.getShadowPaint();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.setCompletePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.GanttRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getSeriesItemLabelGenerator(818);
      // Undeclared exception!
      try { 
        barRenderer3D0.setSeriesItemLabelGenerator((-3881), (CategoryItemLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      int int0 = (-3713);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.getToolTipGenerator();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesToolTipGenerator((-3713), (CategoryToolTipGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = true;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      int int0 = 106;
      stackedBarRenderer0.getBaseURLGenerator();
      stackedBarRenderer0.setSeriesURLGenerator(106, (CategoryURLGenerator) null);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.equals((Object) null);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int1 = 0;
      GanttCategoryDataset ganttCategoryDataset0 = null;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 0);
      // Undeclared exception!
      try { 
        scatterRenderer0.findRangeBounds(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(barRenderer3D0.getShadowsVisible());
      assertTrue(barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertTrue(barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01);
      assertTrue(barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertFalse(barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(barRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertTrue(barRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(barRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(barRenderer3D0.getBaseSeriesVisible());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(barRenderer3D0);
      
      barRenderer3D0.setItemLabelAnchorOffset(0.0);
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(barRenderer3D0.getShadowsVisible());
      assertTrue(barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertTrue(barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01);
      assertTrue(barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertFalse(barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(barRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertTrue(barRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(barRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(barRenderer3D0.getBaseSeriesVisible());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext0);
      
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      assertNotNull(simpleAttributeSet0);
      
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      AttributeSet attributeSet0 = styleContext0.removeAttributes((AttributeSet) simpleAttributeSet0, (Enumeration<?>) enumeration0);
      Color color0 = styleContext0.getBackground(attributeSet0);
      barRenderer3D0.setWallPaint(color0);
      barRenderer3D0.getIncludeBaseInRange();
      boolean boolean0 = false;
      barRenderer3D0.setAutoPopulateSeriesShape(boolean0);
      int int0 = (-777);
      int int1 = 0;
      barRenderer3D0.getLegendItem(int0, int1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(stackedAreaRenderer0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(taskSeriesCollection0);
      
      stackedAreaRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      
      int int0 = 405;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 405, 1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(405, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.getPreviousHeight(slidingGanttCategoryDataset0, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertNotNull(defaultCategoryItemRenderer0);
      
      boolean boolean0 = defaultCategoryItemRenderer0.getItemShapeVisible(0, 1);
      assertTrue(boolean0);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getToolTipGenerator(0, 0, false);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNull(categoryToolTipGenerator0);
      
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(1, (CategoryToolTipGenerator) null, false);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(waterfallBarRenderer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-962.55782), 0.0);
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals((-962.55782), stackedBarRenderer3D0.getXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1068, 1068);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1068, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1068, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(multiplePiePlot0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1068, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1068, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(spiderWebPlot0);
      
      CategoryURLGenerator categoryURLGenerator0 = spiderWebPlot0.getURLGenerator();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1068, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1068, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(categoryURLGenerator0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      lineRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(spiderWebPlot0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = spiderWebPlot0.getToolTipGenerator();
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(categoryToolTipGenerator0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      Range range0 = lineRenderer3D0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNull(range0);
      
      lineRenderer3D0.setUseOutlinePaint(false);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryURLGenerator categoryURLGenerator0 = spiderWebPlot0.getURLGenerator();
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(categoryURLGenerator0);
      
      lineRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = lineRenderer3D0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNull(range0);
      
      lineRenderer3D0.setUseOutlinePaint(false);
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(jDBCCategoryDataset0, tableOrder0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertNotNull(spiderWebPlot0);
      
      CategoryURLGenerator categoryURLGenerator0 = spiderWebPlot0.getURLGenerator();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertNull(categoryURLGenerator0);
      
      lineRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Color color0 = Color.BLACK;
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(color0, color0, color0, color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(waterfallBarRenderer0);
      
      waterfallBarRenderer0.setNegativeBarPaint(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      CategoryURLGenerator categoryURLGenerator0 = waterfallBarRenderer0.getBaseURLGenerator();
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNull(categoryURLGenerator0);
      
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(lineAndShapeRenderer0);
      
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultXYItemRenderer0.getBaseLinesVisible());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertTrue(defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(defaultXYItemRenderer0);
      
      Boolean boolean0 = defaultXYItemRenderer0.getSeriesShapesFilled(77);
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultXYItemRenderer0.getBaseLinesVisible());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertTrue(defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertNull(boolean0);
      
      lineAndShapeRenderer0.setSeriesShapesFilled(77, (Boolean) null);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertNotNull(lineAndShapeRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(categoryPlot0);
      
      ValueAxis valueAxis0 = lineAndShapeRenderer0.getRangeAxis(categoryPlot0, 10);
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(valueAxis0);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      LineAndShapeRenderer lineAndShapeRenderer1 = new LineAndShapeRenderer();
      assertFalse(lineAndShapeRenderer1.equals((Object)lineAndShapeRenderer0));
      assertTrue(lineAndShapeRenderer1.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer1.getRowCount());
      assertTrue(lineAndShapeRenderer1.getBaseCreateEntities());
      assertTrue(lineAndShapeRenderer1.getBaseShapesVisible());
      assertEquals(0.0, lineAndShapeRenderer1.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer1.getUseFillPaint());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer1.getBaseItemLabelsVisible());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesShape());
      assertEquals(2.0, lineAndShapeRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer1.getPassCount());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer1.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer1.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer1.getDrawOutlines());
      assertTrue(lineAndShapeRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer1.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer1.getBaseSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer1.getBaseLinesVisible());
      assertEquals(0, lineAndShapeRenderer1.getColumnCount());
      assertTrue(lineAndShapeRenderer1.getBaseSeriesVisible());
      assertNotNull(lineAndShapeRenderer1);
      
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertNotNull(scatterRenderer0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, lineAndShapeRenderer1.DEFAULT_SHAPE, defaultBoxAndWhiskerCategoryDataset0, 56, 1, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertNotNull(scatterRenderer0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      standardEntityCollection0.clear();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultBoxAndWhiskerCategoryDataset0, 56, (-1590), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, (-1.0));
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals((-1.0), stackedBarRenderer3D0.getYOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      LegendItemCollection legendItemCollection0 = stackedBarRenderer3D0.getLegendItems();
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals((-1.0), stackedBarRenderer3D0.getYOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(legendItemCollection0);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      boolean boolean0 = stackedBarRenderer3D0.equals(minMaxCategoryRenderer0);
      assertFalse(boolean0);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals((-1.0), stackedBarRenderer3D0.getYOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(layeredBarRenderer0);
      
      CategoryURLGenerator categoryURLGenerator0 = layeredBarRenderer0.getURLGenerator(1, 1, false);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNull(categoryURLGenerator0);
      
      stackedBarRenderer3D0.setSeriesURLGenerator(1, (CategoryURLGenerator) null, true);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals((-1.0), stackedBarRenderer3D0.getYOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      
      layeredBarRenderer0.setAutoPopulateSeriesPaint(false);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      double double0 = layeredBarRenderer0.getSeriesBarWidth((-404));
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      stackedBarRenderer3D0.setIgnoreZeroValues(false);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals((-1.0), stackedBarRenderer3D0.getYOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      
      double double1 = layeredBarRenderer0.getItemMargin();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.2, double1, 0.01);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-962.56), 0.0);
      boolean boolean0 = false;
      stackedBarRenderer3D0.getURLGenerator(1, 1, false);
      stackedBarRenderer3D0.setSeriesURLGenerator(1, (CategoryURLGenerator) null, true);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      layeredBarRenderer0.setAutoPopulateSeriesPaint(true);
      layeredBarRenderer0.getSeriesBarWidth(14);
      stackedBarRenderer3D0.setIgnoreZeroValues(false);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, layeredBarRenderer0.DEFAULT_SHAPE, (CategoryDataset) null, 14, (-4534), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(0, 1);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getToolTipGenerator(0, 0, false);
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(1, (CategoryToolTipGenerator) null, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.lookupSeriesOutlinePaint(30);
      lineRenderer3D0.getLegendItem(0, 255);
      lineRenderer3D0.getYOffset();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1, 1);
      stackedBarRenderer3D0.getBarPainter();
      statisticalBarRenderer0.clone();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getSeriesURLGenerator(1);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      defaultCategoryItemRenderer0.getItemShapeVisible(0, 1);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getToolTipGenerator(0, 0, false);
      defaultCategoryItemRenderer0.setSeriesToolTipGenerator(1, (CategoryToolTipGenerator) null, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.lookupSeriesOutlinePaint(30);
      lineRenderer3D0.getLegendItem(0, 255);
      lineRenderer3D0.getYOffset();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1, 1);
      stackedBarRenderer3D0.getBarPainter();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("dm");
      defaultCategoryItemRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setDataBoundsIncludesVisibleSeriesOnly(true);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", "", 0.0, 1.0);
      categoryPointerAnnotation0.equals(minMaxCategoryRenderer0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      categoryPointerAnnotation0.setValue(0.0);
      stackedXYAreaRenderer0.clearSeriesStrokes(true);
      categoryPointerAnnotation0.removeChangeListener(stackedXYAreaRenderer0);
      minMaxCategoryRenderer0.equals(categoryPointerAnnotation0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      minMaxCategoryRenderer0.getSeriesURLGenerator(2);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.getFillBox();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.fireSelectionEvent();
      jDBCCategoryDataset0.setValue((Number) 5, (Comparable) 5, (Comparable) 2);
      scatterRenderer0.setItemLabelAnchorOffset(685.197162);
      ChartEntity chartEntity0 = new ChartEntity(stackedXYAreaRenderer0.DEFAULT_SHAPE, "", "");
      standardEntityCollection0.add(chartEntity0);
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, categoryStepRenderer0.DEFAULT_SHAPE, jDBCCategoryDataset0, 1308, 5, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1308, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(858.9815072573386, 858.9815072573386);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getRowCount();
      lineRenderer3D0.setLegendShape(0, stackedBarRenderer3D0.DEFAULT_SHAPE);
      lineRenderer3D0.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      lineRenderer3D0.getLegendItem(0, 0);
      lineRenderer3D0.getYOffset();
      BarPainter barPainter0 = stackedBarRenderer3D0.getBarPainter();
      assertNotNull(barPainter0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.lookupSeriesShape(59);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(59, 6.0);
      stackedBarRenderer3D0.getLegendItems();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Fg&J- i,?", 0.2, 0.8, 59);
      stackedBarRenderer3D0.equals(categoryPointerAnnotation0);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      int int0 = 19;
      boolean boolean0 = true;
      layeredBarRenderer0.setAutoPopulateSeriesPaint(false);
      double double0 = LineRenderer3D.DEFAULT_X_OFFSET;
      stackedBarRenderer3D0.setIgnoreZeroValues(false);
      layeredBarRenderer0.getItemMargin();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setBarPainter((BarPainter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'painter' argument.
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.lookupSeriesShape(59);
      statisticalBarRenderer0.getErrorIndicatorPaint();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      double double0 = 4.0;
      CategoryPointerAnnotation categoryPointerAnnotation0 = null;
      try {
        categoryPointerAnnotation0 = new CategoryPointerAnnotation("O!c1'", (Comparable) null, (double) statisticalLineAndShapeRenderer0.ZERO, (-2557.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'category' argument.
         //
         verifyException("org.jfree.chart.annotations.CategoryTextAnnotation", e);
      }
  }
}
