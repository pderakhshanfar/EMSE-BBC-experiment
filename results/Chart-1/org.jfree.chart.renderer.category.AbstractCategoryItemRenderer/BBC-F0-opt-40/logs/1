* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-40
* Going to generate test cases for class: org.jfree.chart.renderer.category.AbstractCategoryItemRenderer
* Starting Client-0
* Connecting to master process on port 6686
* Analyzing classpath: 
  - subjects/buggy-versions/Chart-1/build
  - subjects/buggy-versions/Chart-1/lib/servlet.jar
* Finished analyzing classpath
* Generating tests for class org.jfree.chart.renderer.category.AbstractCategoryItemRenderer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2320
* Using seed 4248822935
* Starting evolution
bbc usage percentage is: 40%
* Initial Number of Goals in DynaMOSA = 786 / 2320
[MASTER] 14:14:52.874 [logback-1] WARN  TestUsageChecker - class org.jfree.chart.renderer.category.MinMaxCategoryRenderer$1 looks like an anonymous class, ignoring it (although reflection says false) MinMaxCategoryRenderer$1
[MASTER] 14:14:52.976 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getURLGenerator(IIZ)Lorg/jfree/chart/urls/CategoryURLGenerator;: I11 Branch 8 IFNONNULL L550 - false in context: org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:getURLGenerator(IIZ)Lorg/jfree/chart/urls/CategoryURLGenerator;
[MASTER] 14:14:52.994 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getURLGenerator(IIZ)Lorg/jfree/chart/urls/CategoryURLGenerator;
[MASTER] 14:14:52.996 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getURLGenerator(IIZ)Lorg/jfree/chart/urls/CategoryURLGenerator;
[MASTER] 14:14:53.312 [logback-1] WARN  TestUsageChecker - class org.jfree.chart.renderer.category.MinMaxCategoryRenderer$2 looks like an anonymous class, ignoring it (although reflection says false) MinMaxCategoryRenderer$2
[MASTER] 14:14:55.813 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 14:15:46.834 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C2*
* Search finished after 603s and 1317 generations, 794200 statements, best individual has fitness: 765.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 82%
* Total number of goals: 519
* Number of covered goals: 424
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 74%
* Total number of goals: 274
* Number of covered goals: 203
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 64
* Number of covered goals: 64
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 66%
* Total number of goals: 783
* Number of covered goals: 515
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 340
* Number of covered goals: 145
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 65
* Number of covered goals: 65
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 97%
* Total number of goals: 65
* Number of covered goals: 63
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 274
* Number of covered goals: 200
* Generated 170 tests with total length 1088
* Resulting test suite's coverage: 73% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 20%
* Compiling and checking tests
[MASTER] 14:26:05.030 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:06.719 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:08.370 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:09.376 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:10.675 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:13.262 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:14.352 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:15.488 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:16.370 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:17.487 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:18.576 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:19.430 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:20.579 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:21.684 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:22.637 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:23.593 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:24.639 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:25.562 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:26.544 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:27.532 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:29.550 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:30.435 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:31.355 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:32.773 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:34.105 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:35.002 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:36.114 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:37.027 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:38.117 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:39.060 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:39.979 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:41.792 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:42.600 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:26:43.622 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'AbstractCategoryItemRenderer_ESTest' to results/Chart-1/org.jfree.chart.renderer.category.AbstractCategoryItemRenderer/BBC-F0-opt-40/tests/1
* Done!

* Computation finished
