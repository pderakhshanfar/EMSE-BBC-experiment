/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:14:47 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.lang.reflect.Array;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.time.chrono.ChronoLocalDate;
import javax.swing.JInternalFrame;
import javax.swing.JSpinner;
import javax.swing.JViewport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("The number of series keys does not match the number of series in the data.");
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals("The number of series keys does not match the number of series in the data.", categoryAxis3D0.getLabel());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(categoryAxis3D0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, levelRenderer0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals("The number of series keys does not match the number of series in the data.", categoryAxis3D0.getLabel());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(categoryPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals("The number of series keys does not match the number of series in the data.", categoryAxis3D0.getLabel());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 5);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals("The number of series keys does not match the number of series in the data.", categoryAxis3D0.getLabel());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(bufferedImage0);
      
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State((PlotRenderingInfo) null);
      assertEquals((-1), categoryStepRenderer_State0.getVisibleSeriesCount());
      assertEquals(0.0, categoryStepRenderer_State0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryStepRenderer_State0.getBarWidth(), 0.01);
      assertNotNull(categoryStepRenderer_State0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals("The number of series keys does not match the number of series in the data.", categoryAxis3D0.getLabel());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(graphics2D0);
      
      Rectangle rectangle0 = new Rectangle(1, 5);
      assertEquals(2.5, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(5.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(5.0, rectangle0.getMaxY(), 0.01);
      assertEquals(5, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(1, rectangle0.width);
      assertNotNull(rectangle0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals("The number of series keys does not match the number of series in the data.", categoryAxis3D0.getLabel());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.5, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(5.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(5.0, rectangle0.getMaxY(), 0.01);
      assertEquals(2.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(7.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.5, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-2.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals((-4.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(5.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(5, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(1, rectangle0.width);
      assertEquals(9.0, rectangle2D_Double0.width, 0.01);
      assertEquals((-2.0), rectangle2D_Double0.y, 0.01);
      assertEquals(9.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-4.0), rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      // Undeclared exception!
      try { 
        levelRenderer0.createHotSpotBounds(graphics2D0, rectangle0, categoryPlot0, categoryAxis3D0, logAxis0, defaultKeyedValues2DDataset0, 633, 400, true, categoryStepRenderer_State0, rectangle2D_Double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 400, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("({0}, {1}) = {3} - {4}", "xblO.~sH)Yu2pR=g)_V", "");
      assertNotNull(standardCategoryURLGenerator0);
      
      levelRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        levelRenderer0.addEntity(standardEntityCollection0, rectangle2D_Float0, defaultBoxAndWhiskerCategoryDataset0, (-2806), (-1), false, 287.11502, 778.375733989984);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 10);
      assertNotNull(defaultValueDataset0);
      
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertNotNull(meterPlot0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)meterPlot0.getTickLabelFormat();
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertNotNull(decimalFormat0);
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("Null 'hotspot' argument.", decimalFormat0);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("Null 'hotspot' argument.", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertNotNull(intervalCategoryItemLabelGenerator0);
      
      levelRenderer0.setSeriesItemLabelGenerator(2, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertFalse(meterPlot0.isSubplot());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("Null 'hotspot' argument.", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        levelRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultCategoryDataset0, 2, 2, true, 10.0F, 0.5, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      levelRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultCategoryDataset0, 2, 2, true, 10.0F, 0.5, false);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(boxAndWhiskerRenderer0);
      
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(boxAndWhiskerRenderer0.ZERO, 4005.26506276, 0.2, 4005.26506276, boxAndWhiskerRenderer0.DEFAULT_PAINT, statisticalBarRenderer0.DEFAULT_OUTLINE_STROKE);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(4005.26506276, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(4005.26506276, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(categoryLineAnnotation0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(4005.26506276, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(4005.26506276, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      
      boolean boolean0 = boxAndWhiskerRenderer0.removeAnnotation(categoryLineAnnotation0);
      assertFalse(boolean0);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(4005.26506276, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(4005.26506276, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertNotNull(defaultCategoryItemRenderer0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("b\"X2_7J;jx]?ZuO-");
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals("b\"X2_7J;jx]?ZuO-", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(logarithmicAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logarithmicAxis0);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals("b\"X2_7J;jx]?ZuO-", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeCategoryPlot0);
      
      defaultCategoryItemRenderer0.setPlot(combinedRangeCategoryPlot0);
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals("b\"X2_7J;jx]?ZuO-", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle rectangle0 = new Rectangle(10, (-880), 10, 10);
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals(10.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getX(), 0.01);
      assertEquals(20.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-870.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-875.0), rectangle0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-880.0), rectangle0.getMinY(), 0.01);
      assertEquals((-880.0), rectangle0.getY(), 0.01);
      assertEquals((-880), rectangle0.y);
      assertEquals(10, rectangle0.width);
      assertEquals(10, rectangle0.x);
      assertEquals(10, rectangle0.height);
      assertNotNull(rectangle0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(5, 10);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(graphics2D0);
      
      statisticalBarRenderer0.drawBackground(graphics2D0, combinedRangeCategoryPlot0, rectangle0);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals(10.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getX(), 0.01);
      assertEquals(20.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-870.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-875.0), rectangle0.getCenterY(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-880.0), rectangle0.getMinY(), 0.01);
      assertEquals((-880.0), rectangle0.getY(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-880), rectangle0.y);
      assertEquals(10, rectangle0.width);
      assertEquals(10, rectangle0.x);
      assertEquals(10, rectangle0.height);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(numberAxis3D0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      Rectangle rectangle0 = new Rectangle(10, (-48), 10, 10);
      assertEquals(20.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-48.0), rectangle0.getY(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-43.0), rectangle0.getCenterY(), 0.01);
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals((-48.0), rectangle0.getMinY(), 0.01);
      assertEquals(10.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getX(), 0.01);
      assertEquals((-38.0), rectangle0.getMaxY(), 0.01);
      assertEquals(10, rectangle0.height);
      assertEquals(10, rectangle0.width);
      assertEquals(10, rectangle0.x);
      assertEquals((-48), rectangle0.y);
      assertNotNull(rectangle0);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(subCategoryAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      levelRenderer0.drawAnnotations((Graphics2D) null, rectangle0, subCategoryAxis0, numberAxis3D0, layer0, plotRenderingInfo0);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(20.0, rectangle0.getMaxX(), 0.01);
      assertEquals((-48.0), rectangle0.getY(), 0.01);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-43.0), rectangle0.getCenterY(), 0.01);
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals((-48.0), rectangle0.getMinY(), 0.01);
      assertEquals(10.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getX(), 0.01);
      assertEquals((-38.0), rectangle0.getMaxY(), 0.01);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(10, rectangle0.height);
      assertEquals(10, rectangle0.width);
      assertEquals(10, rectangle0.x);
      assertEquals((-48), rectangle0.y);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNotNull(stackedAreaRenderer0);
      
      stackedAreaRenderer0.setSeriesToolTipGenerator(3, (CategoryToolTipGenerator) null);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(extendedCategoryAxis0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, periodAxis0, ganttRenderer0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(categoryPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(bufferedImage0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertNotNull(defaultCategoryItemRenderer0);
      
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(bufferedImageRenderingSource0);
      
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(graphics2D0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 0.0F, 1332.495);
      assertEquals(10.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(676.2475, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1342.495, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.y, 0.01);
      assertEquals(10.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1332.495, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      defaultCategoryItemRenderer0.drawOutline(graphics2D0, categoryPlot0, rectangle2D_Double0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getWidth());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(10.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(676.2475, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1342.495, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(10.0, rectangle2D_Double0.y, 0.01);
      assertEquals(10.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1332.495, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertTrue(barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01);
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertTrue(barRenderer3D0.getBaseSeriesVisible());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01);
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(barRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertTrue(barRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
      assertTrue(barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(barRenderer3D0.getShadowsVisible());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertFalse(barRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(barRenderer3D0);
      
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", barRenderer3D0.ZERO, 0.2);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertTrue(barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01);
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertTrue(barRenderer3D0.getBaseSeriesVisible());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01);
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(barRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertTrue(barRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
      assertTrue(barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(barRenderer3D0.getShadowsVisible());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertFalse(barRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryTextAnnotation0.getNotify());
      assertEquals("NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", categoryTextAnnotation0.getText());
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.2, categoryTextAnnotation0.getValue(), 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
      assertNotNull(categoryTextAnnotation0);
      
      barRenderer3D0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01);
      assertTrue(barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01);
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertTrue(barRenderer3D0.getBaseSeriesVisible());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01);
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01);
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(barRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(barRenderer3D0.isDrawBarOutline());
      assertTrue(barRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01);
      assertTrue(barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(barRenderer3D0.getShadowsVisible());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01);
      assertFalse(barRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryTextAnnotation0.getNotify());
      assertEquals("NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", categoryTextAnnotation0.getText());
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01);
      assertEquals(0.2, categoryTextAnnotation0.getValue(), 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.0, TextAnnotation.DEFAULT_ROTATION_ANGLE, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      double[][] doubleArray0 = new double[3][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertNotNull(scatterRenderer0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = scatterRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0, plotRenderingInfo0);
      assertEquals(3, doubleArray0.length);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(5, scatterRenderer0.getColumnCount());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, scatterRenderer0.getRowCount());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(3, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(categoryItemRendererState0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(lineAndShapeRenderer0);
      
      CategoryURLGenerator categoryURLGenerator0 = lineAndShapeRenderer0.getURLGenerator(64, 1952, true);
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getRenderAsPercentages());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      assertNotNull(standardCategoryURLGenerator0);
      
      stackedBarRenderer3D0.setSeriesURLGenerator(1402, (CategoryURLGenerator) standardCategoryURLGenerator0);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getRenderAsPercentages());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer3D0.getSeriesURLGenerator(1402);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getRenderAsPercentages());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertSame(categoryURLGenerator0, standardCategoryURLGenerator0);
      assertNotNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineRenderer3D0.getSeriesToolTipGenerator((-1));
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(waterfallBarRenderer0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = waterfallBarRenderer0.getSeriesItemLabelGenerator((-480));
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.windowBorder;
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertNotNull(systemColor0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(systemColor0, systemColor0, systemColor0, systemColor0);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(waterfallBarRenderer0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("Vf]6e", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertFalse(symbolAxis0.isInverted());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals("Vf]6e", symbolAxis0.getLabel());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertTrue(symbolAxis0.isAutoRange());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertNull(symbolAxis0.getLabelToolTip());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(symbolAxis0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(ganttRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, symbolAxis0, ganttRenderer0);
      assertEquals(1, stringArray0.length);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertFalse(symbolAxis0.isInverted());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals((-0.5000000025), symbolAxis0.getLowerBound(), 0.01);
      assertEquals("Vf]6e", symbolAxis0.getLabel());
      assertEquals(0.500000005, symbolAxis0.getUpperBound(), 0.01);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertTrue(symbolAxis0.isAutoRange());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertNull(symbolAxis0.getLabelToolTip());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(categoryPlot0);
      
      SymbolAxis symbolAxis1 = (SymbolAxis)waterfallBarRenderer0.getRangeAxis(categoryPlot0, 10);
      assertEquals(1, stringArray0.length);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertFalse(symbolAxis0.isInverted());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals((-0.5000000025), symbolAxis0.getLowerBound(), 0.01);
      assertEquals("Vf]6e", symbolAxis0.getLabel());
      assertEquals(0.500000005, symbolAxis0.getUpperBound(), 0.01);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertTrue(symbolAxis0.isAutoRange());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertNull(symbolAxis0.getLabelToolTip());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertFalse(symbolAxis1.isMinorTickMarksVisible());
      assertTrue(symbolAxis1.isAutoRange());
      assertEquals(0.500000005, symbolAxis1.getUpperBound(), 0.01);
      assertTrue(symbolAxis1.isGridBandsVisible());
      assertFalse(symbolAxis1.isPositiveArrowVisible());
      assertEquals(1.0E-8, symbolAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, symbolAxis1.getFixedDimension(), 0.01);
      assertNull(symbolAxis1.getLabelToolTip());
      assertFalse(symbolAxis1.isNegativeArrowVisible());
      assertTrue(symbolAxis1.isTickMarksVisible());
      assertNull(symbolAxis1.getLabelURL());
      assertEquals(2.0F, symbolAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, symbolAxis1.getLowerMargin(), 0.01);
      assertFalse(symbolAxis1.isAutoTickUnitSelection());
      assertTrue(symbolAxis1.isAxisLineVisible());
      assertTrue(symbolAxis1.isTickLabelsVisible());
      assertEquals((-0.5000000025), symbolAxis1.getLowerBound(), 0.01);
      assertFalse(symbolAxis1.isVerticalTickLabels());
      assertEquals(0.0F, symbolAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis1.getAutoRangeIncludesZero());
      assertTrue(symbolAxis1.isVisible());
      assertFalse(symbolAxis1.getAutoRangeStickyZero());
      assertEquals(0.05, symbolAxis1.getUpperMargin(), 0.01);
      assertEquals(2.0F, symbolAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("Vf]6e", symbolAxis1.getLabel());
      assertEquals(0, symbolAxis1.getMinorTickCount());
      assertEquals(0.0, symbolAxis1.getFixedAutoRange(), 0.01);
      assertFalse(symbolAxis1.isInverted());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertSame(symbolAxis0, symbolAxis1);
      assertSame(symbolAxis1, symbolAxis0);
      assertNotNull(symbolAxis1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(categoryAxis3D0);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isInverted());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(logAxis0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(waterfallBarRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, waterfallBarRenderer0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(categoryPlot0);
      
      LogAxis logAxis1 = (LogAxis)ganttRenderer0.getRangeAxis(categoryPlot0, 500);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(logAxis1.isPositiveArrowVisible());
      assertEquals(0, logAxis1.getMinorTickCount());
      assertEquals(1.0E-100, logAxis1.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis1.getBase(), 0.01);
      assertNull(logAxis1.getLabel());
      assertEquals(0.0, logAxis1.getFixedDimension(), 0.01);
      assertNull(logAxis1.getLabelURL());
      assertFalse(logAxis1.isNegativeArrowVisible());
      assertTrue(logAxis1.isAutoTickUnitSelection());
      assertEquals(Double.NaN, logAxis1.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis1.getLowerMargin(), 0.01);
      assertFalse(logAxis1.isMinorTickMarksVisible());
      assertTrue(logAxis1.isAxisLineVisible());
      assertEquals(0.0F, logAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis1.getAutoRangeMinimumSize(), 0.01);
      assertNull(logAxis1.getLabelToolTip());
      assertTrue(logAxis1.isTickLabelsVisible());
      assertTrue(logAxis1.isTickMarksVisible());
      assertFalse(logAxis1.isInverted());
      assertFalse(logAxis1.isVerticalTickLabels());
      assertEquals(2.0F, logAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis1.getFixedAutoRange(), 0.01);
      assertTrue(logAxis1.isVisible());
      assertEquals(2.0F, logAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(Double.NaN, logAxis1.getLowerBound(), 0.01);
      assertTrue(logAxis1.isAutoRange());
      assertEquals(0.0F, logAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis1.getUpperMargin(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertSame(logAxis0, logAxis1);
      assertSame(logAxis1, logAxis0);
      assertNotNull(logAxis1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertTrue(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNotNull(categoryStepRenderer0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3252.2);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(3252.2, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(3252.2, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis0, cyclicNumberAxis0, categoryStepRenderer0);
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertTrue(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(3252.2, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals((-3251.2), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(3252.2, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(categoryPlot0);
      
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)categoryStepRenderer0.getRangeAxis(categoryPlot0, 10);
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertTrue(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(3252.2, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals((-3251.2), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(3252.2, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(3252.2, cyclicNumberAxis1.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis1.getLabel());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertFalse(cyclicNumberAxis1.isInverted());
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(3252.2, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals((-3251.2), cyclicNumberAxis1.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertSame(cyclicNumberAxis0, cyclicNumberAxis1);
      assertSame(cyclicNumberAxis1, cyclicNumberAxis0);
      assertNotNull(cyclicNumberAxis1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      double[][] doubleArray0 = new double[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis3D0);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(logAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, levelRenderer0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(categoryPlot0);
      
      CategoryPlot categoryPlot1 = levelRenderer0.getPlot();
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryPlot1.canSelectByRegion());
      assertTrue(categoryPlot1.canSelectByPoint());
      assertFalse(categoryPlot1.isRangePannable());
      assertFalse(categoryPlot1.isDomainZoomable());
      assertFalse(categoryPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot1.getRangeAxisCount());
      assertEquals(0, categoryPlot1.getWeight());
      assertEquals(1, categoryPlot1.getDatasetCount());
      assertEquals(1.0F, categoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot1.isDomainGridlinesVisible());
      assertFalse(categoryPlot1.getDrawSharedDomainAxis());
      assertFalse(categoryPlot1.isRangeCrosshairVisible());
      assertTrue(categoryPlot1.isNotify());
      assertNull(categoryPlot1.getNoDataMessage());
      assertTrue(categoryPlot1.isRangeZoomable());
      assertEquals(1, categoryPlot1.getRendererCount());
      assertEquals(0.5F, categoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot1.isRangeGridlinesVisible());
      assertFalse(categoryPlot1.isDomainCrosshairVisible());
      assertFalse(categoryPlot1.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot1.isDomainPannable());
      assertEquals(1, categoryPlot1.getDomainAxisCount());
      assertEquals(0, categoryPlot1.getCrosshairDatasetIndex());
      assertEquals(15, categoryPlot1.getBackgroundImageAlignment());
      assertTrue(categoryPlot1.isOutlineVisible());
      assertEquals(0.0, categoryPlot1.getAnchorValue(), 0.01);
      assertTrue(categoryPlot1.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot1.isSubplot());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(categoryPlot1, categoryPlot0);
      assertNotNull(categoryPlot1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertNotNull(scatterRenderer0);
      
      int int0 = scatterRenderer0.getPassCount();
      assertEquals(1, int0);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertFalse(scatterRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(stackedBarRenderer0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer0.getLegendItemToolTipGenerator();
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertTrue(categoryStepRenderer0.getStagger());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNotNull(categoryStepRenderer0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = categoryStepRenderer0.getLegendItemLabelGenerator();
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertTrue(categoryStepRenderer0.getStagger());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNotNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      double[][] doubleArray0 = new double[2][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(extendedCategoryAxis0);
      
      double double0 = levelRenderer0.getItemMiddle(false, 1.0F, defaultIntervalCategoryDataset0, extendedCategoryAxis0, rectangle2D_Float0, (RectangleEdge) null);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(ganttRenderer0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(extendedCategoryAxis0);
      
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(1.0E-8, 1825.8842288404076, 0.0, 0.05);
      assertEquals(1825.8842288404076, ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(1.0E-8, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0E-8, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(1825.9342288404075, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(1825.9092288404076, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0E-8, ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(0.05, ellipse2D_Double0.height, 0.01);
      assertEquals(1825.8842288404076, ellipse2D_Double0.y, 0.01);
      assertEquals(1.0E-8, ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      assertNotNull(ellipse2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ellipse2D_Double0.getBounds2D();
      assertEquals(1825.8842288404076, ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(1.0E-8, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0E-8, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(1825.9342288404075, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(1825.9092288404076, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0E-8, ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(1.0E-8, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1825.9342288404075, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1825.9092288404076, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0E-8, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0E-8, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1825.8842288404076, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.05, ellipse2D_Double0.height, 0.01);
      assertEquals(1825.8842288404076, ellipse2D_Double0.y, 0.01);
      assertEquals(1.0E-8, ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      assertEquals(1825.8842288404076, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0E-8, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.05, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(numberAxis3D0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(500);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(rectangleEdge0);
      
      double double0 = ganttRenderer0.getItemMiddle(0.2, false, defaultIntervalCategoryDataset0, extendedCategoryAxis0, rectangle2D_Double0, rectangleEdge0);
      assertEquals(1.0E-8, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(1825.8842288404076, ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(1.0E-8, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0E-8, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(1825.9342288404075, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(1825.9092288404076, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0E-8, ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(1.0E-8, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1825.9342288404075, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1825.9092288404076, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(1.0E-8, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1.0E-8, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1825.8842288404076, rectangle2D_Double0.getMinY(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ellipse2D_Double0.height, 0.01);
      assertEquals(1825.8842288404076, ellipse2D_Double0.y, 0.01);
      assertEquals(1.0E-8, ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      assertEquals(1825.8842288404076, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0E-8, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.05, rectangle2D_Double0.height, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = stackedBarRenderer3D0.getItemLabelGenerator(1861, 1861, true);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryItemLabelGenerator0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      ganttRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)ganttRenderer0.getItemLabelGenerator(2, 304, false);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator1.getLabelFormat());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertSame(intervalCategoryItemLabelGenerator1, intervalCategoryItemLabelGenerator0);
      assertNotNull(intervalCategoryItemLabelGenerator1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(defaultCategoryItemRenderer0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("RdBpJxTG 0e");
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("RdBpJxTG 0e", extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(extendedCategoryAxis0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("RdBpJxTG 0e");
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals("RdBpJxTG 0e", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(periodAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, extendedCategoryAxis0, periodAxis0, defaultCategoryItemRenderer0);
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("RdBpJxTG 0e", extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals("RdBpJxTG 0e", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(categoryPlot0);
      
      DrawingSupplier drawingSupplier0 = defaultCategoryItemRenderer0.getDrawingSupplier();
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      CategoryAxis categoryAxis0 = ganttRenderer0.getDomainAxis(combinedRangeCategoryPlot0, (CategoryDataset) null);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(lineAndShapeRenderer0);
      
      double[][] doubleArray0 = new double[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(ganttRenderer0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertNull(extendedCategoryAxis0.getLabel());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(extendedCategoryAxis0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(periodAxis0);
      
      extendedCategoryAxis0.setTickLabelsVisible(false);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertFalse(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertNull(extendedCategoryAxis0.getLabel());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, periodAxis0, lineAndShapeRenderer0);
      assertEquals(4, doubleArray0.length);
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertFalse(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertNull(extendedCategoryAxis0.getLabel());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(categoryPlot0);
      
      CategoryAxis categoryAxis0 = ganttRenderer0.getDomainAxis(categoryPlot0, defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertFalse(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertNull(extendedCategoryAxis0.getLabel());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertTrue(categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertFalse(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertSame(extendedCategoryAxis0, categoryAxis0);
      assertSame(categoryAxis0, extendedCategoryAxis0);
      assertNotNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertNotNull(lineAndShapeRenderer0);
      
      double[][] doubleArray0 = new double[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertNotNull(extendedCategoryAxis0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, periodAxis0, lineAndShapeRenderer0);
      assertEquals(4, doubleArray0.length);
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(categoryPlot0);
      
      CategoryAxis categoryAxis0 = ganttRenderer0.getDomainAxis(categoryPlot0, defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertSame(extendedCategoryAxis0, categoryAxis0);
      assertSame(categoryAxis0, extendedCategoryAxis0);
      assertNotNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.windowBorder;
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(systemColor0, systemColor0, systemColor0, systemColor0);
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(waterfallBarRenderer0);
      
      int int0 = waterfallBarRenderer0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertFalse(categoryStepRenderer0.getStagger());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNotNull(categoryStepRenderer0);
      
      CategoryURLGenerator categoryURLGenerator0 = categoryStepRenderer0.getBaseURLGenerator();
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertFalse(categoryStepRenderer0.getStagger());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryItemLabelGenerator0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      ganttRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)ganttRenderer0.getBaseItemLabelGenerator();
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator1.getLabelFormat());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertSame(intervalCategoryItemLabelGenerator1, intervalCategoryItemLabelGenerator0);
      assertNotNull(intervalCategoryItemLabelGenerator1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertNotNull(defaultCategoryItemRenderer0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultCategoryItemRenderer0.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      Range range0 = lineRenderer3D0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.2;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.2, range0.getLength(), 0.01);
      assertEquals(0.2, range0.getUpperBound(), 0.01);
      assertEquals(0.1, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      Range range0 = lineRenderer3D0.findRangeBounds((CategoryDataset) null);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      Range range0 = levelRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 3, 3);
      assertEquals(3, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(3, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertNotNull(stackedAreaRenderer0);
      
      Range range0 = stackedAreaRenderer0.findRangeBounds(slidingCategoryDataset0);
      assertEquals(3, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(3, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(ganttRenderer0);
      
      boolean boolean0 = ganttRenderer0.equals(ganttRenderer0);
      assertTrue(boolean0);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      boolean boolean0 = lineRenderer3D0.equals(stackedBarRenderer3D0);
      assertFalse(boolean0);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(categoryStepRenderer0.getStagger());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNotNull(categoryStepRenderer0);
      
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState((PlotRenderingInfo) null);
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(categoryStepRenderer0.getStagger());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNotNull(categoryItemRendererState0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("RI1[0##Bw8H_PxY<2M3");
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("RI1[0##Bw8H_PxY<2M3", subCategoryAxis0.getLabel());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(subCategoryAxis0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, subCategoryAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("RI1[0##Bw8H_PxY<2M3", subCategoryAxis0.getLabel());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(waterfallBarRenderer0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("RI1[0##Bw8H_PxY<2M3");
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals("RI1[0##Bw8H_PxY<2M3", numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(numberAxis3D0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(layeredBarRenderer0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = layeredBarRenderer0.createState(plotRenderingInfo0);
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(categoryItemRendererState0);
      
      Rectangle2D rectangle2D0 = waterfallBarRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, subCategoryAxis0, numberAxis3D0, defaultCategoryDataset0, 10, 500, false, categoryItemRendererState0, rectangle2D_Double0);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("RI1[0##Bw8H_PxY<2M3", subCategoryAxis0.getLabel());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals("RI1[0##Bw8H_PxY<2M3", numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNull(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(waterfallBarRenderer0);
      
      WaterfallBarRenderer waterfallBarRenderer1 = (WaterfallBarRenderer)waterfallBarRenderer0.clone();
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, waterfallBarRenderer1.getRowCount());
      assertTrue(waterfallBarRenderer1.getBaseSeriesVisibleInLegend());
      assertTrue(waterfallBarRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(waterfallBarRenderer1.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer1.getShadowXOffset(), 0.01);
      assertEquals(0, waterfallBarRenderer1.getColumnCount());
      assertEquals(0.0, waterfallBarRenderer1.getBase(), 0.01);
      assertTrue(waterfallBarRenderer1.getBaseCreateEntities());
      assertFalse(waterfallBarRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, waterfallBarRenderer1.getMaximumBarWidth(), 0.01);
      assertTrue(waterfallBarRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(waterfallBarRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, waterfallBarRenderer1.getMinimumBarLength(), 0.01);
      assertTrue(waterfallBarRenderer1.getBaseSeriesVisible());
      assertTrue(waterfallBarRenderer1.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer1.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer1.getDefaultShadowsVisible());
      assertTrue(waterfallBarRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(waterfallBarRenderer1.getBaseItemLabelsVisible());
      assertEquals(4.0, waterfallBarRenderer1.getShadowYOffset(), 0.01);
      assertEquals(1, waterfallBarRenderer1.getPassCount());
      assertTrue(waterfallBarRenderer1.getAutoPopulateSeriesShape());
      assertTrue(waterfallBarRenderer1.getShadowsVisible());
      assertEquals(2.0, waterfallBarRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, waterfallBarRenderer1.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer1.equals((Object)waterfallBarRenderer0));
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotSame(waterfallBarRenderer0, waterfallBarRenderer1);
      assertNotSame(waterfallBarRenderer1, waterfallBarRenderer0);
      assertNotNull(waterfallBarRenderer1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      assertEquals(0, categoryCrosshairState0.getDatasetIndex());
      assertEquals(0, categoryCrosshairState0.getDomainAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getAnchorY(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getAnchorX(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairX(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairY(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairDistance(), 0.01);
      assertEquals(0, categoryCrosshairState0.getRangeAxisIndex());
      assertNotNull(categoryCrosshairState0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertNotNull(decimalFormat0);
      
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(7.2E7, decimalFormat0, 0);
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, numberTickUnit0.getMinorTickCount());
      assertEquals(7.2E7, numberTickUnit0.getSize(), 0.01);
      assertNotNull(numberTickUnit0);
      
      float[][] floatArray0 = new float[8][2];
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(dateAxis0);
      
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, dateAxis0, dateAxis0);
      assertEquals(8, floatArray0.length);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(fastScatterPlot0);
      
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      assertEquals(8, floatArray0.length);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-1.0), dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(plotOrientation0);
      
      // Undeclared exception!
      try { 
        lineRenderer3D0.updateCrosshairValues(categoryCrosshairState0, numberTickUnit0, numberTickUnit0, 2.0, 51, 2.0, 0.0, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(boxAndWhiskerRenderer0);
      
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setSeriesURLGenerator((-114), (CategoryURLGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      // Undeclared exception!
      try { 
        levelRenderer0.setSeriesURLGenerator(Integer.MAX_VALUE, (CategoryURLGenerator) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getRenderAsPercentages());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      assertNotNull(standardCategoryURLGenerator0);
      
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesURLGenerator((-2077), (CategoryURLGenerator) standardCategoryURLGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(groupedStackedBarRenderer0);
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.setSeriesToolTipGenerator((int) (byte) (-67), (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(8.0, 1.0, false);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(8.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultMultiValueCategoryDataset0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(spiderWebPlot0);
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = (StandardCategoryItemLabelGenerator)spiderWebPlot0.getLabelGenerator();
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("{2}", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesItemLabelGenerator((-998), (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(stackedAreaRenderer0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.setSeriesItemLabelGenerator((-1832), (CategoryItemLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(10, 0.05);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.05, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(10.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.initialise((Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainCategoryPlot0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(numberAxis0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertNotNull(defaultCategoryItemRenderer0);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("BO~0}#K^~#_u>hEB");
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals("BO~0}#K^~#_u>hEB", subCategoryAxis0.getLabel());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(subCategoryAxis0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertNotNull(categoryItemRendererState0);
      
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.hitTest(0.05, 10, (Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, subCategoryAxis0, numberAxis0, (CategoryDataset) null, 269, 10, false, categoryItemRendererState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertNotNull(defaultCategoryItemRenderer0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(extendedCategoryAxis0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertNotNull(combinedDomainCategoryPlot0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isInverted());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.hitTest(1.0F, 1.0, (Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, extendedCategoryAxis0, periodAxis0, defaultStatisticalCategoryDataset0, 10, 4603, false, (CategoryItemRendererState) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4603, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      double[][] doubleArray0 = new double[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis3D0);
      
      LogAxis logAxis0 = new LogAxis();
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(logAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, levelRenderer0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(categoryPlot0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertNotNull(defaultCategoryItemRenderer0);
      
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(chartPanel0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertEquals(1, doubleArray0.length);
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(1, doubleArray0.length);
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(categoryItemRendererState0);
      
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.hitTest(2.0F, (-3091.685078923855), (Graphics2D) null, (Rectangle2D) null, categoryPlot0, categoryAxis3D0, logAxis0, defaultIntervalCategoryDataset0, (-396), 2, false, categoryItemRendererState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      // Undeclared exception!
      try { 
        levelRenderer0.getRangeAxis((CategoryPlot) null, 2811);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      Week week0 = new Week();
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Number[][] numberArray0 = new Number[6][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(6, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Rectangle rectangle0 = new Rectangle(1, (byte)0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      // Undeclared exception!
      try { 
        lineRenderer3D0.getItemMiddle(week0, week0, defaultIntervalCategoryDataset0, (CategoryAxis) null, rectangle0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(ganttRenderer0);
      
      double[][] doubleArray0 = new double[6][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        ganttRenderer0.getDomainAxis((CategoryPlot) null, defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("-w^}Ak");
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("-w^}Ak", periodAxis0.getLabel());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("-w^}Ak", periodAxis0.getLabel());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      // Undeclared exception!
      try { 
        ganttRenderer0.getDomainAxis(combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Comparable<ChronoLocalDate>[] comparableArray0 = (Comparable<ChronoLocalDate>[]) Array.newInstance(Comparable.class, 7);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(7, comparableArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      // Undeclared exception!
      try { 
        lineRenderer3D0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[9];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        levelRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 17, 17);
      assertEquals(17, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(17, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        ganttRenderer0.findRangeBounds(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(lineAndShapeRenderer0.getBaseLinesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertNotNull(lineAndShapeRenderer0);
      
      Number[][] numberArray0 = new Number[6][1];
      Number[] numberArray1 = new Number[2];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(6, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null'transfo=mer' argument.");
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals("Null'transfo=mer' argument.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(logarithmicAxis0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0E-100, 1.0);
      assertEquals(1.0E-100, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      // Undeclared exception!
      try { 
        levelRenderer0.drawRangeMarker((Graphics2D) null, (CategoryPlot) null, logarithmicAxis0, intervalMarker0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1);
      assertEquals(1L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("", quarter0, fixedMillisecond0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals("", periodAxis0.getLabel());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(periodAxis0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(intervalMarker0);
      
      // Undeclared exception!
      try { 
        levelRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, periodAxis0, intervalMarker0, rectangle2D_Float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.39240928132E12) <= upper (1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertNotNull(rectangle0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) levelRenderer0.ZERO, 0);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(spiderWebPlot0);
      
      Color color0 = (Color)spiderWebPlot0.getAxisLinePaint();
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(color0);
      
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, cyclicNumberAxis0, rectangle0, 0.0, color0, levelRenderer0.DEFAULT_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      JFreeChart jFreeChart0 = new JFreeChart("o ", combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(bufferedImage0);
      
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(bufferedImageRenderingSource0);
      
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(graphics2D0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("o ");
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("o ", numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(numberAxis3D0);
      
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawRangeLine(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, rectangle2D_Double0, 0.05, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(1, levelRenderer0.getPassCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      Week week0 = new Week();
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.renderer.category.GroupedStackedBarRenderer", week0, week0);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals("org.jfree.chart.renderer.category.GroupedStackedBarRenderer", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(periodAxis0);
      
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, periodAxis0, rectangle2D_Double0, 1.0F, levelRenderer0.DEFAULT_VALUE_LABEL_PAINT, levelRenderer0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.39240928132E12) <= upper (1.392409281319E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertNotNull(combinedDomainCategoryPlot0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertNotNull(defaultCategoryItemRenderer0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(").qA6s.b<");
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(").qA6s.b<", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(extendedCategoryAxis0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawDomainMarker((Graphics2D) null, combinedDomainCategoryPlot0, extendedCategoryAxis0, categoryMarker0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(defaultCategoryItemRenderer0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("B6mKJ<K0YQ[B6Ky");
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("B6mKJ<K0YQ[B6Ky", extendedCategoryAxis0.getLabel());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(extendedCategoryAxis0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, extendedCategoryAxis0, (ValueAxis) null, defaultCategoryItemRenderer0);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("B6mKJ<K0YQ[B6Ky", extendedCategoryAxis0.getLabel());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(categoryPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null, categoryPlot0.DEFAULT_CROSSHAIR_PAINT, extendedCategoryAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("B6mKJ<K0YQ[B6Ky", extendedCategoryAxis0.getLabel());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(categoryMarker0);
      
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, extendedCategoryAxis0, categoryMarker0, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainCategoryPlot0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      Rectangle rectangle0 = new Rectangle(900, 0, 10, 10);
      assertEquals(900.0, rectangle0.getX(), 0.01);
      assertEquals(10.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(5.0, rectangle0.getCenterY(), 0.01);
      assertEquals(905.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(900.0, rectangle0.getMinX(), 0.01);
      assertEquals(910.0, rectangle0.getMaxX(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals(10, rectangle0.height);
      assertEquals(10, rectangle0.width);
      assertEquals(900, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawBackground((Graphics2D) null, combinedDomainCategoryPlot0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 0.0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01);
      assertNotNull(ellipse2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ellipse2D_Double0.getBounds2D();
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.drawAnnotations((Graphics2D) null, rectangle2D_Double0, categoryAxis0, cyclicNumberAxis0, (Layer) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(numberAxis3D0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(categoryAxis3D0);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 10);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(10.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 0, 0);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.createHotSpotBounds((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, categoryAxis3D0, numberAxis3D0, slidingCategoryDataset0, 1071, 1, false, (CategoryItemRendererState) null, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(ganttRenderer0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(categoryAxis3D0);
      
      LogAxis logAxis0 = new LogAxis();
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(logAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, ganttRenderer0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(categoryPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(500, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(bufferedImage0);
      
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State((PlotRenderingInfo) null);
      assertEquals((-1), categoryStepRenderer_State0.getVisibleSeriesCount());
      assertEquals(0.0, categoryStepRenderer_State0.getBarWidth(), 0.01);
      assertEquals(0.0, categoryStepRenderer_State0.getSeriesRunningTotal(), 0.01);
      assertNotNull(categoryStepRenderer_State0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(500, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(graphics2D0);
      
      Rectangle rectangle0 = new Rectangle(10, 15);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(5.0, rectangle0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle0.getMaxX(), 0.01);
      assertEquals(15.0, rectangle0.getMaxY(), 0.01);
      assertEquals(15.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals(7.5, rectangle0.getCenterY(), 0.01);
      assertEquals(10, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(15, rectangle0.height);
      assertNotNull(rectangle0);
      
      // Undeclared exception!
      try { 
        levelRenderer0.createHotSpotBounds(graphics2D0, rectangle0, categoryPlot0, categoryAxis3D0, logAxis0, defaultIntervalCategoryDataset0, 500, (-390), false, categoryStepRenderer_State0, rectangle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(").qA6s.b<");
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(").qA6s.b<", extendedCategoryAxis0.getLabel());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(extendedCategoryAxis0);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2.0, 2747.4627075192);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2747.4627075192, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      assertEquals("CONTRACT", lengthAdjustmentType0.toString());
      assertNotNull(lengthAdjustmentType0);
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, extendedCategoryAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertTrue(fastScatterPlot0.isNotify());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(fastScatterPlot0);
      
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertTrue(fastScatterPlot0.isNotify());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(plotOrientation0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) statisticalBarRenderer0.ZERO, 0.0, 10, 10);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(10.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(5.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(5.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(10.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals("", numberAxis3D0.getLabel());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      assertEquals("NO_CHANGE", lengthAdjustmentType0.toString());
      assertNotNull(lengthAdjustmentType0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      // Undeclared exception!
      try { 
        lineRenderer3D0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, (Rectangle2D) null, numberAxis3D0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertNotNull(boxAndWhiskerRenderer0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(waterfallBarRenderer0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity((EntityCollection) null, waterfallBarRenderer0.DEFAULT_SHAPE, (CategoryDataset) null, 270, 243, true, (-908.227134369133), (double) boxAndWhiskerRenderer0.ZERO);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertNotNull(categoryItemRendererState0);
      
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0, entityCollection0.getEntityCount());
      assertNotNull(entityCollection0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity(entityCollection0, stackedBarRenderer3D0.DEFAULT_SHAPE, defaultCategoryDataset0, 3, 48, false, (-1921.055890462), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity(standardEntityCollection0, ganttRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 1235, 1235, true, 1233.1492659, 3.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      String[] stringArray0 = new String[1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(1, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.addEntity(standardEntityCollection0, statisticalBarRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 0, 69, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertNotNull(combinedDomainCategoryPlot0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.addEntity(standardEntityCollection0, combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_BOX, defaultStatisticalCategoryDataset0, 3, 500, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.addEntity(standardEntityCollection0, combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_BOX, defaultStatisticalCategoryDataset0, (-3), 500, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertNotNull(boxAndWhiskerRenderer0);
      
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(true, 0.0, 1.0F, 974.7029543, statisticalLineAndShapeRenderer0.DEFAULT_OUTLINE_PAINT, statisticalLineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(974.7029543, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertNotNull(categoryLineAnnotation0);
      
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("KS;GaM_\"Cq9MZ\"u");
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals("KS;GaM_\"Cq9MZ\"u", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(extendedCategoryAxis0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainCategoryPlot0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      DateAxis dateAxis0 = new DateAxis("KS;GaM_\"Cq9MZ\"u", zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals("KS;GaM_\"Cq9MZ\"u", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(dateAxis0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryStepRenderer_State0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryStepRenderer_State0.getBarWidth(), 0.01);
      assertEquals((-1), categoryStepRenderer_State0.getVisibleSeriesCount());
      assertNotNull(categoryStepRenderer_State0);
      
      // Undeclared exception!
      try { 
        levelRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, extendedCategoryAxis0, dateAxis0, defaultStatisticalCategoryDataset0, 50, 10, true, categoryStepRenderer_State0, (Rectangle2D) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertNotNull(boxAndWhiskerRenderer0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      assertNotNull(standardCategoryURLGenerator0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      levelRenderer0.setSeriesURLGenerator(1402, (CategoryURLGenerator) standardCategoryURLGenerator0, true);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertNotNull(boxAndWhiskerRenderer0);
      
      JSpinner jSpinner0 = new JSpinner();
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertNotNull(jSpinner0);
      
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, ".Ap2`{y");
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_NumberEditor0.isFocusCycleRoot());
      assertFalse(jSpinner_NumberEditor0.getIgnoreRepaint());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertTrue(jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertNotNull(jSpinner_NumberEditor0);
      
      DecimalFormat decimalFormat0 = jSpinner_NumberEditor0.getFormat();
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_NumberEditor0.isFocusCycleRoot());
      assertFalse(jSpinner_NumberEditor0.getIgnoreRepaint());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertTrue(jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("#.Ap2`{y", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("Ap2`{y", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#.Ap2`{y", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("Ap2`{y", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotNull(decimalFormat0);
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("", decimalFormat0);
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_NumberEditor0.isFocusCycleRoot());
      assertFalse(jSpinner_NumberEditor0.getIgnoreRepaint());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertTrue(jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("#.Ap2`{y", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("Ap2`{y", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#.Ap2`{y", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("Ap2`{y", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", standardCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(standardCategoryToolTipGenerator0);
      
      boxAndWhiskerRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_NumberEditor0.isFocusCycleRoot());
      assertFalse(jSpinner_NumberEditor0.getIgnoreRepaint());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertTrue(jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("#.Ap2`{y", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("Ap2`{y", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#.Ap2`{y", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("Ap2`{y", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", standardCategoryToolTipGenerator0.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNotNull(categoryStepRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = categoryStepRenderer0.getToolTipGenerator((-2369), 1594, true);
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(1, levelRenderer0.getPassCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      levelRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(1, levelRenderer0.getPassCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      stackedBarRenderer3D0.setSeriesItemLabelGenerator(3, (CategoryItemLabelGenerator) null, true);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertNotNull(scatterRenderer0);
      
      // Undeclared exception!
      try { 
        scatterRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1.0F, 0.0);
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      CategoryPlot categoryPlot0 = stackedBarRenderer3D0.getPlot();
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertEquals(1.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertFalse(stackedBarRenderer3D0.getRenderAsPercentages());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(levelRenderer0.DEFAULT_VALUE_LABEL_PAINT, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(waterfallBarRenderer0);
      
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(dateAxis0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Norbert Kiesel");
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals("Norbert Kiesel", categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(categoryAxis3D0);
      
      Number[][] numberArray0 = new Number[7][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(7, numberArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 10, 11);
      assertEquals(7, numberArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(11, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.createState(plotRenderingInfo0);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(categoryItemRendererState0);
      
      boolean boolean0 = waterfallBarRenderer0.hitTest(0.05, (-1.0), (Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, categoryAxis3D0, dateAxis0, slidingCategoryDataset0, 10, 0, true, categoryItemRendererState0);
      assertFalse(boolean0);
      assertEquals(7, numberArray0.length);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals("Norbert Kiesel", categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(11, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(defaultCategoryItemRenderer0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      assertTrue(extendedCategoryAxis0.isVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(extendedCategoryAxis0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertTrue(periodAxis0.isVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(periodAxis0);
      
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.hitTest(1.0F, 1.0, (Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, extendedCategoryAxis0, periodAxis0, defaultStatisticalCategoryDataset0, 10, (-242), false, (CategoryItemRendererState) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(ganttRenderer0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis3D0);
      
      LogAxis logAxis0 = new LogAxis();
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(logAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, ganttRenderer0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(categoryPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(bufferedImage0);
      
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State((PlotRenderingInfo) null);
      assertEquals((-1), categoryStepRenderer_State0.getVisibleSeriesCount());
      assertEquals(0.0, categoryStepRenderer_State0.getBarWidth(), 0.01);
      assertEquals(0.0, categoryStepRenderer_State0.getSeriesRunningTotal(), 0.01);
      assertNotNull(categoryStepRenderer_State0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01);
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(graphics2D0);
      
      Rectangle rectangle0 = new Rectangle((-1325), (-1));
      assertEquals((-662.5), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1.0), rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-1325.0), rectangle0.getMaxX(), 0.01);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals((-1325.0), rectangle0.getWidth(), 0.01);
      assertEquals((-1.0), rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-1), rectangle0.height);
      assertEquals((-1325), rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      // Undeclared exception!
      try { 
        levelRenderer0.createHotSpotBounds(graphics2D0, rectangle0, categoryPlot0, categoryAxis3D0, logAxis0, defaultIntervalCategoryDataset0, (-1630), 0, false, categoryStepRenderer_State0, rectangle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultBoxAndWhiskerCategoryDataset0, 500, 2789, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      double[][] doubleArray0 = new double[16][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(16, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      statisticalBarRenderer0.addEntity(standardEntityCollection0, levelRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 1, 1, false);
      assertEquals(16, doubleArray0.length);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      LegendItemCollection legendItemCollection0 = levelRenderer0.getLegendItems();
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainCategoryPlot0);
      
      ValueAxis valueAxis0 = levelRenderer0.getRangeAxis(combinedDomainCategoryPlot0, 216);
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0, levelRenderer0.getRowCount());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertNotNull(boxAndWhiskerRenderer0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)boxAndWhiskerRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(numberAxis0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(ganttRenderer0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(categorySeriesLabelGenerator0);
      
      ganttRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      GanttRenderer ganttRenderer1 = (GanttRenderer)ganttRenderer0.clone();
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(4.0, ganttRenderer1.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer1.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer1.getColumnCount());
      assertTrue(ganttRenderer1.getBaseCreateEntities());
      assertEquals(0.65, ganttRenderer1.getEndPercent(), 0.01);
      assertTrue(ganttRenderer1.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer1.getBase(), 0.01);
      assertFalse(ganttRenderer1.isDrawBarOutline());
      assertFalse(ganttRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.35, ganttRenderer1.getStartPercent(), 0.01);
      assertEquals(2.0, ganttRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, ganttRenderer1.getPassCount());
      assertTrue(ganttRenderer1.getShadowsVisible());
      assertTrue(ganttRenderer1.getDefaultShadowsVisible());
      assertTrue(ganttRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer1.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer1.getShadowYOffset(), 0.01);
      assertEquals(3, ganttRenderer1.getDefaultEntityRadius());
      assertTrue(ganttRenderer1.getBaseSeriesVisible());
      assertFalse(ganttRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer1.getBaseItemLabelsVisible());
      assertEquals(1.0, ganttRenderer1.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer1.getRowCount());
      assertFalse(ganttRenderer1.getIncludeBaseInRange());
      assertTrue(ganttRenderer1.equals((Object)ganttRenderer0));
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotSame(ganttRenderer0, ganttRenderer1);
      assertNotSame(ganttRenderer1, ganttRenderer0);
      assertNotNull(ganttRenderer1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      assertNotNull(standardCategoryURLGenerator0);
      
      levelRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      try { 
        levelRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      assertNotNull(customCategoryURLGenerator0);
      
      levelRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, true);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      LevelRenderer levelRenderer1 = (LevelRenderer)levelRenderer0.clone();
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, levelRenderer1.getItemMargin(), 0.01);
      assertTrue(levelRenderer1.getBaseCreateEntities());
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(levelRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(levelRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0, levelRenderer1.getRowCount());
      assertTrue(levelRenderer1.getBaseSeriesVisible());
      assertEquals(1, levelRenderer1.getPassCount());
      assertEquals(0, levelRenderer1.getColumnCount());
      assertEquals(3, levelRenderer1.getDefaultEntityRadius());
      assertTrue(levelRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(levelRenderer1.getBaseItemLabelsVisible());
      assertFalse(levelRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer1.getBaseSeriesVisibleInLegend());
      assertTrue(levelRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, levelRenderer1.getMaximumItemWidth(), 0.01);
      assertFalse(levelRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, levelRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(levelRenderer1.equals((Object)levelRenderer0));
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotSame(levelRenderer0, levelRenderer1);
      assertNotSame(levelRenderer1, levelRenderer0);
      assertNotNull(levelRenderer1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryItemLabelGenerator0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      ganttRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      
      GanttRenderer ganttRenderer1 = (GanttRenderer)ganttRenderer0.clone();
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertFalse(ganttRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, ganttRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.35, ganttRenderer1.getStartPercent(), 0.01);
      assertEquals(1.0, ganttRenderer1.getMaximumBarWidth(), 0.01);
      assertFalse(ganttRenderer1.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer1.getBase(), 0.01);
      assertTrue(ganttRenderer1.getBaseCreateEntities());
      assertEquals(3, ganttRenderer1.getDefaultEntityRadius());
      assertTrue(ganttRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer1.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer1.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(ganttRenderer1.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer1.getRowCount());
      assertTrue(ganttRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer1.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer1.getIncludeBaseInRange());
      assertFalse(ganttRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(1, ganttRenderer1.getPassCount());
      assertEquals(4.0, ganttRenderer1.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0.65, ganttRenderer1.getEndPercent(), 0.01);
      assertEquals(0, ganttRenderer1.getColumnCount());
      assertTrue(ganttRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, ganttRenderer1.getItemMargin(), 0.01);
      assertTrue(ganttRenderer1.getShadowsVisible());
      assertTrue(ganttRenderer1.getDefaultShadowsVisible());
      assertTrue(ganttRenderer1.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer1.equals((Object)ganttRenderer0));
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotSame(ganttRenderer0, ganttRenderer1);
      assertNotSame(ganttRenderer1, ganttRenderer0);
      assertNotNull(ganttRenderer1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(levelRenderer0);
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      levelRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultBoxAndWhiskerCategoryDataset0, 500, 10, true, 1.0F, 1.0E-8, true);
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertTrue(levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(levelRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
      assertTrue(levelRenderer0.getBaseSeriesVisible());
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(levelRenderer0.getBaseCreateEntities());
      assertFalse(levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertEquals(0.2, LevelRenderer.DEFAULT_ITEM_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double[][] doubleArray0 = new double[16][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, levelRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      categoryPlot0.setRangeCrosshairLockedOnData(false);
      // Undeclared exception!
      jFreeChart0.createBufferedImage(1773, 1773);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.updateCrosshairValues((CategoryCrosshairState) null, statisticalBarRenderer0.ZERO, statisticalBarRenderer0.ZERO, (double) statisticalBarRenderer0.ZERO, 1, (-9.0), (double) boxAndWhiskerRenderer0.ZERO, plotOrientation0);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        lineRenderer3D0.updateCrosshairValues(categoryCrosshairState0, 0.2, stackedBarRenderer3D0.ZERO, (-2555.79651), 1861, (-525.900957099), 0.0, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DrawingSupplier drawingSupplier0 = boxAndWhiskerRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      GanttRenderer ganttRenderer1 = new GanttRenderer();
      assertTrue(ganttRenderer1.equals((Object)ganttRenderer0));
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      ganttRenderer1.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      boolean boolean0 = ganttRenderer0.equals(ganttRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      GanttRenderer ganttRenderer1 = (GanttRenderer)ganttRenderer0.clone();
      assertTrue(ganttRenderer1.equals((Object)ganttRenderer0));
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      ganttRenderer1.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      boolean boolean0 = ganttRenderer1.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Object object0 = ganttRenderer0.clone();
      boolean boolean0 = object0.equals(ganttRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LegendItem legendItem0 = levelRenderer0.getLegendItem((-1015), (-1015));
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double[][] doubleArray0 = new double[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, levelRenderer0);
      // Undeclared exception!
      try { 
        levelRenderer0.getLegendItem(240, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, (Rectangle2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(940, (-1381), (-1381), 940);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.05, (-701.3861331984));
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedBarRenderer3D0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle0, categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 15, 3, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp((RenderingHints) null);
      Point point0 = new Point();
      WritableRaster writableRaster0 = Raster.createInterleavedRaster(0, 10, 50, 15, point0);
      Rectangle2D rectangle2D0 = colorConvertOp0.getBounds2D((Raster) writableRaster0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      // Undeclared exception!
      try { 
        lineRenderer3D0.calculateDomainMarkerTextAnchorPoint(graphics2D0, (PlotOrientation) null, rectangle2D0, rectangle2D0, categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Rectangle rectangle0 = new Rectangle(3, 5091, 3, 3);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("'z)iE}|L^");
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Point2D.Double point2D_Double0 = (Point2D.Double)levelRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, rectangle0, subCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-775.3331141106846), 1.0, 1.0F, 10);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      Point2D.Double point2D_Double0 = (Point2D.Double)lineRenderer3D0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, rectangle2D_Double0, combinedRangeCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(7.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Unklnown layer.");
      IntervalMarker intervalMarker0 = new IntervalMarker(0.2, 0.2);
      intervalMarker0.setLabel("Unknown layer.");
      levelRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, logarithmicAxis0, intervalMarker0, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(17, 3, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("6`+Q_");
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 297.859722);
      levelRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, logarithmicAxis0, intervalMarker0, rectangle2D_Double0);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(17, 3, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, false, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 867.5, levelRenderer0.DEFAULT_OUTLINE_PAINT);
      statisticalBarRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, cyclicNumberAxis0, intervalMarker0, rectangle0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2.0F, (-2161.92700878666));
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2347.026738777, 2347.026738777, "zB$jf/-");
      IntervalMarker intervalMarker0 = new IntervalMarker(3487.737, 12.0);
      stackedBarRenderer3D0.drawRangeMarker((Graphics2D) null, (CategoryPlot) null, cyclicNumberAxis0, intervalMarker0, rectangle0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      NumberAxis numberAxis0 = new NumberAxis("");
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;
      CategoryMarker categoryMarker0 = new CategoryMarker("COPY", numberAxis0.DEFAULT_AXIS_LINE_PAINT, numberAxis0.DEFAULT_AXIS_LINE_STROKE, color0, statisticalBarRenderer0.DEFAULT_STROKE, 0.3F);
      statisticalBarRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, numberAxis0, categoryMarker0, rectangle0);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueMarker valueMarker0 = new ValueMarker(0.2);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 15, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      valueMarker0.setLabel("*i(@*sN6+7q");
      NumberAxis numberAxis0 = new NumberAxis("*i(@*sN6+7q");
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 500, 10, 10, false, true, true, true, false, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      statisticalBarRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, numberAxis0, valueMarker0, rectangle0);
      assertEquals(0, rectangle0.height);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      ValueMarker valueMarker0 = new ValueMarker(593.97114);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) levelRenderer0.ZERO, 0);
      statisticalBarRenderer0.drawRangeMarker((Graphics2D) null, (CategoryPlot) null, cyclicNumberAxis0, valueMarker0, rectangle0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueMarker valueMarker0 = new ValueMarker(0.2);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 8, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.5F, 1.0F);
      statisticalBarRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, valueMarker0, rectangle2D_Double0);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle rectangle0 = new Rectangle();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1.0F, 0.0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (double) stackedBarRenderer3D0.ZERO);
      IntervalMarker intervalMarker0 = new IntervalMarker((-1210.6722), 0.2);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 9, (double) 2.0F, (-1360.85242958774), chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      stackedBarRenderer3D0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, cyclicNumberAxis0, intervalMarker0, rectangle0);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CategoryMarker categoryMarker0 = new CategoryMarker("");
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, extendedCategoryAxis0, periodAxis0, defaultCategoryItemRenderer0);
      defaultCategoryItemRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, extendedCategoryAxis0, categoryMarker0, (Rectangle2D) null);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      NumberAxis numberAxis0 = new NumberAxis("");
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;
      statisticalBarRenderer0.drawRangeLine(graphics2D0, combinedDomainCategoryPlot0, numberAxis0, rectangle0, 1024, color0, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[4] = 0.2;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, levelRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      // Undeclared exception!
      jFreeChart0.createBufferedImage(500, 1763);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedRangeCategoryPlot0.setOrientation(plotOrientation0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(10, 10, 1.0F, 10);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D_Float0, 1.0F, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 15, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      levelRenderer0.drawDomainLine(graphics2D0, combinedRangeCategoryPlot0, rectangle2D_Double0, 1.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      // Undeclared exception!
      try { 
        levelRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, rectangle2D0, 3.0, (Paint) null, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 8, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.drawDomainLine(graphics2D0, combinedRangeCategoryPlot0, rectangle2D_Double0, 4.0, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis3D0, logAxis0, ganttRenderer0);
      assertNull(categoryPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Range range0 = scatterRenderer0.findRangeBounds((CategoryDataset) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, rectangle0, combinedDomainCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Rectangle rectangle0 = new Rectangle();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = lineRenderer3D0.initialise((Graphics2D) null, rectangle0, categoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Size2D size2D0 = new Size2D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 1890.85, 0.2, rectangleAnchor0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(25.5, 0.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        levelRenderer0.initialise(graphics2D0, rectangle2D0, combinedRangeCategoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      // Undeclared exception!
      try { 
        stackedBarRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      groupedStackedBarRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", 8.0);
      Layer layer0 = Layer.FOREGROUND;
      boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("1BJ/`6?>q_Q;wX)') ", "1BJ/`6?>q_Q;wX)') ", "");
      boxAndWhiskerRenderer0.setSeriesURLGenerator(0, (CategoryURLGenerator) standardCategoryURLGenerator0, false);
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, "");
      DecimalFormat decimalFormat0 = jSpinner_NumberEditor0.getFormat();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("wjt0", decimalFormat0);
      boxAndWhiskerRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      stackedBarRenderer3D0.setSeriesToolTipGenerator(10, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null, false);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
      assertTrue(levelRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      stackedBarRenderer3D0.setSeriesItemLabelGenerator(1896, (CategoryItemLabelGenerator) null, false);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      levelRenderer0.setSeriesItemLabelGenerator(500, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      // Undeclared exception!
      try { 
        levelRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultBoxAndWhiskerCategoryDataset0, 500, 10, true, 1.0F, 1.0E-8, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, 10);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.initialise((Graphics2D) null, rectangle2D0, (CategoryPlot) null, slidingGanttCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer3D0.getSeriesURLGenerator(1);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = boxAndWhiskerRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 15, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      NumberAxis numberAxis0 = new NumberAxis("");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        levelRenderer0.createHotSpotShape(graphics2D0, rectangle2D_Double0, combinedRangeCategoryPlot0, extendedCategoryAxis0, numberAxis0, defaultKeyedValues2DDataset0, 10, 500, true, categoryItemRendererState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      GanttRenderer ganttRenderer1 = new GanttRenderer();
      boolean boolean0 = ganttRenderer1.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      int int0 = intervalBarRenderer0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.setSeriesToolTipGenerator((-1479), (CategoryToolTipGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = intervalBarRenderer0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      stackedBarRenderer3D0.removeAnnotations();
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawOutline((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      layeredBarRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Np8o");
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.getItemMiddle(0.2, 12.0, defaultMultiValueCategoryDataset0, extendedCategoryAxis0, rectangle0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      ganttRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      GanttRenderer ganttRenderer1 = (GanttRenderer)ganttRenderer0.clone();
      assertEquals(0.35, ganttRenderer1.getStartPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = boxAndWhiskerRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }
}
