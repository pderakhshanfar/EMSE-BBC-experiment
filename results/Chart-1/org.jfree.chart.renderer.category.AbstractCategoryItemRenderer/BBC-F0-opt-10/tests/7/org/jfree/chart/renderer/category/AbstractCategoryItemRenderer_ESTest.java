/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 14:27:44 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JSpinner;
import javax.swing.JViewport;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultKeyedValues2DDataset0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity((EntityCollection) null, spiderWebPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, defaultKeyedValues2DDataset0, 255, 10, false, (-1722.3822870609972), 0.25);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 255, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      statisticalLineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity((EntityCollection) null, scatterRenderer0.DEFAULT_SHAPE, defaultKeyedValues2DDataset0, 45, 30, false, 30, 45);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(51.8067309, (-2156.83), true);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      stackedBarRenderer3D0.setSeriesItemLabelGenerator(10, categoryItemLabelGenerator0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.drawItemLabel((Graphics2D) null, plotOrientation0, slidingGanttCategoryDataset0, 10, 7, true, 1779.6, 12.0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, "k].P");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, cyclicNumberAxis0, statisticalLineAndShapeRenderer0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setPlot(categoryPlot0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getLegendItem(500, 33);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true, true, false, true, false);
      Rectangle rectangle0 = chartPanel0.getBounds();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle1 = jViewport0.getViewRect();
      Point2D.Double point2D_Double0 = (Point2D.Double)lineRenderer3D0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, rectangle1, numberAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals((-2.0), point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      PlotOrientation plotOrientation0 = combinedRangeCategoryPlot0.getOrientation();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedAreaRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, rectangle2D0, piePlot0.DEFAULT_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_AXIS_LABEL_INSETS;
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, (Rectangle2D) null, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2, "k].P");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, cyclicNumberAxis0, minMaxCategoryRenderer0);
      minMaxCategoryRenderer0.setPlot(categoryPlot0);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      ArrayList<Format.Field> arrayList0 = new ArrayList<Format.Field>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(arrayList0, 12.0, 12.0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, lineRenderer3D0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, 0, 0, false, 2.0, 0.0);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(26, 2648, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      float[] floatArray0 = new float[9];
      AffineTransform affineTransform0 = new AffineTransform(floatArray0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      Rectangle2D rectangle2D0 = scatterRenderer0.DEFAULT_VALUE_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      Rectangle2D rectangle2D1 = combinedDomainCategoryPlot0.DEFAULT_INSETS.createInsetRectangle(rectangle2D0);
      scatterRenderer0.drawOutline(graphics2D0, combinedDomainCategoryPlot0, rectangle2D1);
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedDomainCategoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(18, 1, 1, (ChartRenderingInfo) null);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      scatterRenderer0.drawBackground(graphics2D0, combinedDomainCategoryPlot0, defaultCaret0);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Vector<IntervalCategoryItemLabelGenerator> vector0 = new Vector<IntervalCategoryItemLabelGenerator>();
      defaultMultiValueCategoryDataset0.add(vector0, 0, 0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, defaultCaret0, defaultMultiValueCategoryDataset0, 0, 0, true);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      statisticalLineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)statisticalLineAndShapeRenderer0.getToolTipGenerator(3090, 3090, true);
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      ArrayList<Format.Field> arrayList0 = new ArrayList<Format.Field>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(arrayList0, 12.0, 12.0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      lineRenderer3D0.initialise((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, defaultMultiValueCategoryDataset0, (PlotRenderingInfo) null);
      int int0 = lineRenderer3D0.getRowCount();
      assertEquals(1, lineRenderer3D0.getColumnCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      ValueAxis valueAxis0 = stackedBarRenderer3D0.getRangeAxis(combinedDomainCategoryPlot0, 10);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.4028234663852886E38, 3.4028234663852886E38);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      cyclicNumberAxis0.setVerticalTickLabels(true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis3D0, cyclicNumberAxis0, statisticalLineAndShapeRenderer0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0F, 1.0E-8, false);
      ValueAxis valueAxis0 = stackedBarRenderer3D0.getRangeAxis(categoryPlot0, 4061);
      assertEquals(0.0, valueAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      LogAxis logAxis0 = new LogAxis(").");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      ValueAxis valueAxis0 = statisticalLineAndShapeRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 500);
      assertEquals(0.0, valueAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryPlot categoryPlot0 = lineAndShapeRenderer0.getPlot();
      assertNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, (-153), 49, 15, 9, 1874, true, true, true, true, true, true, false);
      Rectangle rectangle0 = chartPanel0.getBounds();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      lineRenderer3D0.initialise((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, defaultMultiValueCategoryDataset0, (PlotRenderingInfo) null);
      CategoryPlot categoryPlot0 = lineRenderer3D0.getPlot();
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis categoryAxis0 = stackedBarRenderer3D0.getDomainAxis(categoryPlot0, (CategoryDataset) null);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis3D0, dateAxis0, statisticalLineAndShapeRenderer0);
      CategoryAxis categoryAxis0 = statisticalLineAndShapeRenderer0.getDomainAxis(categoryPlot0, defaultCategoryDataset0);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      ArrayList<Format.Field> arrayList0 = new ArrayList<Format.Field>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(arrayList0, 12.0, 12.0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      lineRenderer3D0.initialise((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, defaultMultiValueCategoryDataset0, (PlotRenderingInfo) null);
      int int0 = lineRenderer3D0.getColumnCount();
      assertEquals(1, lineRenderer3D0.getRowCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      statisticalLineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalLineAndShapeRenderer0.getBaseToolTipGenerator();
      assertSame(categoryToolTipGenerator0, boxAndWhiskerToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)statisticalLineAndShapeRenderer0.getBaseItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) null, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-444);
      doubleArray1[1] = (double) (-444);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 0.2;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0.2, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[7] = 4157.701220020595;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(4157.701220020595, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[3] = (-2847.3878223363);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals((-1423.69391116815), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[][] doubleArray0 = new double[21][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Range range0 = levelRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      Range range0 = stackedAreaRenderer0.findRangeBounds(slidingGanttCategoryDataset0);
      assertEquals(1.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = statisticalBarRenderer0.createState(plotRenderingInfo0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesURLGenerator((-657), (CategoryURLGenerator) standardCategoryURLGenerator0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.setSeriesURLGenerator((-20), (CategoryURLGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator((-1), (CategoryToolTipGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesItemLabelGenerator((-395), (CategoryItemLabelGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("", numberFormat0);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.setSeriesItemLabelGenerator((-813), (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, numberAxis3D0, lineRenderer3D0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 500, 500, (-416), 10, false, true, false, true, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, categoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.hitTest((-775.383777), (-1016.508497), (Graphics2D) null, (Rectangle2D) null, categoryPlot0, categoryAxis0, numberAxis3D0, (CategoryDataset) null, 0, 500, true, categoryItemRendererState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Fj4{>{$e{T7.lz");
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.KOREA;
      DateAxis dateAxis0 = new DateAxis("Fj4{>{$e{T7.lz", zoneInfo0, locale0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        scatterRenderer0.hitTest((-326.7909658078082), 4.0, (Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, categoryAxis3D0, dateAxis0, defaultStatisticalCategoryDataset0, 10, 182, false, (CategoryItemRendererState) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 182, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Locale locale0 = Locale.KOREA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2951), "\"0v?]jun%1:Gl");
      DateAxis dateAxis0 = new DateAxis("\"0v?]jun%1:Gl", simpleTimeZone0, locale0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      // Undeclared exception!
      try { 
        scatterRenderer0.hitTest((-2154.230323240319), 2.0, (Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, extendedCategoryAxis0, dateAxis0, defaultStatisticalCategoryDataset0, 182, (-2951), false, (CategoryItemRendererState) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-2074.96541), (double) defaultCategoryItemRenderer0.ZERO);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.getRangeAxis((CategoryPlot) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis(")qae!oVoyFXr8a34l8");
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.getItemMiddle((Comparable) null, (Comparable) null, (CategoryDataset) null, categoryAxis0, rectangle0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.getDomainAxis((CategoryPlot) null, (CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        ganttRenderer0.getDomainAxis(combinedRangeCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Comparable<ScatterRenderer>[] comparableArray0 = (Comparable<ScatterRenderer>[]) Array.newInstance(Comparable.class, 2);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[5];
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      String[] stringArray0 = new String[9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      Number[][] numberArray0 = new Number[8][1];
      Number[] numberArray1 = new Number[3];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, true, false);
      Rectangle rectangle0 = chartPanel0.getBounds();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(200, "a<i#w{M@qqzT}<`");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      Stroke stroke0 = combinedRangeCategoryPlot0.getOutlineStroke();
      // Undeclared exception!
      try { 
        lineRenderer3D0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, cyclicNumberAxis0, rectangle0, 0.0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, stroke0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("*< /]RT$U_Ow");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis3D0, cyclicNumberAxis0, statisticalLineAndShapeRenderer0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainLine((Graphics2D) null, categoryPlot0, defaultCaret0, 0, lineRenderer3D0.DEFAULT_WALL_PAINT, categoryAxis3D0.DEFAULT_AXIS_LINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true, true, false, false, false);
      Rectangle rectangle0 = chartPanel0.getBounds();
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("ZOOM_RESET_DOMAIN");
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.drawAnnotations((Graphics2D) null, rectangle0, categoryAxis3D0, numberAxis3D0, (Layer) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("!qQ6D}kYVhTa\"y0a");
      Number[][] numberArray0 = new Number[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DateAxis dateAxis0 = new DateAxis("!qQ6D}kYVhTa\"y0a");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, dateAxis0, lineRenderer3D0);
      CategoryItemRendererState categoryItemRendererState0 = lineRenderer3D0.initialise((Graphics2D) null, defaultCaret0, categoryPlot0, defaultIntervalCategoryDataset0, (PlotRenderingInfo) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(500, (double) lineRenderer3D0.ZERO, 10, 0.05);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Base item URL generator not cloneable.");
      // Undeclared exception!
      try { 
        lineRenderer3D0.createHotSpotBounds((Graphics2D) null, rectangle2D_Double0, (CategoryPlot) null, categoryAxis3D0, dateAxis0, defaultIntervalCategoryDataset0, 1, 65, true, categoryItemRendererState0, rectangle2D_Double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis(").");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      JFreeChart jFreeChart0 = new JFreeChart(").", lineRenderer3D0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(9, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        lineRenderer3D0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle0, (Rectangle2D) null, logAxis0.DEFAULT_AXIS_LABEL_INSETS, (LengthAdjustmentType) null, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      double[][] doubleArray0 = new double[17][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, statisticalLineAndShapeRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, (byte) (-6), 192, true, 1.2372962737605464, 631.493822226326);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) statisticalLineAndShapeRenderer0.ZERO, (double) statisticalLineAndShapeRenderer0.ZERO);
      Shape shape0 = cyclicNumberAxis0.getRightArrow();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, shape0, (CategoryDataset) null, 5, (-1), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity((EntityCollection) null, categoryStepRenderer0.DEFAULT_SHAPE, defaultCategoryDataset0, (-1875), 395, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("gy>:", 0.0F, 0.0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("6qvg54F]^mNw-x~-:cu");
      Paint paint0 = extendedCategoryAxis0.getSubLabelPaint();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(0.0, 0.0, (-2847.3878223363), (-2847.3878223363), paint0, statisticalLineAndShapeRenderer0.DEFAULT_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      statisticalLineAndShapeRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setSeriesURLGenerator(3118, (CategoryURLGenerator) null, true);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator(25, (CategoryToolTipGenerator) null, true);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis(")qae!oVoyFXr8a34l8");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, boxAndWhiskerRenderer0.DEFAULT_OUTLINE_PAINT, categoryAxis0.DEFAULT_AXIS_LABEL_PAINT, boxAndWhiskerRenderer0.DEFAULT_OUTLINE_PAINT);
      waterfallBarRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null, true);
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getItemLabelGenerator(427, 3, false);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalLineAndShapeRenderer0.getSeriesToolTipGenerator(25);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(592.3512136065681, "EbjT[c+)jYqFM^wZo#");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      CategoryAxis categoryAxis0 = new CategoryAxis("4p!jg#8+;<OPw");
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      // Undeclared exception!
      try { 
        lineRenderer3D0.createHotSpotBounds((Graphics2D) null, rectangle2D_Double0, combinedRangeCategoryPlot0, categoryAxis0, numberAxis0, defaultCategoryDataset0, 6, 1741, false, (CategoryItemRendererState) null, (Rectangle2D) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1741, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1866.414331348));
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(" ]g;iwcF~=Yn");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.createHotSpotBounds((Graphics2D) null, rectangle2D0, combinedDomainCategoryPlot0, subCategoryAxis0, cyclicNumberAxis0, (CategoryDataset) null, 34, 1066, true, categoryStepRenderer_State0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultKeyedValues2DDataset0);
      Shape shape0 = spiderWebPlot0.getLegendItemShape();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity((EntityCollection) null, shape0, defaultKeyedValues2DDataset0, (-1332), (-1332), false, (-1462.84), 0.1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultStatisticalCategoryDataset0, 3, 27, false, 0.12, 1.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultKeyedValues2DDataset0, 2009, 2009, true, 2.0, (-4801.101338));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Number[][] numberArray0 = new Number[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultIntervalCategoryDataset0, 25, (-2883), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, statisticalLineAndShapeRenderer0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, 152, 152, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 152, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(".fY");
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, subCategoryAxis0, (ValueAxis) null, statisticalLineAndShapeRenderer0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.getLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      LegendItemCollection legendItemCollection0 = boxAndWhiskerRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 9, (-577));
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2449), (-992.4));
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingGanttCategoryDataset0, (CategoryAxis) null, cyclicNumberAxis0, ganttRenderer0);
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)ganttRenderer0.getRangeAxis(categoryPlot0, (-2449));
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(200, "a<i#w{M@qqzT}<`");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)stackedBarRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, Double.NEGATIVE_INFINITY);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      stackedBarRenderer3D0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      StackedBarRenderer3D stackedBarRenderer3D1 = (StackedBarRenderer3D)stackedBarRenderer3D0.clone();
      assertEquals(0.0, stackedBarRenderer3D1.getXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("pKE7t9xN#*xl_zjiZA", "pKE7t9xN#*xl_zjiZA", "Null 'annotation' argument.");
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
      try { 
        statisticalLineAndShapeRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, true);
      Object object0 = statisticalLineAndShapeRenderer0.clone();
      assertNotSame(statisticalLineAndShapeRenderer0, object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      statisticalLineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, true);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertTrue(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertTrue(statisticalLineAndShapeRenderer1.getBaseLinesVisible());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      LogAxis logAxis0 = new LogAxis();
      Layer layer0 = Layer.FOREGROUND;
      lineRenderer3D0.drawAnnotations((Graphics2D) null, (Rectangle2D) null, (CategoryAxis) null, logAxis0, layer0, plotRenderingInfo0);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Benoit Xhenseval");
      Layer layer0 = Layer.BACKGROUND;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("java.util.TimeZone");
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Point point0 = new Point(1623, 500);
      Rectangle rectangle0 = new Rectangle(point0);
      lineRenderer3D0.drawAnnotations((Graphics2D) null, rectangle0, extendedCategoryAxis0, logarithmicAxis0, layer0, plotRenderingInfo0);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Base tool tip generator not cloneable.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 768, 10);
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingGanttCategoryDataset0, categoryAxis3D0, numberAxis3D0, statisticalLineAndShapeRenderer0);
      statisticalLineAndShapeRenderer0.updateCrosshairValues(categoryCrosshairState0, true, 300, (-1.0), 94, (-4637.61406141), 0.05, plotOrientation0);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.04, "Unknown layer.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      boxAndWhiskerRenderer0.updateCrosshairValues((CategoryCrosshairState) null, 12.0, 8.0, 0.0, (-2894), 0.0, 1538.4828839, plotOrientation0);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.updateCrosshairValues(categoryCrosshairState0, true, false, 25, 10, 0.0, 0.0, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.updateCrosshairValues(categoryCrosshairState0, true, 300, (-1.0), 94, (-4637.61406141), 0.05, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      DrawingSupplier drawingSupplier0 = statisticalLineAndShapeRenderer0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      DrawingSupplier drawingSupplier0 = areaRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("ZoF8bb*QN3", "ZoF8bb*QN3", 5.0E-7);
      Layer layer0 = Layer.BACKGROUND;
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer1.equals(scatterRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Locale locale0 = Locale.KOREA;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("@^m<w3+!b*b5g<om", numberFormat0);
      scatterRenderer0.setSeriesItemLabelGenerator(33, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer0.equals(scatterRenderer1);
      assertFalse(boolean0);
      assertTrue(scatterRenderer1.equals((Object)scatterRenderer0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      boolean boolean0 = layeredBarRenderer0.equals(statisticalBarRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem(1555, 500);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle0, rectangle0, categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS, (LengthAdjustmentType) null, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      Point2D.Double point2D_Double0 = (Point2D.Double)lineRenderer3D0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, rectangle0, numberAxis0.DEFAULT_AXIS_LABEL_INSETS, (LengthAdjustmentType) null, rectangleAnchor0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      // Undeclared exception!
      try { 
        lineRenderer3D0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, defaultCaret0, defaultCaret0, numberAxis3D0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      PeriodAxis periodAxis0 = new PeriodAxis("vcP$h3m:L");
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      Point2D.Double point2D_Double0 = (Point2D.Double)lineRenderer3D0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, defaultCaret0, defaultCaret0, periodAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      NumberAxis numberAxis0 = new NumberAxis();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = chartPanel0.getBounds();
      IntervalMarker intervalMarker0 = new IntervalMarker(951.8, 0.05, numberAxis0.DEFAULT_AXIS_LINE_PAINT);
      lineRenderer3D0.drawRangeMarker((Graphics2D) null, (CategoryPlot) null, numberAxis0, intervalMarker0, rectangle0);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker((double) scatterRenderer0.ZERO, 2.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart("v=ro.xm!m=", combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(21, 2549, 0.0, (-1303.725231909), chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, numberAxis3D0, intervalMarker0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, (CategoryAxis) null, numberAxis3D0, statisticalLineAndShapeRenderer0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 72, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      String[] stringArray0 = new String[9];
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'plot' argument.", stringArray0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(symbolAxis0);
      ValueMarker valueMarker0 = new ValueMarker((-1784.7), categoryPlot0.DEFAULT_GRIDLINE_PAINT, categoryPlot0.DEFAULT_GRIDLINE_STROKE);
      statisticalLineAndShapeRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, valueMarker0, (Rectangle2D) null);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      SystemColor systemColor0 = SystemColor.text;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2, "[%]p;");
      ValueMarker valueMarker0 = new ValueMarker(0.05, systemColor0, waterfallBarRenderer0.DEFAULT_OUTLINE_STROKE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.2, 2848.2231, 2848.2231, 2848.2231);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.drawRangeMarker((Graphics2D) null, (CategoryPlot) null, cyclicNumberAxis0, valueMarker0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = chartPanel0.getBounds();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      PeriodAxis periodAxis0 = new PeriodAxis("ZOOM_RESET_DOMAIN");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      lineRenderer3D0.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, periodAxis0, (Marker) null, rectangle0);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, lineRenderer3D0.DEFAULT_OUTLINE_STROKE);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("*< /]RT$U_Ow");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis3D0, cyclicNumberAxis0, statisticalLineAndShapeRenderer0);
      statisticalLineAndShapeRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, categoryAxis3D0, categoryMarker0, defaultCaret0);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, lineRenderer3D0.DEFAULT_OUTLINE_STROKE);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.setValue(2733.92264041915, (Comparable) 0.0F, (Comparable) true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("*< ]RT$U_Ow");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis3D0, cyclicNumberAxis0, statisticalLineAndShapeRenderer0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, categoryAxis3D0, categoryMarker0, defaultCaret0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      NumberAxis numberAxis0 = new NumberAxis();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = chartPanel0.getBounds();
      Color color0 = (Color)CategoryPlot.DEFAULT_CROSSHAIR_PAINT;
      lineRenderer3D0.drawRangeLine((Graphics2D) null, (CategoryPlot) null, numberAxis0, rectangle0, 75.0, color0, numberAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (String) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(42, 3, 0.0, 12.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      lineRenderer3D0.drawRangeLine(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, defaultCaret0, 0.0, lineRenderer3D0.DEFAULT_PAINT, numberAxis0.DEFAULT_TICK_MARK_STROKE);
      assertNull(numberAxis0.getLabelToolTip());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      Color color0 = (Color)Axis.DEFAULT_AXIS_LABEL_PAINT;
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null, 1.0F, color0, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, defaultCaret0, 500, (Paint) null, numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis numberAxis0 = new NumberAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis0, numberAxis0, statisticalLineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(6, 77);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(925);
      statisticalLineAndShapeRenderer0.drawDomainLine(graphics2D0, categoryPlot0, rectangle0, 1.0F, numberAxis0.DEFAULT_AXIS_LABEL_PAINT, numberAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      ArrayList<Format.Field> arrayList0 = new ArrayList<Format.Field>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(arrayList0, 12.0, 0.05);
      Range range0 = lineRenderer3D0.findRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'generator' argument.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CategoryItemRendererState categoryItemRendererState0 = lineRenderer3D0.initialise((Graphics2D) null, defaultCaret0, combinedDomainCategoryPlot0, defaultMultiValueCategoryDataset0, plotRenderingInfo0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true, true, false, true, false);
      Rectangle rectangle0 = chartPanel0.getBounds();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.initialise((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = categoryStepRenderer0.getLegendItemLabelGenerator();
      lineRenderer3D0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(statisticalLineAndShapeRenderer0.ZERO, 829.012, statisticalLineAndShapeRenderer0.ZERO, 0.0, statisticalLineAndShapeRenderer0.DEFAULT_VALUE_LABEL_PAINT, statisticalLineAndShapeRenderer0.DEFAULT_STROKE);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Layer layer0 = Layer.BACKGROUND;
      stackedAreaRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      boolean boolean0 = stackedAreaRenderer0.removeAnnotation(categoryLineAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      boxAndWhiskerRenderer0.setSeriesURLGenerator(1245, (CategoryURLGenerator) customCategoryURLGenerator0, false);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0F, 1.0E-8, false);
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer3D0.getURLGenerator(10, (-596), true);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, false);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setSeriesToolTipGenerator(420, (CategoryToolTipGenerator) null);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator(3583, (CategoryToolTipGenerator) null, false);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      intervalBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Paint paint0 = categoryPlot0.getDomainGridlinePaint();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, categoryPlot0.DEFAULT_GRIDLINE_PAINT, paint0, categoryPlot0.DEFAULT_CROSSHAIR_PAINT);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("nl]n", numberFormat0, numberFormat0);
      waterfallBarRenderer0.setSeriesItemLabelGenerator(10, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      barRenderer3D0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultKeyedValues2DDataset0, 431, 11, true, 0.0F, 8.0, false);
      assertTrue(barRenderer3D0.getDefaultShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(2.0F, 2, true);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      stackedBarRenderer3D0.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 10, 10);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.drawItemLabel((Graphics2D) null, plotOrientation0, slidingGanttCategoryDataset0, 2, 2, true, 0.0F, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = chartPanel0.getBounds();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        lineRenderer3D0.initialise((Graphics2D) null, rectangle0, (CategoryPlot) null, defaultMultiValueCategoryDataset0, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      categoryStepRenderer0.setSeriesURLGenerator(15, (CategoryURLGenerator) null);
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryURLGenerator categoryURLGenerator0 = lineRenderer3D0.getSeriesURLGenerator(2854);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis("O", stringArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 806, 10);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.createHotSpotShape((Graphics2D) null, (Rectangle2D) null, categoryPlot0, categoryAxis3D0, symbolAxis0, slidingGanttCategoryDataset0, 10, 500, true, (CategoryItemRendererState) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      DecimalFormat decimalFormat0 = jSpinner_NumberEditor0.getFormat();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("Null 'numberFormatter' argument.", decimalFormat0);
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getItemLabelGenerator(10, 10, true);
      assertSame(categoryItemLabelGenerator0, standardCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      int int0 = lineRenderer3D0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator((-1347), (CategoryToolTipGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawBackground((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = ganttRenderer0.getSeriesItemLabelGenerator((-4362));
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = minMaxCategoryRenderer0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      layeredBarRenderer0.removeAnnotations();
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryURLGenerator categoryURLGenerator0 = lineRenderer3D0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalLineAndShapeRenderer0.getToolTipGenerator(26, 768, false);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, numberAxis0, scatterRenderer0);
      // Undeclared exception!
      try { 
        scatterRenderer0.drawOutline((Graphics2D) null, categoryPlot0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      statisticalLineAndShapeRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.getItemMiddle(1.0F, 0.05, defaultStatisticalCategoryDataset0, categoryAxis3D0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      int int0 = stackedBarRenderer3D0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = minMaxCategoryRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      ganttRenderer0.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      GanttRenderer ganttRenderer1 = (GanttRenderer)ganttRenderer0.clone();
      assertTrue(ganttRenderer1.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("!qQ6D}kYVhTa\"y0a");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, extendedCategoryAxis0, numberAxis0, statisticalLineAndShapeRenderer0);
      CategoryItemRendererState categoryItemRendererState0 = barRenderer3D0.initialise((Graphics2D) null, rectangle0, categoryPlot0, defaultKeyedValues2DDataset0, (PlotRenderingInfo) null);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("y3mYfwGU", groupedStackedBarRenderer0.ZERO, (double) groupedStackedBarRenderer0.ZERO, 0.2);
      groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      GroupedStackedBarRenderer groupedStackedBarRenderer1 = new GroupedStackedBarRenderer();
      boolean boolean0 = groupedStackedBarRenderer0.equals(groupedStackedBarRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = ganttRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }
}
