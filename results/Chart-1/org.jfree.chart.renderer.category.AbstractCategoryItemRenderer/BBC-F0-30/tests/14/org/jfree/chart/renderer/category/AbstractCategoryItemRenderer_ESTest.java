/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 15:54:15 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JInternalFrame;
import javax.swing.JTable;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Minute;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      categoryStepRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultStatisticalCategoryDataset0, (-1925), 10, true, 0.4, 4039, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, 0.0, 1810.1708376, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      LabelBlock labelBlock0 = new LabelBlock("drO.=6FM<#=A", lineRenderer3D0.DEFAULT_VALUE_LABEL_FONT);
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Point2D.Double point2D_Double0 = (Point2D.Double)categoryStepRenderer0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, defaultCaret0, defaultCaret0, symbolAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(stackedAreaRenderer0.ZERO, (double) stackedAreaRenderer0.ZERO, stackedAreaRenderer0.ZERO, (double) stackedAreaRenderer0.ZERO, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT, stackedAreaRenderer0.DEFAULT_STROKE);
      stackedAreaRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      boolean boolean0 = stackedAreaRenderer0.removeAnnotation(categoryLineAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      byte[] byteArray0 = new byte[6];
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      JCheckBox jCheckBox0 = new JCheckBox((String) null, imageIcon0);
      EmptyBorder emptyBorder0 = new EmptyBorder(1516, (byte)30, 1, (-538));
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jCheckBox0, (Border) emptyBorder0, (int) (byte)19, 1516, (-1361), (-1116));
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RectangleEdge rectangleEdge0 = categoryPlot0.getRangeAxisEdge((-4853));
      double double0 = ganttRenderer0.getItemMiddle(numberTickUnit0, numberTickUnit0, taskSeriesCollection0, extendedCategoryAxis0, rectangle0, rectangleEdge0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(12, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("np BFc{XqQ;n)n\"nI`H");
      DateAxis dateAxis0 = new DateAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, categoryAxis0, dateAxis0, boxAndWhiskerRenderer0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(3.4028235E38F, 922.7059F, 0.0F, 0.0F);
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null, false, true, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      Rectangle2D rectangle2D0 = rectangle2D_Float0.createUnion(rectangle0);
      boxAndWhiskerRenderer0.drawBackground(graphics2D0, categoryPlot0, rectangle2D0);
      assertEquals(0, categoryPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("J0al", scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, piePlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CategoryAxis categoryAxis0 = new CategoryAxis("J0al");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      Layer layer0 = Layer.BACKGROUND;
      LogAxis logAxis0 = new LogAxis("J0al");
      categoryStepRenderer0.drawAnnotations(graphics2D0, defaultCaret0, categoryAxis0, logAxis0, layer0, plotRenderingInfo0);
      assertTrue(categoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      RingPlot ringPlot0 = new RingPlot();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      LabelBlock labelBlock0 = new LabelBlock("({0}, {1}) = {2}", lineRenderer3D0.DEFAULT_VALUE_LABEL_FONT);
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("({0}, {1}) = {2}", ringPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 43);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 3, 0, 3, 5, 3, 741, false, true, false, true, false, false);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      Rectangle rectangle0 = new Rectangle(191, (-924), 10, 0);
      Point2D.Double point2D_Double0 = (Point2D.Double)categoryStepRenderer0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle0, rectangle0, ringPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(196.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      categoryStepRenderer0.addEntity(standardEntityCollection0, ganttRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 0, 0, false, 0.2, (-1.0));
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("SerialDate.weekInMonthToString(): invalid code.");
      statisticalLineAndShapeRenderer0.setSeriesURLGenerator(0, (CategoryURLGenerator) standardCategoryURLGenerator0);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[][] doubleArray0 = new double[13][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      scatterRenderer0.addEntity(standardEntityCollection0, rectangle2D_Float0, defaultIntervalCategoryDataset0, 1, 0, true);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(",fuVv6q", areaRenderer0.ZERO, 0.0);
      areaRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertTrue(areaRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      JFreeChart jFreeChart0 = new JFreeChart("%]`Iu<(SoD28UgQy&_", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 15, 10, 691, false, true, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = stackedAreaRenderer0.initialise((Graphics2D) null, rectangle2D0, combinedRangeCategoryPlot0, jDBCCategoryDataset0, plotRenderingInfo0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      minMaxCategoryRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, false);
      CategoryURLGenerator categoryURLGenerator0 = minMaxCategoryRenderer0.getURLGenerator(0, (-1), false);
      assertSame(categoryURLGenerator0, customCategoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryToolTipGenerator categoryToolTipGenerator0 = lineRenderer3D0.getSeriesToolTipGenerator(4165);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis(".L aIGyA3a", stringArray0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(symbolAxis0);
      ValueAxis valueAxis0 = ganttRenderer0.getRangeAxis(combinedRangeCategoryPlot0, (-1496));
      assertSame(symbolAxis0, valueAxis0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      ValueAxis valueAxis1 = lineRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, (-512));
      assertNull(valueAxis1.getLabel());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      LogAxis logAxis0 = new LogAxis("J0al");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      ValueAxis valueAxis0 = categoryStepRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 500);
      assertTrue(valueAxis0.isAutoTickUnitSelection());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2043.755596299775, 0.0);
      categoryPlot0.setRangeAxis(0, (ValueAxis) cyclicNumberAxis0, true);
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(categoryPlot0, 0);
      assertEquals(0.0F, valueAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2137.68447299), 5, (String) null);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, cyclicNumberAxis0, categoryStepRenderer0);
      categoryStepRenderer0.getRangeAxis(categoryPlot0, 1500);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("{2}");
      DateAxis dateAxis0 = new DateAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, extendedCategoryAxis0, dateAxis0, boxAndWhiskerRenderer0);
      CategoryPlot categoryPlot1 = boxAndWhiskerRenderer0.getPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DrawingSupplier drawingSupplier0 = minMaxCategoryRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis categoryAxis0 = statisticalLineAndShapeRenderer0.getDomainAxis(combinedRangeCategoryPlot0, (CategoryDataset) null);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = stackedAreaRenderer0.getDomainAxis(combinedDomainCategoryPlot0, (CategoryDataset) null);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = waterfallBarRenderer0.getBaseItemLabelGenerator();
      assertSame(categoryItemLabelGenerator0, intervalCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[12][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Range range0 = ganttRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Number[][] numberArray0 = new Number[3][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.2;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Range range0 = ganttRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0.2, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-295.0);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = levelRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(295.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = categoryStepRenderer0.findRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = stackedAreaRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = stackedBarRenderer3D0.findRangeBounds(defaultStatisticalCategoryDataset0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      boolean boolean0 = categoryStepRenderer0.equals(categoryStepRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      boolean boolean0 = statisticalBarRenderer0.equals(levelRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("{2}");
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, extendedCategoryAxis0, logarithmicAxis0, layeredBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 3);
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Rectangle rectangle0 = new Rectangle(10, 0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      Rectangle2D rectangle2D0 = intervalBarRenderer0.createHotSpotBounds(graphics2D0, rectangle0, categoryPlot0, categoryAxis3D0, (ValueAxis) null, taskSeriesCollection0, (-1010), (-2373), true, categoryItemRendererState0, rectangle0);
      assertNull(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.setSeriesURLGenerator(Integer.MAX_VALUE, (CategoryURLGenerator) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.setSeriesURLGenerator((-2691), (CategoryURLGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesURLGenerator((-839), (CategoryURLGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.textText;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(systemColor0, systemColor0, systemColor0, systemColor0);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.setSeriesToolTipGenerator((-2739), (CategoryToolTipGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.setSeriesToolTipGenerator((-815), (CategoryToolTipGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setSeriesItemLabelGenerator((-2190), (CategoryItemLabelGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesItemLabelGenerator((-3054), (CategoryItemLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("{2}");
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, extendedCategoryAxis0, logarithmicAxis0, layeredBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 3);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.initialise(graphics2D0, (Rectangle2D) null, categoryPlot0, taskSeriesCollection0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      DateAxis dateAxis0 = new DateAxis("");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      BufferedImage bufferedImage0 = new BufferedImage(5, 18, 5);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.hitTest(10, 2.0, graphics2D0, rectangle2D_Float0, combinedDomainCategoryPlot0, categoryAxis3D0, dateAxis0, (CategoryDataset) null, 10, 10, false, categoryItemRendererState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      TimeZone timeZone0 = TimeZone.getTimeZone("MVrd8ZZF%u3;%?");
      Locale locale0 = Locale.FRANCE;
      DateAxis dateAxis0 = new DateAxis("MVrd8ZZF%u3;%?", timeZone0, locale0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = scatterRenderer0.createState(plotRenderingInfo0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.hitTest(1.0, 2.5E-7, (Graphics2D) null, rectangle2D_Float0, combinedDomainCategoryPlot0, categoryAxis3D0, dateAxis0, defaultCategoryDataset0, 16, 16, true, categoryItemRendererState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      GeneralPath generalPath0 = new GeneralPath(categoryStepRenderer0.DEFAULT_SHAPE);
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      TimeZone timeZone0 = TimeZone.getTimeZone("MVrd8ZZF%u3;%?");
      Locale locale0 = Locale.FRANCE;
      DateAxis dateAxis0 = new DateAxis("MVrd8ZZF%u3;%?", timeZone0, locale0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.hitTest(2.0, 10, (Graphics2D) null, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis3D0, dateAxis0, defaultCategoryDataset0, 10, (-1), true, categoryItemRendererState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.getRangeAxis((CategoryPlot) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.getItemMiddle(10, false, defaultKeyedValues2DDataset0, (CategoryAxis) null, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 1);
      // Undeclared exception!
      try { 
        levelRenderer0.getDomainAxis((CategoryPlot) null, slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        layeredBarRenderer0.getDomainAxis(combinedDomainCategoryPlot0, defaultMultiValueCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 5, 5);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[9];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      String[] stringArray0 = new String[7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        stackedBarRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[5];
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("J0al", scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, piePlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      NumberAxis numberAxis0 = new NumberAxis("J0al");
      // Undeclared exception!
      try { 
        scatterRenderer0.drawRangeLine(graphics2D0, (CategoryPlot) null, numberAxis0, defaultCaret0, 0, numberAxis0.DEFAULT_TICK_MARK_PAINT, scatterRenderer0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawOutline((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      categoryStepRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0);
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", spiderWebPlot0.DEFAULT_LABEL_FONT, polarPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1684, 5, 0.01, (-1106.4301960488963), chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.drawItemLabel(graphics2D0, plotOrientation0, defaultBoxAndWhiskerCategoryDataset0, 15, (-4954), true, 1.0F, 5324.707186095614, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, statisticalLineAndShapeRenderer0.DEFAULT_VALUE_LABEL_PAINT, stackedAreaRenderer0.DEFAULT_STROKE, stackedAreaRenderer0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_OUTLINE_STROKE, 0.0F);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, (CategoryAxis) null, categoryMarker0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(10, (-1.0F), 31, 0.0F);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, rectangle2D_Float0, (-387.5213983346409), combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawBackground((Graphics2D) null, categoryPlot0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((-510));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      Rectangle2D rectangle2D0 = scatterRenderer0.DEFAULT_VALUE_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      NumberAxis numberAxis0 = new NumberAxis("org.jfree.chart.renderer.xy.YIntervalRenderer");
      // Undeclared exception!
      try { 
        categoryStepRenderer0.drawAnnotations((Graphics2D) null, rectangle2D0, extendedCategoryAxis0, numberAxis0, (Layer) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState((PlotRenderingInfo) null);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, true);
      Rectangle rectangle0 = chartPanel0.getBounds();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Lb");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-237.18146958488), (double) categoryStepRenderer0.ZERO);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.createHotSpotBounds((Graphics2D) null, rectangle0, (CategoryPlot) null, categoryAxis3D0, cyclicNumberAxis0, (CategoryDataset) null, 10, 1, false, categoryItemRendererState0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      GeneralPath generalPath0 = new GeneralPath(categoryStepRenderer0.DEFAULT_SHAPE);
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      DateAxis dateAxis0 = new DateAxis("MVrd8ZZF%u3;%?", timeZone0, locale0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D0, combinedDomainCategoryPlot0, subCategoryAxis0, dateAxis0, defaultCategoryDataset0, 500, 10, true, categoryItemRendererState0, rectangle2D0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      // Undeclared exception!
      try { 
        lineRenderer3D0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, categoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addEntity(standardEntityCollection0, ganttRenderer0.DEFAULT_SHAPE, defaultKeyedValues2DDataset0, 1, 1256, false, (double) ganttRenderer0.ZERO, (double) ganttRenderer0.ZERO);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Number[][] numberArray0 = new Number[4][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 1, 10);
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity(standardEntityCollection0, statisticalLineAndShapeRenderer0.DEFAULT_SHAPE, slidingCategoryDataset0, 10, (-2769), false, 1.0, (-1277.877289537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.textText;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(systemColor0, systemColor0, systemColor0, systemColor0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity((EntityCollection) null, waterfallBarRenderer0.DEFAULT_SHAPE, defaultCategoryDataset0, (-1036), 768, true, 4.56, 3.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, statisticalLineAndShapeRenderer0.DEFAULT_SHAPE, (CategoryDataset) null, 1724, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("ZOOM_RESET_RANGE", 300, (-5.0));
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultKeyedValues2DDataset0, 2257, 0, true, 2337.7521, 2437.24695366);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      categoryStepRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultBoxAndWhiskerCategoryDataset0, 5, 5, false, 1679.5, 5, true);
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) null, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      TaskSeries taskSeries0 = new TaskSeries("");
      taskSeriesCollection0.add(taskSeries0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, categoryPlot0, taskSeriesCollection0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, true);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setSeriesToolTipGenerator(1749, (CategoryToolTipGenerator) null, true);
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("@]J FX%IGEk2y?,", decimalFormat0);
      categoryStepRenderer0.setSeriesItemLabelGenerator(1498, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.textText;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(systemColor0, systemColor0, systemColor0, systemColor0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = waterfallBarRenderer0.getItemLabelGenerator(1, 1430, true);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      double[][] doubleArray0 = new double[3][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, categoryPlot0, categoryAxis0, (ValueAxis) null, defaultIntervalCategoryDataset0, (-449), 85, false, categoryItemRendererState0, (Rectangle2D) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 85
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, line2D_Double0, defaultKeyedValues2DDataset0, 0, 1384, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("", numberFormat0);
      scatterRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, categoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, defaultCategoryDataset0, (-845), 3, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultKeyedValues2DDataset0, 5, (-1), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      LegendItemCollection legendItemCollection0 = scatterRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      scatterRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      ScatterRenderer scatterRenderer1 = (ScatterRenderer)scatterRenderer0.clone();
      assertTrue(scatterRenderer1.getUseSeriesOffset());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("AK;. 9yr3.TbZH");
      minMaxCategoryRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, false);
      try { 
        minMaxCategoryRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      ganttRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
      GanttRenderer ganttRenderer1 = (GanttRenderer)ganttRenderer0.clone();
      assertTrue(ganttRenderer1.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      categoryStepRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("{2}", categoryStepRenderer0.DEFAULT_VALUE_LABEL_FONT, polarPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 4, (double) 4, 45.0, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.drawItemLabel(graphics2D0, plotOrientation0, defaultBoxAndWhiskerCategoryDataset0, (-581), 54, true, 1.0F, (-3304.0), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Minute minute0 = new Minute();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("{2}");
      DateAxis dateAxis0 = new DateAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, extendedCategoryAxis0, dateAxis0, boxAndWhiskerRenderer0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, dateAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      boxAndWhiskerRenderer0.updateCrosshairValues(categoryCrosshairState0, minute0, 0.2, 0.2, 3, 103.07757427024771, 265.8187701, plotOrientation0);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis(".L aIGyA3a", stringArray0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      PolarPlot polarPlot0 = new PolarPlot(xIntervalSeriesCollection0, symbolAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.updateCrosshairValues((CategoryCrosshairState) null, 1.0F, ".L aIGyA3a", 0.0, 79, 0.05, 303.5078640225191, plotOrientation0);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.updateCrosshairValues(categoryCrosshairState0, statisticalBarRenderer0.ZERO, 8.0, (double) lineRenderer3D0.ZERO, 43, 0.04, 0.2, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Minute minute0 = new Minute();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      DateAxis dateAxis0 = new DateAxis();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, dateAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.updateCrosshairValues(categoryCrosshairState0, minute0, 0.2, 0.2, 3, 103.07757427024771, 265.8187701, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(">{iCWGLYty+}4S^");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(">{iCWGLYty+}4S^");
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, logarithmicAxis0, layeredBarRenderer0);
      DrawingSupplier drawingSupplier0 = layeredBarRenderer0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      scatterRenderer0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer1.equals(scatterRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      assertTrue(scatterRenderer1.equals((Object)scatterRenderer0));
      
      Locale locale0 = Locale.forLanguageTag("7}/4,-o9C(?@");
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("7}/4,-o9C(?@", numberFormat0);
      scatterRenderer1.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
      boolean boolean0 = scatterRenderer0.equals(scatterRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      assertTrue(scatterRenderer1.equals((Object)scatterRenderer0));
      
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("", dateFormat0);
      scatterRenderer1.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      boolean boolean0 = scatterRenderer0.equals(scatterRenderer1);
      assertFalse(scatterRenderer1.equals((Object)scatterRenderer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(jDBCCategoryDataset0, tableOrder0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      scatterRenderer1.setSeriesItemLabelGenerator(1434, categoryItemLabelGenerator0);
      assertFalse(scatterRenderer1.equals((Object)scatterRenderer0));
      
      boolean boolean0 = scatterRenderer1.equals(scatterRenderer0);
      assertTrue(scatterRenderer0.equals((Object)scatterRenderer1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer1.equals(scatterRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem((-415), (-2234));
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      minMaxCategoryRenderer0.setPlot(categoryPlot0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getLegendItem(1857, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(categoryPlot0, 10);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      // Undeclared exception!
      try { 
        lineRenderer3D0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, (Rectangle2D) null, (Rectangle2D) null, valueAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      TimeSeries timeSeries0 = new TimeSeries(false);
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, true);
      JTable jTable0 = new JTable(timeSeriesTableModel0);
      Rectangle rectangle0 = jTable0.getCellRect(10, 10, true);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      Point2D.Double point2D_Double0 = (Point2D.Double)lineRenderer3D0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, rectangle0, categoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(4.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(categoryPlot0, 10);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 19, 0, 5, 19, (-1), true, true, false, false, true, true);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      Rectangle rectangle0 = new Rectangle(1551, 22);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      // Undeclared exception!
      try { 
        categoryStepRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, (Rectangle2D) null, valueAxis0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      RingPlot ringPlot0 = new RingPlot();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, (Rectangle2D) null, ringPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      LabelBlock labelBlock0 = new LabelBlock("");
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2440, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 5, (-2433), 2, 15, 15, 5, true, true, true, true, true, true, true);
      Rectangle rectangle0 = chartPanel0.getBounds();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      // Undeclared exception!
      try { 
        categoryStepRenderer0.calculateDomainMarkerTextAnchorPoint(graphics2D0, (PlotOrientation) null, rectangle0, rectangle0, combinedRangeXYPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4101.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker((double) minMaxCategoryRenderer0.ZERO, 0.0F);
      intervalMarker0.setLabel("ItemLabelGenerator not cloneable.");
      BufferedImage bufferedImage0 = new BufferedImage(10, 1806, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      minMaxCategoryRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, intervalMarker0, rectangle2D_Double0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4101.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 10);
      BufferedImage bufferedImage0 = new BufferedImage(1806, 10, 5);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      minMaxCategoryRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, intervalMarker0, rectangle2D_Float0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.entity.PieSectionEntity");
      IntervalMarker intervalMarker0 = new IntervalMarker((-547.6), 1.0F);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 16, 13);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      minMaxCategoryRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, logarithmicAxis0, intervalMarker0, rectangle2D_Double0);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4101.341343751302);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 0.05, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      minMaxCategoryRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, intervalMarker0, rectangle2D_Double0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      NumberAxis numberAxis0 = new NumberAxis("J4w-F.o?{T");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.7976931348623157E308, 0.0);
      minMaxCategoryRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, numberAxis0, intervalMarker0, (Rectangle2D) null);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.drawRangeMarker((Graphics2D) null, categoryPlot0, (ValueAxis) null, (Marker) null, (Rectangle2D) null);
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      NumberAxis numberAxis0 = new NumberAxis("J4w-F.o?{T");
      ValueMarker valueMarker0 = new ValueMarker(10);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.drawRangeMarker((Graphics2D) null, categoryPlot0, numberAxis0, valueMarker0, (Rectangle2D) null);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      NumberAxis numberAxis0 = new NumberAxis("J4w-F.o?{T");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      ValueMarker valueMarker0 = new ValueMarker((double) minMaxCategoryRenderer0.ZERO);
      JFreeChart jFreeChart0 = new JFreeChart("J4w-F.o?{T", combinedRangeCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, numberAxis0, valueMarker0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("J0~tal", scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, piePlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CategoryAxis categoryAxis0 = new CategoryAxis("J0~tal");
      NumberAxis numberAxis0 = new NumberAxis("J0~tal");
      CategoryPlot categoryPlot0 = scatterRenderer0.getPlot();
      scatterRenderer0.drawRangeLine(graphics2D0, (CategoryPlot) null, numberAxis0, defaultCaret0, 15, categoryPlot0.DEFAULT_GRIDLINE_PAINT, categoryAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(scatterRenderer0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(5, 1.0F, 5, 10);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, rectangle2D_Float0, (-387.5213983346409), combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 10);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(525.758F, 1.0F, 0.5F, 10.0F);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D_Float0, 0.5F, (Paint) null, valueAxis0.DEFAULT_TICK_MARK_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(10, 0.0F, (-1.0F), 1.0F);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      JFreeChart jFreeChart0 = new JFreeChart("mO7\"\"B{\u0006v.'", categoryStepRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainCategoryPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1992, 20, 665, 8, (-1294), 17, false, false, true, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      categoryStepRenderer0.drawDomainLine(graphics2D0, combinedDomainCategoryPlot0, rectangle2D_Float0, 181.82, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(1.0F, rectangle2D_Float0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      Range range0 = ganttRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("RectangleAnchor.BOTTOM_RIGHT");
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-753.7399604399));
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, cyclicNumberAxis0, layeredBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.initialise(graphics2D0, rectangle0, categoryPlot0, taskSeriesCollection0, plotRenderingInfo0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("J0al", scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, piePlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CategoryAxis categoryAxis0 = new CategoryAxis("J0al");
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise(graphics2D0, defaultCaret0, combinedDomainCategoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.initialise((Graphics2D) null, defaultCaret0, combinedRangeCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0, (PlotRenderingInfo) null);
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      scatterRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", scatterRenderer0.ZERO, 0.0);
      Layer layer0 = Layer.FOREGROUND;
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer1.equals(scatterRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      minMaxCategoryRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, false);
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = (MinMaxCategoryRenderer)minMaxCategoryRenderer0.clone();
      assertEquals(3, minMaxCategoryRenderer1.getDefaultEntityRadius());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("Untitled", "", "Untitled");
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setSeriesURLGenerator(0, (CategoryURLGenerator) standardCategoryURLGenerator0, true);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setSeriesURLGenerator(19, (CategoryURLGenerator) null, false);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryURLGenerator categoryURLGenerator0 = minMaxCategoryRenderer0.getURLGenerator(0, (-1), false);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null, false);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      levelRenderer0.setSeriesToolTipGenerator(1, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      CategoryToolTipGenerator categoryToolTipGenerator0 = levelRenderer0.getToolTipGenerator(1, 1, true);
      assertSame(categoryToolTipGenerator0, standardCategoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      categoryStepRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0, false);
      assertEquals(0, categoryStepRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setSeriesItemLabelGenerator(79, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setSeriesItemLabelGenerator(5, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator1 = (StandardCategoryItemLabelGenerator)scatterRenderer0.getItemLabelGenerator(5, 10, true);
      assertEquals("{2}", standardCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.setSeriesURLGenerator(Integer.MAX_VALUE, (CategoryURLGenerator) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = scatterRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryURLGenerator categoryURLGenerator0 = stackedAreaRenderer0.getSeriesURLGenerator(Integer.MAX_VALUE);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = waterfallBarRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("[tR~Is7");
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.createHotSpotShape((Graphics2D) null, (Rectangle2D) null, categoryPlot0, categoryAxis3D0, (ValueAxis) null, taskSeriesCollection0, 10, 13, true, categoryStepRenderer_State0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      waterfallBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      WaterfallBarRenderer waterfallBarRenderer1 = (WaterfallBarRenderer)waterfallBarRenderer0.clone();
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedAreaRenderer0.getLegendItemLabelGenerator();
      stackedAreaRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertTrue(stackedAreaRenderer1.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      int int0 = groupedStackedBarRenderer0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("", numberFormat0);
      areaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)areaRenderer0.getBaseToolTipGenerator();
      assertEquals("", boxAndWhiskerToolTipGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, logarithmicAxis0, categoryStepRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      // Undeclared exception!
      jFreeChart0.createBufferedImage(500, 500);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = ganttRenderer0.getSeriesItemLabelGenerator(3480);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(3013.8, 3013.8);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer3D0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.removeAnnotations();
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      scatterRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer0.equals(scatterRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryURLGenerator categoryURLGenerator0 = categoryStepRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = scatterRenderer0.getToolTipGenerator((-1), (-1699), true);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'generator' argument.", scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, piePlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JInternalFrame jInternalFrame0 = new JInternalFrame("Null 'generator' argument.");
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      Rectangle2D rectangle2D0 = piePlot0.DEFAULT_INSETS.createOutsetRectangle((Rectangle2D) rectangle0);
      scatterRenderer0.drawOutline(graphics2D0, categoryPlot0, rectangle2D0);
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.hashCode();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Base tool tip generator not cloneable.");
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        lineRenderer3D0.getItemMiddle(1.0F, 10, defaultStatisticalCategoryDataset0, extendedCategoryAxis0, rectangle0, (RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      int int0 = ganttRenderer0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      int int0 = statisticalLineAndShapeRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      scatterRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer1.equals(scatterRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("{2}");
      DateAxis dateAxis0 = new DateAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, extendedCategoryAxis0, dateAxis0, boxAndWhiskerRenderer0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.getLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 1, 1, 10, 87, 10, 3, true, false, false, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, categoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) stackedAreaRenderer0.ZERO, (double) stackedAreaRenderer0.ZERO, true);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = areaRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }
}
