/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 15:53:36 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.lang.reflect.Array;
import java.sql.Connection;
import java.text.DateFormat;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Base item URL geneoator not cHoneable.");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 10;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds((Graphics2D) null, defaultCaret0, combinedRangeCategoryPlot0, subCategoryAxis0, cyclicNumberAxis0, defaultIntervalCategoryDataset0, 0, 0, true, categoryStepRenderer_State0, defaultCaret1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("b=m(D[]k?>g'9|+Y", dateFormat0);
      boxAndWhiskerRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addEntity((EntityCollection) null, boxAndWhiskerRenderer0.DEFAULT_SHAPE, defaultStatisticalCategoryDataset0, (-1), 1565, false, (double) boxAndWhiskerRenderer0.ZERO, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("The 'data' array must contain two arrays with equal length.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addEntity(standardEntityCollection0, combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_BOX, defaultStatisticalCategoryDataset0, 4, 1081, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hull 'generator' argume`t.");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2, "hull 'generator' argume`t.");
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, extendedCategoryAxis0, cyclicNumberAxis0, groupedStackedBarRenderer0);
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      groupedStackedBarRenderer0.updateCrosshairValues(categoryCrosshairState0, true, "hull 'generator' argume`t.", 2.0F, 5, 2.0F, 10, plotOrientation0);
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0, 0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      // Undeclared exception!
      try { 
        scatterRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, (Rectangle2D) null, (RectangleInsets) null, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Rectangle rectangle0 = new Rectangle(10, (-186));
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      Point2D.Double point2D_Double0 = (Point2D.Double)scatterRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle0, fastScatterPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(2.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      RingPlot ringPlot0 = new RingPlot();
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("60&ICpy", compassPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(5431, 10, (double) 15, (double) boxAndWhiskerRenderer0.ZERO, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(5431, 10, 10.0F, 10);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.4, 206.489868);
      Stroke stroke0 = cyclicNumberAxis0.getAdvanceLineStroke();
      lineRenderer3D0.drawDomainLine(graphics2D0, combinedDomainCategoryPlot0, rectangle2D_Float0, 2963.75, ringPlot0.DEFAULT_OUTLINE_PAINT, stroke0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      RingPlot ringPlot0 = new RingPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Point2D.Double point2D_Double0 = (Point2D.Double)scatterRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle2D_Float0, ringPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(4.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      double[][] doubleArray0 = new double[2][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      groupedStackedBarRenderer0.addEntity(standardEntityCollection0, statisticalBarRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 0, 0, true, (-270.530987), 0.2);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 5, 5);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 5, 5);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("1A");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F);
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingCategoryDataset0, extendedCategoryAxis0, cyclicNumberAxis0, groupedStackedBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      // Undeclared exception!
      jFreeChart0.createBufferedImage(500, 2827);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("60&ICpy", compassPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(5431, 10, 0.0, (double) boxAndWhiskerRenderer0.ZERO, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(1.0F, 5431, 1.0F, 1.0F, 422.58347F, (-320.38162F));
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      scatterRenderer0.drawOutline(graphics2D0, categoryPlot0, rectangle2D0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)stackedBarRenderer0.lookupSeriesShape((-3957));
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.general.DefaultKeyedValueDataset", compassPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      lineRenderer3D0.drawDomainLine(graphics2D0, combinedDomainCategoryPlot0, rectangle2D_Double0, (double) stackedBarRenderer0.ZERO, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, scatterRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("org.jfree.chart.renderer.xy.XYStepRenderer", waterfallBarRenderer0.ZERO, (double) waterfallBarRenderer0.ZERO);
      waterfallBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 5, 5);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("zV`L&}pz{^gA");
      Rectangle rectangle0 = new Rectangle(500, (-3065));
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("zV`L&}pz{^gA");
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingGanttCategoryDataset0, extendedCategoryAxis0, logarithmicAxis0, categoryStepRenderer0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.initialise((Graphics2D) null, rectangle0, categoryPlot0, slidingGanttCategoryDataset0, (PlotRenderingInfo) null);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Tma.j");
      MockDate mockDate0 = new MockDate((-2360L));
      Year year0 = new Year(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("Tma.j", year0, year0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, extendedCategoryAxis0, periodAxis0, levelRenderer0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("Tma.j", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = statisticalBarRenderer0.initialise((Graphics2D) null, rectangle0, categoryPlot0, defaultCategoryDataset0, plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("");
      lineRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
      CategoryURLGenerator categoryURLGenerator0 = lineRenderer3D0.getURLGenerator(1367, 1367, true);
      assertSame(categoryURLGenerator0, standardCategoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(combinedDomainCategoryPlot0, 10);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setAutoTickUnitSelection(false, true);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 10);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      ValueAxis valueAxis1 = scatterRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 1);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(combinedRangeCategoryPlot0, (-3025));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 5, 5);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 5, 5);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(": wi dth=");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5, 0.0F, ": wi dth=");
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingCategoryDataset0, extendedCategoryAxis0, cyclicNumberAxis0, groupedStackedBarRenderer0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(categoryPlot0, 5);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPlot categoryPlot0 = scatterRenderer0.getPlot();
      assertNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.data.xy.DefaultOHLCDataset");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, subCategoryAxis0, cyclicNumberAxis0, scatterRenderer0);
      CategoryPlot categoryPlot1 = scatterRenderer0.getPlot();
      assertFalse(categoryPlot1.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("arX\"tY|[", mockSimpleDateFormat0);
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)scatterRenderer0.getItemLabelGenerator(12, 7, false);
      assertEquals("arX\"tY|[", intervalCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      DrawingSupplier drawingSupplier0 = waterfallBarRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryAxis categoryAxis0 = stackedAreaRenderer0.getDomainAxis(combinedRangeCategoryPlot0, (CategoryDataset) null);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("The 'data' array must contain two arrays with equal length.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      CategoryAxis categoryAxis0 = ganttRenderer0.getDomainAxis(combinedDomainCategoryPlot0, (CategoryDataset) null);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      CategoryURLGenerator categoryURLGenerator0 = lineAndShapeRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      ganttRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      CategoryToolTipGenerator categoryToolTipGenerator0 = ganttRenderer0.getBaseToolTipGenerator();
      assertSame(categoryToolTipGenerator0, standardCategoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = levelRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("", mockSimpleDateFormat0);
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)scatterRenderer0.getBaseItemLabelGenerator();
      assertEquals("", intervalCategoryItemLabelGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 0.05;
      numberArray1[1] = (Number) 1.0E-8;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Range range0 = levelRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0.025000005000000002, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.addValue((Number) 0.2, (Comparable) levelRenderer0.ZERO, (Comparable) 0.2);
      Range range0 = levelRenderer0.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertEquals(0.2, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2720.776);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals((-2720.776), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[8][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(2.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      boolean boolean0 = scatterRenderer0.equals(scatterRenderer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      boolean boolean0 = statisticalBarRenderer0.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesURLGenerator((-1), (CategoryURLGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesURLGenerator(Integer.MAX_VALUE, (CategoryURLGenerator) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.setSeriesURLGenerator((-1062), (CategoryURLGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesToolTipGenerator((-5165), (CategoryToolTipGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator((-254), (CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      // Undeclared exception!
      try { 
        stackedBarRenderer0.setSeriesItemLabelGenerator((-1), (CategoryItemLabelGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-755), (-755));
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingGanttCategoryDataset0, tableOrder0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.setSeriesItemLabelGenerator((-755), categoryItemLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("({0}, {1}) = {2}", ringPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1, (double) scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 15, 1985);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise(graphics2D0, rectangle2D_Float0, combinedDomainCategoryPlot0, slidingCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("Cj(", scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, piePlot3D0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, false, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        ganttRenderer0.initialise(graphics2D0, rectangle0, combinedRangeCategoryPlot0, defaultCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("|AfzqPZ)pfK");
      // Undeclared exception!
      try { 
        ganttRenderer0.hitTest(2704.01973029735, 1.0F, (Graphics2D) null, rectangle2D_Double0, categoryPlot0, categoryAxis0, numberAxis3D0, defaultBoxAndWhiskerCategoryDataset0, 500, (-1052), true, (CategoryItemRendererState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle(10, (-186), (-186), (-186));
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "Null 'stoe' argmgnt.");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stoe' argmgnt.");
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        scatterRenderer0.hitTest(10, 0.0, (Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, extendedCategoryAxis0, cyclicNumberAxis0, defaultStatisticalCategoryDataset0, (-186), 10, true, categoryStepRenderer_State0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("U", compassPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Point point0 = new Point(1, 1);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      Number[][] numberArray0 = new Number[2][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState((PlotRenderingInfo) null);
      LogAxis logAxis0 = new LogAxis();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.hitTest(0.05, 0, graphics2D0, rectangle0, combinedDomainCategoryPlot0, (CategoryAxis) null, logAxis0, defaultIntervalCategoryDataset0, 1, (-107), true, categoryItemRendererState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.getRangeAxis((CategoryPlot) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ItemLabelAnchor.OUTSIDE4");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(5302);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.getItemMiddle(0.0, 0.0F, defaultStatisticalCategoryDataset0, subCategoryAxis0, rectangle2D_Double0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.getDomainAxis((CategoryPlot) null, taskSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.getDomainAxis(combinedDomainCategoryPlot0, defaultKeyedValues2DDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 7, 7);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[2];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-1717), (-4718));
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.findRangeBounds(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[6];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("01W++a!Y87]8%");
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, categoryAxis0.DEFAULT_AXIS_LINE_PAINT, categoryAxis0.DEFAULT_TICK_MARK_STROKE);
      Rectangle rectangle0 = new Rectangle(10, 10, 10, 3);
      // Undeclared exception!
      try { 
        scatterRenderer0.drawDomainMarker((Graphics2D) null, combinedRangeCategoryPlot0, categoryAxis0, categoryMarker0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hull 'generator' argume`t.");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2, "hull 'generator' argume`t.");
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, extendedCategoryAxis0, cyclicNumberAxis0, groupedStackedBarRenderer0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 3, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) null);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.drawDomainMarker(graphics2D0, categoryPlot0, extendedCategoryAxis0, categoryMarker0, (Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.drawBackground((Graphics2D) null, combinedDomainCategoryPlot0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("The 'data' array must contain two arrays with equal length.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart("The 'data' array must contain two arrays with equal length.", combinedDomainCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedDomainCategoryPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, true, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      DateAxis dateAxis0 = new DateAxis();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawAnnotations((Graphics2D) null, rectangle0, categoryAxis3D0, dateAxis0, (Layer) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("({0}, {1}) = {2}", ringPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1, (double) scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("({0}, {1}) = {3} - {4}");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, logarithmicAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Comparable<StackedBarRenderer>[] comparableArray0 = (Comparable<StackedBarRenderer>[]) Array.newInstance(Comparable.class, 9);
      Comparable<CategoryPointerAnnotation>[] comparableArray1 = (Comparable<CategoryPointerAnnotation>[]) Array.newInstance(Comparable.class, 0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray1, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds(graphics2D0, rectangle2D0, (CategoryPlot) null, categoryAxis0, logarithmicAxis0, defaultIntervalCategoryDataset0, 1, 0, false, (CategoryItemRendererState) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.createState(plotRenderingInfo0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 0.0F, (-4195.0F));
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("{fk`Xo.6\u0000ZZ2~{");
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 22);
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, categoryAxis0, valueAxis0, defaultIntervalCategoryDataset0, 10, 10, true, categoryItemRendererState0, rectangle2D_Float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("&TP`1)Tv");
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      try { 
        stackedAreaRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_AXIS_LABEL_INSETS;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      // Undeclared exception!
      try { 
        ganttRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = waterfallBarRenderer0.createState(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      String[] stringArray0 = new String[8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.addEntity(entityCollection0, groupedStackedBarRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 1, (-577), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addEntity((EntityCollection) null, boxAndWhiskerRenderer0.DEFAULT_SHAPE, defaultBoxAndWhiskerCategoryDataset0, (-3966), (-710), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Null 'paint' argument.", defaultCategoryItemRenderer0.ZERO, (-1038.64), (-1038.64));
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("({0}, {1}) = {3} - {4}");
      Week week0 = new Week(44, (-1209));
      PeriodAxis periodAxis0 = new PeriodAxis("({0}, {1}) = {3} - {4}", week0, week0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        scatterRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, (CategoryPlot) null, subCategoryAxis0, periodAxis0, jDBCCategoryDataset0, 21, 500, false, categoryStepRenderer_State0, (Rectangle2D) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.addAnnotation((CategoryAnnotation) null, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      boxAndWhiskerRenderer0.setSeriesURLGenerator(56, (CategoryURLGenerator) standardCategoryURLGenerator0, true);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setSeriesToolTipGenerator(1825, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, true);
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("", dateFormat0);
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null, true);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = waterfallBarRenderer0.getItemLabelGenerator((-723), 500, true);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = waterfallBarRenderer0.getSeriesToolTipGenerator((-755));
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("F6O0&ICpy", compassPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(5431, 10, 0.0, (double) boxAndWhiskerRenderer0.ZERO, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      LogAxis logAxis0 = new LogAxis();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      boolean boolean0 = intervalBarRenderer0.hitTest(0.05, 15, graphics2D0, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis0, logAxis0, defaultBoxAndWhiskerCategoryDataset0, (-2967), (-869), false, categoryItemRendererState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      BarRenderer barRenderer0 = new BarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, (CategoryAxis) null, numberAxis3D0, barRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", scatterRenderer0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 189, 0.2, (-575.995), chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = scatterRenderer0.initialise(graphics2D0, (Rectangle2D) null, categoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        scatterRenderer0.hitTest(670.18, (-792.6632082217358), graphics2D0, (Rectangle2D) null, categoryPlot0, (CategoryAxis) null, numberAxis3D0, defaultKeyedValues2DDataset0, 10, (-4543), false, categoryItemRendererState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("_|]jz! ))BDLO,M~*Ov", compassPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Number[][] numberArray0 = new Number[11][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, 1.0F);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State((PlotRenderingInfo) null);
      Rectangle2D rectangle2D0 = scatterRenderer0.createHotSpotBounds(graphics2D0, defaultCaret0, combinedDomainCategoryPlot0, categoryAxis0, cyclicNumberAxis0, defaultIntervalCategoryDataset0, 1, 0, true, categoryStepRenderer_State0, defaultCaret0);
      assertNull(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      boxAndWhiskerRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = categoryItemRendererState0.getEntityCollection();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addEntity(entityCollection0, lineRenderer3D0.DEFAULT_SHAPE, (CategoryDataset) null, (-864), 86, false, (-699.7869092), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.urls.StandardCategoryURLGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("iG.oO>%Z", dateFormat0);
      boxAndWhiskerRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addEntity((EntityCollection) null, scatterRenderer0.DEFAULT_SHAPE, defaultStatisticalCategoryDataset0, 10, 10, true, (double) scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[9][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Base item URL generator not cloneable.");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, subCategoryAxis0, numberAxis3D0, boxAndWhiskerRenderer0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultIntervalCategoryDataset0, 10, 10, true, (-2928.481509), (-9.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultBoxAndWhiskerCategoryDataset0, 0, 255, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      double[][] doubleArray0 = new double[8][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      lineRenderer3D0.addEntity(standardEntityCollection0, boxAndWhiskerRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 4, 0, false);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      LegendItemCollection legendItemCollection0 = scatterRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      assertEquals(2.0F, valueAxis0.getMinorTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      lineRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, true);
      LineRenderer3D lineRenderer3D1 = (LineRenderer3D)lineRenderer3D0.clone();
      assertTrue(lineRenderer3D1.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
      Object object0 = stackedAreaRenderer0.clone();
      assertNotSame(stackedAreaRenderer0, object0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("({0}, {1}) = {2}", ringPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1, (double) scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LogAxis logAxis0 = new LogAxis();
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CategoryAxis categoryAxis0 = new CategoryAxis("({0}, {1}) = {3} - {4}");
      Layer layer0 = Layer.FOREGROUND;
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      scatterRenderer0.drawAnnotations(graphics2D0, rectangle2D_Float0, categoryAxis0, logAxis0, layer0, plotRenderingInfo0);
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      // Undeclared exception!
      try { 
        scatterRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, (CategoryDataset) null, 0, (-2803), false, 1504.3802, 1.0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 5, 5);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 5, 5);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) groupedStackedBarRenderer0.ZERO, 0.2, "");
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingCategoryDataset0, extendedCategoryAxis0, cyclicNumberAxis0, groupedStackedBarRenderer0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      groupedStackedBarRenderer0.updateCrosshairValues(categoryCrosshairState0, 0.0F, 0.05, 1.0F, 10, 1.0E-8, 1.0F, plotOrientation0);
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      minMaxCategoryRenderer0.updateCrosshairValues((CategoryCrosshairState) null, 3.0, ganttRenderer0.ZERO, (-1563.3), 5, (-3.379136741), (-1563.3), plotOrientation0);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-258.9099236762), 0.0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.updateCrosshairValues((CategoryCrosshairState) null, cyclicNumberAxis0.DEFAULT_TICK_UNIT, 500, 5.0E-5, 500, (-5.0), 2.0F, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.updateCrosshairValues(categoryCrosshairState0, 0.0F, 0.05, 1.0F, 10, 1.0E-8, 1.0F, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 5, 5);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 5, 5);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) groupedStackedBarRenderer0.ZERO, 0.2, "");
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingCategoryDataset0, extendedCategoryAxis0, cyclicNumberAxis0, groupedStackedBarRenderer0);
      DrawingSupplier drawingSupplier0 = groupedStackedBarRenderer0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ScatterRenderer scatterRenderer1 = new ScatterRenderer();
      assertTrue(scatterRenderer1.equals((Object)scatterRenderer0));
      
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("zm*SgC~i");
      scatterRenderer1.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      boolean boolean0 = scatterRenderer0.equals(scatterRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      stackedAreaRenderer1.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      GanttRenderer ganttRenderer1 = new GanttRenderer();
      boolean boolean0 = ganttRenderer0.equals(ganttRenderer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LegendItem legendItem0 = levelRenderer0.getLegendItem(1, 1);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("{2}");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "({0}, {1}) = {3} - {4}");
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, extendedCategoryAxis0, cyclicNumberAxis0, statisticalLineAndShapeRenderer0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setPlot(categoryPlot0);
      // Undeclared exception!
      try { 
        levelRenderer0.getLegendItem((-1632), 4093);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle(0, 0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      // Undeclared exception!
      try { 
        scatterRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle0, (Rectangle2D) null, combinedRangeCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle(10, 10);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Point2D.Double point2D_Double0 = (Point2D.Double)scatterRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, rectangle0, combinedRangeCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(4.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle rectangle0 = new Rectangle(10, 10);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer0.getBlockAnchor();
      // Undeclared exception!
      try { 
        scatterRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle0, rectangle0, combinedDomainCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, fastScatterPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart(",7", ringPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(4166, 1, chartRenderingInfo0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LogAxis logAxis0 = new LogAxis(",7");
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, 2.0F);
      scatterRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, logAxis0, intervalMarker0, rectangle2D_Float0);
      assertFalse(scatterRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("({0}, {1}) = {2}", ringPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1, (double) scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LogAxis logAxis0 = new LogAxis();
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1, 1811.7068);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 2834.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      stackedBarRenderer3D0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, logAxis0, intervalMarker0, rectangle2D_Float0);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("({0}, {1}) = {2}", ringPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1, (double) scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LogAxis logAxis0 = new LogAxis();
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(3237.582173158, 0.0F);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker((-835.29), (-3077.25824999107), scatterRenderer0.DEFAULT_OUTLINE_PAINT);
      stackedBarRenderer3D0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, logAxis0, intervalMarker0, rectangle2D_Float0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      BufferedImage bufferedImage0 = new BufferedImage(1, 10, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      LogAxis logAxis0 = new LogAxis();
      CategoryMarker categoryMarker0 = new CategoryMarker(2.0F, lineRenderer3D0.DEFAULT_VALUE_LABEL_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE, (Paint) null, lineRenderer3D0.DEFAULT_STROKE, 0);
      scatterRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, logAxis0, categoryMarker0, defaultCaret0);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("({0}, {1}) = {2}", ringPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(4, 4, (double) scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, chartRenderingInfo0);
      LogAxis logAxis0 = new LogAxis();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      valueMarker0.setLabel("({0}, {1}) = {3} - {4}");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      scatterRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, logAxis0, valueMarker0, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("({0}, {1}) = {2}", ringPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(4, 4, (double) scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      LogAxis logAxis0 = new LogAxis();
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, logAxis0.DEFAULT_TICK_MARK_PAINT, logAxis0.DEFAULT_AXIS_LINE_STROKE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      scatterRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, logAxis0, valueMarker0, rectangle2D_Double0);
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      ValueMarker valueMarker0 = new ValueMarker((-1757.153190354), combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      scatterRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, numberAxis3D0, valueMarker0, rectangle2D_Double0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      ValueMarker valueMarker0 = new ValueMarker(0.05, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, scatterRenderer0.DEFAULT_OUTLINE_STROKE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, numberAxis3D0, valueMarker0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      MockDate mockDate0 = new MockDate((-2340), 10, (-1129));
      Week week0 = new Week(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("", week0, week0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.util.AbstractObjectList", combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 272);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, periodAxis0, valueMarker0, rectangle2D_Float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.39240928132E12) <= upper (1.392409281319E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("_|]jz! ))BDLO,M~*Ov", compassPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, 1.0F);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      IntervalMarker intervalMarker0 = new IntervalMarker((-7.73770436), 0.8);
      Rectangle2D rectangle2D0 = categoryAxis0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle((Rectangle2D) defaultCaret0);
      stackedBarRenderer3D0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, cyclicNumberAxis0, intervalMarker0, rectangle2D0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(788, 1, (double) 788, 12.0, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      double[][] doubleArray0 = new double[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("s6&|YM/67Rw");
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("s6&|YM/67Rw", stringArray0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, symbolAxis0, lineRenderer3D0);
      CategoryMarker categoryMarker0 = new CategoryMarker(10, extendedCategoryAxis0.DEFAULT_AXIS_LINE_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, categoryPlot0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE, 0);
      lineRenderer3D0.drawDomainMarker(graphics2D0, categoryPlot0, extendedCategoryAxis0, categoryMarker0, defaultCaret0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'stoe' argmgnt.");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(":");
      Rectangle rectangle0 = new Rectangle(10, 3489);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      // Undeclared exception!
      try { 
        scatterRenderer0.drawRangeLine((Graphics2D) null, combinedDomainCategoryPlot0, logarithmicAxis0, rectangle0, 1.0F, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0, "");
      statisticalBarRenderer0.drawRangeLine((Graphics2D) null, (CategoryPlot) null, cyclicNumberAxis0, (Rectangle2D) null, 2527.6847247, combinedDomainCategoryPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle(0, 0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle0, (-525.4), combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(10, 10);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      // Undeclared exception!
      try { 
        lineRenderer3D0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, rectangle0, 0, (Paint) null, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle rectangle0 = new Rectangle();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle0, 923.356283, stackedBarRenderer0.DEFAULT_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      double[][] doubleArray0 = new double[7][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = groupedStackedBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      Range range0 = levelRenderer0.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      NumberAxis numberAxis0 = new NumberAxis("DefaultIntervalCategoryDataset.getValue(): series index out of range.");
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, (CategoryAxis) null, numberAxis0, scatterRenderer0);
      assertTrue(categoryPlot0.canSelectByRegion());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("The 'data' array must contain two arrays with equal length.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1718.0716246, (double) ganttRenderer0.ZERO, 0.0, 2973.729530988505);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        ganttRenderer0.initialise((Graphics2D) null, rectangle2D_Double0, combinedDomainCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2412.37F, 0.0F, 0.0F, 0.0F);
      LogAxis logAxis0 = new LogAxis();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      BufferedImage bufferedImage0 = new BufferedImage(15, 10, 10);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Number[][] numberArray0 = new Number[12][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      lineRenderer3D0.initialise(graphics2D0, defaultCaret0, combinedDomainCategoryPlot0, defaultIntervalCategoryDataset0, (PlotRenderingInfo) null);
      assertEquals(12, lineRenderer3D0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("({0}, {1}) = {2}");
      boxAndWhiskerRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Paint paint0 = ganttRenderer0.getShadowPaint();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(3.0, (double) scatterRenderer0.ZERO, numberTickUnit0, 0.2, paint0, scatterRenderer0.DEFAULT_STROKE);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Layer layer0 = Layer.FOREGROUND;
      groupedStackedBarRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("*!!z`g>yVpw&c?U}X", "*!!z`g>yVpw&c?U}X", 252.0);
      Layer layer0 = Layer.BACKGROUND;
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      boolean boolean0 = scatterRenderer0.removeAnnotation(categoryTextAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      boxAndWhiskerRenderer0.setSeriesURLGenerator(56, (CategoryURLGenerator) standardCategoryURLGenerator0, false);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryURLGenerator categoryURLGenerator0 = lineRenderer3D0.getURLGenerator(10, 0, false);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      scatterRenderer0.setSeriesToolTipGenerator(1825, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
      assertEquals(1, scatterRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      ScatterRenderer scatterRenderer1 = (ScatterRenderer)scatterRenderer0.clone();
      assertFalse(scatterRenderer1.getAutoPopulateSeriesOutlineStroke());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) null, false);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      scatterRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, (CategoryDataset) null, 0, (-2803), false, 1504.3802, 1.0, true);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setSeriesURLGenerator(1, (CategoryURLGenerator) null);
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = scatterRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer3D0.getSeriesURLGenerator((-1));
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Not implemented.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Not implemented.");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState((PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        ganttRenderer0.createHotSpotShape((Graphics2D) null, rectangle2D_Double0, combinedDomainCategoryPlot0, extendedCategoryAxis0, numberAxis3D0, defaultBoxAndWhiskerCategoryDataset0, 10, (-3182), false, categoryItemRendererState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      ganttRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      GanttRenderer ganttRenderer1 = new GanttRenderer();
      boolean boolean0 = ganttRenderer0.equals(ganttRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("e[Pid");
      scatterRenderer0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      ScatterRenderer scatterRenderer1 = (ScatterRenderer)scatterRenderer0.clone();
      assertTrue(scatterRenderer1.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      int int0 = levelRenderer0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      lineAndShapeRenderer0.setSeriesToolTipGenerator(604, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      JFreeChart jFreeChart0 = new JFreeChart("XlG;!u:\u0001iG6vvOcwA", combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, 7, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      groupedStackedBarRenderer0.drawBackground(graphics2D0, combinedDomainCategoryPlot0, rectangle2D_Double0);
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = waterfallBarRenderer0.getSeriesItemLabelGenerator(10);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = scatterRenderer0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.removeAnnotations();
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getToolTipGenerator(503, 503, false);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawOutline((Graphics2D) null, categoryPlot0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.hashCode();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Rectangle rectangle0 = new Rectangle(2982, 685);
      LegendTitle legendTitle0 = new LegendTitle(boxAndWhiskerRenderer0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.getItemMiddle(0.2, ganttRenderer0.ZERO, defaultIntervalCategoryDataset0, (CategoryAxis) null, rectangle0, legendTitle0.DEFAULT_POSITION);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      int int0 = stackedBarRenderer3D0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      int int0 = ganttRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("+J1F#DE[Bsp");
      scatterRenderer0.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      ScatterRenderer scatterRenderer1 = (ScatterRenderer)scatterRenderer0.clone();
      assertEquals(2.0, scatterRenderer1.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = lineRenderer3D0.getLegendItemLabelGenerator();
      assertNotNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = ganttRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setSeriesItemLabelGenerator(10, categoryItemLabelGenerator0);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
  }
}
