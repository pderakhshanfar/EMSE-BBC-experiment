/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 15:54:29 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.math.BigInteger;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.Format;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import javax.swing.JTable;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("Null 'annotation' argument.", "", "0/OH&8");
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, false);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, statisticalLineAndShapeRenderer0.DEFAULT_SHAPE, defaultCategoryDataset0, 4053, 1, true, 4053, (double) statisticalLineAndShapeRenderer0.ZERO);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4053, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      stackedAreaRenderer0.setSeriesItemLabelGenerator(0, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, (CategoryDataset) null, 0, 2513, false, 0, 0.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      JTable jTable0 = new JTable();
      Rectangle rectangle0 = jTable0.getCellRect(1, 2270, true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      int[] intArray0 = new int[1];
      Polygon polygon0 = new Polygon(intArray0, intArray0, 0);
      Rectangle rectangle1 = polygon0.getBounds();
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedAreaRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, rectangle1, categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      PeriodAxis periodAxis0 = new PeriodAxis(" out of bounds.");
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      Rectangle2D rectangle2D1 = plotRenderingInfo1.getDataArea();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LegendTitle legendTitle0 = new LegendTitle(stackedAreaRenderer0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicAnchor();
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedAreaRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D0, rectangle2D1, periodAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("", "", 0.01);
      Layer layer0 = Layer.FOREGROUND;
      minMaxCategoryRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      boolean boolean0 = minMaxCategoryRenderer0.removeAnnotation(categoryTextAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Rectangle rectangle0 = new Rectangle();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Format.Field> arrayList0 = new ArrayList<Format.Field>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) 0, (Number) 2.0F, (Number) 1.0F, (Number) 0, (Number) 2.0F, (Number) 1.0F, (Number) 0.2, (Number) 0.05, (List) arrayList0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) 2.0F, (Comparable) 2.0F);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      stackedAreaRenderer0.addEntity(standardEntityCollection0, rectangle0, defaultBoxAndWhiskerCategoryDataset0, 0, 0, true, (-2491.9373), 0.0);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(766.8315637892, (double) statisticalLineAndShapeRenderer0.ZERO);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 25, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(0.0F, (-3041.0F), (-3458.7861F), 1.0F, (-3.0F), 1.0F);
      Rectangle2D rectangle2D0 = roundRectangle2D_Float0.getBounds2D();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 5, (-1866), 500, 38, 192, 1521, false, true, false, true, false, true, false);
      Stroke stroke0 = chartPanel0.getSelectionOutlineStroke();
      scatterRenderer0.drawRangeLine(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, rectangle2D0, 0.0F, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT, stroke0);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("nbCYk|hAZ}3=yE[o", lineAndShapeRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeCategoryPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 10, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      stackedAreaRenderer0.drawOutline(graphics2D0, combinedRangeCategoryPlot0, rectangle2D0);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, (ValueAxis) null, minMaxCategoryRenderer0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      stackedAreaRenderer0.drawDomainLine(graphics2D0, categoryPlot0, rectangle2D0, 0.0, categoryAxis0.DEFAULT_TICK_MARK_PAINT, categoryPlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", ganttRenderer0.DEFAULT_VALUE_LABEL_FONT, categoryPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(22, 2462);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      ganttRenderer0.drawBackground(graphics2D0, categoryPlot0, rectangle0);
      assertEquals(1, ganttRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.addValue((Number) 0, (Comparable) 0, (Comparable) statisticalLineAndShapeRenderer0.ZERO);
      statisticalLineAndShapeRenderer0.addEntity(standardEntityCollection0, rectangle0, defaultCategoryDataset0, 0, 0, true);
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("PNG_Image_Files", 0.2, 1324.0);
      levelRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertFalse(levelRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, (ValueAxis) null, statisticalLineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 1024, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      categoryStepRenderer0.initialise(graphics2D0, (Rectangle2D) null, categoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getSeriesURLGenerator(964);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("({0}, {1}) = {2}", numberFormat0);
      statisticalLineAndShapeRenderer0.setSeriesItemLabelGenerator(26, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getSeriesItemLabelGenerator(26);
      assertSame(categoryItemLabelGenerator0, intervalCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      int int0 = categoryStepRenderer0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ValueAxis valueAxis0 = categoryStepRenderer0.getRangeAxis(categoryPlot0, 2);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-5398.527));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis3D0, cyclicNumberAxis0, stackedAreaRenderer0);
      cyclicNumberAxis0.setTickMarksVisible(false);
      ValueAxis valueAxis0 = stackedAreaRenderer0.getRangeAxis(categoryPlot0, 13);
      assertEquals(2.0F, valueAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("C2lMp0pCo2", stringArray0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, subCategoryAxis0, symbolAxis0, categoryStepRenderer0);
      ValueAxis valueAxis0 = categoryStepRenderer0.getRangeAxis(categoryPlot0, 0);
      assertFalse(valueAxis0.isPositiveArrowVisible());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("laelisible");
      DateAxis dateAxis0 = new DateAxis("");
      dateAxis0.setMinorTickMarkInsideLength(110);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, subCategoryAxis0, dateAxis0, levelRenderer0);
      ValueAxis valueAxis0 = categoryStepRenderer0.getRangeAxis(categoryPlot0, 2);
      assertNotNull(valueAxis0);
      assertEquals(0.0, valueAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 2);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      ValueAxis valueAxis0 = stackedAreaRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 1);
      assertEquals(0.05, valueAxis0.getUpperMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = areaRenderer0.getPlot();
      assertNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      defaultCategoryItemRenderer0.setPlot(categoryPlot0);
      CategoryPlot categoryPlot1 = defaultCategoryItemRenderer0.getPlot();
      assertEquals(1.0F, categoryPlot1.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = areaRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = minMaxCategoryRenderer0.getLegendItemLabelGenerator();
      assertNotNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis categoryAxis0 = lineAndShapeRenderer0.getDomainAxis(combinedRangeCategoryPlot0, (CategoryDataset) null);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, (ValueAxis) null, minMaxCategoryRenderer0);
      CategoryAxis categoryAxis1 = minMaxCategoryRenderer0.getDomainAxis(categoryPlot0, defaultIntervalCategoryDataset0);
      assertNull(categoryAxis1.getLabel());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator)statisticalLineAndShapeRenderer0.getBaseToolTipGenerator();
      assertEquals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", boxAndWhiskerToolTipGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getBaseItemLabelGenerator();
      assertSame(categoryItemLabelGenerator0, intervalCategoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 3.0;
      numberArray1[1] = (Number) 12.0;
      numberArray0[0] = numberArray1;
      numberArray0[1] = numberArray0[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Range range0 = areaRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(3.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) stackedAreaRenderer0.ZERO;
      numberArray0[1] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = stackedAreaRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[1];
      Float float0 = new Float((-422.56726));
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Range range0 = areaRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals((-422.5672607421875), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Number[][] numberArray0 = new Number[16][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = stackedAreaRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[6];
      BigInteger bigInteger0 = BigInteger.TEN;
      numberArray1[0] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(10.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[1];
      Float float0 = new Float((-422.56726));
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0);
      Range range0 = stackedBarRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals((-211.28363037109375), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      boolean boolean0 = stackedBarRenderer3D0.equals(stackedBarRenderer3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      boolean boolean0 = minMaxCategoryRenderer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      // Undeclared exception!
      try { 
        areaRenderer0.setSeriesURLGenerator((-95), (CategoryURLGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-2233.846624649288), (-3798.09246425));
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesURLGenerator((-1920), (CategoryURLGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setSeriesToolTipGenerator((-317), (CategoryToolTipGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.setSeriesToolTipGenerator((-444), (CategoryToolTipGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.setSeriesItemLabelGenerator((-1800), (CategoryItemLabelGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Locale locale0 = new Locale("");
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0, locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("", dateFormat0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.setSeriesItemLabelGenerator(Integer.MAX_VALUE, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0, false);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesItemLabelGenerator((-2390), (CategoryItemLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Rectangle rectangle0 = new Rectangle(26, 26);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 1, (-622));
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        scatterRenderer0.initialise((Graphics2D) null, rectangle0, (CategoryPlot) null, slidingCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("2My5\"`O4!tGWc  ");
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = stackedAreaRenderer0.createState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.hitTest(2.0F, 0.0, (Graphics2D) null, defaultCaret0, combinedRangeCategoryPlot0, subCategoryAxis0, (ValueAxis) null, (CategoryDataset) null, 212, 921, false, categoryItemRendererState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("R#t7!mLB:}", combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2162);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DateAxis dateAxis0 = new DateAxis("R#t7!mLB:}");
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = stackedAreaRenderer0.initialise(graphics2D0, defaultCaret0, combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.hitTest(1.0F, 0.0, graphics2D0, defaultCaret0, combinedRangeCategoryPlot0, categoryAxis0, dateAxis0, defaultIntervalCategoryDataset0, 30, 500, true, categoryItemRendererState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 500
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.getRangeAxis((CategoryPlot) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Jonathan Nash");
      Rectangle rectangle0 = new Rectangle();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(192);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.getItemMiddle(true, 0, (CategoryDataset) null, extendedCategoryAxis0, rectangle0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 20, 20);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, (-4404), 20);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RectangleEdge rectangleEdge0 = categoryPlot0.getRangeAxisEdge((-4404));
      // Undeclared exception!
      try { 
        barRenderer0.getItemMiddle(defaultPolarItemRenderer0.ZERO, defaultPolarItemRenderer0.ZERO, slidingCategoryDataset0, (CategoryAxis) null, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        areaRenderer0.getDomainAxis((CategoryPlot) null, defaultMultiValueCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (String) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.getDomainAxis(combinedRangeCategoryPlot0, defaultKeyedValues2DDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      // Undeclared exception!
      try { 
        areaRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Format.Field> arrayList0 = new ArrayList<Format.Field>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) 0, (Number) 2.0F, (Number) 1.0F, (Number) 0, (Number) 2.0F, (Number) 1.0F, (Number) 0.2, (Number) 0.05, (List) arrayList0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) 2.0F, (Comparable) 2.0F);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2.0) <= upper (1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Number[][] numberArray0 = new Number[9][6];
      Number[] numberArray1 = new Number[9];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        areaRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, 0.0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("LD\"|BO5tj$@U", combinedRangeCategoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(625, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        scatterRenderer0.drawRangeLine(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, defaultCaret0, 0.05, jFreeChart0.DEFAULT_BACKGROUND_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Week week0 = new Week(30, 121);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(121, "");
      Locale locale0 = Locale.JAPANESE;
      PeriodAxis periodAxis0 = new PeriodAxis((String) null, week0, week0, simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        scatterRenderer0.drawRangeLine((Graphics2D) null, categoryPlot0, periodAxis0, defaultCaret0, 10, categoryPlot0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.39240928132E12) <= upper (1.392409281319E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(26, 26);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawDomainMarker((Graphics2D) null, combinedRangeCategoryPlot0, extendedCategoryAxis0, categoryMarker0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(5690, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-5245.872863), 0.5F);
      // Undeclared exception!
      try { 
        scatterRenderer0.drawAnnotations(graphics2D0, defaultCaret0, extendedCategoryAxis0, cyclicNumberAxis0, (Layer) null, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis3D0, cyclicNumberAxis0, stackedAreaRenderer0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.createHotSpotBounds(graphics2D0, (Rectangle2D) null, categoryPlot0, categoryAxis3D0, cyclicNumberAxis0, defaultKeyedValues2DDataset0, 500, 2, false, (CategoryItemRendererState) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Rectangle rectangle0 = new Rectangle();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Format.Field> arrayList0 = new ArrayList<Format.Field>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) 0, (Number) 2.0F, (Number) 1.0F, (Number) 0, (Number) 2.0F, (Number) 1.0F, (Number) 0.2, (Number) 0.05, (List) arrayList0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) 2.0F, (Comparable) 2.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      GeneralPath generalPath0 = new GeneralPath(rectangle0);
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5613.00313, "");
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis3D0, cyclicNumberAxis0, defaultBoxAndWhiskerCategoryDataset0, (-13), 0, true, categoryItemRendererState0, rectangle2D0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("nbCYk|hAZ}3=yE[o", lineAndShapeRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeCategoryPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 10, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, categoryAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D_Double0, point2D_Double0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-211), (-1076));
      // Undeclared exception!
      try { 
        lineRenderer3D0.addEntity(standardEntityCollection0, line2D_Double0, slidingCategoryDataset0, 1380, 1518, true, (-211), 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Number[][] numberArray0 = new Number[3][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, levelRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, (-3049), 995, true, 1534.752582461032, 1534.752582461032);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("eLtk;q&");
      MockDate mockDate0 = new MockDate(11, 11, 11, 4, 10);
      Minute minute0 = new Minute(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("j36", minute0, minute0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, subCategoryAxis0, periodAxis0, stackedAreaRenderer0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity((EntityCollection) null, categoryPlot0.DEFAULT_LEGEND_ITEM_BOX, defaultKeyedValues2DDataset0, (-2210), 11, false, 0.0, (-792.630250782));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) lineAndShapeRenderer0.ZERO, (double) lineAndShapeRenderer0.ZERO);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.addEntity(standardEntityCollection0, stackedBarRenderer3D0.DEFAULT_SHAPE, taskSeriesCollection0, 25, (-276), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 25, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.addEntity(standardEntityCollection0, levelRenderer0.DEFAULT_SHAPE, taskSeriesCollection0, (-276), 3575, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(1.0F, (-2215.0), false, (double) areaRenderer0.ZERO, areaRenderer0.DEFAULT_VALUE_LABEL_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE);
      // Undeclared exception!
      try { 
        areaRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setSeriesURLGenerator(4, (CategoryURLGenerator) null, true);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CategoryURLGenerator categoryURLGenerator0 = stackedAreaRenderer0.getURLGenerator(1068, 0, true);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("", dateFormat0);
      lineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("S", numberFormat0);
      stackedAreaRenderer0.setSeriesToolTipGenerator(13, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, true);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = areaRenderer0.getToolTipGenerator(274, 274, false);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      Locale locale0 = Locale.CANADA;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("Null 'paint' argument.", numberFormat0);
      lineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      categoryStepRenderer0.setSeriesItemLabelGenerator(4434, (CategoryItemLabelGenerator) null, true);
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = areaRenderer0.getSeriesToolTipGenerator(1852);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(stackedAreaRenderer0.DEFAULT_PAINT, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_PAINT, stackedAreaRenderer0.DEFAULT_PAINT);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("6.=IgY");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, 269.99933893659863);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = waterfallBarRenderer0.createState(plotRenderingInfo0);
      boolean boolean0 = waterfallBarRenderer0.hitTest(0, 0.0, (Graphics2D) null, defaultCaret0, (CategoryPlot) null, subCategoryAxis0, cyclicNumberAxis0, (CategoryDataset) null, 0, (-3475), true, categoryItemRendererState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Rectangle rectangle0 = new Rectangle();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Format.Field> arrayList0 = new ArrayList<Format.Field>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) 0, (Number) 2.0F, (Number) 1.0F, (Number) 0, (Number) 2.0F, (Number) 1.0F, (Number) 0.2, (Number) 0.05, (List) arrayList0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) 2.0F, (Comparable) 2.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      GeneralPath generalPath0 = new GeneralPath(rectangle0);
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5613.00313, "");
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis3D0, cyclicNumberAxis0, defaultBoxAndWhiskerCategoryDataset0, 0, 0, true, categoryItemRendererState0, rectangle2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryItemRendererState categoryItemRendererState0 = stackedAreaRenderer0.initialise((Graphics2D) null, defaultCaret0, combinedRangeCategoryPlot0, defaultMultiValueCategoryDataset0, plotRenderingInfo0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ZOOM_DOMAIN_BOTH");
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.hitTest(143.06772, 1024, (Graphics2D) null, defaultCaret0, combinedRangeCategoryPlot0, subCategoryAxis0, (ValueAxis) null, defaultMultiValueCategoryDataset0, 10, 0, true, categoryItemRendererState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Eric Thomas");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      Dimension dimension0 = new Dimension(300, 10);
      Rectangle rectangle0 = new Rectangle(dimension0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Eric Thomas");
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.createHotSpotBounds((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, categoryAxis3D0, logarithmicAxis0, defaultStatisticalCategoryDataset0, 15, 300, true, categoryItemRendererState0, rectangle0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 300, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("Null 'annotation' argument.", "", "0/OH&8");
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("6");
      PeriodAxis periodAxis0 = new PeriodAxis("6");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, subCategoryAxis0, periodAxis0, stackedAreaRenderer0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultKeyedValues2DDataset0, 46, 46, true, 46, 1.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("eLtk;q&");
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
      MockDate mockDate0 = new MockDate(11, 11, 11, 4, 10);
      Minute minute0 = new Minute(mockDate0);
      PeriodAxis periodAxis0 = new PeriodAxis("j36", minute0, minute0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, subCategoryAxis0, periodAxis0, stackedAreaRenderer0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultKeyedValues2DDataset0, 8, 4, true, 8, (-854.8387921586979));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.addEntity(standardEntityCollection0, (Shape) null, taskSeriesCollection0, (-276), 81, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Number[][] numberArray0 = new Number[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.addEntity((EntityCollection) null, stackedAreaRenderer0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 0, 4, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItemCollection legendItemCollection0 = minMaxCategoryRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Number[][] numberArray0 = new Number[4][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("bhnB");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1000.0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, cyclicNumberAxis0, stackedAreaRenderer0);
      ValueAxis valueAxis0 = stackedAreaRenderer0.getRangeAxis(categoryPlot0, 500);
      assertTrue(valueAxis0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("PH%dS@txMlphe&\"");
      areaRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      try { 
        areaRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      areaRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      AreaRenderer areaRenderer1 = (AreaRenderer)areaRenderer0.clone();
      assertEquals(2.0, areaRenderer1.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      Layer layer0 = Layer.FOREGROUND;
      scatterRenderer0.drawAnnotations((Graphics2D) null, (Rectangle2D) null, categoryAxis3D0, cyclicNumberAxis0, layer0, plotRenderingInfo0);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Rectangle rectangle0 = new Rectangle(26, 26);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Eric Thomas");
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      scatterRenderer0.drawAnnotations((Graphics2D) null, rectangle0, extendedCategoryAxis0, logarithmicAxis0, layer0, plotRenderingInfo0);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 0, 0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      stackedAreaRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, slidingCategoryDataset0, 0, 35, true, (double) stackedAreaRenderer0.ZERO, (double) stackedAreaRenderer0.ZERO, false);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("}o`OBK43Jt*tu*G&vp");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis3D0, valueAxis0, stackedAreaRenderer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      stackedAreaRenderer0.updateCrosshairValues(categoryCrosshairState0, 2, cyclicNumberAxis0.DEFAULT_TICK_UNIT, 5071.053513852, 1, (-2060.628567), 0.05, plotOrientation0);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0F);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.updateCrosshairValues(categoryCrosshairState0, 0.05, false, 899.4939415839144, 10, 1.0F, (-1305.981), plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.updateCrosshairValues(categoryCrosshairState0, (Comparable) null, true, 0.0, 7, 0.05, (-1636.914), (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      levelRenderer0.updateCrosshairValues((CategoryCrosshairState) null, 10, 10, 1.0F, 10, (double) scatterRenderer0.ZERO, 1.0F, plotOrientation0);
      assertFalse(scatterRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setRenderer(680, (CategoryItemRenderer) scatterRenderer0, true);
      DrawingSupplier drawingSupplier0 = scatterRenderer0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      StackedBarRenderer3D stackedBarRenderer3D1 = new StackedBarRenderer3D();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(3.0, (-760.2), 12.0, 0.2, stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_PAINT, stackedBarRenderer3D0.DEFAULT_STROKE);
      assertTrue(stackedBarRenderer3D0.equals((Object)stackedBarRenderer3D1));
      
      Layer layer0 = Layer.FOREGROUND;
      stackedBarRenderer3D1.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      boolean boolean0 = stackedBarRenderer3D0.equals(stackedBarRenderer3D1);
      assertFalse(stackedBarRenderer3D1.equals((Object)stackedBarRenderer3D0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      StackedBarRenderer3D stackedBarRenderer3D1 = (StackedBarRenderer3D)stackedBarRenderer3D0.clone();
      assertTrue(stackedBarRenderer3D1.equals((Object)stackedBarRenderer3D0));
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = (StandardCategorySeriesLabelGenerator)statisticalBarRenderer0.getLegendItemLabelGenerator();
      stackedBarRenderer3D1.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      boolean boolean0 = stackedBarRenderer3D0.equals(stackedBarRenderer3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      StackedBarRenderer3D stackedBarRenderer3D1 = new StackedBarRenderer3D();
      assertTrue(stackedBarRenderer3D1.equals((Object)stackedBarRenderer3D0));
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("java.lang.Double");
      stackedBarRenderer3D1.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      boolean boolean0 = stackedBarRenderer3D0.equals(stackedBarRenderer3D1);
      assertFalse(stackedBarRenderer3D1.equals((Object)stackedBarRenderer3D0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      StackedBarRenderer3D stackedBarRenderer3D1 = (StackedBarRenderer3D)stackedBarRenderer3D0.clone();
      assertTrue(stackedBarRenderer3D1.equals((Object)stackedBarRenderer3D0));
      
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      stackedBarRenderer3D1.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
      boolean boolean0 = stackedBarRenderer3D0.equals(stackedBarRenderer3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      StackedBarRenderer3D stackedBarRenderer3D1 = (StackedBarRenderer3D)stackedBarRenderer3D0.clone();
      assertTrue(stackedBarRenderer3D1.equals((Object)stackedBarRenderer3D0));
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      stackedBarRenderer3D1.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      boolean boolean0 = stackedBarRenderer3D0.equals(stackedBarRenderer3D1);
      assertFalse(stackedBarRenderer3D1.equals((Object)stackedBarRenderer3D0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      stackedBarRenderer3D0.setSeriesItemLabelGenerator(14, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      StackedBarRenderer3D stackedBarRenderer3D1 = new StackedBarRenderer3D();
      boolean boolean0 = stackedBarRenderer3D0.equals(stackedBarRenderer3D1);
      assertTrue(stackedBarRenderer3D1.equals((Object)stackedBarRenderer3D0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      Object object0 = stackedBarRenderer3D0.clone();
      boolean boolean0 = stackedBarRenderer3D0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem((-4150), 1574);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, (ValueAxis) null, minMaxCategoryRenderer0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getLegendItem((-58), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, defaultCaret0, defaultCaret0, extendedCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(" out af bounds.");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(10, 2673.246517);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, logarithmicAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedAreaRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle2D0, combinedRangeCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      JTable jTable0 = new JTable();
      Rectangle rectangle0 = jTable0.getCellRect((-21), (-21), true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedAreaRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle0, categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
      assertEquals(0.0, point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(5.0E11);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      Rectangle2D rectangle2D0 = stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_FONT.getStringBounds("Z Tg'a:jO#E7+;r8C*$", fontRenderContext0);
      LogAxis logAxis0 = new LogAxis();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle2D0, rectangle2D0, logAxis0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(26, 26);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Eric Thomas");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 15, lineRenderer3D0.DEFAULT_VALUE_LABEL_PAINT);
      // Undeclared exception!
      try { 
        lineRenderer3D0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, logarithmicAxis0, intervalMarker0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("nbCYk|hAZ}3=yE[o", lineAndShapeRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeCategoryPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 10, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) lineAndShapeRenderer0.ZERO, "QhETlm");
      CategoryMarker categoryMarker0 = new CategoryMarker(lineAndShapeRenderer0.ZERO, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE);
      stackedAreaRenderer0.drawRangeMarker(graphics2D0, combinedRangeCategoryPlot0, (ValueAxis) null, categoryMarker0, (Rectangle2D) null);
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(" out of bounds.");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      ValueMarker valueMarker0 = new ValueMarker(0.0, logarithmicAxis0.DEFAULT_TICK_LABEL_PAINT, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, logarithmicAxis0, valueMarker0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      ValueMarker valueMarker0 = new ValueMarker((-3290.96), categoryAxis3D0.DEFAULT_TICK_LABEL_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE);
      PeriodAxis periodAxis0 = new PeriodAxis("Base item URL generator not cloneable.");
      stackedAreaRenderer0.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, periodAxis0, valueMarker0, rectangle2D0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Rectangle rectangle0 = new Rectangle(26, 26);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0F, 0.0F, scatterRenderer0.DEFAULT_OUTLINE_PAINT);
      lineRenderer3D0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, logarithmicAxis0, intervalMarker0, rectangle0);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CategoryMarker categoryMarker0 = new CategoryMarker(0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis("9*6jv");
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, 0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, cyclicNumberAxis0, scatterRenderer0);
      scatterRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, categoryAxis0, categoryMarker0, defaultCaret0);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Rectangle rectangle0 = new Rectangle(26, 26);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      scatterRenderer0.drawRangeLine((Graphics2D) null, (CategoryPlot) null, valueAxis0, rectangle0, 1948.2599330872, extendedCategoryAxis0.DEFAULT_AXIS_LABEL_PAINT, extendedCategoryAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JTable jTable0 = new JTable(1, 2270);
      Rectangle rectangle0 = jTable0.getCellRect(1, 2270, true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DateAxis dateAxis0 = new DateAxis((String) null);
      Color color0 = (Color)TextFragment.DEFAULT_PAINT;
      // Undeclared exception!
      try { 
        scatterRenderer0.drawRangeLine((Graphics2D) null, combinedDomainCategoryPlot0, dateAxis0, rectangle0, 0, color0, scatterRenderer0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(" out of bounds.");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D0, 500, logarithmicAxis0.DEFAULT_AXIS_LABEL_PAINT, logarithmicAxis0.DEFAULT_AXIS_LINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      Paint paint0 = xYBoxAndWhiskerRenderer0.getBoxPaint();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle0, (-3616.382569955729), paint0, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Rectangle rectangle0 = new Rectangle();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, rectangle0, 2564, (Paint) null, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Number[][] numberArray0 = new Number[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = stackedAreaRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = stackedAreaRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) null, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      JTable jTable0 = new JTable(1, 1);
      Rectangle rectangle0 = jTable0.getCellRect((-741), 281, true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      CategoryItemRendererState categoryItemRendererState0 = areaRenderer0.initialise((Graphics2D) null, rectangle0, combinedDomainCategoryPlot0, jDBCCategoryDataset0, (PlotRenderingInfo) null);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("faVRJXl]q1tSR", stackedBarRenderer3D0.DEFAULT_VALUE_LABEL_FONT, combinedDomainCategoryPlot0, false);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
      CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.initialise((Graphics2D) null, rectangle2D0, combinedDomainCategoryPlot0, (CategoryDataset) null, (PlotRenderingInfo) null);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0, levelRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      JTable jTable0 = new JTable(1, 2291);
      Rectangle rectangle0 = jTable0.getCellRect(1, 2291, true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Stack<GroupedStackedBarRenderer> stack0 = new Stack<GroupedStackedBarRenderer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(2.0F, 1.0F, 0, 12.0, combinedDomainCategoryPlot0.ZERO, 0.05, (Number) null, 0, stack0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit((-870.4123257));
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) numberTickUnit0, (Comparable) true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        areaRenderer0.initialise((Graphics2D) null, rectangle0, combinedDomainCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("o~~)48", 0.2, (double) levelRenderer0.ZERO);
      Layer layer0 = Layer.BACKGROUND;
      scatterRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      stackedBarRenderer3D0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, false);
      try { 
        stackedBarRenderer3D0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setSeriesURLGenerator(200, (CategoryURLGenerator) null, false);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      statisticalLineAndShapeRenderer0.setSeriesURLGenerator(12, (CategoryURLGenerator) standardCategoryURLGenerator0);
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getURLGenerator(12, (-1640), false);
      assertSame(categoryURLGenerator0, standardCategoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      Locale locale0 = Locale.TAIWAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(2, locale0);
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator("ZL,=\".sG;,*", dateFormat0);
      stackedBarRenderer3D0.setSeriesToolTipGenerator(2, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0, false);
      StackedBarRenderer3D stackedBarRenderer3D1 = new StackedBarRenderer3D();
      boolean boolean0 = stackedBarRenderer3D0.equals(stackedBarRenderer3D1);
      assertFalse(boolean0);
      assertTrue(stackedBarRenderer3D1.equals((Object)stackedBarRenderer3D0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      Locale locale0 = Locale.CANADA;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("Null 'paint' argument.", numberFormat0);
      lineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = minMaxCategoryRenderer0.getItemLabelGenerator(0, 0, false);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      minMaxCategoryRenderer0.setSeriesItemLabelGenerator(960, categoryItemLabelGenerator0, false);
      CategoryItemLabelGenerator categoryItemLabelGenerator1 = minMaxCategoryRenderer0.getItemLabelGenerator(960, 960, false);
      assertSame(categoryItemLabelGenerator1, categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("v&e@!ATw");
      stackedBarRenderer3D0.setSeriesURLGenerator(1, (CategoryURLGenerator) standardCategoryURLGenerator0);
      StackedBarRenderer3D stackedBarRenderer3D1 = new StackedBarRenderer3D();
      boolean boolean0 = stackedBarRenderer3D0.equals(stackedBarRenderer3D1);
      assertTrue(stackedBarRenderer3D1.equals((Object)stackedBarRenderer3D0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis("_,:");
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.createHotSpotShape((Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, categoryAxis0, (ValueAxis) null, defaultStatisticalCategoryDataset0, 0, 0, false, (CategoryItemRendererState) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertTrue(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      lineRenderer3D0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      Object object0 = lineRenderer3D0.clone();
      assertTrue(object0.equals((Object)lineRenderer3D0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JTable jTable0 = new JTable();
      Rectangle rectangle0 = jTable0.getCellRect((-21), 2270, true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        levelRenderer0.calculateBarW0(combinedDomainCategoryPlot0, plotOrientation0, rectangle0, categoryAxis3D0, categoryItemRendererState0, 2270, 827);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: 827
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("5erPPH]AVc", dateFormat0);
      stackedAreaRenderer0.setSeriesToolTipGenerator(10, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator1 = (IntervalCategoryToolTipGenerator)stackedAreaRenderer0.getToolTipGenerator(10, (-802), false);
      assertEquals("5erPPH]AVc", intervalCategoryToolTipGenerator1.getLabelFormat());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      statisticalLineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertTrue(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.drawBackground((Graphics2D) null, (CategoryPlot) null, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0, false);
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = stackedBarRenderer3D0.getSeriesItemLabelGenerator((-2390));
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer3D0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.removeAnnotations();
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      JTable jTable0 = new JTable();
      Rectangle rectangle0 = jTable0.getCellRect(1, 2270, true);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.drawOutline((Graphics2D) null, (CategoryPlot) null, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DrawingSupplier drawingSupplier0 = scatterRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.getItemMiddle((byte)0, (byte)0, defaultMultiValueCategoryDataset0, categoryAxis3D0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      int int0 = areaRenderer0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = minMaxCategoryRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer1 = (StatisticalLineAndShapeRenderer)statisticalLineAndShapeRenderer0.clone();
      assertTrue(statisticalLineAndShapeRenderer1.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds(jDBCCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(2, 2);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LevelRenderer levelRenderer0 = new LevelRenderer();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, rectangle0, combinedDomainCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalLineAndShapeRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }
}
