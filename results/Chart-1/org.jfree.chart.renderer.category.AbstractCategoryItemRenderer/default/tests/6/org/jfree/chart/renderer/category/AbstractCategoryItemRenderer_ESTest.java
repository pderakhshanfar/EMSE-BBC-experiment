/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 31 13:33:31 GMT 2021
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.math.RoundingMode;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.LinkedList;
import java.util.Locale;
import javax.swing.JLayeredPane;
import javax.swing.JSpinner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      assertEquals(0.0, categoryCrosshairState0.getCrosshairDistance(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairY(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getAnchorX(), 0.01);
      assertEquals(0, categoryCrosshairState0.getDomainAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getAnchorY(), 0.01);
      assertEquals(0, categoryCrosshairState0.getRangeAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getCrosshairX(), 0.01);
      assertEquals(0, categoryCrosshairState0.getDatasetIndex());
      assertNotNull(categoryCrosshairState0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(categoryAxis3D0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("']il");
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals("']il", periodAxis0.getLabel());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(periodAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, periodAxis0, lineRenderer3D0);
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals("']il", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(categoryPlot0);
      
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals("']il", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(plotOrientation0);
      
      lineRenderer3D0.updateCrosshairValues(categoryCrosshairState0, 1.0F, true, 1.0F, 10, 10, 2.0F, plotOrientation0);
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, categoryCrosshairState0.getCrosshairDistance(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairY(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getAnchorX(), 0.01);
      assertEquals(0, categoryCrosshairState0.getDomainAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getAnchorY(), 0.01);
      assertEquals(0, categoryCrosshairState0.getRangeAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getCrosshairX(), 0.01);
      assertEquals(0, categoryCrosshairState0.getDatasetIndex());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals("']il", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNotNull(stackedAreaRenderer0);
      
      LabelBlock labelBlock0 = new LabelBlock("({0}, {1}) = {3} - {4}", stackedAreaRenderer0.DEFAULT_VALUE_LABEL_FONT);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNotNull(labelBlock0);
      
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isNotify());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(categoryPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart("sojfa!`<s}43", categoryPlot0);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isNotify());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (-1.0), (-4630.085063592368), chartRenderingInfo0);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isNotify());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(bufferedImage0);
      
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isNotify());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(bufferedImageRenderingSource0);
      
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isNotify());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(graphics2D0);
      
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isNotify());
      assertFalse(fastScatterPlot0.isSubplot());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(fastScatterPlot0);
      
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isNotify());
      assertFalse(fastScatterPlot0.isSubplot());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(plotOrientation0);
      
      float[] floatArray0 = new float[7];
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isNotify());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(renderingHints0);
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isNotify());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(7, rescaleOp0.getNumFactors());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(rescaleOp0);
      
      Rectangle rectangle0 = (Rectangle)rescaleOp0.getBounds2D(bufferedImage0);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isNotify());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(7, rescaleOp0.getNumFactors());
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(5.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(10.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(5.0, rectangle0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle0.getMaxX(), 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, rectangle0.height);
      assertEquals(10, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(rectangle0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)fastScatterPlot0.DEFAULT_INSETS.createInsetRectangle((Rectangle2D) rectangle0, false, true);
      assertEquals(5.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(5.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isNotify());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isNotify());
      assertFalse(fastScatterPlot0.isSubplot());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(7, rescaleOp0.getNumFactors());
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(5.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(10.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(5.0, rectangle0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle0.getMaxX(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(4.0, rectangle2D_Double0.y, 0.01);
      assertEquals(2.0, rectangle2D_Double0.height, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, rectangle0.height);
      assertEquals(10, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(rectangle2D_Double0);
      
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      assertNotNull(lengthAdjustmentType0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedAreaRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle2D_Double0, rectangle0, fastScatterPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isNotify());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertTrue(fastScatterPlot0.isNotify());
      assertFalse(fastScatterPlot0.isSubplot());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(7, rescaleOp0.getNumFactors());
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(5.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(10.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(5.0, rectangle0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle0.getMaxX(), 0.01);
      assertEquals(5.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(4.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(5.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(6.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, rectangle0.height);
      assertEquals(10, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(10.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(4.0, rectangle2D_Double0.y, 0.01);
      assertEquals(2.0, rectangle2D_Double0.height, 0.01);
      assertEquals(5.0, point2D_Double0.y, 0.01);
      assertEquals(5.0, point2D_Double0.x, 0.01);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertNotNull(boxAndWhiskerRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertNotNull(spiderWebPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart("sAn+u%TT*Y", spiderWebPlot0);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 10, 1, chartRenderingInfo0);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(graphics2D0);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("sAn+u%TT*Y");
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals("sAn+u%TT*Y", subCategoryAxis0.getLabel());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(subCategoryAxis0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker((-1.0), (double) boxAndWhiskerRenderer0.ZERO, spiderWebPlot0.DEFAULT_LABEL_BACKGROUND_PAINT);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals((-1.0), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertNotNull(intervalMarker0);
      
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals((-1.0), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals("CONTRACT", lengthAdjustmentType0.toString());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertNotNull(lengthAdjustmentType0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      assertEquals("RectangleAnchor.BOTTOM", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertNotNull(rectangle2D_Double1);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)boxAndWhiskerRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle2D_Double0, rectangle2D_Double1, subCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertTrue(spiderWebPlot0.isNotify());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals("sAn+u%TT*Y", subCategoryAxis0.getLabel());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals((-1.0), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals("CONTRACT", lengthAdjustmentType0.toString());
      assertEquals("RectangleAnchor.BOTTOM", rectangleAnchor0.toString());
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals((-3.0), point2D_Double0.y, 0.01);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotNull(point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertNotNull(spiderWebPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart("sAn+u%TT*Y", spiderWebPlot0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 10, 1, chartRenderingInfo0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(graphics2D0);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, false, false);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertNotNull(chartPanel0);
      
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertNotNull(plotOrientation0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1024, 300, (-457.88486F), 1024);
      assertEquals(566.1151428222656, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(795.0575714111328, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(1324.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(300.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(1024.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(812.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals((-457.88486F), rectangle2D_Float0.width, 0.01F);
      assertEquals(1024.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1024.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(300.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getBaseSeriesVisible());
      assertNotNull(xYBlockRenderer0);
      
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer0.getBlockAnchor();
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)lineRenderer3D0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle2D_Double0, rectangle2D_Float0, spiderWebPlot0.DEFAULT_INSETS, (LengthAdjustmentType) null, rectangleAnchor0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertTrue(spiderWebPlot0.isNotify());
      assertTrue(spiderWebPlot0.isWebFilled());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertFalse(spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(566.1151428222656, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(795.0575714111328, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(1324.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(300.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(1024.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(812.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertTrue(xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01);
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertTrue(xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals((-457.88486F), rectangle2D_Float0.width, 0.01F);
      assertEquals(1024.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(1024.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(300.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(812.0, point2D_Double0.y, 0.01);
      assertEquals(795.0575714111328, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertNotNull(graphics2D0);
      
      PolarPlot polarPlot0 = new PolarPlot();
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isNotify());
      assertTrue(polarPlot0.isRangeZoomable());
      assertNull(polarPlot0.getNoDataMessage());
      assertFalse(polarPlot0.isSubplot());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(polarPlot0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(boxAndWhiskerRenderer0);
      
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(layeredBarRenderer0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'plot' argument.");
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals("Null 'plot' argument.", numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, (CategoryAxis) null, numberAxis3D0, boxAndWhiskerRenderer0);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals("Null 'plot' argument.", numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(categoryPlot0);
      
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 15, (-769), 10, 10, 2, 10, true, false, true, true, true, true, false);
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(10, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(10, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertNotNull(chartPanel0);
      
      Rectangle rectangle0 = chartPanel0.getBounds();
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(10, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(10, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      layeredBarRenderer0.drawDomainLine(graphics2D0, categoryPlot0, rectangle0, (-1216.43563784147), polarPlot0.DEFAULT_GRIDLINE_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(polarPlot0.isOutlineVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isNotify());
      assertTrue(polarPlot0.isRangeZoomable());
      assertNull(polarPlot0.getNoDataMessage());
      assertFalse(polarPlot0.isSubplot());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals("Null 'plot' argument.", numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(10, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(10, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(scatterRenderer0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 685, 1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(685, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(subCategoryAxis0);
      
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 1, 779, 1, 685, 485, (-2321), true, false, true, false, true, true, true);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(685, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(485, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals((-2321), chartPanel0.getMaximumDrawHeight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(1, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertNotNull(chartPanel0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartPanel0.getScreenDataArea();
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(685, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(485, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals((-2321), chartPanel0.getMaximumDrawHeight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(1, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(680);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(rectangleEdge0);
      
      // Undeclared exception!
      try { 
        scatterRenderer0.getItemMiddle(3.0, 3.0, slidingCategoryDataset0, subCategoryAxis0, rectangle2D_Double0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNotNull(stackedAreaRenderer0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertNotNull(candlestickRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)candlestickRenderer0.getBaseShape();
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      double[][] doubleArray0 = new double[3][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      stackedAreaRenderer0.addEntity(standardEntityCollection0, rectangle2D_Double0, defaultIntervalCategoryDataset0, 0, 1, false, Double.NEGATIVE_INFINITY, 0.0);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(1, standardEntityCollection0.getEntityCount());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(defaultCategoryItemRenderer0);
      
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      assertNotNull(customCategoryURLGenerator0);
      
      defaultCategoryItemRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, false);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      
      CustomCategoryURLGenerator customCategoryURLGenerator1 = (CustomCategoryURLGenerator)defaultCategoryItemRenderer0.getURLGenerator(0, 857, true);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, customCategoryURLGenerator1.getListCount());
      assertSame(customCategoryURLGenerator1, customCategoryURLGenerator0);
      assertNotNull(customCategoryURLGenerator1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      assertEquals(1, barRenderer0.getPassCount());
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0, barRenderer0.getColumnCount());
      assertTrue(barRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(barRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertTrue(barRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(barRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, barRenderer0.getRowCount());
      assertTrue(barRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(barRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, barRenderer0.getDefaultEntityRadius());
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertFalse(barRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(2.0, barRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertTrue(barRenderer0.getBaseCreateEntities());
      assertFalse(barRenderer0.isDrawBarOutline());
      assertFalse(barRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(barRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertTrue(barRenderer0.getDefaultShadowsVisible());
      assertTrue(barRenderer0.getAutoPopulateSeriesShape());
      assertTrue(barRenderer0.getShadowsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(barRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = barRenderer0.getSeriesToolTipGenerator(270);
      assertEquals(1, barRenderer0.getPassCount());
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0, barRenderer0.getColumnCount());
      assertTrue(barRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(barRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01);
      assertTrue(barRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(barRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, barRenderer0.getRowCount());
      assertTrue(barRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(barRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, barRenderer0.getDefaultEntityRadius());
      assertTrue(barRenderer0.getIncludeBaseInRange());
      assertFalse(barRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(2.0, barRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, barRenderer0.getBase(), 0.01);
      assertTrue(barRenderer0.getBaseCreateEntities());
      assertFalse(barRenderer0.isDrawBarOutline());
      assertFalse(barRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(barRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01);
      assertTrue(barRenderer0.getDefaultShadowsVisible());
      assertTrue(barRenderer0.getAutoPopulateSeriesShape());
      assertTrue(barRenderer0.getShadowsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(stackedBarRenderer0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = stackedBarRenderer0.getSeriesItemLabelGenerator(500);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(groupedStackedBarRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(categoryPlot0);
      
      ValueAxis valueAxis0 = groupedStackedBarRenderer0.getRangeAxis(categoryPlot0, (-185));
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(groupedStackedBarRenderer0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      NumberAxis numberAxis1 = (NumberAxis)groupedStackedBarRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 3);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, numberAxis1.getFixedDimension(), 0.01);
      assertNull(numberAxis1.getLabelToolTip());
      assertTrue(numberAxis1.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis1.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis1.getMinorTickCount());
      assertNull(numberAxis1.getLabelURL());
      assertEquals(0.0, numberAxis1.getLowerBound(), 0.01);
      assertFalse(numberAxis1.isMinorTickMarksVisible());
      assertFalse(numberAxis1.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis1.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis1.isAutoRange());
      assertTrue(numberAxis1.getAutoRangeStickyZero());
      assertNull(numberAxis1.getLabel());
      assertTrue(numberAxis1.isVisible());
      assertFalse(numberAxis1.isInverted());
      assertEquals(2.0F, numberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis1.isVerticalTickLabels());
      assertTrue(numberAxis1.isTickLabelsVisible());
      assertEquals(0.05, numberAxis1.getLowerMargin(), 0.01);
      assertTrue(numberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis1.getLabelAngle(), 0.01);
      assertEquals(100.0, numberAxis1.getUpperBound(), 0.01);
      assertFalse(numberAxis1.isAxisLineVisible());
      assertTrue(numberAxis1.isTickMarksVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertSame(numberAxis0, numberAxis1);
      assertSame(numberAxis1, numberAxis0);
      assertNotNull(numberAxis1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedAreaRenderer0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 20, 20);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(20, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(20, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis0);
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(groupedStackedBarRenderer0);
      
      LogAxis logAxis0 = new LogAxis();
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(logAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingGanttCategoryDataset0, categoryAxis0, logAxis0, stackedAreaRenderer0);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(20, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(20, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(categoryPlot0);
      
      LogAxis logAxis1 = (LogAxis)groupedStackedBarRenderer0.getRangeAxis(categoryPlot0, 20);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(20, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(20, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(0.0, logAxis1.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis1.isVerticalTickLabels());
      assertTrue(logAxis1.isTickLabelsVisible());
      assertEquals(1.258925411794167, logAxis1.getUpperBound(), 0.01);
      assertTrue(logAxis1.isVisible());
      assertTrue(logAxis1.isAxisLineVisible());
      assertEquals(0.0, logAxis1.getFixedDimension(), 0.01);
      assertTrue(logAxis1.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis1.getLabelURL());
      assertEquals(2.0F, logAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis1.getMinorTickCount());
      assertTrue(logAxis1.isTickMarksVisible());
      assertEquals(0.05, logAxis1.getUpperMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis1.getLowerBound(), 0.01);
      assertTrue(logAxis1.isAutoRange());
      assertFalse(logAxis1.isPositiveArrowVisible());
      assertEquals(0.05, logAxis1.getLowerMargin(), 0.01);
      assertFalse(logAxis1.isMinorTickMarksVisible());
      assertFalse(logAxis1.isNegativeArrowVisible());
      assertEquals(10.0, logAxis1.getBase(), 0.01);
      assertEquals(0.0, logAxis1.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(logAxis1.getLabel());
      assertFalse(logAxis1.isInverted());
      assertNull(logAxis1.getLabelToolTip());
      assertEquals(1.0E-8, logAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis1.getSmallestValue(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertSame(logAxis0, logAxis1);
      assertSame(logAxis1, logAxis0);
      assertNotNull(logAxis1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedAreaRenderer0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'paint' argument.");
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("Null 'paint' argument.", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(extendedCategoryAxis0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1131.5701312696));
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-1131.5701312696), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1131.5701312696), cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, extendedCategoryAxis0, cyclicNumberAxis0, stackedAreaRenderer0);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("Null 'paint' argument.", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-1131.5701312696), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(categoryPlot0);
      
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)stackedAreaRenderer0.getRangeAxis(categoryPlot0, 10);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("Null 'paint' argument.", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-1131.5701312696), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertNull(cyclicNumberAxis1.getLabel());
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis1.isInverted());
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis1.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis1.isVisible());
      assertEquals((-1131.5701312696), cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertSame(cyclicNumberAxis0, cyclicNumberAxis1);
      assertSame(cyclicNumberAxis1, cyclicNumberAxis0);
      assertNotNull(cyclicNumberAxis1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertNotNull(scatterRenderer0);
      
      CategoryPlot categoryPlot0 = scatterRenderer0.getPlot();
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(stackedAreaRenderer0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedAreaRenderer0.getLegendItemLabelGenerator();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(boxAndWhiskerRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      LinkedList<BarRenderer3D> linkedList0 = new LinkedList<BarRenderer3D>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(linkedList0, 0.5F, boxAndWhiskerRenderer0.ZERO);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, linkedList0.size());
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis("sAn+7u%T*Yt");
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals("sAn+7u%T*Yt", categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      double double0 = ganttRenderer0.getItemMiddle(0.0, 0.1, defaultMultiValueCategoryDataset0, categoryAxis0, rectangle2D_Double0, rectangleEdge0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals("sAn+7u%T*Yt", categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertNotNull(scatterRenderer0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("ItemLabelGenerator not cloneable.");
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("ItemLabelGenerator not cloneable#.", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("ItemLabelGenerator not cloneable#.", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-ItemLabelGenerator not cloneable", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("ItemLabelGenerator not cloneable", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertNotNull(decimalFormat0);
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("ItemLabelGenerator not cloneable.", decimalFormat0);
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("ItemLabelGenerator not cloneable#.", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("ItemLabelGenerator not cloneable#.", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-ItemLabelGenerator not cloneable", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("ItemLabelGenerator not cloneable", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("ItemLabelGenerator not cloneable.", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      scatterRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("ItemLabelGenerator not cloneable#.", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("ItemLabelGenerator not cloneable#.", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-ItemLabelGenerator not cloneable", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("ItemLabelGenerator not cloneable", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("ItemLabelGenerator not cloneable.", standardCategoryItemLabelGenerator0.getLabelFormat());
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator1 = (StandardCategoryItemLabelGenerator)scatterRenderer0.getItemLabelGenerator((-978), (-978), false);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals("ItemLabelGenerator not cloneable.", standardCategoryItemLabelGenerator1.getLabelFormat());
      assertSame(standardCategoryItemLabelGenerator1, standardCategoryItemLabelGenerator0);
      assertNotNull(standardCategoryItemLabelGenerator1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      DrawingSupplier drawingSupplier0 = statisticalLineAndShapeRenderer0.getDrawingSupplier();
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(ganttRenderer0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis("@cZH)b", stringArray0);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertFalse(symbolAxis0.isInverted());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertEquals("@cZH)b", symbolAxis0.getLabel());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(4, stringArray0.length);
      assertNotNull(symbolAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingGanttCategoryDataset0, (CategoryAxis) null, symbolAxis0, lineRenderer3D0);
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertFalse(symbolAxis0.isInverted());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(3.5, symbolAxis0.getUpperBound(), 0.01);
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals((-0.5), symbolAxis0.getLowerBound(), 0.01);
      assertEquals("@cZH)b", symbolAxis0.getLabel());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(4, stringArray0.length);
      assertNotNull(categoryPlot0);
      
      CategoryAxis categoryAxis0 = ganttRenderer0.getDomainAxis(categoryPlot0, slidingGanttCategoryDataset0);
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertFalse(symbolAxis0.isInverted());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(3.5, symbolAxis0.getUpperBound(), 0.01);
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals((-0.5), symbolAxis0.getLowerBound(), 0.01);
      assertEquals("@cZH)b", symbolAxis0.getLabel());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(4, stringArray0.length);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(layeredBarRenderer0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(categoryAxis0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("sfyb7uCU^&Z~;");
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals("sfyb7uCU^&Z~;", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis0, periodAxis0, statisticalBarRenderer0);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals("sfyb7uCU^&Z~;", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(categoryPlot0);
      
      CategoryAxis categoryAxis1 = layeredBarRenderer0.getDomainAxis(categoryPlot0, defaultStatisticalCategoryDataset0);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals("sfyb7uCU^&Z~;", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryAxis1.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis1.getFixedDimension(), 0.01);
      assertTrue(categoryAxis1.isVisible());
      assertEquals(1, categoryAxis1.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis1.getLabel());
      assertTrue(categoryAxis1.isTickLabelsVisible());
      assertNull(categoryAxis1.getLabelToolTip());
      assertTrue(categoryAxis1.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis1.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis1.getCategoryMargin(), 0.01);
      assertFalse(categoryAxis1.isMinorTickMarksVisible());
      assertEquals(0.05, categoryAxis1.getLowerMargin(), 0.01);
      assertTrue(categoryAxis1.isTickMarksVisible());
      assertEquals(0.05, categoryAxis1.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis1.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis1.getLabelURL());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertSame(categoryAxis0, categoryAxis1);
      assertSame(categoryAxis1, categoryAxis0);
      assertNotNull(categoryAxis1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(false, false);
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertNotNull(lineAndShapeRenderer0);
      
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      assertNotNull(customCategoryURLGenerator0);
      
      lineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      
      CustomCategoryURLGenerator customCategoryURLGenerator1 = (CustomCategoryURLGenerator)lineAndShapeRenderer0.getBaseURLGenerator();
      assertFalse(lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertFalse(lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertFalse(lineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(lineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(lineAndShapeRenderer0.getDrawOutlines());
      assertFalse(lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, customCategoryURLGenerator1.getListCount());
      assertSame(customCategoryURLGenerator1, customCategoryURLGenerator0);
      assertNotNull(customCategoryURLGenerator1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNotNull(stackedAreaRenderer0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator1 = (IntervalCategoryToolTipGenerator)stackedAreaRenderer0.getBaseToolTipGenerator();
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator1.getLabelFormat());
      assertSame(intervalCategoryToolTipGenerator1, intervalCategoryToolTipGenerator0);
      assertNotNull(intervalCategoryToolTipGenerator1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertNotNull(stackedAreaRenderer0);
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryItemLabelGenerator0);
      
      stackedAreaRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator1 = (IntervalCategoryItemLabelGenerator)stackedAreaRenderer0.getBaseItemLabelGenerator();
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator1.getLabelFormat());
      assertSame(intervalCategoryItemLabelGenerator1, intervalCategoryItemLabelGenerator0);
      assertNotNull(intervalCategoryItemLabelGenerator1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(groupedStackedBarRenderer0);
      
      Range range0 = groupedStackedBarRenderer0.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertNotNull(stackedAreaRenderer0);
      
      Number[][] numberArray0 = new Number[2][8];
      Number[] numberArray1 = new Number[3];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) stackedAreaRenderer0.ZERO;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = stackedAreaRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(200.0, range0.getLength(), 0.01);
      assertEquals(200.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, numberArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedAreaRenderer0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      double[][] doubleArray0 = new double[3][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_PAINT;
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(statisticalBarRenderer0.DEFAULT_VALUE_LABEL_PAINT, statisticalBarRenderer0.DEFAULT_VALUE_LABEL_PAINT, color0, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(waterfallBarRenderer0);
      
      Range range0 = waterfallBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNotNull(stackedAreaRenderer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue(154.745013, (Comparable) "({0}, {1}) = {3} - {4}", (Comparable) stackedAreaRenderer0.ZERO);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      Range range0 = ganttRenderer0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(154.745013, range0.getCentralValue(), 0.01);
      assertEquals(154.745013, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(154.745013, range0.getUpperBound(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) null);
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertNotNull(boxAndWhiskerRenderer0);
      
      double[][] doubleArray0 = new double[3][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(4.0, 4.0, true);
      assertEquals(4.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(4.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(stackedBarRenderer3D0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = stackedBarRenderer3D0.findRangeBounds(taskSeriesCollection0);
      assertEquals(4.0, stackedBarRenderer3D0.getXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(4.0, stackedBarRenderer3D0.getYOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertTrue(stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01);
      assertTrue(stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
      assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
      assertTrue(stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(12.0, BarRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, BarRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertNotNull(stackedAreaRenderer0);
      
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(boxAndWhiskerRenderer0);
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(groupedStackedBarRenderer0);
      
      boolean boolean0 = boxAndWhiskerRenderer0.equals(groupedStackedBarRenderer0);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getStagger());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNotNull(categoryStepRenderer0);
      
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getStagger());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1), categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNotNull(categoryItemRendererState0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(extendedCategoryAxis0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = statisticalBarRenderer0.createState(plotRenderingInfo0);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(categoryItemRendererState0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis3D0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D rectangle2D0 = statisticalBarRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, extendedCategoryAxis0, numberAxis3D0, defaultKeyedValues2DDataset0, 0, 10, false, categoryItemRendererState0, rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(stackedBarRenderer0);
      
      StackedBarRenderer stackedBarRenderer1 = (StackedBarRenderer)stackedBarRenderer0.clone();
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer1.getColumnCount());
      assertTrue(stackedBarRenderer1.getShadowsVisible());
      assertTrue(stackedBarRenderer1.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer1.getBaseSeriesVisibleInLegend());
      assertTrue(stackedBarRenderer1.getDefaultShadowsVisible());
      assertFalse(stackedBarRenderer1.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer1.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer1.getShadowYOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer1.getBase(), 0.01);
      assertFalse(stackedBarRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer1.getBaseItemLabelsVisible());
      assertEquals(3, stackedBarRenderer1.getPassCount());
      assertEquals(0.2, stackedBarRenderer1.getItemMargin(), 0.01);
      assertFalse(stackedBarRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedBarRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedBarRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedBarRenderer1.isDrawBarOutline());
      assertTrue(stackedBarRenderer1.getBaseCreateEntities());
      assertEquals(0, stackedBarRenderer1.getRowCount());
      assertEquals(1.0, stackedBarRenderer1.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, stackedBarRenderer1.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedBarRenderer1.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer1.getIncludeBaseInRange());
      assertTrue(stackedBarRenderer1.getBaseSeriesVisible());
      assertTrue(stackedBarRenderer1.equals((Object)stackedBarRenderer0));
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotSame(stackedBarRenderer0, stackedBarRenderer1);
      assertNotSame(stackedBarRenderer1, stackedBarRenderer0);
      assertNotNull(stackedBarRenderer1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(layeredBarRenderer0);
      
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      assertNotNull(standardCategoryURLGenerator0);
      
      // Undeclared exception!
      try { 
        layeredBarRenderer0.setSeriesURLGenerator((-1580), (CategoryURLGenerator) standardCategoryURLGenerator0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      // Undeclared exception!
      try { 
        lineRenderer3D0.setSeriesURLGenerator((-684), (CategoryURLGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedAreaRenderer0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getTimeInstance();
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("{2}", simpleDateFormat0);
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("{2}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.setSeriesToolTipGenerator((-1725), (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNotNull(stackedAreaRenderer0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.setSeriesToolTipGenerator((-925), (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(scatterRenderer0);
      
      // Undeclared exception!
      try { 
        scatterRenderer0.setSeriesItemLabelGenerator((-978), (CategoryItemLabelGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(layeredBarRenderer0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try { 
        layeredBarRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, defaultStatisticalCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 500);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(10, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(500, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, slidingGanttCategoryDataset0, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.hitTest(1.0F, (-4294.4621565521), (Graphics2D) null, rectangle2D_Float0, combinedDomainCategoryPlot0, categoryAxis3D0, (ValueAxis) null, defaultKeyedValues2DDataset0, 10, 10, true, (CategoryItemRendererState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(stackedAreaRenderer0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertNotNull(defaultCategoryItemRenderer0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis("({0}, {1}) = {2}");
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals("({0}, {1}) = {2}", categoryAxis0.getLabel());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(logarithmicAxis0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis0, logarithmicAxis0, stackedAreaRenderer0);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals("({0}, {1}) = {2}", categoryAxis0.getLabel());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(categoryPlot0);
      
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.hitTest(0.05, (-725.168948), (Graphics2D) null, (Rectangle2D) null, categoryPlot0, categoryAxis0, logarithmicAxis0, defaultKeyedValues2DDataset0, 2400, 10, false, (CategoryItemRendererState) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(layeredBarRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertFalse(categoryPlot0.isSubplot());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(categoryPlot0);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(",1{fv%bE(");
      assertTrue(subCategoryAxis0.isVisible());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(",1{fv%bE(", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(subCategoryAxis0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(",1{fv%bE(");
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(",1{fv%bE(", numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(numberAxis3D0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-1), categoryStepRenderer_State0.getVisibleSeriesCount());
      assertEquals(0.0, categoryStepRenderer_State0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryStepRenderer_State0.getBarWidth(), 0.01);
      assertNotNull(categoryStepRenderer_State0);
      
      // Undeclared exception!
      try { 
        layeredBarRenderer0.hitTest(0.0F, 0.2, (Graphics2D) null, rectangle2D_Float0, categoryPlot0, subCategoryAxis0, numberAxis3D0, defaultIntervalCategoryDataset0, 10, 10, true, categoryStepRenderer_State0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertNotNull(defaultCategoryItemRenderer0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("DomainOrder.NONE");
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals("DomainOrder.NONE", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertNotNull(logarithmicAxis0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.hitTest((-435.5671237094405), 0.0, (Graphics2D) null, rectangle2D_Float0, (CategoryPlot) null, categoryAxis0, logarithmicAxis0, defaultKeyedValues2DDataset0, (-10), (-890), true, (CategoryItemRendererState) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(groupedStackedBarRenderer0);
      
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.getRangeAxis((CategoryPlot) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertNotNull(scatterRenderer0);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(boxAndWhiskerRenderer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(jDBCCategoryDataset0, (-978), 5);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(5, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-978), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(categoryAxis0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)plotRenderingInfo0.getDataArea();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.getItemMiddle(scatterRenderer0.ZERO, scatterRenderer0.ZERO, slidingCategoryDataset0, categoryAxis0, rectangle2D_Double0, rectangleEdge0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.getDomainAxis((CategoryPlot) null, defaultMultiValueCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNotNull(stackedAreaRenderer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeCategoryPlot0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.getDomainAxis(combinedRangeCategoryPlot0, defaultKeyedValues2DDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertNotNull(scatterRenderer0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[9];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        scatterRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Color color0 = (Color)LabelBlock.DEFAULT_PAINT;
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(color0, color0, color0, color0);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertTrue(waterfallBarRenderer0.getIncludeBaseInRange());
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waterfallBarRenderer0.isDrawBarOutline());
      assertTrue(waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(waterfallBarRenderer0);
      
      String[] stringArray0 = new String[2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertNotNull(stackedAreaRenderer0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[1];
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(stackedAreaRenderer0);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(numberAxis0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, numberAxis0, rectangle2D_Float0, 0.0F, numberAxis0.DEFAULT_TICK_LABEL_PAINT, numberAxis0.DEFAULT_TICK_MARK_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(multiplePiePlot0);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(981, 10, 0.0, (-463.0), chartRenderingInfo0);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(981, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(981, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(981, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(981, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(graphics2D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabel());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(logAxis0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 1.0E-8, 0.5F, (-671.9));
      assertEquals(10.5, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals((-671.89999999), rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(1.0E-8, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(10.25, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals((-335.94999999), rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.5, rectangle2D_Double0.width, 0.01);
      assertEquals((-671.9), rectangle2D_Double0.height, 0.01);
      assertEquals(1.0E-8, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(stackedAreaRenderer0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.drawRangeLine(graphics2D0, combinedDomainCategoryPlot0, logAxis0, rectangle2D_Double0, 1.0F, logAxis0.DEFAULT_AXIS_LINE_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertNotNull(stackedAreaRenderer0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.drawOutline((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertNotNull(boxAndWhiskerRenderer0);
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryItemLabelGenerator0);
      
      boxAndWhiskerRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      
      BufferedImage bufferedImage0 = new BufferedImage(3063, 10, 10);
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3063, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3063, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getType());
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3063, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3063, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getType());
      assertNotNull(graphics2D0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawItemLabel(graphics2D0, (PlotOrientation) null, defaultMultiValueCategoryDataset0, 10, 730, true, 730, (-530.9), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertNotNull(boxAndWhiskerRenderer0);
      
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryItemLabelGenerator0);
      
      boxAndWhiskerRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryItemLabelGenerator0.getLabelFormat());
      
      BufferedImage bufferedImage0 = new BufferedImage(5009, 10, 10);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(5009, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5009, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertNotNull(bufferedImage0);
      
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(5009, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5009, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertNotNull(bufferedImageRenderingSource0);
      
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(5009, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5009, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertNotNull(graphics2D0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawItemLabel(graphics2D0, (PlotOrientation) null, defaultMultiValueCategoryDataset0, (-1040), 5009, false, (-4.0), 1.0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(layeredBarRenderer0);
      
      // Undeclared exception!
      try { 
        layeredBarRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D_Float0, 1.0F, combinedRangeCategoryPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertNotNull(scatterRenderer0);
      
      // Undeclared exception!
      try { 
        scatterRenderer0.drawBackground((Graphics2D) null, (CategoryPlot) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis3D0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(stackedAreaRenderer0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = stackedAreaRenderer0.createState(plotRenderingInfo0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertNotNull(categoryItemRendererState0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.createHotSpotBounds((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, (CategoryAxis) null, numberAxis3D0, (CategoryDataset) null, 273, 10, true, categoryItemRendererState0, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeCategoryPlot0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertNotNull(stackedAreaRenderer0);
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(608.037899, 0.0, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT);
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(608.037899, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(intervalMarker0);
      
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(608.037899, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("CONTRACT", lengthAdjustmentType0.toString());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(lengthAdjustmentType0);
      
      LabelBlock labelBlock0 = new LabelBlock("Y53niN4)!");
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertNotNull(labelBlock0);
      
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(defaultCategoryItemRenderer0);
      
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(fastScatterPlot0);
      
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      assertTrue(fastScatterPlot0.isRangeZoomable());
      assertTrue(fastScatterPlot0.isOutlineVisible());
      assertFalse(fastScatterPlot0.isDomainPannable());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isRangePannable());
      assertTrue(fastScatterPlot0.isRangeGridlinesVisible());
      assertTrue(fastScatterPlot0.isDomainZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertTrue(fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(fastScatterPlot0.isSubplot());
      assertTrue(fastScatterPlot0.isNotify());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(plotOrientation0);
      
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      assertNotNull(lengthAdjustmentType0);
      
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, fastScatterPlot0.DEFAULT_INSETS, lengthAdjustmentType0, (RectangleAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addEntity(standardEntityCollection0, minMaxCategoryRenderer0.DEFAULT_SHAPE, defaultStatisticalCategoryDataset0, 2318, 2318, false, 2318, 2318);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2318, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNotNull(stackedAreaRenderer0);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      double[][] doubleArray0 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-709), 2327);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2327, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-709), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addEntity(standardEntityCollection0, stackedAreaRenderer0.DEFAULT_SHAPE, slidingCategoryDataset0, 7, 17, false, (-2938.54127), 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addEntity(standardEntityCollection0, combinedRangeCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, defaultStatisticalCategoryDataset0, (-251), 2343, true, 10, 1408.5510453);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertNotNull(stackedAreaRenderer0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, combinedRangeCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, (CategoryDataset) null, 10, 10, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(stackedAreaRenderer0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, combinedRangeCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, defaultMultiValueCategoryDataset0, (-839), 10, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertNotNull(scatterRenderer0);
      
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, scatterRenderer0.DEFAULT_PAINT, scatterRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotNull(categoryLineAnnotation0);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNotNull(stackedAreaRenderer0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem(13, 13);
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(1, scatterRenderer0.getPassCount());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(scatterRenderer0);
      
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, scatterRenderer0.DEFAULT_PAINT, scatterRenderer0.DEFAULT_OUTLINE_STROKE);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertNotNull(categoryLineAnnotation0);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(minMaxCategoryRenderer0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      minMaxCategoryRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertFalse(scatterRenderer0.getUseOutlinePaint());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(scatterRenderer0.getUseFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(scatterRenderer0.getBaseShapesFilled());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertTrue(scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(scatterRenderer0.getBaseSeriesVisible());
      assertFalse(scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(scatterRenderer0.getBaseItemLabelsVisible());
      assertTrue(scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertTrue(scatterRenderer0.getUseSeriesOffset());
      assertFalse(scatterRenderer0.getDrawOutlines());
      assertTrue(scatterRenderer0.getBaseCreateEntities());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals("Layer.FOREGROUND", layer0.toString());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedAreaRenderer0);
      
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      assertNotNull(customCategoryURLGenerator0);
      
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, true);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, customCategoryURLGenerator0.getListCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(ganttRenderer0);
      
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      assertNotNull(customCategoryURLGenerator0);
      
      ganttRenderer0.setSeriesURLGenerator(10, (CategoryURLGenerator) customCategoryURLGenerator0, true);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertNotNull(defaultCategoryItemRenderer0);
      
      CategoryURLGenerator categoryURLGenerator0 = defaultCategoryItemRenderer0.getURLGenerator(21, 1, false);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertNotNull(boxAndWhiskerRenderer0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getTimeInstance();
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("hE?h", simpleDateFormat0);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("hE?h", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      boxAndWhiskerRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, true);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
      assertEquals("hE?h", intervalCategoryToolTipGenerator0.getLabelFormat());
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator1 = (IntervalCategoryToolTipGenerator)boxAndWhiskerRenderer0.getToolTipGenerator((-978), 22, true);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals("hE?h", intervalCategoryToolTipGenerator1.getLabelFormat());
      assertSame(intervalCategoryToolTipGenerator1, intervalCategoryToolTipGenerator0);
      assertNotNull(intervalCategoryToolTipGenerator1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(layeredBarRenderer0);
      
      layeredBarRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null, true);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(layeredBarRenderer0.getBaseSeriesVisible());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(layeredBarRenderer0.getIncludeBaseInRange());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01);
      assertTrue(layeredBarRenderer0.getBaseCreateEntities());
      assertFalse(layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01);
      assertTrue(layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(layeredBarRenderer0.getShadowsVisible());
      assertTrue(layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(minMaxCategoryRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = minMaxCategoryRenderer0.getToolTipGenerator(10, 10, false);
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(stackedBarRenderer0);
      
      stackedBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertNotNull(stackedAreaRenderer0);
      
      stackedAreaRenderer0.setSeriesItemLabelGenerator(1, (CategoryItemLabelGenerator) null, true);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(ganttRenderer0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertNotNull(statisticalBarRenderer0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      Rectangle rectangle0 = new Rectangle(1, 1);
      assertEquals(0.5, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertNotNull(rectangle0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = ganttRenderer0.createState(plotRenderingInfo0);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(categoryItemRendererState0);
      
      CompassPlot compassPlot0 = new CompassPlot();
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertNotNull(compassPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart((String) null, compassPlot0);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1126, 1);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1126, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1126, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(bufferedImage0);
      
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1126, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1126, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(bufferedImageRenderingSource0);
      
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1126, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1126, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(graphics2D0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis("Vo4?f?iwR=icL3");
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals("Vo4?f?iwR=icL3", categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(numberAxis3D0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      boolean boolean0 = statisticalBarRenderer0.hitTest(1126, 1126, graphics2D0, rectangle0, (CategoryPlot) null, categoryAxis0, numberAxis3D0, jDBCCategoryDataset0, 0, 1, true, categoryItemRendererState0);
      assertTrue(ganttRenderer0.getBaseSeriesVisible());
      assertTrue(ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01);
      assertFalse(ganttRenderer0.getIncludeBaseInRange());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(ganttRenderer0.getBaseItemLabelsVisible());
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertTrue(ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
      assertFalse(ganttRenderer0.isDrawBarOutline());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01);
      assertTrue(ganttRenderer0.getShadowsVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertTrue(ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalBarRenderer0.isDrawBarOutline());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(statisticalBarRenderer0.getDefaultShadowsVisible());
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(statisticalBarRenderer0.getBaseSeriesVisible());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.5, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getHeight(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertTrue(compassPlot0.isNotify());
      assertFalse(compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(compassPlot0.getDrawBorder());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertTrue(compassPlot0.isOutlineVisible());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1126, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1126, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals("Vo4?f?iwR=icL3", categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(1, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(1, rectangle0.height);
      assertEquals(0, CompassPlot.NO_LABELS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, CompassPlot.VALUE_LABELS);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(multiplePiePlot0);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 10, 1387.256892367, (double) 10, chartRenderingInfo0);
      assertEquals(2, standardEntityCollection0.getEntityCount());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(2, standardEntityCollection0.getEntityCount());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(graphics2D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.canSelectByPoint());
      assertTrue(combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      LogAxis logAxis0 = new LogAxis("");
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", logAxis0.getLabel());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(logAxis0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 1.0F, 0.05, 500);
      assertEquals(0.05, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(501.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(251.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.025, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(500.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.05, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertNotNull(stackedAreaRenderer0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertNull(categoryAxis0.getLabel());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertNotNull(categoryAxis0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.createHotSpotBounds(graphics2D0, rectangle2D_Double0, combinedDomainCategoryPlot0, categoryAxis0, logAxis0, defaultBoxAndWhiskerCategoryDataset0, 398, 2480, true, (CategoryItemRendererState) null, (Rectangle2D) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2480, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelURL());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(categoryAxis3D0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertNotNull(defaultCategoryItemRenderer0);
      
      Rectangle rectangle0 = new Rectangle(2513, 1197, 1197, 1197);
      assertEquals(1197.0, rectangle0.getY(), 0.01);
      assertEquals(1197.0, rectangle0.getMinY(), 0.01);
      assertEquals(1795.5, rectangle0.getCenterY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(3710.0, rectangle0.getMaxX(), 0.01);
      assertEquals(2394.0, rectangle0.getMaxY(), 0.01);
      assertEquals(2513.0, rectangle0.getX(), 0.01);
      assertEquals(2513.0, rectangle0.getMinX(), 0.01);
      assertEquals(1197.0, rectangle0.getWidth(), 0.01);
      assertEquals(3111.5, rectangle0.getCenterX(), 0.01);
      assertEquals(1197.0, rectangle0.getHeight(), 0.01);
      assertEquals(1197, rectangle0.width);
      assertEquals(2513, rectangle0.x);
      assertEquals(1197, rectangle0.y);
      assertEquals(1197, rectangle0.height);
      assertNotNull(rectangle0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2513, 5946);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(2513, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5946, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertNotNull(stackedAreaRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingGanttCategoryDataset0, categoryAxis3D0, (ValueAxis) null, stackedAreaRenderer0);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(2513, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5946, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isNotify());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(categoryPlot0);
      
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-1), categoryStepRenderer_State0.getVisibleSeriesCount());
      assertEquals(0.0, categoryStepRenderer_State0.getSeriesRunningTotal(), 0.01);
      assertEquals(0.0, categoryStepRenderer_State0.getBarWidth(), 0.01);
      assertNotNull(categoryStepRenderer_State0);
      
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.createHotSpotBounds((Graphics2D) null, rectangle0, categoryPlot0, categoryAxis3D0, (ValueAxis) null, taskSeriesCollection0, 1114, (-760), true, categoryStepRenderer_State0, rectangle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedAreaRenderer0);
      
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("");
      assertNotNull(standardCategoryURLGenerator0);
      
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, combinedRangeCategoryPlot0.DEFAULT_LEGEND_ITEM_BOX, defaultMultiValueCategoryDataset0, 10, (-582), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertNotNull(stackedAreaRenderer0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1362, 1362);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1362, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1362, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, stackedAreaRenderer0.DEFAULT_SHAPE, slidingGanttCategoryDataset0, 1362, 0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1362, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertNotNull(minMaxCategoryRenderer0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultStatisticalCategoryDataset0, 2337, (-886), true, 2337, 2337);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNotNull(stackedAreaRenderer0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity((EntityCollection) null, (Shape) null, defaultMultiValueCategoryDataset0, (-702), (-702), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(stackedAreaRenderer0);
      
      stackedAreaRenderer0.setPlot(combinedRangeCategoryPlot0);
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.getLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertNotNull(stackedAreaRenderer0);
      
      LegendItemCollection legendItemCollection0 = stackedAreaRenderer0.getLegendItems();
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(minMaxCategoryRenderer0);
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertNotNull(groupedStackedBarRenderer0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1965.1656006, (double) minMaxCategoryRenderer0.ZERO, "Description");
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("Description", cyclicNumberAxis0.getLabel());
      assertEquals(1965.1656006, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1965.1656006, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-1964.1656006), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("Description", cyclicNumberAxis0.getLabel());
      assertEquals(1965.1656006, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1965.1656006, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertNotNull(combinedRangeCategoryPlot0);
      
      CyclicNumberAxis cyclicNumberAxis1 = (CyclicNumberAxis)groupedStackedBarRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 0);
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(groupedStackedBarRenderer0.getShadowsVisible());
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertTrue(groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(groupedStackedBarRenderer0.getBaseCreateEntities());
      assertFalse(groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-1964.1656006), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("Description", cyclicNumberAxis0.getLabel());
      assertEquals(1965.1656006, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1965.1656006, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.canSelectByRegion());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeCategoryPlot0.canSelectByPoint());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Description", cyclicNumberAxis1.getLabel());
      assertEquals(1965.1656006, cyclicNumberAxis1.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isInverted());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(1965.1656006, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.isVisible());
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals((-1964.1656006), cyclicNumberAxis1.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertSame(cyclicNumberAxis0, cyclicNumberAxis1);
      assertSame(cyclicNumberAxis1, cyclicNumberAxis0);
      assertNotNull(cyclicNumberAxis1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(stackedAreaRenderer0);
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("idX`A5X!N3DW");
      assertNotNull(standardCategorySeriesLabelGenerator0);
      
      stackedAreaRenderer0.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer1.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer1.getPassCount());
      assertEquals(3, stackedAreaRenderer1.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer1.getBaseSeriesVisibleInLegend());
      assertFalse(stackedAreaRenderer1.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer1.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer1.getRenderAsPercentages());
      assertTrue(stackedAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer1.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer1.getColumnCount());
      assertTrue(stackedAreaRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer1.getRowCount());
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      assertNotSame(stackedAreaRenderer0, stackedAreaRenderer1);
      assertNotSame(stackedAreaRenderer1, stackedAreaRenderer0);
      assertNotNull(stackedAreaRenderer1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(stackedAreaRenderer0);
      
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      assertNotNull(customCategoryURLGenerator0);
      
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer1.getBaseSeriesVisible());
      assertTrue(stackedAreaRenderer1.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer1.getRowCount());
      assertFalse(stackedAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer1.getBaseCreateEntities());
      assertTrue(stackedAreaRenderer1.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedAreaRenderer1.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer1.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, stackedAreaRenderer1.getPassCount());
      assertFalse(stackedAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer1.getColumnCount());
      assertTrue(stackedAreaRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedAreaRenderer1.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      assertNotSame(stackedAreaRenderer0, stackedAreaRenderer1);
      assertNotSame(stackedAreaRenderer1, stackedAreaRenderer0);
      assertNotNull(stackedAreaRenderer1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(stackedAreaRenderer0);
      
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      assertNotNull(intervalCategoryToolTipGenerator0);
      
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals("({0}, {1}) = {3} - {4}", intervalCategoryToolTipGenerator0.getLabelFormat());
      
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer1.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer1.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer1.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(stackedAreaRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer1.getRowCount());
      assertTrue(stackedAreaRenderer1.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer1.getColumnCount());
      assertTrue(stackedAreaRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedAreaRenderer1.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer1.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer1.getPassCount());
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      assertNotSame(stackedAreaRenderer0, stackedAreaRenderer1);
      assertNotSame(stackedAreaRenderer1, stackedAreaRenderer0);
      assertNotNull(stackedAreaRenderer1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertNotNull(defaultCategoryItemRenderer0);
      
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(0.0F, 1373.884, 0.0F, 1271.1, defaultCategoryItemRenderer0.DEFAULT_OUTLINE_PAINT, defaultCategoryItemRenderer0.DEFAULT_STROKE);
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(1373.884, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(1271.1, categoryLineAnnotation0.getValue2(), 0.01);
      assertNotNull(categoryLineAnnotation0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      defaultCategoryItemRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(categoryLineAnnotation0.getNotify());
      assertEquals(1373.884, categoryLineAnnotation0.getValue1(), 0.01);
      assertEquals(1271.1, categoryLineAnnotation0.getValue2(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis3D0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try { 
        defaultCategoryItemRenderer0.drawAnnotations((Graphics2D) null, rectangle2D_Float0, categoryAxis3D0, (ValueAxis) null, layer0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.CategoryLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(categoryAxis3D0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(defaultCategoryItemRenderer0);
      
      defaultCategoryItemRenderer0.drawAnnotations((Graphics2D) null, (Rectangle2D) null, categoryAxis3D0, (ValueAxis) null, layer0, plotRenderingInfo0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultCategoryItemRenderer0.getDrawOutlines());
      assertFalse(defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertTrue(defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(plotOrientation0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertNotNull(boxAndWhiskerRenderer0);
      
      JSpinner jSpinner0 = new JSpinner();
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertNotNull(jSpinner0);
      
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner_NumberEditor0.isFocusCycleRoot());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_NumberEditor0.getIgnoreRepaint());
      assertTrue(jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertNotNull(jSpinner_NumberEditor0);
      
      DecimalFormat decimalFormat0 = jSpinner_NumberEditor0.getFormat();
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner_NumberEditor0.isFocusCycleRoot());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_NumberEditor0.getIgnoreRepaint());
      assertTrue(jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertNotNull(decimalFormat0);
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator(">KMYke)", decimalFormat0, decimalFormat0);
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner_NumberEditor0.isFocusCycleRoot());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_NumberEditor0.getIgnoreRepaint());
      assertTrue(jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(">KMYke)", standardCategoryItemLabelGenerator0.getLabelFormat());
      assertNotNull(standardCategoryItemLabelGenerator0);
      
      boxAndWhiskerRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner_NumberEditor0.isFocusCycleRoot());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_NumberEditor0.getIgnoreRepaint());
      assertTrue(jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(">KMYke)", standardCategoryItemLabelGenerator0.getLabelFormat());
      
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultMultiValueCategoryDataset0, 10, (-2998), true, 10, 10, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(plotOrientation0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertNotNull(boxAndWhiskerRenderer0);
      
      boxAndWhiskerRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, defaultMultiValueCategoryDataset0, 10, (-2998), true, 10, 10, false);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boxAndWhiskerRenderer0.isMedianVisible());
      assertTrue(boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertFalse(boxAndWhiskerRenderer0.isMeanVisible());
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertTrue(boxAndWhiskerRenderer0.getFillBox());
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(minMaxCategoryRenderer0);
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      lineRenderer3D0.updateCrosshairValues((CategoryCrosshairState) null, minMaxCategoryRenderer0.ZERO, minMaxCategoryRenderer0.ZERO, 2373, (-2172), 2500.0, 0.0, plotOrientation0);
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertFalse(minMaxCategoryRenderer0.isDrawLines());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertFalse(minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertTrue(minMaxCategoryRenderer0.getBaseCreateEntities());
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(minMaxCategoryRenderer0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      assertEquals(0.0, categoryCrosshairState0.getAnchorX(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairX(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairY(), 0.01);
      assertEquals(0, categoryCrosshairState0.getDomainAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getAnchorY(), 0.01);
      assertEquals(0, categoryCrosshairState0.getDatasetIndex());
      assertEquals(0, categoryCrosshairState0.getRangeAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getCrosshairDistance(), 0.01);
      assertNotNull(categoryCrosshairState0);
      
      // Undeclared exception!
      try { 
        lineRenderer3D0.updateCrosshairValues(categoryCrosshairState0, 10, 1.0F, (double) minMaxCategoryRenderer0.ZERO, 10, 0.0, 10, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedAreaRenderer0.getRenderAsPercentages());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedAreaRenderer0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      assertEquals(0, categoryCrosshairState0.getDatasetIndex());
      assertEquals(0, categoryCrosshairState0.getRangeAxisIndex());
      assertEquals(0, categoryCrosshairState0.getDomainAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getCrosshairDistance(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairY(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getAnchorX(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairX(), 0.01);
      assertEquals(0.0, categoryCrosshairState0.getAnchorY(), 0.01);
      assertNotNull(categoryCrosshairState0);
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      // Undeclared exception!
      try { 
        lineRenderer3D0.updateCrosshairValues(categoryCrosshairState0, stackedAreaRenderer0.ZERO, stackedAreaRenderer0.ZERO, 12.0, 20, 12.0, (double) lineRenderer3D0.ZERO, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(lineRenderer3D0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 20, 20);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(20, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(20, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabelURL());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(categoryAxis3D0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("5IlYyM@cM_J~");
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(periodAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingGanttCategoryDataset0, categoryAxis3D0, periodAxis0, lineRenderer3D0);
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(20, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(20, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabelURL());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(categoryPlot0.canSelectByPoint());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.canSelectByRegion());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertNotNull(categoryPlot0);
      
      DrawingSupplier drawingSupplier0 = lineRenderer3D0.getDrawingSupplier();
      assertTrue(lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesShape());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertTrue(lineRenderer3D0.getBaseCreateEntities());
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertTrue(lineRenderer3D0.getBaseShapesFilled());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertFalse(lineRenderer3D0.getUseOutlinePaint());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(lineRenderer3D0.getBaseItemLabelsVisible());
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertTrue(lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertTrue(lineRenderer3D0.getDrawOutlines());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01);
      assertFalse(lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseFillPaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01);
      assertTrue(lineRenderer3D0.getBaseLinesVisible());
      assertFalse(lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(lineRenderer3D0.getUseSeriesOffset());
      assertEquals(8.0, LineRenderer3D.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, LineRenderer3D.DEFAULT_X_OFFSET, 0.01);
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      StackedBarRenderer stackedBarRenderer1 = (StackedBarRenderer)stackedBarRenderer0.clone();
      Locale locale0 = Locale.FRANCE;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("", decimalFormat0);
      stackedBarRenderer1.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      stackedBarRenderer0.equals(stackedBarRenderer1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      Object object0 = stackedBarRenderer0.clone();
      boolean boolean0 = stackedBarRenderer0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setPlot(combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getLegendItem(10, 1471);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.StandardCategorySeriesLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      Size2D size2D0 = new Size2D();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      Rectangle2D rectangle2D0 = RectangleAnchor.createRectangle(size2D0, 10, 2.5E-5, rectangleAnchor0);
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle2D_Float0, rectangle2D0, combinedRangeCategoryPlot0.DEFAULT_INSETS, (LengthAdjustmentType) null, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      FlowArrangement flowArrangement0 = new FlowArrangement();
      LegendTitle legendTitle0 = new LegendTitle(stackedAreaRenderer0, flowArrangement0, flowArrangement0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle2D_Float0, rectangle2D_Float0, legendTitle0.DEFAULT_PADDING, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedAreaRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle2D_Float0, combinedDomainXYPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals((-8.0), point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("$YD&gn_<sB4oZ)}_h");
      IntervalMarker intervalMarker0 = new IntervalMarker((-1007.221), 1.0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.drawRangeMarker((Graphics2D) null, (CategoryPlot) null, logarithmicAxis0, intervalMarker0, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("Not implemented.");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      defaultCategoryItemRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, periodAxis0, categoryMarker0, (Rectangle2D) null);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      DateAxis dateAxis0 = new DateAxis();
      ValueMarker valueMarker0 = new ValueMarker(0.0F);
      // Undeclared exception!
      try { 
        layeredBarRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, dateAxis0, valueMarker0, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ValueMarker valueMarker0 = new ValueMarker((-1546.1020149346555));
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, "");
      layeredBarRenderer0.drawRangeMarker((Graphics2D) null, (CategoryPlot) null, cyclicNumberAxis0, valueMarker0, rectangle2D_Float0);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("f)FnNBo<@", spiderWebPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 9, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      IntervalMarker intervalMarker0 = new IntervalMarker(15, 0.0);
      lineRenderer3D0.drawRangeMarker(graphics2D0, combinedDomainCategoryPlot0, valueAxis0, intervalMarker0, rectangle2D_Double0);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 5, (-1));
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingCategoryDataset0, categoryAxis3D0, logAxis0, layeredBarRenderer0);
      CategoryMarker categoryMarker0 = new CategoryMarker(layeredBarRenderer0.ZERO);
      layeredBarRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, categoryAxis3D0, categoryMarker0, rectangle2D_Float0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-1), 10);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LogAxis logAxis0 = new LogAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingCategoryDataset0, categoryAxis3D0, logAxis0, layeredBarRenderer0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      // Undeclared exception!
      try { 
        layeredBarRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, categoryAxis3D0, categoryMarker0, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      PiePlot piePlot0 = new PiePlot(jDBCPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("'q>", piePlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3, (-1.0), 2.5E-9, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LogAxis logAxis0 = new LogAxis("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1507.649260493407, 39.7069530803747, 0.05, (-1369.98426331514));
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      stackedAreaRenderer0.drawRangeLine(graphics2D0, combinedDomainCategoryPlot0, logAxis0, rectangle2D_Double0, 2413.8573189568, (Paint) null, defaultPolarItemRenderer0.DEFAULT_STROKE);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 10, 1387.256892367, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LogAxis logAxis0 = new LogAxis("");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 1.0F, 0.05, 500);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.drawRangeLine(graphics2D0, combinedDomainCategoryPlot0, logAxis0, rectangle2D_Double0, 0.0, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Line2D.Double line2D_Double0 = new Line2D.Double(1082.09, 2.0, 0.0, 0.0);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      // Undeclared exception!
      try { 
        layeredBarRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, rectangle0, 0.0, (Paint) null, statisticalBarRenderer0.DEFAULT_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      // Undeclared exception!
      try { 
        layeredBarRenderer0.drawDomainLine((Graphics2D) null, combinedRangeCategoryPlot0, rectangle2D_Float0, 0.0F, combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      Range range0 = ganttRenderer0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, periodAxis0, scatterRenderer0);
      CategoryPlot categoryPlot1 = scatterRenderer0.getPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 1.0F, 1.0F, 1.0F);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 500, 10);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 10, (-1547));
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, slidingCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryItemRendererState categoryItemRendererState0 = scatterRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, defaultKeyedValues2DDataset0, plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)boxAndWhiskerRenderer0.lookupLegendShape(1);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("sAn+u%TT*Y", spiderWebPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 10, 1, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryItemRendererState categoryItemRendererState0 = waterfallBarRenderer0.initialise(graphics2D0, rectangle2D_Double0, combinedDomainCategoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      JFreeChart jFreeChart0 = new JFreeChart("9vi", combinedRangeCategoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(17, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      double[][] doubleArray0 = new double[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      lineRenderer3D0.initialise(graphics2D0, (Rectangle2D) null, combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0, plotRenderingInfo0);
      assertEquals(1, lineRenderer3D0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      stackedAreaRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, scatterRenderer0.DEFAULT_PAINT, scatterRenderer0.DEFAULT_OUTLINE_STROKE);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Layer layer0 = Layer.BACKGROUND;
      minMaxCategoryRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      boolean boolean0 = minMaxCategoryRenderer0.removeAnnotation(categoryLineAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setSeriesURLGenerator(4, (CategoryURLGenerator) null, false);
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setSeriesToolTipGenerator(3, (CategoryToolTipGenerator) null, false);
      assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      minMaxCategoryRenderer0.setSeriesItemLabelGenerator(10, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      assertTrue(minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      stackedAreaRenderer0.setSeriesItemLabelGenerator(10, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, false);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = scatterRenderer0.getItemLabelGenerator((-978), (-978), false);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.setSeriesURLGenerator(10, (CategoryURLGenerator) null);
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedAreaRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryURLGenerator categoryURLGenerator0 = stackedAreaRenderer0.getSeriesURLGenerator(4);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = stackedAreaRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      LogAxis logAxis0 = new LogAxis();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.createHotSpotShape(graphics2D0, rectangle2D0, (CategoryPlot) null, categoryAxis0, logAxis0, defaultMultiValueCategoryDataset0, 2921, 2, true, (CategoryItemRendererState) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      stackedAreaRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertFalse(stackedAreaRenderer1.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      stackedAreaRenderer0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertTrue(stackedAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      int int0 = minMaxCategoryRenderer0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setSeriesToolTipGenerator(362, (CategoryToolTipGenerator) null);
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      stackedAreaRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer();
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("sAn+u%TT*Y", spiderWebPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 10, 1, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      boxAndWhiskerRenderer0.drawBackground(graphics2D0, combinedDomainCategoryPlot0, rectangle2D_Float0);
      assertTrue(boxAndWhiskerRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = scatterRenderer0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.removeAnnotations();
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("({0}, {1}) = {2}", "({0}, {1}) = {3} - {4}", "Null 'stroke' argument.");
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      try { 
        stackedAreaRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryURLGenerator categoryURLGenerator0 = stackedAreaRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)boxAndWhiskerRenderer0.lookupLegendShape(1);
      BufferedImage bufferedImage0 = new BufferedImage(1, 3, 1);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      boxAndWhiskerRenderer0.drawOutline(graphics2D0, combinedDomainCategoryPlot0, rectangle2D_Double0);
      assertFalse(boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      double[][] doubleArray0 = new double[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.getItemMiddle(scatterRenderer0.ZERO, scatterRenderer0.ZERO, defaultIntervalCategoryDataset0, (CategoryAxis) null, rectangle2D_Double0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      int int0 = scatterRenderer0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      int int0 = stackedAreaRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 20, 20);
      CategoryAxis categoryAxis0 = new CategoryAxis();
      PeriodAxis periodAxis0 = new PeriodAxis("z5IlYyM@cM%_J~");
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingGanttCategoryDataset0, categoryAxis0, periodAxis0, lineRenderer3D0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 11, 11, chartRenderingInfo0);
      assertEquals(11, bufferedImage0.getType());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO, scatterRenderer0.DEFAULT_PAINT, scatterRenderer0.DEFAULT_OUTLINE_STROKE);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.setSeriesItemLabelGenerator((-109), (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }
}
