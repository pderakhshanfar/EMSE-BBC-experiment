/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 20:16:47 GMT 2020
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableColumnModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.Crosshair;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCategoryItemRenderer_ESTest extends AbstractCategoryItemRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Line2D.Double line2D_Double0 = new Line2D.Double(0.2, 8.0, 8.0, (double) stackedBarRenderer3D0.ZERO);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Row key (");
      PeriodAxis periodAxis0 = new PeriodAxis("Row key (");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      DateAxis dateAxis0 = new DateAxis("Row key (", timeZone0, locale0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        levelRenderer0.hitTest(500, 9.0, (Graphics2D) null, rectangle0, combinedRangeCategoryPlot0, extendedCategoryAxis0, dateAxis0, defaultCategoryDataset0, (-620), 10, false, categoryItemRendererState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator("ItemLabelGenerator not cloneable.", numberFormat0);
      ganttRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      Shape shape0 = ganttRenderer0.getItemShape(0, (-910), false);
      // Undeclared exception!
      try { 
        ganttRenderer0.addEntity(standardEntityCollection0, shape0, (CategoryDataset) null, 0, (-1896), false, 20.0, 20.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.labels.AbstractCategoryItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 10, 10);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_BOX, slidingCategoryDataset0, 10, 2, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Line2D.Double line2D_Double0 = new Line2D.Double(479.7, 8.0, 8.0, 2.0E9);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("5#b,Y1YTQ2i%s$'#f");
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      LabelBlock labelBlock0 = new LabelBlock(";yL9cN1$00Cakae@%");
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      Rectangle2D rectangle2D0 = rectangle0.getFrame();
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedBarRenderer3D0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, rectangle2D0, extendedCategoryAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(244.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      GeneralPath generalPath0 = new GeneralPath(waterfallBarRenderer0.DEFAULT_SHAPE);
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      LegendTitle legendTitle0 = new LegendTitle(waterfallBarRenderer0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0, 0, waterfallBarRenderer0.DEFAULT_PAINT);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      RectangleAnchor rectangleAnchor0 = intervalMarker0.getLabelAnchor();
      Point2D.Double point2D_Double0 = (Point2D.Double)waterfallBarRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, rectangle2D0, legendTitle0.DEFAULT_PADDING, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals((-2.0), point2D_Double0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Ro[w key(");
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      Color color0 = Color.BLACK;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(color0, color0, stackedBarRenderer3D0.DEFAULT_WALL_PAINT, extendedCategoryAxis0.DEFAULT_TICK_MARK_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      Point2D.Double point2D_Double0 = (Point2D.Double)waterfallBarRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, rectangle0, combinedDomainXYPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(8.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      Layer layer0 = Layer.BACKGROUND;
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("PH~", 10, 1450.0);
      stackedBarRenderer3D0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      boolean boolean0 = stackedBarRenderer3D0.removeAnnotation(categoryTextAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      statisticalBarRenderer0.setPlot(combinedRangeCategoryPlot0);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(500);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      double double0 = ganttRenderer0.getItemMiddle("Null <orientation' argument.", 3.0, defaultStatisticalCategoryDataset0, categoryAxis0, rectangle2D0, rectangleEdge0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.removeAnnotations();
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 6);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DateAxis dateAxis0 = new DateAxis();
      Rectangle rectangle0 = new Rectangle(10, 10, (-4236), 20);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.5F, 10);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawRangeMarker(graphics2D0, (CategoryPlot) null, dateAxis0, intervalMarker0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 6);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CategoryPlot categoryPlot0 = stackedAreaRenderer0.getPlot();
      DateAxis dateAxis0 = new DateAxis();
      Rectangle rectangle0 = new Rectangle(10, 10, (-4236), 20);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      statisticalBarRenderer0.drawDomainLine(graphics2D0, combinedRangeCategoryPlot0, rectangle0, 0.1, spiderWebPlot0.DEFAULT_LABEL_SHADOW_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals((-2108.0), rectangle0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      double[][] doubleArray0 = new double[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity((EntityCollection) null, stackedBarRenderer3D0.DEFAULT_SHAPE, defaultIntervalCategoryDataset0, 1, 3, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategoryAxis categoryAxis0 = new CategoryAxis("B:f)^0$o*D&b?X6ig{y");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(jDBCCategoryDataset0, categoryAxis0, numberAxis3D0, stackedBarRenderer0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0, listSelectionModel0);
      Rectangle rectangle0 = jTable0.getCellRect(10, 1, false);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = lineRenderer3D0.initialise((Graphics2D) null, rectangle0, categoryPlot0, jDBCCategoryDataset0, plotRenderingInfo0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("}");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, logarithmicAxis0, boxAndWhiskerRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("}", categoryPlot0);
      Point point0 = new Point(0, (-992));
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      Rectangle2D rectangle2D0 = categoryPlot0.DEFAULT_INSETS.createOutsetRectangle((Rectangle2D) rectangle0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      boxAndWhiskerRenderer0.initialise((Graphics2D) null, rectangle2D0, categoryPlot0, defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ValueAxis valueAxis0 = stackedBarRenderer3D0.getRangeAxis(combinedDomainCategoryPlot0, 10);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logAxis0);
      ValueAxis valueAxis0 = stackedBarRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, 92);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("kz,n1");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("kz,n1");
      logarithmicAxis0.setAutoRangeMinimumSize(90.0, true);
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, extendedCategoryAxis0, logarithmicAxis0, levelRenderer0);
      ValueAxis valueAxis0 = levelRenderer0.getRangeAxis(categoryPlot0, 10);
      assertEquals((-5.115), valueAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, logarithmicAxis0, boxAndWhiskerRenderer0);
      CategoryPlot categoryPlot1 = boxAndWhiskerRenderer0.getPlot();
      assertEquals(1, categoryPlot1.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer3D0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      DrawingSupplier drawingSupplier0 = statisticalBarRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CategoryAxis categoryAxis0 = statisticalBarRenderer0.getDomainAxis(combinedRangeCategoryPlot0, (CategoryDataset) null);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|_qdP~%");
      Locale locale0 = Locale.CHINESE;
      DateAxis dateAxis0 = new DateAxis("|_qdP~%", simpleTimeZone0, locale0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, dateAxis0, statisticalBarRenderer0);
      stackedBarRenderer3D0.getDomainAxis(categoryPlot0, defaultMultiValueCategoryDataset0);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Range range0 = scatterRenderer0.findRangeBounds((CategoryDataset) null, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = levelRenderer0.findRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      boolean boolean0 = lineAndShapeRenderer0.equals(plotOrientation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      CategoryItemRendererState categoryItemRendererState0 = lineAndShapeRenderer0.createState(plotRenderingInfo0);
      Rectangle2D rectangle2D1 = stackedBarRenderer3D0.createHotSpotBounds((Graphics2D) null, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis3D0, (ValueAxis) null, jDBCCategoryDataset0, 10, 10, true, categoryItemRendererState0, rectangle2D0);
      assertNull(rectangle2D1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.updateCrosshairValues(categoryCrosshairState0, 1.0F, 1.0F, 10, 10, 1.0F, 0.2, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesURLGenerator((-2410), (CategoryURLGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      // Undeclared exception!
      try { 
        layeredBarRenderer0.setSeriesURLGenerator((-1366), (CategoryURLGenerator) standardCategoryURLGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.setSeriesToolTipGenerator((-1598), (CategoryToolTipGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("W?NmZDg\"6.W4", decimalFormatSymbols0);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("T?Xuc-b\"", decimalFormat0);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      // Undeclared exception!
      try { 
        layeredBarRenderer0.setSeriesToolTipGenerator((-293), (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesItemLabelGenerator((-4193), (CategoryItemLabelGenerator) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(1, 1);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("Base tool tip generator not cloneable.", dateFormat0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setSeriesItemLabelGenerator((-665), (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.getRangeAxis((CategoryPlot) null, 1202);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(500);
      Rectangle rectangle0 = new Rectangle(10, 10);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      LogAxis logAxis0 = new LogAxis();
      NumberTickUnit numberTickUnit0 = logAxis0.getTickUnit();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        ganttRenderer0.getItemMiddle(numberTickUnit0, 500, defaultCategoryDataset0, (CategoryAxis) null, rectangle0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.GanttRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.getDomainAxis((CategoryPlot) null, (CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        levelRenderer0.getDomainAxis(combinedDomainCategoryPlot0, defaultKeyedValues2DDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 5, 7);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, (-2107), 5);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      Number[][] numberArray0 = new Number[4][8];
      Number[] numberArray1 = new Number[3];
      numberArray0[2] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        ganttRenderer0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, cyclicNumberAxis0, rectangle2D_Double0, 0.05, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Jd$3(-*?X,Grn]B-6dD", combinedDomainCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedDomainCategoryPlot0, false);
      Rectangle rectangle0 = new Rectangle(15, 15, 614, 15);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(12.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 614, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawRangeLine(graphics2D0, combinedRangeCategoryPlot0, cyclicNumberAxis0, rectangle0, 1.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.drawOutline((Graphics2D) null, (CategoryPlot) null, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.drawDomainMarker((Graphics2D) null, combinedDomainCategoryPlot0, categoryAxis3D0, categoryMarker0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.drawBackground((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("~'1KYV;'!jW<");
      PeriodAxis periodAxis0 = new PeriodAxis("~'1KYV;'!jW<");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.drawAnnotations((Graphics2D) null, (Rectangle2D) null, extendedCategoryAxis0, periodAxis0, (Layer) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.createHotSpotBounds((Graphics2D) null, (Rectangle2D) null, categoryPlot0, subCategoryAxis0, (ValueAxis) null, defaultBoxAndWhiskerCategoryDataset0, 6, 6, true, (CategoryItemRendererState) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.BarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("~'1KYV;'!jW<");
      LevelRenderer levelRenderer0 = new LevelRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      LabelBlock labelBlock0 = new LabelBlock("", periodAxis0.DEFAULT_TICK_LABEL_FONT, periodAxis0.DEFAULT_TICK_MARK_PAINT);
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      // Undeclared exception!
      try { 
        levelRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, periodAxis0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        ganttRenderer0.addEntity(standardEntityCollection0, combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, defaultKeyedValues2DDataset0, 10, 1, false, 1.0F, 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        ganttRenderer0.addEntity(standardEntityCollection0, lineAndShapeRenderer0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, (-1), 10, false, 2.0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, statisticalBarRenderer0.DEFAULT_SHAPE, defaultMultiValueCategoryDataset0, (-67), 833, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation(stackedBarRenderer3D0.ZERO, 12.0, true, 500, dateAxis0.DEFAULT_AXIS_LINE_PAINT, stackedBarRenderer3D0.DEFAULT_OUTLINE_STROKE);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      // Undeclared exception!
      try { 
        lineRenderer3D0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 6);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DateAxis dateAxis0 = new DateAxis();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      // Undeclared exception!
      try { 
        levelRenderer0.createHotSpotBounds(graphics2D0, (Rectangle2D) null, (CategoryPlot) null, (CategoryAxis) null, dateAxis0, defaultBoxAndWhiskerCategoryDataset0, 10, 0, true, categoryItemRendererState0, (Rectangle2D) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("Tv_L1^R[ v#-", 0.2, 3.0);
      Layer layer0 = Layer.FOREGROUND;
      stackedBarRenderer3D0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("", "y%wk<>MuYkCEi$EVm&Y", "0_^lvupNJo<UC%7tURD");
      ganttRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("AR`q]BME");
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      statisticalLineAndShapeRenderer0.setSeriesURLGenerator(1, (CategoryURLGenerator) standardCategoryURLGenerator0, true);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer3D0.getURLGenerator(1152, 3, false);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, true);
      assertEquals(2, lineRenderer3D0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setSeriesToolTipGenerator(1332, (CategoryToolTipGenerator) null, true);
      assertTrue(waterfallBarRenderer0.getBaseSeriesVisible());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = scatterRenderer0.getToolTipGenerator(1930, 1930, true);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      intervalBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getItemLabelGenerator(10, 10, true);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = waterfallBarRenderer0.getSeriesToolTipGenerator(3);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("{2}", "({0}, {1}) = {3} - {4}", "({0}, {1}) = {3} - {4}");
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, ganttRenderer0.DEFAULT_SHAPE, jDBCCategoryDataset0, 3429, 1400, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3429, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.addEntity((EntityCollection) null, (Shape) null, (CategoryDataset) null, (-1588), (-1588), true, (-1588), (-1588));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity((EntityCollection) null, (Shape) null, (CategoryDataset) null, (-1598), 1482, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DateAxis dateAxis0 = new DateAxis();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis3D0, dateAxis0, boxAndWhiskerRenderer0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.getLegendItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      LegendItemCollection legendItemCollection0 = stackedBarRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, logarithmicAxis0, boxAndWhiskerRenderer0);
      LegendItemCollection legendItemCollection0 = boxAndWhiskerRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, (double) ganttRenderer0.ZERO, "Null 'widthType' argument.");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      ValueAxis valueAxis0 = ganttRenderer0.getRangeAxis(combinedRangeCategoryPlot0, 56);
      assertNull(valueAxis0.getLabelToolTip());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("kz,n1");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("kz,n1");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, extendedCategoryAxis0, logarithmicAxis0, ganttRenderer0);
      LogarithmicAxis logarithmicAxis1 = (LogarithmicAxis)statisticalBarRenderer0.getRangeAxis(categoryPlot0, 0);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      ganttRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0);
      try { 
        ganttRenderer0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Base item URL generator not cloneable.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      GanttRenderer ganttRenderer1 = (GanttRenderer)ganttRenderer0.clone();
      assertFalse(ganttRenderer1.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("~'1KYV;'!jW<");
      PeriodAxis periodAxis0 = new PeriodAxis("~'1KYV;'!jW<");
      Layer layer0 = Layer.FOREGROUND;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.drawAnnotations((Graphics2D) null, (Rectangle2D) null, extendedCategoryAxis0, periodAxis0, layer0, plotRenderingInfo0);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("~'1KNV;'!jW<");
      PeriodAxis periodAxis0 = new PeriodAxis("~'1KNV;'!jW<");
      Layer layer0 = Layer.BACKGROUND;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.drawAnnotations((Graphics2D) null, (Rectangle2D) null, extendedCategoryAxis0, periodAxis0, layer0, plotRenderingInfo0);
      assertTrue(periodAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, logarithmicAxis0, boxAndWhiskerRenderer0);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      boxAndWhiskerRenderer0.updateCrosshairValues(categoryCrosshairState0, 0.0F, 500, 2054.4764, 10, 2.0F, (-4271.447), plotOrientation0);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.updateCrosshairValues(categoryCrosshairState0, "Null 'oriuntation' agument.", stackedBarRenderer3D0.ZERO, 2.0, 37, 37, 12.0, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      statisticalBarRenderer0.updateCrosshairValues((CategoryCrosshairState) null, true, 10, 2267.559277, 1633, 0.2, 1895.36037, plotOrientation0);
      assertTrue(statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("}");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, logarithmicAxis0, boxAndWhiskerRenderer0);
      DrawingSupplier drawingSupplier0 = boxAndWhiskerRenderer0.getDrawingSupplier();
      assertNotNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      WaterfallBarRenderer waterfallBarRenderer1 = new WaterfallBarRenderer();
      assertTrue(waterfallBarRenderer1.equals((Object)waterfallBarRenderer0));
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("");
      waterfallBarRenderer1.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      boolean boolean0 = waterfallBarRenderer0.equals(waterfallBarRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("Base item URL generator not cloneable.", numberFormat0, numberFormat0);
      waterfallBarRenderer0.setSeriesItemLabelGenerator(909, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
      WaterfallBarRenderer waterfallBarRenderer1 = new WaterfallBarRenderer();
      boolean boolean0 = waterfallBarRenderer0.equals(waterfallBarRenderer1);
      assertTrue(waterfallBarRenderer1.equals((Object)waterfallBarRenderer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Object object0 = ganttRenderer0.clone();
      boolean boolean0 = ganttRenderer0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LegendItem legendItem0 = levelRenderer0.getLegendItem(10, 3);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      IntervalMarker intervalMarker0 = new IntervalMarker(2, 1.0F);
      LengthAdjustmentType lengthAdjustmentType0 = intervalMarker0.getLabelOffsetType();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      // Undeclared exception!
      try { 
        ganttRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, (Rectangle2D) null, (Rectangle2D) null, categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      PeriodAxis periodAxis0 = new PeriodAxis("Row key (");
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, (PlotOrientation) null, rectangle0, rectangle0, periodAxis0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleAnchor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getItemFillPaint(234, 10, true);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(paint0, paint0, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT, defaultPolarItemRenderer0.DEFAULT_PAINT);
      JFreeChart jFreeChart0 = new JFreeChart(")[/Q,N", waterfallBarRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainCategoryPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(433, 4);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, false, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      Rectangle2D rectangle2D0 = combinedDomainCategoryPlot0.DEFAULT_INSETS.createInsetRectangle((Rectangle2D) rectangle0, false, true);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      Crosshair crosshair0 = new Crosshair();
      RectangleAnchor rectangleAnchor0 = crosshair0.getLabelAnchor();
      Point2D.Double point2D_Double0 = (Point2D.Double)waterfallBarRenderer0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle2D0, rectangle0, categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(3.0, point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      IntervalMarker intervalMarker0 = new IntervalMarker(90.0, 2.0F, categoryAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      statisticalBarRenderer0.drawRangeMarker((Graphics2D) null, categoryPlot0, dateAxis0, intervalMarker0, (Rectangle2D) null);
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 28.9);
      ValueMarker valueMarker0 = new ValueMarker(0.0F, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawRangeMarker((Graphics2D) null, combinedRangeCategoryPlot0, cyclicNumberAxis0, valueMarker0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1619.364128284, 0.0F);
      ValueMarker valueMarker0 = new ValueMarker(1619.364128284, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      statisticalBarRenderer0.drawRangeMarker((Graphics2D) null, combinedDomainCategoryPlot0, cyclicNumberAxis0, valueMarker0, rectangle2D0);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("~'1KNV;'!jW<");
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      levelRenderer0.drawRangeMarker((Graphics2D) null, categoryPlot0, periodAxis0, categoryMarker0, (Rectangle2D) null);
      assertTrue(levelRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, logarithmicAxis0, boxAndWhiskerRenderer0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      boxAndWhiskerRenderer0.drawDomainMarker((Graphics2D) null, categoryPlot0, categoryAxis3D0, categoryMarker0, (Rectangle2D) null);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(")#UUz2v p|");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      statisticalBarRenderer0.drawRangeLine((Graphics2D) null, combinedRangeCategoryPlot0, logarithmicAxis0, rectangle2D_Double0, 500, logarithmicAxis0.DEFAULT_TICK_MARK_PAINT, logarithmicAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 6);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CategoryPlot categoryPlot0 = stackedAreaRenderer0.getPlot();
      DateAxis dateAxis0 = new DateAxis();
      Rectangle rectangle0 = new Rectangle(10, 10, (-4236), 20);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      statisticalBarRenderer0.drawRangeLine(graphics2D0, combinedRangeCategoryPlot0, dateAxis0, rectangle0, 0.0F, categoryPlot0.DEFAULT_CROSSHAIR_PAINT, stackedAreaRenderer0.DEFAULT_STROKE);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null, 4.0, categoryAxis3D0.DEFAULT_TICK_MARK_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null, 0.0, (Paint) null, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.drawDomainLine((Graphics2D) null, combinedDomainCategoryPlot0, (Rectangle2D) null, 1.0F, boxAndWhiskerRenderer0.DEFAULT_OUTLINE_PAINT, combinedDomainCategoryPlot0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      scatterRenderer0.setDataBoundsIncludesVisibleSeriesOnly(false);
      Range range0 = scatterRenderer0.findRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Dimension dimension0 = new Dimension(2472, 10);
      Rectangle rectangle0 = new Rectangle(dimension0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.initialise((Graphics2D) null, rectangle0, combinedDomainCategoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Number[][] numberArray0 = new Number[2][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedDomainCategoryPlot0, defaultIntervalCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(3.0, 1.0F, true);
      stackedBarRenderer3D0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      assertTrue(stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.2, 3.0);
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      levelRenderer0.setSeriesURLGenerator(1, (CategoryURLGenerator) customCategoryURLGenerator0, false);
      assertTrue(levelRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
      assertTrue(lineRenderer3D0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("T?Xuc-b\"", decimalFormatSymbols0);
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator("Null 'orientation' argument.", decimalFormat0);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      layeredBarRenderer0.setSeriesToolTipGenerator(3, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0);
      assertTrue(layeredBarRenderer0.getShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
      statisticalBarRenderer0.setSeriesToolTipGenerator(1, (CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, false);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      waterfallBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = spiderWebPlot0.getLabelGenerator();
      statisticalBarRenderer0.setSeriesItemLabelGenerator(10, categoryItemLabelGenerator0, false);
      assertTrue(statisticalBarRenderer0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      ganttRenderer0.drawItemLabel((Graphics2D) null, plotOrientation0, jDBCCategoryDataset0, 10, 0, false, 139.74, (double) lineAndShapeRenderer0.ZERO, true);
      assertTrue(lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        lineAndShapeRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, (CategoryPlot) null, (CategoryDataset) null, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setSeriesURLGenerator(44, (CategoryURLGenerator) null);
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getSeriesURLGenerator(10);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = barRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Base item URL generator not cloneable.");
      LogAxis logAxis0 = new LogAxis("Base item URL generator not cloneable.");
      Number[][] numberArray0 = new Number[7][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.createHotSpotShape((Graphics2D) null, (Rectangle2D) null, (CategoryPlot) null, subCategoryAxis0, logAxis0, defaultIntervalCategoryDataset0, 6042, 3903, true, (CategoryItemRendererState) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
      GanttRenderer ganttRenderer1 = new GanttRenderer();
      boolean boolean0 = ganttRenderer1.equals(ganttRenderer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      int int0 = stackedBarRenderer3D0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-862.8941243659744), 123.38123);
      // Undeclared exception!
      try { 
        barRenderer3D0.setSeriesToolTipGenerator(Integer.MAX_VALUE, (CategoryToolTipGenerator) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, logarithmicAxis0, boxAndWhiskerRenderer0);
      LevelRenderer levelRenderer0 = new LevelRenderer();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(750.2189045, (double) boxAndWhiskerRenderer0.ZERO);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      Rectangle2D rectangle2D0 = logarithmicAxis0.DEFAULT_TICK_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      Rectangle2D rectangle2D1 = categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle(rectangle2D0, true, true);
      levelRenderer0.drawBackground(graphics2D0, categoryPlot0, rectangle2D1);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = ganttRenderer0.getSeriesItemLabelGenerator((-616));
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      ganttRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0);
      GanttRenderer ganttRenderer1 = (GanttRenderer)ganttRenderer0.clone();
      assertEquals(2.0, ganttRenderer1.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryURLGenerator categoryURLGenerator0 = waterfallBarRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, logarithmicAxis0, boxAndWhiskerRenderer0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(750.2189045, (double) boxAndWhiskerRenderer0.ZERO);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      Rectangle2D rectangle2D0 = logarithmicAxis0.DEFAULT_TICK_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      Rectangle2D rectangle2D1 = categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle(rectangle2D0, true, true);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.drawOutline(graphics2D0, categoryPlot0, rectangle2D1);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.getItemMiddle(false, 0.05, defaultBoxAndWhiskerCategoryDataset0, categoryAxis3D0, (Rectangle2D) null, (RectangleEdge) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      int int0 = ganttRenderer0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      int int0 = ganttRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      levelRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer3D0.getLegendItemLabelGenerator();
      assertNotNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Rectangle rectangle0 = new Rectangle(10, 10, 10, 9);
      CategoryItemRendererState categoryItemRendererState0 = statisticalBarRenderer0.initialise((Graphics2D) null, rectangle0, combinedDomainCategoryPlot0, (CategoryDataset) null, (PlotRenderingInfo) null);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(".]@$u'", boxAndWhiskerRenderer0.ZERO, (double) boxAndWhiskerRenderer0.ZERO, (double) boxAndWhiskerRenderer0.ZERO);
      boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      assertTrue(boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalBarRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ganttRenderer0.setSeriesItemLabelGenerator(3872, (CategoryItemLabelGenerator) null);
      assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
  }
}
