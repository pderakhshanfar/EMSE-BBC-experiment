/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 07:46:43 GMT 2021
 */

package org.mockito.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.RoundingMode;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.beans.HasPropertyWithValue;
import org.hamcrest.collection.IsIn;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.CombinableMatcher;
import org.hamcrest.core.Is;
import org.hamcrest.core.IsAnything;
import org.hamcrest.core.IsInstanceOf;
import org.junit.runner.RunWith;
import org.mockito.Answers;
import org.mockito.exceptions.Reporter;
import org.mockito.exceptions.base.MockitoAssertionError;
import org.mockito.exceptions.verification.NoInteractionsWanted;
import org.mockito.exceptions.verification.VerificationInOrderFailure;
import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
import org.mockito.internal.creation.util.MockitoMethodProxy;
import org.mockito.internal.debugging.LocationImpl;
import org.mockito.internal.debugging.VerboseMockInvocationLogger;
import org.mockito.internal.exceptions.VerificationAwareInvocation;
import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;
import org.mockito.internal.invocation.InvocationImpl;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.internal.invocation.MockitoMethod;
import org.mockito.internal.invocation.SerializableMethod;
import org.mockito.internal.invocation.StubInfoImpl;
import org.mockito.internal.invocation.realmethod.CleanTraceRealMethod;
import org.mockito.internal.invocation.realmethod.DefaultRealMethod;
import org.mockito.internal.invocation.realmethod.RealMethod;
import org.mockito.internal.listeners.NotifiedMethodInvocationReport;
import org.mockito.internal.matchers.LocalizedMatcher;
import org.mockito.internal.stubbing.StubbedInvocationMatcher;
import org.mockito.invocation.DescribedInvocation;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.invocation.Location;
import org.mockito.listeners.InvocationListener;
import org.mockito.mock.SerializableMode;
import org.mockito.stubbing.Answer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reporter_ESTest extends Reporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      Method method0 = null;
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation((String) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedStubbing((Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      Integer integer0 = new Integer(880);
      assertEquals(880, (int)integer0);
      assertNotNull(integer0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(integer0, mockitoMethod0, (Object[]) null, 880, (RealMethod) null);
      assertEquals(880, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertNotNull(invocationImpl0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(5, 880);
      assertEquals(5, discrepancy0.getWantedCount());
      assertEquals(880, discrepancy0.getActualCount());
      assertNotNull(discrepancy0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, invocationImpl0, locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InvocationMatcher invocationMatcher0 = null;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "a value ";
      String string1 = "Description should be non null!";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-2548), (-2548));
      assertEquals((-2548), discrepancy0.getActualCount());
      assertEquals((-2548), discrepancy0.getWantedCount());
      assertNotNull(discrepancy0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationOnMock invocationOnMock0 = null;
      int int0 = 655;
      String string0 = "";
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Stack<InvocationMatcher> stack0 = new Stack<InvocationMatcher>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((InvocationMatcher) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(45, 45);
      assertEquals(45, discrepancy0.getWantedCount());
      assertEquals(45, discrepancy0.getActualCount());
      assertNotNull(discrepancy0);
      
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocationsInOrder(discrepancy0, (DescribedInvocation) null, (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) reporter0;
      objectArray0[1] = (Object) mockitoMethod0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      InvocationImpl invocationImpl0 = new InvocationImpl((Object) null, mockitoMethod0, objectArray0, (-2), (RealMethod) null);
      assertEquals((-2), invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(invocationImpl0);
      assertEquals(3, objectArray0.length);
      
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWantedInOrder(invocationImpl0);
        fail("Expecting exception: VerificationInOrderFailure");
      
      } catch(VerificationInOrderFailure e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InvocationMatcher invocationMatcher0 = null;
      int int0 = 6;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWantedInOrder((Invocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = (Object) reporter0;
      objectArray0[2] = (Object) reporter0;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[3] = object2;
      objectArray0[4] = (Object) reporter0;
      objectArray0[5] = (Object) reporter0;
      Matcher<Object> matcher0 = IsIn.isOneOf(objectArray0);
      assertNotNull(matcher0);
      assertEquals(6, objectArray0.length);
      
      Is<Object> is0 = new Is<Object>(matcher0);
      assertNotNull(is0);
      assertEquals(6, objectArray0.length);
      
      AnyOf<Object> anyOf0 = AnyOf.anyOf(matcher0, (Matcher<? super Object>) is0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) is0, (Matcher<? super Object>) is0, (Matcher<? super Object>) matcher0);
      assertNotNull(anyOf0);
      assertEquals(6, objectArray0.length);
      
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher((List<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForSpyAnnotation((String) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(mockitoMethod0).isVarArgs();
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockitoMethod0;
      objectArray0[4] = (Object) stackTraceFilter0;
      objectArray0[5] = (Object) reporter0;
      objectArray0[6] = (Object) reporter0;
      objectArray0[7] = (Object) null;
      InvocationImpl invocationImpl0 = new InvocationImpl(reporter0, mockitoMethod0, objectArray0, 0, (RealMethod) null);
      assertEquals(0, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertNotNull(invocationImpl0);
      assertEquals(8, objectArray0.length);
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) invocationImpl0, (Throwable) null);
      assertEquals(0, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(notifiedMethodInvocationReport0.threwException());
      assertNotNull(notifiedMethodInvocationReport0);
      assertEquals(8, objectArray0.length);
      
      InvocationImpl invocationImpl1 = (InvocationImpl)notifiedMethodInvocationReport0.getInvocation();
      assertSame(invocationImpl0, invocationImpl1);
      assertSame(invocationImpl1, invocationImpl0);
      assertEquals(0, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(notifiedMethodInvocationReport0.threwException());
      assertFalse(invocationImpl1.isVerified());
      assertFalse(invocationImpl1.isIgnoredForVerification());
      assertEquals(0, invocationImpl1.getSequenceNumber());
      assertNotNull(invocationImpl1);
      assertEquals(8, objectArray0.length);
      
      LocationImpl locationImpl1 = new LocationImpl();
      assertNotNull(locationImpl1);
      assertFalse(locationImpl1.equals((Object)locationImpl0));
      
      // Undeclared exception!
      try { 
        reporter0.tooManyActualInvocations(0, 0, invocationImpl1, locationImpl1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      RealMethod realMethod0 = null;
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(mockitoMethod0).isVarArgs();
      Integer integer0 = new Integer(928);
      assertEquals(928, (int)integer0);
      assertNotNull(integer0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(integer0, mockitoMethod0, (Object[]) null, 928, (RealMethod) null);
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertEquals(928, invocationImpl0.getSequenceNumber());
      assertNotNull(invocationImpl0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodHasWrongReturnType((Method) null, (Method) null, object0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodHasWrongReturnType((Method) null, (Method) null, object0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationMatcher invocationMatcher0 = null;
      Stack<InvocationMatcher> stack0 = new Stack<InvocationMatcher>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      int int0 = 0;
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.tooManyActualInvocations(0, 0, (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(mockitoMethod0).isVarArgs();
      Integer integer0 = new Integer(922);
      assertEquals(922, (int)integer0);
      assertNotNull(integer0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      int int0 = (-1282);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = null;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) locationImpl0;
      objectArray0[3] = (Object) integer0;
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      DefaultRealMethod defaultRealMethod0 = new DefaultRealMethod(mockitoMethodProxy0);
      assertNotNull(defaultRealMethod0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl((Object) null, mockitoMethod0, objectArray0, 2147483645, defaultRealMethod0);
      assertEquals(2147483645, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(invocationImpl0);
      assertEquals(4, objectArray0.length);
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(2147483645, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(invocationMatcher0);
      assertEquals(4, objectArray0.length);
      
      Answer<String> answer0 = (Answer<String>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertEquals(2147483645, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(stubbedInvocationMatcher0);
      assertEquals(4, objectArray0.length);
      
      List<Matcher> list0 = (List<Matcher>)stubbedInvocationMatcher0.getMatchers();
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertEquals(2147483645, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(list0);
      assertEquals(4, objectArray0.length);
      
      InvocationMatcher invocationMatcher1 = new InvocationMatcher(invocationImpl0, list0);
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertEquals(2147483645, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(invocationMatcher1);
      assertFalse(invocationMatcher1.equals((Object)invocationMatcher0));
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        reporter0.tooManyActualInvocationsInOrder((-1282), 2147483645, invocationMatcher1, locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationMatcher invocationMatcher0 = null;
      Stack<InvocationMatcher> stack0 = new Stack<InvocationMatcher>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.tooManyActualInvocationsInOrder(0, 0, (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Object) null);
      assertFalse(notifiedMethodInvocationReport0.threwException());
      assertNotNull(notifiedMethodInvocationReport0);
      
      boolean boolean0 = notifiedMethodInvocationReport0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(notifiedMethodInvocationReport0.threwException());
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertFalse(notifiedMethodInvocationReport0.threwException());
      assertNull(describedInvocation0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvokedInOrder((DescribedInvocation) null, (DescribedInvocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hamcrest.core.CombinableMatcher$CombinableBothMatcher");
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(mockitoMethod0).isVarArgs();
      org.mockito.internal.reporting.Discrepancy discrepancy0 = null;
      Integer integer0 = new Integer(2316);
      assertEquals(2316, (int)integer0);
      assertNotNull(integer0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(integer0, mockitoMethod0, (Object[]) null, 2316, (RealMethod) null);
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertEquals(2316, invocationImpl0.getSequenceNumber());
      assertNotNull(invocationImpl0);
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertEquals(2316, invocationImpl0.getSequenceNumber());
      assertNotNull(invocationMatcher0);
      
      Answer<String> answer0 = (Answer<String>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertEquals(2316, invocationImpl0.getSequenceNumber());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertNotNull(stubbedInvocationMatcher0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvokedInOrder(invocationImpl0, stubbedInvocationMatcher0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      assertNotNull(string0);
      
      String string1 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        reporter0.smartNullPointerException("", locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      int int0 = 1;
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      vector0.setSize(7);
      assertEquals(7, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null, null, null, null, null, null, null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher((Matcher) null);
      assertNotNull(localizedMatcher0);
      
      boolean boolean0 = vector0.add(localizedMatcher0);
      assertTrue(vector0.contains(localizedMatcher0));
      assertTrue(boolean0);
      assertEquals(8, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null, null, null, null, null, null, null, Localized: null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfAdditionalMatchers("", 1, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationMatcher invocationMatcher0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.neverWantedButInvoked((DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zw1ZH1FexBc)&&j");
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      RealMethod realMethod0 = null;
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(mockitoMethod0).isVarArgs();
      Integer integer0 = new Integer(922);
      assertEquals(922, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "zw1ZH1FexBc)&&j";
      InvocationImpl invocationImpl0 = new InvocationImpl((Object) null, mockitoMethod0, objectArray0, 922, (RealMethod) null);
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertEquals(922, invocationImpl0.getSequenceNumber());
      assertNotNull(invocationImpl0);
      assertEquals(1, objectArray0.length);
      
      TreeSet<StubbedInvocationMatcher> treeSet0 = new TreeSet<StubbedInvocationMatcher>();
      assertNotNull(treeSet0);
      
      Matcher<StubbedInvocationMatcher> matcher0 = IsIn.isIn((Collection<StubbedInvocationMatcher>) treeSet0);
      assertNotNull(matcher0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      
      // Undeclared exception!
      try { 
        reporter0.neverWantedButInvoked(invocationImpl0, location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(mockitoMethod0).isVarArgs();
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      Reporter reporter1 = new Reporter();
      assertNotNull(reporter1);
      assertFalse(reporter1.equals((Object)reporter0));
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains(true));
      assertNotNull(treeSet0);
      
      IsIn<Object> isIn0 = new IsIn<Object>(treeSet0);
      assertFalse(treeSet0.contains(true));
      assertNotNull(isIn0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(isIn0);
      assertFalse(treeSet0.contains(true));
      assertNotNull(localizedMatcher0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockitoMethod0;
      objectArray0[1] = (Object) isIn0;
      objectArray0[2] = (Object) treeSet0;
      objectArray0[3] = (Object) ">";
      objectArray0[4] = (Object) localizedMatcher0;
      objectArray0[5] = (Object) reporter1;
      InvocationImpl invocationImpl0 = new InvocationImpl(localizedMatcher0, mockitoMethod0, objectArray0, 8, (RealMethod) null);
      assertFalse(treeSet0.contains(true));
      assertFalse(invocationImpl0.isVerified());
      assertEquals(8, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertNotNull(invocationImpl0);
      assertEquals(6, objectArray0.length);
      
      // Undeclared exception!
      try { 
        reporter1.wrongTypeOfArgumentToReturn(invocationImpl0, (String) null, class0, 2316);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(mockitoMethod0).isVarArgs();
      Integer integer0 = new Integer(924);
      assertEquals(924, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2896);
      assertEquals(2896, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      InvocationImpl invocationImpl0 = new InvocationImpl(integer1, mockitoMethod0, (Object[]) null, 924, (RealMethod) null);
      assertFalse(invocationImpl0.isVerified());
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertNotNull(invocationImpl0);
      assertFalse(integer1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentPositionRangeAtInvocationTime(invocationImpl0, true, 634);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.argumentsAreDifferent("ao>e=hBG", "ao>e=hBG", locationImpl0);
        fail("Expecting exception: ArgumentsAreDifferent");
      
      } catch(ArgumentsAreDifferent e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.wrongTypeOfArgumentToReturn((InvocationOnMock) null, ">qp2@ z05xyAC+^zF^", class0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentPositionRangeAtInvocationTime((InvocationOnMock) null, true, 2067);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedVerificationException(locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "j0P~}!&H8$L}|Yc'Vf)";
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.argumentsAreDifferent((String) null, "j0P~}!&H8$L}|Yc'Vf)", locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.argumentsAreDifferent((String) null, "j0P~}!&H8$L}|Yc'Vf)", locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "  - anonymous classes";
      String string1 = "Z1Q;lNz VvS";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Z1Q;lNz VvS");
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Z1Q;lNz VvS", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Z1Q;lNz VvS", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z1Q;lNz VvS");
      assertNotNull(mockPrintWriter0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Z1Q;lNz VvS", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Z1Q;lNz VvS", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, stackTraceElementArray0.length);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "Z1Q;lNz VvS");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedVerificationException((Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      RealMethod realMethod0 = null;
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(mockitoMethod0).getJavaMethod();
      doReturn(true).when(mockitoMethod0).isVarArgs();
      int int0 = 924;
      Integer integer0 = new Integer(924);
      assertEquals(924, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3,TCg.v `PE;k@>");
      assertFalse(boolean0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(integer0, mockitoMethod0, (Object[]) null, 924, (RealMethod) null);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(invocationImpl0);
      assertTrue(integer0.equals((Object)int0));
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(invocationMatcher0);
      assertTrue(integer0.equals((Object)int0));
      
      Method method0 = invocationMatcher0.getMethod();
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNull(method0);
      assertTrue(integer0.equals((Object)int0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodDoesNotExistOnDelegate((Method) null, object0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string1 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodDoesNotExistOnDelegate((Method) null, locationImpl0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      RealMethod realMethod0 = null;
      Integer integer0 = new Integer(924);
      assertEquals(924, (int)integer0);
      assertNotNull(integer0);
      
      Field field0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      // Undeclared exception!
      try { 
        reporter0.fieldInitialisationThrewException((Field) null, sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(mockitoMethod0).getJavaMethod();
      doReturn(true).when(mockitoMethod0).isVarArgs();
      int int0 = 924;
      Integer integer0 = new Integer(924);
      assertEquals(924, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      InvocationImpl invocationImpl0 = new InvocationImpl(integer0, mockitoMethod0, (Object[]) null, 924, (RealMethod) null);
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertNotNull(invocationImpl0);
      assertTrue(integer0.equals((Object)int0));
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertNotNull(invocationMatcher0);
      assertTrue(integer0.equals((Object)int0));
      
      Answer<String> answer0 = (Answer<String>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertNotNull(stubbedInvocationMatcher0);
      assertTrue(integer0.equals((Object)int0));
      
      Method method0 = invocationImpl0.getMethod();
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertNull(method0);
      assertTrue(integer0.equals((Object)int0));
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LinkedList<VerificationAwareInvocation> linkedList0 = new LinkedList<VerificationAwareInvocation>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWanted(invocationImpl0, linkedList0);
        fail("Expecting exception: NoInteractionsWanted");
      
      } catch(NoInteractionsWanted e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      String string0 = "AYO_6}9";
      StackTraceElement stackTraceElement0 = new StackTraceElement("Z~t g39HG", "", "AYO_6}9", (-606));
      assertEquals("Z~t g39HG", stackTraceElement0.getClassName());
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals((-606), stackTraceElement0.getLineNumber());
      assertEquals("Z~t g39HG.(AYO_6}9)", stackTraceElement0.toString());
      assertEquals("AYO_6}9", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement[] stackTraceElementArray1 = stackTraceFilter0.filter(stackTraceElementArray0, false);
      assertNotSame(stackTraceElementArray0, stackTraceElementArray1);
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertNotNull(stackTraceElementArray1);
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertEquals(1, stackTraceElementArray0.length);
      assertEquals(1, stackTraceElementArray1.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n`");
      assertFalse(boolean0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedStubbing(locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      ArrayList<VerificationAwareInvocation> arrayList0 = new ArrayList<VerificationAwareInvocation>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWanted((Invocation) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.stubPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.stubPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      RealMethod realMethod0 = null;
      // Undeclared exception!
      try { 
        reporter0.nullPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";b8w<Z=U)zxP4X(");
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.mocksHaveToBePassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesRequiresAtLeastOneInterface();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.reportNoSubMatchersFound("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)71}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(mockitoMethod0).getJavaMethod();
      doReturn(true).when(mockitoMethod0).isVarArgs();
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer(924);
      assertEquals(924, (int)integer0);
      assertNotNull(integer0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(integer0, mockitoMethod0, (Object[]) null, 924, (RealMethod) null);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(invocationImpl0);
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(invocationMatcher0);
      
      Method method0 = invocationMatcher0.getMethod();
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNull(method0);
      
      Answer<String> answer0 = (Answer<String>) mock(Answer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) invocationMatcher0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Throwable) sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNotNull(notifiedMethodInvocationReport0);
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNull(describedInvocation0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      org.mockito.internal.reporting.Discrepancy discrepancy0 = null;
      Integer integer0 = new Integer(924);
      assertEquals(924, (int)integer0);
      assertNotNull(integer0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(integer0, mockitoMethod0, (Object[]) null, 924, (RealMethod) null);
      assertFalse(invocationImpl0.isVerified());
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertNotNull(invocationImpl0);
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertFalse(invocationImpl0.isVerified());
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertNotNull(invocationMatcher0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("\"vBd-211|G2az", map0, sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: \"vBd-211|G2az", sQLClientInfoException1.toString());
      assertEquals("\"vBd-211|G2az", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLException sQLException0 = new SQLException("\"vBd-211|G2az", sQLClientInfoException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: \"vBd-211|G2az", sQLClientInfoException1.toString());
      assertEquals("\"vBd-211|G2az", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("\"vBd-211|G2az", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: \"vBd-211|G2az", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      // Undeclared exception!
      try { 
        reporter0.cannotInjectDependency((Field) null, "\"vBd-211|G2az", sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Integer integer0 = new Integer(924);
      assertEquals(924, (int)integer0);
      assertNotNull(integer0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("\"vBd-211|G2az", map0, sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("\"vBd-211|G2az", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: \"vBd-211|G2az", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLException sQLException0 = new SQLException("\"vBd-211|G2az", sQLClientInfoException1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("\"vBd-211|G2az", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: \"vBd-211|G2az", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: \"vBd-211|G2az", sQLException0.toString());
      assertEquals("\"vBd-211|G2az", sQLException0.getMessage());
      assertNotNull(sQLException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      // Undeclared exception!
      try { 
        reporter0.cannotInjectDependency((Field) null, (Object) null, sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.moreThanOneAnnotationNotAllowed((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(mockitoMethod0).getJavaMethod();
      doReturn(true).when(mockitoMethod0).isVarArgs();
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer(924);
      assertEquals(924, (int)integer0);
      assertNotNull(integer0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(integer0, mockitoMethod0, (Object[]) null, 924, (RealMethod) null);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(invocationImpl0);
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(invocationMatcher0);
      
      Method method0 = invocationMatcher0.getMethod();
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNull(method0);
      
      Answer<String> answer0 = (Answer<String>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertNotNull(stubbedInvocationMatcher0);
      
      objectArray0[0] = (Object) reporter0;
      objectArray0[1] = (Object) reporter0;
      Stack<InvocationMatcher> stack0 = new Stack<InvocationMatcher>();
      assertFalse(stack0.contains(invocationMatcher0));
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((InvocationMatcher) stubbedInvocationMatcher0);
      assertFalse(stack0.contains(invocationMatcher0));
      assertTrue(boolean0);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) invocationImpl0, (List<? extends DescribedInvocation>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationOnMock invocationOnMock0 = null;
      Stack<InvocationMatcher> stack0 = new Stack<InvocationMatcher>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      InvocationMatcher invocationMatcher0 = null;
      boolean boolean0 = stack0.add((InvocationMatcher) null);
      assertTrue(boolean0);
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Location location0 = null;
      // Undeclared exception!
      try { 
        reporter0.smartNullPointerException("", (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      RealMethod realMethod0 = null;
      Integer integer0 = new Integer(924);
      assertEquals(924, (int)integer0);
      assertNotNull(integer0);
      
      Field field0 = null;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      Throwable[] throwableArray0 = sQLClientInfoException0.getSuppressed();
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentRangeAtIdentityAnswerCreationTime();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      ArrayList<Invocation> arrayList0 = new ArrayList<Invocation>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      List<InvocationMatcher> list0 = InvocationMatcher.createFrom(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Answer<String> answer0 = (Answer<String>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      objectArray0[0] = (Object) reporter0;
      objectArray0[1] = (Object) reporter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      int int0 = 0;
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentRangeAtIdentityAnswerCreationTime();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Stack<InvocationMatcher> stack0 = new Stack<InvocationMatcher>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      InvocationMatcher invocationMatcher0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(mockitoMethod0).getJavaMethod();
      doReturn(true).when(mockitoMethod0).isVarArgs();
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer(924);
      assertEquals(924, (int)integer0);
      assertNotNull(integer0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(integer0, mockitoMethod0, (Object[]) null, 924, (RealMethod) null);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertNotNull(invocationImpl0);
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertNotNull(invocationMatcher0);
      
      Method method0 = invocationMatcher0.getMethod();
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertNull(method0);
      
      Answer<String> answer0 = (Answer<String>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertNotNull(stubbedInvocationMatcher0);
      
      objectArray0[0] = (Object) reporter0;
      objectArray0[1] = (Object) reporter0;
      Stack<InvocationMatcher> stack0 = new Stack<InvocationMatcher>();
      assertFalse(stack0.contains(invocationMatcher0));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) invocationImpl0, (List<? extends DescribedInvocation>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invalidUseOfMatchers(15, (List<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesCannotContainMockedType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("2{G~fXPC~H`_S0T.");
      assertEquals("2{G~fXPC~H`_S0T.", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: 2{G~fXPC~H`_S0T.", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForSpyAnnotation("2{G~fXPC~H`_S0T.", sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedAtMostX(2, 2);
        fail("Expecting exception: MockitoAssertionError");
      
      } catch(MockitoAssertionError e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) reporter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "{";
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer(924);
      assertEquals(924, (int)integer0);
      assertNotNull(integer0);
      
      InvocationImpl invocationImpl0 = new InvocationImpl(integer0, mockitoMethod0, (Object[]) null, 924, (RealMethod) null);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(invocationImpl0);
      
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocationImpl0);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertNotNull(invocationMatcher0);
      
      Answer<String> answer0 = (Answer<String>) mock(Answer.class, new ViolatedAssumptionAnswer());
      StubbedInvocationMatcher stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, answer0);
      assertEquals(924, invocationImpl0.getSequenceNumber());
      assertFalse(invocationImpl0.isIgnoredForVerification());
      assertFalse(invocationImpl0.isVerified());
      assertFalse(stubbedInvocationMatcher0.wasUsed());
      assertNotNull(stubbedInvocationMatcher0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocationsInOrder((org.mockito.internal.reporting.Discrepancy) null, stubbedInvocationMatcher0, locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, object0);
      assertFalse(notifiedMethodInvocationReport0.threwException());
      assertNotNull(notifiedMethodInvocationReport0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertFalse(notifiedMethodInvocationReport0.threwException());
      assertNull(describedInvocation0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher((Matcher) null);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotSame(location0, locationImpl0);
      assertNotNull(location0);
      assertFalse(location0.equals((Object)locationImpl0));
      
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocationsInOrder((org.mockito.internal.reporting.Discrepancy) null, (DescribedInvocation) null, location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) reporter0;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[3] = object2;
      objectArray0[4] = (Object) reporter0;
      objectArray0[5] = (Object) reporter0;
      Matcher<Object> matcher0 = IsIn.isOneOf(objectArray0);
      assertNotNull(matcher0);
      assertEquals(6, objectArray0.length);
      
      Is<Object> is0 = new Is<Object>(matcher0);
      assertNotNull(is0);
      assertEquals(6, objectArray0.length);
      
      AnyOf<Object> anyOf0 = AnyOf.anyOf(matcher0, (Matcher<? super Object>) is0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) is0, (Matcher<? super Object>) is0, (Matcher<? super Object>) matcher0);
      assertNotNull(anyOf0);
      assertEquals(6, objectArray0.length);
      
      Matcher<Object> matcher1 = IsAnything.anything("6{^L-7`5XtSs{zRo4");
      assertNotNull(matcher1);
      assertFalse(matcher1.equals((Object)matcher0));
      
      CombinableMatcher<Object> combinableMatcher0 = new CombinableMatcher<Object>(matcher1);
      assertNotNull(combinableMatcher0);
      assertFalse(matcher1.equals((Object)matcher0));
      
      Matcher<Object> matcher2 = AllOf.allOf((Matcher<? super Object>) is0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) is0);
      assertNotNull(matcher2);
      assertFalse(matcher2.equals((Object)matcher0));
      assertFalse(matcher2.equals((Object)matcher1));
      assertFalse(matcher0.equals((Object)matcher1));
      assertEquals(6, objectArray0.length);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher1);
      assertNotNull(localizedMatcher0);
      assertFalse(matcher1.equals((Object)matcher2));
      assertFalse(matcher1.equals((Object)matcher0));
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfApi();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.defaultAnswerDoesNotAcceptNullParameter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      ArrayList<LocalizedMatcher> arrayList0 = new ArrayList<LocalizedMatcher>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      boolean boolean0 = arrayList0.retainAll(arrayList1);
      assertFalse(boolean0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Reporter reporter1 = new Reporter();
      assertNotNull(reporter1);
      assertFalse(reporter1.equals((Object)reporter0));
      
      // Undeclared exception!
      try { 
        reporter1.misplacedArgumentMatcher(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LinkedList<LocalizedMatcher> linkedList0 = new LinkedList<LocalizedMatcher>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotVerifyToString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "I`BDyw [wCtOS&G";
      // Undeclared exception!
      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("I`BDyw [wCtOS&G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      PriorityQueue<LocalizedMatcher> priorityQueue0 = new PriorityQueue<LocalizedMatcher>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) priorityQueue0;
      objectArray0[1] = (Object) reporter0;
      objectArray0[2] = (Object) reporter0;
      objectArray0[3] = (Object) "M~Pnh=FztB[";
      objectArray0[4] = (Object) reporter0;
      objectArray0[5] = (Object) "M~Pnh=FztB[";
      objectArray0[6] = (Object) "M~Pnh=FztB[";
      objectArray0[7] = (Object) reporter0;
      objectArray0[8] = (Object) "M~Pnh=FztB[";
      Matcher<Object> matcher0 = IsIn.isIn(objectArray0);
      assertNotNull(matcher0);
      assertEquals(9, objectArray0.length);
      
      AnyOf<Object> anyOf0 = AnyOf.anyOf(matcher0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher0);
      assertNotNull(anyOf0);
      assertEquals(9, objectArray0.length);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(anyOf0);
      assertNotNull(localizedMatcher0);
      assertEquals(9, objectArray0.length);
      
      boolean boolean0 = priorityQueue0.add(localizedMatcher0);
      assertTrue(priorityQueue0.contains(localizedMatcher0));
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(9, objectArray0.length);
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfAdditionalMatchers("M~Pnh=FztB[", 6, priorityQueue0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        reporter0.unsupportedCombinationOfAnnotations("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 13;
      intArray0[3] = (-432);
      intArray0[4] = 17;
      intArray0[5] = 0;
      intArray0[6] = 6;
      intArray0[7] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "8=}oumvkHK>84s", intArray0);
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("8=}oumvkHK>84s", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {10, 10, 13, (-432), 17, 0, 6, 10}, intArray0);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        reporter0.checkedExceptionInvalid(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotCallAbstractRealMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.noArgumentValueWasCaptured();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.noArgumentValueWasCaptured();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.spyAndDelegateAreMutuallyExclusive();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.missingMethodInvocation();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P_!]D]");
      assertFalse(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("CALLS_REAL_METHODS");
      assertNotNull(mockPrintStream0);
      
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger(mockPrintStream0);
      assertNotNull(verboseMockInvocationLogger0);
      
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      Class<Object> class1 = Object.class;
      Matcher<Object> matcher0 = IsInstanceOf.any(class1);
      assertNotNull(matcher0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) reporter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) reporter0;
      objectArray0[5] = (Object) class1;
      objectArray0[6] = (Object) matcher0;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[7] = object2;
      Matcher<Object> matcher1 = IsIn.isOneOf(objectArray0);
      assertNotNull(matcher1);
      assertFalse(matcher1.equals((Object)matcher0));
      assertEquals(8, objectArray0.length);
      
      AnyOf<Object> anyOf0 = AnyOf.anyOf(matcher0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher1);
      assertNotNull(anyOf0);
      assertFalse(matcher1.equals((Object)matcher0));
      assertFalse(matcher0.equals((Object)matcher1));
      assertEquals(8, objectArray0.length);
      
      Matcher<Object> matcher2 = IsAnything.anything("Wanted ");
      assertNotNull(matcher2);
      assertFalse(matcher2.equals((Object)matcher1));
      assertFalse(matcher2.equals((Object)matcher0));
      
      CombinableMatcher<Object> combinableMatcher0 = new CombinableMatcher<Object>(matcher1);
      assertNotNull(combinableMatcher0);
      assertFalse(matcher1.equals((Object)matcher2));
      assertFalse(matcher1.equals((Object)matcher0));
      assertEquals(8, objectArray0.length);
      
      Matcher<Object> matcher3 = AllOf.allOf((Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) anyOf0, (Matcher<? super Object>) matcher2, (Matcher<? super Object>) combinableMatcher0);
      assertNotNull(matcher3);
      assertFalse(matcher1.equals((Object)matcher2));
      assertFalse(matcher1.equals((Object)matcher0));
      assertFalse(matcher2.equals((Object)matcher1));
      assertFalse(matcher2.equals((Object)matcher0));
      assertFalse(matcher0.equals((Object)matcher2));
      assertFalse(matcher0.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher0));
      assertFalse(matcher3.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher2));
      assertEquals(8, objectArray0.length);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher3);
      assertNotNull(localizedMatcher0);
      assertFalse(matcher1.equals((Object)matcher2));
      assertFalse(matcher1.equals((Object)matcher0));
      assertFalse(matcher1.equals((Object)matcher3));
      assertFalse(matcher2.equals((Object)matcher3));
      assertFalse(matcher2.equals((Object)matcher1));
      assertFalse(matcher2.equals((Object)matcher0));
      assertFalse(matcher0.equals((Object)matcher3));
      assertFalse(matcher0.equals((Object)matcher2));
      assertFalse(matcher0.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher0));
      assertFalse(matcher3.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher2));
      assertEquals(8, objectArray0.length);
      
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, localizedMatcher0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-1517), 717);
      assertEquals(717, discrepancy0.getActualCount());
      assertEquals((-1517), discrepancy0.getWantedCount());
      assertNotNull(discrepancy0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        reporter0.cannotMockFinalClass(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      ArrayList<LocalizedMatcher> arrayList0 = new ArrayList<LocalizedMatcher>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
      try { 
        reporter0.cannotMockFinalClass(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      SQLDataException sQLDataException0 = new SQLDataException("{436k}svGQ~ugiXa", "]lEoM|l2vWppOEO");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("'+W&1_", sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]k&A}&_#mtm}h", "]k&A}&_#mtm}h", 13, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation("", sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerify(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.onlyVoidMethodsCanBeSetToDoNothing();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.nullPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      // Undeclared exception!
      try { 
        reporter0.inOrderRequiresFamiliarMock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      Class<Object> class1 = Object.class;
      IsInstanceOf.any(class1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) reporter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) reporter0;
      SerializableMode serializableMode0 = SerializableMode.ACROSS_CLASSLOADERS;
      // Undeclared exception!
      try { 
        reporter0.usingConstructorWithFancySerializable(serializableMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<Object> class0 = Object.class;
      SerializableMode serializableMode0 = SerializableMode.BASIC;
      // Undeclared exception!
      try { 
        reporter0.usingConstructorWithFancySerializable(serializableMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.cannotStubWithNullThrowable();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.mocksHaveToBePassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      String string0 = "  //correct spying:";
      String string1 = ")";
      // Undeclared exception!
      try { 
        reporter0.wrongTypeOfReturnValue("  //correct spying:", "  //correct spying:", ")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.wrongTypeOfReturnValue("Mockito cannot verify toString()", "Mockito cannot verify toString()", "6%v,PId S2Wq|\r}u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.invocationListenersRequiresAtLeastOneListener();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger((PrintStream) null);
      String string0 = "2):J)(c!hPX";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.mockito.exceptions.misusing.CannotVerifyStubOnlyMock", "@", 906);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "2):J)(c!hPX", 2948, sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        reporter0.invocationListenerThrewException(verboseMockInvocationLogger0, sQLFeatureNotSupportedException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      String string0 = " in ";
      MockPrintStream mockPrintStream0 = new MockPrintStream(" in ");
      String string1 = "";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger(printStream0);
      DataTruncation dataTruncation0 = new DataTruncation(13, true, false, 2152, 13);
      dataTruncation0.getDataSize();
      dataTruncation0.printStackTrace(printStream0);
      // Undeclared exception!
      try { 
        reporter0.invocationListenerThrewException(verboseMockInvocationLogger0, dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      int int0 = 0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLIntegrityConstraintViolationException0);
      batchUpdateException0.getUpdateCounts();
      batchUpdateException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        reporter0.invocationListenerThrewException((InvocationListener) null, batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.invocationListenerDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      PriorityQueue<InvocationMatcher> priorityQueue0 = new PriorityQueue<InvocationMatcher>();
      IsIn<InvocationMatcher> isIn0 = new IsIn<InvocationMatcher>(priorityQueue0);
      HasPropertyWithValue<InvocationImpl> hasPropertyWithValue0 = new HasPropertyWithValue<InvocationImpl>("org.mockito.internal.invocation.StubInfoImpl", isIn0);
      isIn0.toString();
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(hasPropertyWithValue0);
      vector0.add(localizedMatcher0);
      vector0.removeAllElements();
      // Undeclared exception!
      try { 
        reporter0.invalidUseOfMatchers(1024, vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }
}
