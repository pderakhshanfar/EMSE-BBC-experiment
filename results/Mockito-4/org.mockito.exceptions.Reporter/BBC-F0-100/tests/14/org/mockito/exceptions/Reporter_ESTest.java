/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 02:59:55 GMT 2021
 */

package org.mockito.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyDescriptor;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.beans.HasProperty;
import org.hamcrest.beans.HasPropertyWithValue;
import org.hamcrest.beans.SamePropertyValuesAs;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.Is;
import org.hamcrest.core.IsAnything;
import org.hamcrest.core.IsNot;
import org.hamcrest.core.IsNull;
import org.hamcrest.core.IsSame;
import org.junit.runner.RunWith;
import org.mockito.exceptions.Reporter;
import org.mockito.exceptions.base.MockitoAssertionError;
import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
import org.mockito.internal.creation.util.MockitoMethodProxy;
import org.mockito.internal.debugging.LocationImpl;
import org.mockito.internal.debugging.VerboseMockInvocationLogger;
import org.mockito.internal.exceptions.VerificationAwareInvocation;
import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;
import org.mockito.internal.invocation.InvocationImpl;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.internal.invocation.MockitoMethod;
import org.mockito.internal.invocation.SerializableMethod;
import org.mockito.internal.invocation.StubInfoImpl;
import org.mockito.internal.invocation.realmethod.CleanTraceRealMethod;
import org.mockito.internal.invocation.realmethod.DefaultRealMethod;
import org.mockito.internal.invocation.realmethod.RealMethod;
import org.mockito.internal.listeners.NotifiedMethodInvocationReport;
import org.mockito.internal.matchers.LocalizedMatcher;
import org.mockito.internal.stubbing.StubbedInvocationMatcher;
import org.mockito.invocation.DescribedInvocation;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.invocation.Location;
import org.mockito.listeners.InvocationListener;
import org.mockito.mock.SerializableMode;
import org.mockito.stubbing.Answer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reporter_ESTest extends Reporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Reporter reporter1 = new Reporter();
      assertNotNull(reporter1);
      assertFalse(reporter1.equals((Object)reporter0));
      
      Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(invocation0).getMock();
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      CleanTraceRealMethod cleanTraceRealMethod0 = new CleanTraceRealMethod(mockitoMethodProxy0);
      assertNotNull(cleanTraceRealMethod0);
      
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentPositionRangeAtInvocationTime(invocation0, true, (-435));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerify((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForSpyAnnotation("org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = null;
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodHasWrongReturnType((Method) null, (Method) null, (Object) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Invocation invocation0 = null;
      Invocation invocation1 = null;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-20), (-20));
      assertNotNull(discrepancy0);
      assertEquals((-20), discrepancy0.getWantedCount());
      assertEquals((-20), discrepancy0.getActualCount());
      
      Location location0 = null;
      String string0 = discrepancy0.getPluralizedActualCount();
      assertNotNull(string0);
      assertEquals((-20), discrepancy0.getWantedCount());
      assertEquals((-20), discrepancy0.getActualCount());
      assertEquals("-20 times", string0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.argumentsAreDifferent("]<", "]<", (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher((List<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-4935), (-2874));
      assertNotNull(discrepancy0);
      assertEquals((-4935), discrepancy0.getWantedCount());
      assertEquals((-2874), discrepancy0.getActualCount());
      
      IsAnything<Integer> isAnything0 = new IsAnything<Integer>();
      assertNotNull(isAnything0);
      
      Matcher<Integer> matcher0 = Is.is((Matcher<Integer>) isAnything0);
      assertNotNull(matcher0);
      
      AnyOf<Integer> anyOf0 = AnyOf.anyOf((Matcher<Integer>) isAnything0, (Matcher<? super Integer>) matcher0, (Matcher<? super Integer>) matcher0, (Matcher<? super Integer>) matcher0, (Matcher<? super Integer>) isAnything0);
      assertNotNull(anyOf0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(anyOf0);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, (DescribedInvocation) null, location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedVerificationException((Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Stack<VerificationAwareInvocation> stack0 = new Stack<VerificationAwareInvocation>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add((VerificationAwareInvocation) null);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodDoesNotExistOnDelegate((Method) null, (Object) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LinkedList<VerificationAwareInvocation> linkedList0 = new LinkedList<VerificationAwareInvocation>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Location location0 = null;
      // Undeclared exception!
      try { 
        reporter0.unfinishedStubbing((Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      int int0 = 17;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWantedInOrder((Invocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedStubbing(locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invalidUseOfMatchers(12, (List<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      SerializableMode serializableMode0 = SerializableMode.ACROSS_CLASSLOADERS;
      assertEquals(SerializableMode.ACROSS_CLASSLOADERS, serializableMode0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotInjectDependency((Field) null, serializableMode0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = null;
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.tooManyActualInvocationsInOrder(490, 490, (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        reporter0.tooManyActualInvocations((-4911), 0, (DescribedInvocation) null, (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocationsInOrder((org.mockito.internal.reporting.Discrepancy) null, (DescribedInvocation) null, (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Throwable) null);
      assertNotNull(notifiedMethodInvocationReport0);
      assertFalse(notifiedMethodInvocationReport0.threwException());
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertNull(describedInvocation0);
      assertFalse(notifiedMethodInvocationReport0.threwException());
      
      String string0 = "utmuS<";
      LinkedList<InvocationImpl> linkedList0 = new LinkedList<InvocationImpl>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reporter0.wrongTypeOfArgumentToReturn((InvocationOnMock) null, "utmuS<", class0, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("*lRX$zB8`(/f/mfYV,", "equalToIgnoringCase(", batchUpdateException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *lRX$zB8`(/f/mfYV,", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("*lRX$zB8`(/f/mfYV,", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("equalToIgnoringCase(", sQLFeatureNotSupportedException0.getSQLState());
      
      SQLWarning sQLWarning0 = new SQLWarning("*lRX$zB8`(/f/mfYV,", "G+NG{oU1M'?", (-733), sQLFeatureNotSupportedException0);
      assertNotNull(sQLWarning0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *lRX$zB8`(/f/mfYV,", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("*lRX$zB8`(/f/mfYV,", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("equalToIgnoringCase(", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("G+NG{oU1M'?", sQLWarning0.getSQLState());
      assertEquals("*lRX$zB8`(/f/mfYV,", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: *lRX$zB8`(/f/mfYV,", sQLWarning0.toString());
      assertEquals((-733), sQLWarning0.getErrorCode());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("G+NG{oU1M'?", "G+NG{oU1M'?", (-1), sQLWarning0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *lRX$zB8`(/f/mfYV,", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("*lRX$zB8`(/f/mfYV,", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("equalToIgnoringCase(", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("G+NG{oU1M'?", sQLWarning0.getSQLState());
      assertEquals("*lRX$zB8`(/f/mfYV,", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: *lRX$zB8`(/f/mfYV,", sQLWarning0.toString());
      assertEquals((-733), sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: G+NG{oU1M'?", sQLTransactionRollbackException0.toString());
      assertEquals((-1), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("G+NG{oU1M'?", sQLTransactionRollbackException0.getSQLState());
      assertEquals("G+NG{oU1M'?", sQLTransactionRollbackException0.getMessage());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hamcrest.collection.IsArrayContaining", sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: *lRX$zB8`(/f/mfYV,", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("*lRX$zB8`(/f/mfYV,", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("equalToIgnoringCase(", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("G+NG{oU1M'?", sQLWarning0.getSQLState());
      assertEquals("*lRX$zB8`(/f/mfYV,", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: *lRX$zB8`(/f/mfYV,", sQLWarning0.toString());
      assertEquals((-733), sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: G+NG{oU1M'?", sQLTransactionRollbackException0.toString());
      assertEquals((-1), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("G+NG{oU1M'?", sQLTransactionRollbackException0.getSQLState());
      assertEquals("G+NG{oU1M'?", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: org.hamcrest.collection.IsArrayContaining", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("org.hamcrest.collection.IsArrayContaining", sQLNonTransientException0.getMessage());
      
      // Undeclared exception!
      try { 
        reporter0.fieldInitialisationThrewException((Field) null, sQLNonTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.smartNullPointerException(":;lwWxl<", locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotCallAbstractRealMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      boolean boolean0 = true;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.neverWantedButInvoked((DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation("", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = new Integer(1);
      assertEquals(1, int0);
      
      LinkedList<VerificationAwareInvocation> linkedList0 = new LinkedList<VerificationAwareInvocation>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWanted((Invocation) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Invocation invocation0 = null;
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocationsInOrder((org.mockito.internal.reporting.Discrepancy) null, (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationOnMock invocationOnMock0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfAdditionalMatchers("l+Bc c9,O{:XZ!CG4", 1345, (Collection<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.inOrderRequiresFamiliarMock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationOnMock invocationOnMock0 = null;
      boolean boolean0 = true;
      int int0 = 0;
      // Undeclared exception!
      try { 
        reporter0.nullPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Throwable) null);
      assertNotNull(notifiedMethodInvocationReport0);
      assertFalse(notifiedMethodInvocationReport0.threwException());
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertNull(describedInvocation0);
      assertFalse(notifiedMethodInvocationReport0.threwException());
      
      String string0 = "utmuS<";
      LinkedList<InvocationImpl> linkedList0 = new LinkedList<InvocationImpl>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      IsNull<Integer> isNull0 = new IsNull<Integer>();
      assertNotNull(isNull0);
      
      Matcher<Object> matcher0 = IsNull.nullValue();
      assertNotNull(matcher0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(isNull0);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      
      // Undeclared exception!
      try { 
        reporter0.argumentsAreDifferent("P&SLD_ZNSJB$1", "P&SLD_ZNSJB$1", location0);
        fail("Expecting exception: ArgumentsAreDifferent");
      
      } catch(ArgumentsAreDifferent e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 3);
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      Matcher<InvocationMatcher> matcher0 = Is.isA(class0);
      assertNotNull(matcher0);
      
      Matcher<Object> matcher1 = HasPropertyWithValue.hasProperty("", (Matcher<?>) matcher0);
      assertNotNull(matcher1);
      
      matcherArray0[0] = matcher1;
      Matcher<Object> matcher2 = IsAnything.anything();
      assertNotNull(matcher2);
      assertFalse(matcher2.equals((Object)matcher1));
      
      matcherArray0[1] = matcher2;
      Matcher<Object> matcher3 = IsNot.not(matcher2);
      assertNotNull(matcher3);
      assertFalse(matcher2.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher2));
      
      matcherArray0[2] = matcher3;
      AnyOf<Object> anyOf0 = AnyOf.anyOf((Matcher<? super Object>[]) matcherArray0);
      assertNotNull(anyOf0);
      assertEquals(3, matcherArray0.length);
      
      Matcher<Object> matcher4 = AllOf.allOf((Matcher<? super Object>) anyOf0, (Matcher<? super Object>) anyOf0, (Matcher<? super Object>) matcher3);
      assertNotNull(matcher4);
      assertEquals(3, matcherArray0.length);
      assertFalse(matcher2.equals((Object)matcher3));
      assertFalse(matcher2.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher2));
      assertFalse(matcher4.equals((Object)matcher1));
      assertFalse(matcher4.equals((Object)matcher2));
      assertFalse(matcher4.equals((Object)matcher3));
      
      HasPropertyWithValue<Object> hasPropertyWithValue0 = new HasPropertyWithValue<Object>("", matcher4);
      assertNotNull(hasPropertyWithValue0);
      assertEquals(3, matcherArray0.length);
      assertFalse(matcher2.equals((Object)matcher4));
      assertFalse(matcher2.equals((Object)matcher3));
      assertFalse(matcher2.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher4));
      assertFalse(matcher3.equals((Object)matcher2));
      assertFalse(matcher4.equals((Object)matcher1));
      assertFalse(matcher4.equals((Object)matcher2));
      assertFalse(matcher4.equals((Object)matcher3));
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(hasPropertyWithValue0);
      assertNotNull(localizedMatcher0);
      assertEquals(3, matcherArray0.length);
      assertFalse(matcher2.equals((Object)matcher4));
      assertFalse(matcher2.equals((Object)matcher3));
      assertFalse(matcher2.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher4));
      assertFalse(matcher3.equals((Object)matcher2));
      assertFalse(matcher4.equals((Object)matcher1));
      assertFalse(matcher4.equals((Object)matcher2));
      assertFalse(matcher4.equals((Object)matcher3));
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      assertEquals(3, matcherArray0.length);
      assertFalse(matcher2.equals((Object)matcher4));
      assertFalse(matcher2.equals((Object)matcher3));
      assertFalse(matcher2.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher1));
      assertFalse(matcher3.equals((Object)matcher4));
      assertFalse(matcher3.equals((Object)matcher2));
      assertFalse(matcher4.equals((Object)matcher1));
      assertFalse(matcher4.equals((Object)matcher2));
      assertFalse(matcher4.equals((Object)matcher3));
      
      // Undeclared exception!
      try { 
        reporter0.argumentsAreDifferent("", "", location0);
        fail("Expecting exception: ArgumentsAreDifferent");
      
      } catch(ArgumentsAreDifferent e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      IsAnything<StubbedInvocationMatcher> isAnything0 = new IsAnything<StubbedInvocationMatcher>("");
      assertNotNull(isAnything0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(isAnything0);
      assertNotNull(localizedMatcher0);
      
      Description.NullDescription description_NullDescription0 = new Description.NullDescription();
      assertNotNull(description_NullDescription0);
      assertEquals("", description_NullDescription0.toString());
      
      int int0 = 2575;
      PriorityQueue<InvocationImpl> priorityQueue0 = new PriorityQueue<InvocationImpl>(2575);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Matcher<Object> matcher0 = IsAnything.anything("");
      assertNotNull(matcher0);
      
      Description.NullDescription description_NullDescription1 = (Description.NullDescription)description_NullDescription0.appendValueList("", "   Mocking methods declared on non-public parent classes is not supported.", "", (Iterable<InvocationImpl>) priorityQueue0);
      assertNotNull(description_NullDescription1);
      assertSame(description_NullDescription0, description_NullDescription1);
      assertSame(description_NullDescription1, description_NullDescription0);
      assertEquals("", description_NullDescription0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals("", description_NullDescription1.toString());
      
      localizedMatcher0.describeTo(description_NullDescription1);
      assertSame(description_NullDescription0, description_NullDescription1);
      assertSame(description_NullDescription1, description_NullDescription0);
      assertEquals("", description_NullDescription0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals("", description_NullDescription1.toString());
      
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, localizedMatcher0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Invocation invocation0 = null;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesCannotContainMockedType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesCannotContainMockedType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.wrongTypeOfReturnValue("z7Hx!o_1)4V_]DEY", "z7Hx!o_1)4V_]DEY", "z7Hx!o_1)4V_]DEY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Stack<InvocationMatcher> stack0 = new Stack<InvocationMatcher>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      SerializableMode serializableMode0 = SerializableMode.BASIC;
      // Undeclared exception!
      try { 
        reporter0.usingConstructorWithFancySerializable(serializableMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InvocationOnMock invocationOnMock0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)6;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("**h+g9Tz=z~tF:", "`z.d/e[T9p0v``Y", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("**h+g9Tz=z~tF:", sQLClientInfoException0.getMessage());
      assertEquals("`z.d/e[T9p0v``Y", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: **h+g9Tz=z~tF:", sQLClientInfoException0.toString());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, (-1614), sQLClientInfoException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("**h+g9Tz=z~tF:", sQLClientInfoException0.getMessage());
      assertEquals("`z.d/e[T9p0v``Y", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: **h+g9Tz=z~tF:", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals((-1614), sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation((String) null, sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.mocksHaveToBePassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.spyAndDelegateAreMutuallyExclusive();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.cannotMockFinalClass(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 62;
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Invocation invocation0 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InvocationOnMock invocationOnMock0 = null;
      String string0 = "XG>V";
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.mocksHaveToBePassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.noArgumentValueWasCaptured();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNull(string0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Throwable) sQLIntegrityConstraintViolationException0);
      assertNotNull(notifiedMethodInvocationReport0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertNull(describedInvocation0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.checkedExceptionInvalid(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 0;
      InvocationOnMock invocationOnMock0 = null;
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Invocation invocation0 = null;
      // Undeclared exception!
      try { 
        reporter0.invalidUseOfMatchers(62, stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedVerificationException(locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Matcher<String> matcher0 = IsSame.sameInstance("Wanted but not invoked:");
      assertNotNull(matcher0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedVerificationException(location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.stubPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.stubPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenerDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 62;
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Invocation invocation0 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Throwable) sQLIntegrityConstraintViolationException0);
      assertNotNull(notifiedMethodInvocationReport0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertNull(describedInvocation0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvokedInOrder((DescribedInvocation) null, (DescribedInvocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationOnMock invocationOnMock0 = null;
      boolean boolean0 = true;
      int int0 = 0;
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerify(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerify(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "#S)4J;}`PKN";
      Location location0 = null;
      // Undeclared exception!
      try { 
        reporter0.smartNullPointerException("#S)4J;}`PKN", (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotVerifyToString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger();
      assertNotNull(verboseMockInvocationLogger0);
      
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("");
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenerThrewException(verboseMockInvocationLogger0, sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationListener invocationListener0 = null;
      SQLWarning sQLWarning0 = new SQLWarning("", (String) null, (-836));
      assertNotNull(sQLWarning0);
      assertEquals("", sQLWarning0.getMessage());
      assertEquals((-836), sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenerThrewException((InvocationListener) null, sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        reporter0.reportNoSubMatchersFound("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "method should return the type '");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.reportNoSubMatchersFound("method should return the type '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Field field0 = null;
      String string0 = "not ";
      int int0 = 0;
      String string1 = "    when(mock.isOk()).thenThrow(exception);";
      // Undeclared exception!
      try { 
        reporter0.cannotStubWithNullThrowable();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      DescribedInvocation describedInvocation0 = null;
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentRangeAtIdentityAnswerCreationTime();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.onlyVoidMethodsCanBeSetToDoNothing();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfApi();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfApi();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.missingMethodInvocation();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-301);
      intArray0[1] = (-301);
      intArray0[2] = (-301);
      intArray0[3] = (-301);
      intArray0[4] = (-301);
      intArray0[5] = (-301);
      intArray0[6] = (-301);
      intArray0[7] = (-301);
      intArray0[8] = (-301);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Gd_L4kbDWq#U");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Gd_L4kbDWq#U", sQLFeatureNotSupportedException0.toString());
      assertEquals("Gd_L4kbDWq#U", sQLFeatureNotSupportedException0.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Gd_L4kbDWq#U", "'$5&/,Q~[6[?x", (-301), intArray0, sQLFeatureNotSupportedException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-301), (-301), (-301), (-301), (-301), (-301), (-301), (-301), (-301)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Gd_L4kbDWq#U", sQLFeatureNotSupportedException0.toString());
      assertEquals("Gd_L4kbDWq#U", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Gd_L4kbDWq#U", batchUpdateException0.getMessage());
      assertEquals("'$5&/,Q~[6[?x", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: Gd_L4kbDWq#U", batchUpdateException0.toString());
      assertEquals((-301), batchUpdateException0.getErrorCode());
      
      SQLException sQLException0 = new SQLException("", batchUpdateException0);
      assertNotNull(sQLException0);
      assertArrayEquals(new int[] {(-301), (-301), (-301), (-301), (-301), (-301), (-301), (-301), (-301)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Gd_L4kbDWq#U", sQLFeatureNotSupportedException0.toString());
      assertEquals("Gd_L4kbDWq#U", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Gd_L4kbDWq#U", batchUpdateException0.getMessage());
      assertEquals("'$5&/,Q~[6[?x", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: Gd_L4kbDWq#U", batchUpdateException0.toString());
      assertEquals((-301), batchUpdateException0.getErrorCode());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForSpyAnnotation("", sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.defaultAnswerDoesNotAcceptNullParameter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfAdditionalMatchers("an iterable with size", (-909), stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      HashSet<LocalizedMatcher> hashSet0 = new HashSet<LocalizedMatcher>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfAdditionalMatchers("<", (-1552), hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      ArrayList<LocalizedMatcher> arrayList0 = new ArrayList<LocalizedMatcher>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Matcher<Object> matcher0 = HasProperty.hasProperty(" 1. missing thenReturn()");
      assertNotNull(matcher0);
      
      Matcher<SerializableMode> matcher1 = AllOf.allOf((Matcher<? super SerializableMode>) matcher0, (Matcher<? super SerializableMode>) matcher0, (Matcher<? super SerializableMode>) matcher0, (Matcher<? super SerializableMode>) matcher0, (Matcher<? super SerializableMode>) matcher0);
      assertNotNull(matcher1);
      
      AnyOf<SerializableMode> anyOf0 = AnyOf.anyOf(matcher1, (Matcher<? super SerializableMode>) matcher1);
      assertNotNull(anyOf0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(anyOf0);
      assertNotNull(localizedMatcher0);
      
      boolean boolean0 = arrayList0.add(localizedMatcher0);
      assertTrue(arrayList0.contains(localizedMatcher0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenersRequiresAtLeastOneListener();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenersRequiresAtLeastOneListener();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "b!bqU2YzV.r4F ~D~H";
      // Undeclared exception!
      try { 
        reporter0.moreThanOneAnnotationNotAllowed("b!bqU2YzV.r4F ~D~H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedAtMostX(0, 0);
        fail("Expecting exception: MockitoAssertionError");
      
      } catch(MockitoAssertionError e) {
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.unsupportedCombinationOfAnnotations("invocationListeners() does not accept null parameters", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationOnMock invocationOnMock0 = null;
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentPositionRangeAtInvocationTime((InvocationOnMock) null, true, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesRequiresAtLeastOneInterface();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = (-2712);
      int int1 = 0;
      Invocation invocation0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException(" CN]Y5");
      assertNotNull(sQLTransientException0);
      assertEquals(" CN]Y5", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException:  CN]Y5", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Throwable) sQLTransientException0);
      assertNotNull(notifiedMethodInvocationReport0);
      assertEquals(" CN]Y5", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException:  CN]Y5", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertNull(describedInvocation0);
      assertEquals(" CN]Y5", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException:  CN]Y5", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      
      StubInfoImpl stubInfoImpl0 = new StubInfoImpl((DescribedInvocation) null);
      assertNotNull(stubInfoImpl0);
      
      // Undeclared exception!
      try { 
        stubInfoImpl0.stubbedAt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.invocation.StubInfoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }
}
