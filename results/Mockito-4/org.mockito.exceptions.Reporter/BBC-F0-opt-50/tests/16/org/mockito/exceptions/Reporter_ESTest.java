/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 17:40:57 GMT 2021
 */

package org.mockito.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.RoundingMode;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.beans.HasProperty;
import org.hamcrest.beans.HasPropertyWithValue;
import org.hamcrest.beans.SamePropertyValuesAs;
import org.hamcrest.collection.IsIn;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.CombinableMatcher;
import org.hamcrest.core.DescribedAs;
import org.hamcrest.core.Is;
import org.hamcrest.core.IsInstanceOf;
import org.hamcrest.core.IsNot;
import org.hamcrest.core.IsSame;
import org.hamcrest.text.IsEqualIgnoringWhiteSpace;
import org.junit.runner.RunWith;
import org.mockito.Answers;
import org.mockito.exceptions.Reporter;
import org.mockito.exceptions.base.MockitoAssertionError;
import org.mockito.exceptions.verification.TooLittleActualInvocations;
import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
import org.mockito.internal.creation.util.MockitoMethodProxy;
import org.mockito.internal.debugging.LocationImpl;
import org.mockito.internal.debugging.VerboseMockInvocationLogger;
import org.mockito.internal.exceptions.VerificationAwareInvocation;
import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;
import org.mockito.internal.invocation.InvocationImpl;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.internal.invocation.SerializableMethod;
import org.mockito.internal.invocation.StubInfoImpl;
import org.mockito.internal.invocation.realmethod.CleanTraceRealMethod;
import org.mockito.internal.invocation.realmethod.DefaultRealMethod;
import org.mockito.internal.listeners.NotifiedMethodInvocationReport;
import org.mockito.internal.matchers.LocalizedMatcher;
import org.mockito.internal.stubbing.StubbedInvocationMatcher;
import org.mockito.invocation.DescribedInvocation;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.invocation.Location;
import org.mockito.listeners.InvocationListener;
import org.mockito.mock.SerializableMode;
import org.mockito.stubbing.Answer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reporter_ESTest extends Reporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<VerificationAwareInvocation> linkedList0 = new LinkedList<VerificationAwareInvocation>();
      Reporter reporter0 = new Reporter();
      Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(invocation0).toString();
      Answer<Integer> answer0 = (Answer<Integer>) mock(Answer.class, new ViolatedAssumptionAnswer());
      linkedList0.offerLast((VerificationAwareInvocation) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) answer0;
      objectArray0[4] = (Object) reporter0;
      objectArray0[5] = (Object) answer0;
      objectArray0[8] = (Object) linkedList0;
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      CleanTraceRealMethod cleanTraceRealMethod0 = new CleanTraceRealMethod(mockitoMethodProxy0);
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-2), (-2));
      Matcher<Annotation> matcher0 = HasProperty.hasProperty("");
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      Location location0 = localizedMatcher0.getLocation();
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, invocation0, location0);
        fail("Expecting exception: TooLittleActualInvocations");
      
      } catch(TooLittleActualInvocations e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Invocation invocation0 = null;
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodHasWrongReturnType((Method) null, (Method) null, (Object) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation("hZ(BK~{3!", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.unfinishedVerificationException((Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      LocationImpl locationImpl0 = new LocationImpl();
      ArrayList<InvocationImpl> arrayList0 = new ArrayList<InvocationImpl>();
      arrayList0.add((InvocationImpl) null);
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      String string0 = "PfFFSW'/P >";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("PfFFSW'/P >", "PfFFSW'/P >", 123);
      sQLTransientConnectionException0.printStackTrace();
      sQLTransientConnectionException0.fillInStackTrace();
      sQLTransientConnectionException0.spliterator();
      // Undeclared exception!
      try { 
        reporter0.invocationListenerThrewException((InvocationListener) null, sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(19, 19);
      discrepancy0.getPluralizedActualCount();
      DescribedInvocation describedInvocation0 = null;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Field field0 = null;
      Throwable throwable0 = null;
      Reporter reporter0 = new Reporter();
      String string0 = "8N";
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWantedInOrder((Invocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Invocation invocation0 = null;
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWantedInOrder((Invocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Invocation invocation0 = null;
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfAdditionalMatchers("{+}kK(o!oi?D9g", 866, (Collection<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      ArrayList<StubbedInvocationMatcher> arrayList0 = new ArrayList<StubbedInvocationMatcher>();
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher((List<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Invocation invocation0 = null;
      LinkedList<VerificationAwareInvocation> linkedList0 = new LinkedList<VerificationAwareInvocation>();
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWanted((Invocation) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvokedInOrder((DescribedInvocation) null, (DescribedInvocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Location location0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        reporter0.unfinishedStubbing((Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(17, 17);
      Invocation invocation0 = null;
      discrepancy0.getPluralizedWantedCount();
      LocationImpl locationImpl0 = new LocationImpl();
      // Undeclared exception!
      try { 
        reporter0.neverWantedButInvoked((DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForSpyAnnotation("starting with", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      // Undeclared exception!
      try { 
        reporter0.unsupportedCombinationOfAnnotations("", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      Reporter reporter1 = new Reporter();
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(0, (-2005));
      // Undeclared exception!
      try { 
        reporter1.tooLittleActualInvocationsInOrder(discrepancy0, (DescribedInvocation) null, (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.smartNullPointerException("clRwA#DTh", (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.noArgumentValueWasCaptured();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.invalidUseOfMatchers((-2825), (List<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(17, 17);
      Invocation invocation0 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("But invoked here:");
      discrepancy0.getPluralizedWantedCount();
      discrepancy0.getPluralizedWantedCount();
      LocationImpl locationImpl0 = new LocationImpl();
      ArrayList<InvocationImpl> arrayList0 = new ArrayList<InvocationImpl>();
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Matcher<Annotation> matcher0 = AllOf.allOf((Matcher<? super Annotation>) null, (Matcher<? super Annotation>) null, (Matcher<? super Annotation>) null, (Matcher<? super Annotation>) null, (Matcher<? super Annotation>) null);
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      Location location0 = localizedMatcher0.getLocation();
      // Undeclared exception!
      try { 
        reporter0.argumentsAreDifferent((String) null, "org.hamcrest.core.StringStartsWith", location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentPositionRangeAtInvocationTime((InvocationOnMock) null, false, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      assertEquals(RoundingMode.HALF_EVEN, roundingMode0);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.inOrderRequiresFamiliarMock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LinkedList<LocalizedMatcher> linkedList0 = new LinkedList<LocalizedMatcher>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TreeSet<LocalizedMatcher> treeSet0 = new TreeSet<LocalizedMatcher>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(treeSet0);
      
      Object object0 = treeSet0.clone();
      assertEquals(0, linkedList0.size());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfAdditionalMatchers("Cveqqt", (-1), treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Field field0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ReturnsElementsOf does not accept null as constructor argument.\nPlease pass a collection instance", "ReturnsElementsOf does not accept null as constructor argument.\nPlease pass a collection instance", (int[]) null, sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("ReturnsElementsOf does not accept null as constructor argument.\nPlease pass a collection instance", batchUpdateException0.getSQLState());
      assertEquals("ReturnsElementsOf does not accept null as constructor argument.\nPlease pass a collection instance", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ReturnsElementsOf does not accept null as constructor argument.\nPlease pass a collection instance", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      Reporter reporter1 = new Reporter();
      assertNotNull(reporter1);
      assertFalse(reporter1.equals((Object)reporter0));
      
      Class<Annotation> class0 = Annotation.class;
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Object) null);
      assertFalse(notifiedMethodInvocationReport0.threwException());
      assertNotNull(notifiedMethodInvocationReport0);
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertFalse(notifiedMethodInvocationReport0.threwException());
      assertNull(describedInvocation0);
      
      // Undeclared exception!
      try { 
        reporter1.tooManyActualInvocations(4259, 4259, (DescribedInvocation) null, (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(56, 0);
      assertEquals(0, discrepancy0.getActualCount());
      assertEquals(56, discrepancy0.getWantedCount());
      assertNotNull(discrepancy0);
      
      String string0 = discrepancy0.getPluralizedWantedCount();
      assertEquals(0, discrepancy0.getActualCount());
      assertEquals(56, discrepancy0.getWantedCount());
      assertEquals("56 times", string0);
      assertNotNull(string0);
      
      String string1 = discrepancy0.getPluralizedWantedCount();
      assertEquals(0, discrepancy0.getActualCount());
      assertEquals(56, discrepancy0.getWantedCount());
      assertEquals("56 times", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(56));
      assertNotNull(stack0);
      
      IsIn<Object> isIn0 = new IsIn<Object>(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(56));
      assertNotNull(isIn0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(isIn0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(56));
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(56));
      assertNotNull(location0);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedVerificationException(location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
      try { 
        reporter0.wrongTypeOfArgumentToReturn((InvocationOnMock) null, "org.hamcrest.Condition", class0, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-2767), 17);
      assertEquals((-2767), discrepancy0.getWantedCount());
      assertEquals(17, discrepancy0.getActualCount());
      assertNotNull(discrepancy0);
      
      String string0 = discrepancy0.getPluralizedWantedCount();
      assertEquals((-2767), discrepancy0.getWantedCount());
      assertEquals(17, discrepancy0.getActualCount());
      assertEquals("-2767 times", string0);
      assertNotNull(string0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("an empty string");
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: an empty string", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("an empty string", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Throwable) sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: an empty string", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("an empty string", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNotNull(notifiedMethodInvocationReport0);
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: an empty string", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("an empty string", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNull(describedInvocation0);
      
      String string1 = discrepancy0.getPluralizedWantedCount();
      assertEquals((-2767), discrepancy0.getWantedCount());
      assertEquals(17, discrepancy0.getActualCount());
      assertEquals("-2767 times", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string2 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesRequiresAtLeastOneInterface();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-2767), 17);
      assertEquals(17, discrepancy0.getActualCount());
      assertEquals((-2767), discrepancy0.getWantedCount());
      assertNotNull(discrepancy0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("an empty string");
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: an empty string", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("an empty string", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Throwable) sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: an empty string", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("an empty string", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNotNull(notifiedMethodInvocationReport0);
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: an empty string", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("an empty string", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNull(describedInvocation0);
      
      String string0 = discrepancy0.getPluralizedWantedCount();
      assertEquals(17, discrepancy0.getActualCount());
      assertEquals((-2767), discrepancy0.getWantedCount());
      assertEquals("-2767 times", string0);
      assertNotNull(string0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string1 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocationsInOrder(discrepancy0, (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      assertEquals(RoundingMode.HALF_EVEN, roundingMode0);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      String string0 = mockException0.toString();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForSpyAnnotation("", mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(")soZ_<tQM_iD;!", ")soZ_<tQM_iD;!", 714);
      assertEquals("java.sql.SQLTimeoutException: )soZ_<tQM_iD;!", sQLTimeoutException0.toString());
      assertEquals(714, sQLTimeoutException0.getErrorCode());
      assertEquals(")soZ_<tQM_iD;!", sQLTimeoutException0.getMessage());
      assertEquals(")soZ_<tQM_iD;!", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)sQLTimeoutException0.fillInStackTrace();
      assertEquals("java.sql.SQLTimeoutException: )soZ_<tQM_iD;!", sQLTimeoutException0.toString());
      assertEquals(714, sQLTimeoutException0.getErrorCode());
      assertEquals(")soZ_<tQM_iD;!", sQLTimeoutException0.getMessage());
      assertEquals(")soZ_<tQM_iD;!", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: )soZ_<tQM_iD;!", sQLTimeoutException1.toString());
      assertEquals(714, sQLTimeoutException1.getErrorCode());
      assertEquals(")soZ_<tQM_iD;!", sQLTimeoutException1.getSQLState());
      assertEquals(")soZ_<tQM_iD;!", sQLTimeoutException1.getMessage());
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation(")soZ_<tQM_iD;!", sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(56, 0);
      assertEquals(56, discrepancy0.getWantedCount());
      assertEquals(0, discrepancy0.getActualCount());
      assertNotNull(discrepancy0);
      
      String string0 = discrepancy0.getPluralizedWantedCount();
      assertEquals(56, discrepancy0.getWantedCount());
      assertEquals(0, discrepancy0.getActualCount());
      assertEquals("56 times", string0);
      assertNotNull(string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(56));
      assertNotNull(stack0);
      
      IsIn<Object> isIn0 = new IsIn<Object>(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(56));
      assertNotNull(isIn0);
      
      Matcher<Object> matcher0 = AllOf.allOf((Matcher<? super Object>) isIn0, (Matcher<? super Object>) isIn0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(56));
      assertNotNull(matcher0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(56));
      assertNotNull(localizedMatcher0);
      
      LocationImpl locationImpl0 = new LocationImpl((StackTraceFilter) null);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.tooManyActualInvocationsInOrder((-2797), (-919), (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 2615;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(2615, 2615);
      assertEquals(2615, discrepancy0.getWantedCount());
      assertEquals(2615, discrepancy0.getActualCount());
      assertNotNull(discrepancy0);
      
      String string0 = discrepancy0.getPluralizedWantedCount();
      assertEquals(2615, discrepancy0.getWantedCount());
      assertEquals(2615, discrepancy0.getActualCount());
      assertEquals("2615 times", string0);
      assertNotNull(string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(2615));
      assertNotNull(stack0);
      
      IsIn<Object> isIn0 = new IsIn<Object>(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(2615));
      assertNotNull(isIn0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedAtMostX(0, 0);
        fail("Expecting exception: MockitoAssertionError");
      
      } catch(MockitoAssertionError e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.hamcrest.DiagnosingMatcher", "org.hamcrest.DiagnosingMatcher", "org.hamcrest.DiagnosingMatcher", 0);
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("org.hamcrest.DiagnosingMatcher", stackTraceElement0.getMethodName());
      assertEquals("org.hamcrest.DiagnosingMatcher.org.hamcrest.DiagnosingMatcher(org.hamcrest.DiagnosingMatcher:0)", stackTraceElement0.toString());
      assertEquals("org.hamcrest.DiagnosingMatcher", stackTraceElement0.getFileName());
      assertEquals("org.hamcrest.DiagnosingMatcher", stackTraceElement0.getClassName());
      assertNotNull(stackTraceElement0);
      
      int int0 = 0;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(0, 0);
      assertEquals(0, discrepancy0.getActualCount());
      assertEquals(0, discrepancy0.getWantedCount());
      assertNotNull(discrepancy0);
      
      String string0 = discrepancy0.getPluralizedWantedCount();
      assertEquals(0, discrepancy0.getActualCount());
      assertEquals(0, discrepancy0.getWantedCount());
      assertEquals("0 times", string0);
      assertNotNull(string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(0));
      assertNotNull(stack0);
      
      IsIn<Object> isIn0 = new IsIn<Object>(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(0));
      assertNotNull(isIn0);
      
      Matcher<Object> matcher0 = AllOf.allOf((Matcher<? super Object>) isIn0, (Matcher<? super Object>) isIn0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(0));
      assertNotNull(matcher0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(int0));
      assertNotNull(arrayList0);
      
      boolean boolean0 = stack0.addAll(0, (Collection<?>) arrayList0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(stack0.contains(0));
      assertFalse(arrayList0.contains(int0));
      assertFalse(boolean0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(isIn0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(0));
      assertNotNull(localizedMatcher0);
      
      Matcher<Integer> matcher1 = DescribedAs.describedAs("0 times", (Matcher<Integer>) localizedMatcher0, (Object[]) stackTraceElementArray0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(4, stackTraceElementArray0.length);
      assertFalse(stack0.contains("0 times"));
      assertNotNull(matcher1);
      
      LocalizedMatcher localizedMatcher1 = new LocalizedMatcher(matcher1);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(4, stackTraceElementArray0.length);
      assertFalse(stack0.contains("0 times"));
      assertNotNull(localizedMatcher1);
      assertFalse(localizedMatcher1.equals((Object)localizedMatcher0));
      
      Location location0 = localizedMatcher1.getLocation();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotSame(localizedMatcher0, localizedMatcher1);
      assertNotSame(localizedMatcher1, localizedMatcher0);
      assertEquals(4, stackTraceElementArray0.length);
      assertFalse(stack0.contains("0 times"));
      assertNotNull(location0);
      assertFalse(localizedMatcher0.equals((Object)localizedMatcher1));
      assertFalse(localizedMatcher1.equals((Object)localizedMatcher0));
      
      DescribedInvocation describedInvocation0 = null;
      RoundingMode roundingMode0 = RoundingMode.valueOf(0);
      assertEquals(RoundingMode.UP, roundingMode0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("0 times", (String) null);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("0 times", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 0 times", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("0 times", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 0 times", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: 0 times", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: 0 times", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotInjectDependency((Field) null, roundingMode0, batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.moreThanOneAnnotationNotAllowed("2jjf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.defaultAnswerDoesNotAcceptNullParameter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.missingMethodInvocation();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#PRK]I8SngY~FXXMP");
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
      try { 
        reporter0.cannotMockFinalClass(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Reporter reporter1 = new Reporter();
      assertNotNull(reporter1);
      assertFalse(reporter1.equals((Object)reporter0));
      
      // Undeclared exception!
      try { 
        reporter1.notAMockPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerify(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.reportNoSubMatchersFound(":Xw.uy`q\"4}X(C4J&j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)13, (byte)0, (byte)8}, byteArray0);
      
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      assertEquals(RoundingMode.HALF_EVEN, roundingMode0);
      
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodDoesNotExistOnDelegate((Method) null, "null", roundingMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotCallAbstractRealMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.spyAndDelegateAreMutuallyExclusive();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.onlyVoidMethodsCanBeSetToDoNothing();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ending with", "?Dj4K~");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ending with", sQLTimeoutException0.toString());
      assertEquals("?Dj4K~", sQLTimeoutException0.getSQLState());
      assertEquals("ending with", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        reporter0.checkedExceptionInvalid(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "org.mockito.exceptions.misusing.InvalidUseOfMatchersException";
      String string1 = "Mocked type must be: ";
      // Undeclared exception!
      try { 
        reporter0.wrongTypeOfReturnValue("Mocked type must be: ", "org.mockito.exceptions.misusing.InvalidUseOfMatchersException", "Pass mocks that should be verified, e.g:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.wrongTypeOfReturnValue("{ZtQRcv`Gu?!U)K7iK", "{ZtQRcv`Gu?!U)K7iK", "p$Bkr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.stubPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.smartNullPointerException("", locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "\\!?_&+D";
      // Undeclared exception!
      try { 
        reporter0.nullPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "However it is possible to use the -1 value to indicates that the last argument should be returned.";
      ArrayList<LocalizedMatcher> arrayList0 = new ArrayList<LocalizedMatcher>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Iterator<LocalizedMatcher> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)3;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)41, (byte)64, (byte)1, (byte)115, (byte)94, (byte)3}, byteArray0);
      
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher(stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenersRequiresAtLeastOneListener();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentRangeAtIdentityAnswerCreationTime();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "o";
      ArrayList<LocalizedMatcher> arrayList0 = new ArrayList<LocalizedMatcher>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 0);
      Matcher<Object> matcher0 = AllOf.allOf((Matcher<? super Object>[]) matcherArray0);
      assertEquals(0, matcherArray0.length);
      assertNotNull(matcher0);
      
      AnyOf<Object> anyOf0 = AnyOf.anyOf(matcher0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher0);
      assertEquals(0, matcherArray0.length);
      assertNotNull(anyOf0);
      
      CombinableMatcher<LocalizedMatcher> combinableMatcher0 = new CombinableMatcher<LocalizedMatcher>(anyOf0);
      assertEquals(0, matcherArray0.length);
      assertNotNull(combinableMatcher0);
      
      CombinableMatcher<LocalizedMatcher> combinableMatcher1 = combinableMatcher0.or(matcher0);
      assertNotSame(combinableMatcher0, combinableMatcher1);
      assertNotSame(combinableMatcher1, combinableMatcher0);
      assertEquals(0, matcherArray0.length);
      assertNotNull(combinableMatcher1);
      assertFalse(combinableMatcher1.equals((Object)combinableMatcher0));
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(combinableMatcher1);
      assertEquals(0, matcherArray0.length);
      assertNotNull(localizedMatcher0);
      assertFalse(combinableMatcher0.equals((Object)combinableMatcher1));
      assertFalse(combinableMatcher1.equals((Object)combinableMatcher0));
      
      boolean boolean0 = arrayList0.add(localizedMatcher0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(combinableMatcher0, combinableMatcher1);
      assertNotSame(combinableMatcher1, combinableMatcher0);
      assertEquals(0, matcherArray0.length);
      assertTrue(arrayList0.contains(localizedMatcher0));
      assertTrue(boolean0);
      assertFalse(combinableMatcher0.equals((Object)combinableMatcher1));
      assertFalse(combinableMatcher1.equals((Object)combinableMatcher0));
      
      // Undeclared exception!
      try { 
        reporter0.invalidUseOfMatchers(0, arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      reporter0.cannotStubWithNullThrowable();
      Class<InvocationImpl> class0 = InvocationImpl.class;
      reporter0.nullPassedToWhenMethod();
      reporter0.extraInterfacesCannotContainMockedType(class0);
      Class<Integer> class1 = Integer.class;
      Object object0 = null;
      reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class1, object0);
      reporter0.noArgumentValueWasCaptured();
      SerializableMode serializableMode0 = SerializableMode.NONE;
      reporter0.usingConstructorWithFancySerializable(serializableMode0);
      reporter0.notAMockPassedToVerifyNoMoreInteractions();
      String string0 = "";
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 5);
      Matcher<Object> matcher0 = AllOf.allOf((Matcher<? super Object>[]) matcherArray0);
      matcherArray0[0] = matcher0;
      Matcher<Object> matcher1 = AllOf.allOf((Matcher<? super Object>) matcherArray0[0], (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcherArray0[0], (Matcher<? super Object>) matcherArray0[0], (Matcher<? super Object>) matcher0);
      matcherArray0[1] = matcher1;
      Matcher<Object> matcher2 = AllOf.allOf((Matcher<? super Object>) matcher1, (Matcher<? super Object>) matcherArray0[1], (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher1);
      AnyOf<Object> anyOf0 = AnyOf.anyOf(matcher2, (Matcher<? super Object>) matcherArray0[1], (Matcher<? super Object>) matcher1, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcher2, (Matcher<? super Object>) matcherArray0[1]);
      matcherArray0[2] = (Matcher<Object>) anyOf0;
      Object object1 = new Object();
      Matcher<Object> matcher3 = IsSame.theInstance(object1);
      matcherArray0[3] = matcher3;
      AnyOf<Object> anyOf1 = AnyOf.anyOf(matcher0, (Matcher<? super Object>) matcherArray0[2], (Matcher<? super Object>) matcherArray0[3]);
      matcherArray0[4] = (Matcher<Object>) anyOf1;
      AnyOf<String> anyOf2 = AnyOf.anyOf((Matcher<? super String>[]) matcherArray0);
      DescribedAs<String> describedAs0 = new DescribedAs<String>(string0, anyOf2, matcherArray0);
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(describedAs0);
      Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
      InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
      Method method0 = invocationMatcher0.getMethod();
      SerializableMethod serializableMethod0 = new SerializableMethod(method0);
      int int0 = 9;
      MockitoMethodProxy mockitoMethodProxy0 = mock(MockitoMethodProxy.class, new ViolatedAssumptionAnswer());
      DefaultRealMethod defaultRealMethod0 = new DefaultRealMethod(mockitoMethodProxy0);
      CleanTraceRealMethod cleanTraceRealMethod0 = new CleanTraceRealMethod(defaultRealMethod0);
      InvocationImpl invocationImpl0 = new InvocationImpl(localizedMatcher0, serializableMethod0, matcherArray0, int0, cleanTraceRealMethod0);
      Method method1 = invocationImpl0.getMethod();
      LocalizedMatcher localizedMatcher1 = new LocalizedMatcher(matcherArray0[4]);
      List<Matcher> list0 = (List<Matcher>)invocationMatcher0.getMatchers();
      InvocationMatcher invocationMatcher1 = new InvocationMatcher(invocationImpl0, list0);
      reporter0.delegatedMethodHasWrongReturnType(method1, method0, localizedMatcher1, invocationMatcher1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      DescribedInvocation describedInvocation0 = null;
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.mocksHaveToBePassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SerializableMode serializableMode0 = SerializableMode.ACROSS_CLASSLOADERS;
      // Undeclared exception!
      try { 
        reporter0.usingConstructorWithFancySerializable(serializableMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfApi();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("an empty string");
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("an empty string", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: an empty string", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Throwable) sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("an empty string", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: an empty string", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNotNull(notifiedMethodInvocationReport0);
      
      DescribedInvocation describedInvocation0 = notifiedMethodInvocationReport0.getInvocation();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("an empty string", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: an empty string", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertTrue(notifiedMethodInvocationReport0.threwException());
      assertNull(describedInvocation0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfApi();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 7);
      SamePropertyValuesAs<Object> samePropertyValuesAs0 = new SamePropertyValuesAs<Object>(reporter0);
      assertNotNull(samePropertyValuesAs0);
      
      matcherArray0[0] = (Matcher<Object>) samePropertyValuesAs0;
      Matcher<Object> matcher0 = HasPropertyWithValue.hasProperty((String) null, (Matcher<?>) samePropertyValuesAs0);
      assertNotNull(matcher0);
      
      matcherArray0[1] = matcher0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      IsIn<Object> isIn0 = new IsIn<Object>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(isIn0);
      
      Class<Integer> class0 = Integer.class;
      IsInstanceOf isInstanceOf0 = new IsInstanceOf(class0);
      assertNotNull(isInstanceOf0);
      
      AnyOf<Object> anyOf0 = AnyOf.anyOf((Matcher<Object>) samePropertyValuesAs0, (Matcher<? super Object>) isIn0, (Matcher<? super Object>) isInstanceOf0, (Matcher<? super Object>) matcher0);
      assertEquals(0, linkedList0.size());
      assertNotNull(anyOf0);
      
      matcherArray0[2] = (Matcher<Object>) anyOf0;
      AnyOf<Object> anyOf1 = AnyOf.anyOf((Matcher<Object>) samePropertyValuesAs0, (Matcher<? super Object>) matcherArray0[0], (Matcher<? super Object>) matcher0, (Matcher<? super Object>) anyOf0, (Matcher<? super Object>) isIn0, (Matcher<? super Object>) samePropertyValuesAs0);
      assertEquals(0, linkedList0.size());
      assertNotSame(anyOf0, anyOf1);
      assertNotSame(anyOf1, anyOf0);
      assertEquals(7, matcherArray0.length);
      assertNotNull(anyOf1);
      assertFalse(anyOf1.equals((Object)anyOf0));
      
      matcherArray0[3] = (Matcher<Object>) anyOf1;
      Class<Object> class1 = Object.class;
      Matcher<Object> matcher1 = Is.isA(class1);
      assertNotNull(matcher1);
      assertFalse(matcher1.equals((Object)matcher0));
      
      matcherArray0[4] = matcher1;
      Matcher<Object> matcher2 = IsNot.not((Matcher<Object>) anyOf0);
      assertEquals(0, linkedList0.size());
      assertNotSame(anyOf0, anyOf1);
      assertNotNull(matcher2);
      assertFalse(matcher2.equals((Object)matcher0));
      assertFalse(matcher2.equals((Object)matcher1));
      assertFalse(matcher0.equals((Object)matcher1));
      assertFalse(anyOf0.equals((Object)anyOf1));
      
      matcherArray0[5] = matcher2;
      AnyOf<Object> anyOf2 = AnyOf.anyOf((Matcher<Object>) samePropertyValuesAs0, (Matcher<? super Object>) anyOf1, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) samePropertyValuesAs0, (Matcher<? super Object>) matcher0, (Matcher<? super Object>) matcherArray0[0]);
      assertEquals(0, linkedList0.size());
      assertNotSame(anyOf2, anyOf0);
      assertNotSame(anyOf2, anyOf1);
      assertNotSame(anyOf0, anyOf2);
      assertNotSame(anyOf0, anyOf1);
      assertNotSame(anyOf1, anyOf0);
      assertNotSame(anyOf1, anyOf2);
      assertEquals(7, matcherArray0.length);
      assertNotNull(anyOf2);
      assertFalse(anyOf2.equals((Object)anyOf0));
      assertFalse(anyOf2.equals((Object)anyOf1));
      assertFalse(matcher0.equals((Object)matcher2));
      assertFalse(matcher0.equals((Object)matcher1));
      assertFalse(anyOf0.equals((Object)anyOf1));
      assertFalse(anyOf1.equals((Object)anyOf0));
      
      matcherArray0[6] = (Matcher<Object>) anyOf2;
      AnyOf<Integer> anyOf3 = AnyOf.anyOf((Matcher<? super Integer>[]) matcherArray0);
      assertEquals(7, matcherArray0.length);
      assertNotNull(anyOf3);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(anyOf3);
      assertEquals(7, matcherArray0.length);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertEquals(7, matcherArray0.length);
      assertNotNull(location0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedStubbing(location0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.mocksHaveToBePassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenerDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenerDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationOnMock invocationOnMock0 = null;
      String string0 = "#n(r?)7)g52->jO\"m";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, "#n(r?)7)g52->jO\"m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SerializableMode serializableMode0 = SerializableMode.BASIC;
      Class<Integer> class0 = Integer.class;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) null);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Matcher<String> matcher0 = IsIn.isIn((Collection<String>) list0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(matcher0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(localizedMatcher0);
      
      String string0 = localizedMatcher0.toString();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(string0));
      assertNotNull(string0);
      
      boolean boolean0 = localizedMatcher0.matches(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(string0));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, localizedMatcher0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-1);
      intArray0[2] = 7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "ReturnsElementsOf does not accept null as constructor argument.\nPlease pass a collection instance", intArray0, sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("ReturnsElementsOf does not accept null as constructor argument.\nPlease pass a collection instance", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1), 7}, intArray0);
      assertNotNull(batchUpdateException0);
      
      // Undeclared exception!
      try { 
        reporter0.fieldInitialisationThrewException((Field) null, batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = null;
      String string1 = "ReturnsElementsOf does not accept null as constructor argument.\nPlease pass a collection instance";
      int[] intArray0 = new int[3];
      intArray0[0] = (-2975);
      intArray0[1] = (-1);
      intArray0[2] = 7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "ReturnsElementsOf does not accept null as constructor argument.\nPlease pass a collection instance", intArray0, sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("ReturnsElementsOf does not accept null as constructor argument.\nPlease pass a collection instance", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-2975), (-1), 7}, intArray0);
      assertNotNull(batchUpdateException0);
      
      // Undeclared exception!
      try { 
        reporter0.fieldInitialisationThrewException((Field) null, batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesCannotContainMockedType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        reporter0.invalidUseOfMatchers(1024, vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.hamcrest.DiagnosingMatcher", "org.hamcrest.DiagnosingMatcher", "org.hamcrest.DiagnosingMatcher", 0);
      assertEquals("org.hamcrest.DiagnosingMatcher", stackTraceElement0.getClassName());
      assertEquals("org.hamcrest.DiagnosingMatcher.org.hamcrest.DiagnosingMatcher(org.hamcrest.DiagnosingMatcher:0)", stackTraceElement0.toString());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertEquals("org.hamcrest.DiagnosingMatcher", stackTraceElement0.getMethodName());
      assertEquals("org.hamcrest.DiagnosingMatcher", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("org.hamcrest.DiagnosingMatcher", "org.hamcrest.DiagnosingMatcher", "org.hamcrest.DiagnosingMatcher", 0);
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertEquals("org.hamcrest.DiagnosingMatcher.org.hamcrest.DiagnosingMatcher(org.hamcrest.DiagnosingMatcher:0)", stackTraceElement1.toString());
      assertEquals("org.hamcrest.DiagnosingMatcher", stackTraceElement1.getMethodName());
      assertEquals("org.hamcrest.DiagnosingMatcher", stackTraceElement1.getClassName());
      assertEquals("org.hamcrest.DiagnosingMatcher", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertNotNull(stackTraceElement1);
      assertTrue(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "AH~g?dJ<N~Ij#\rS56", "", 2703);
      assertEquals("", stackTraceElement2.getFileName());
      assertEquals(2703, stackTraceElement2.getLineNumber());
      assertEquals("AH~g?dJ<N~Ij#\rS56", stackTraceElement2.getMethodName());
      assertEquals("", stackTraceElement2.getClassName());
      assertEquals(".AH~g?dJ<N~Ij#\rS56(:2703)", stackTraceElement2.toString());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertNotNull(stackTraceElement2);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "org.hamcrest.DiagnosingMatcher", "u7SO4JYs?m(&@}Z", (-1084));
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals((-1084), stackTraceElement3.getLineNumber());
      assertEquals(".org.hamcrest.DiagnosingMatcher(u7SO4JYs?m(&@}Z)", stackTraceElement3.toString());
      assertEquals("u7SO4JYs?m(&@}Z", stackTraceElement3.getFileName());
      assertEquals("org.hamcrest.DiagnosingMatcher", stackTraceElement3.getMethodName());
      assertEquals("", stackTraceElement3.getClassName());
      assertNotNull(stackTraceElement3);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement[] stackTraceElementArray1 = stackTraceFilter0.filter(stackTraceElementArray0, true);
      assertNotSame(stackTraceElementArray0, stackTraceElementArray1);
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertEquals(4, stackTraceElementArray0.length);
      assertEquals(4, stackTraceElementArray1.length);
      assertNotNull(stackTraceElementArray1);
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.argumentsAreDifferent("org.hamcrest.DiagnosingMatcher", "org.hamcrest.DiagnosingMatcher", locationImpl0);
        fail("Expecting exception: ArgumentsAreDifferent");
      
      } catch(ArgumentsAreDifferent e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotVerifyToString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher";
      // Undeclared exception!
      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "";
      Throwable throwable0 = null;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      int int0 = 56;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(56, 0);
      DescribedInvocation describedInvocation0 = null;
      discrepancy0.getPluralizedWantedCount();
      Stack<Object> stack0 = new Stack<Object>();
      IsIn<Object> isIn0 = new IsIn<Object>(stack0);
      Matcher<Object> matcher0 = AllOf.allOf((Matcher<? super Object>) isIn0, (Matcher<? super Object>) isIn0);
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      Location location0 = localizedMatcher0.getLocation();
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, (DescribedInvocation) null, location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      MockFile mockFile0 = new MockFile("i6xBZu[87 T");
      MockFile mockFile1 = new MockFile(mockFile0, "i6xBZu[87 T");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger(mockPrintStream0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("createInfo", "");
      SQLException sQLException0 = new SQLException("  - primitive types", "", sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("i6xBZu[87 T", "i6xBZu[87 T", sQLException0);
      // Undeclared exception!
      try { 
        reporter0.invocationListenerThrewException(verboseMockInvocationLogger0, sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      SerializableMode serializableMode0 = SerializableMode.NONE;
      // Undeclared exception!
      try { 
        reporter0.nullPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }
}
