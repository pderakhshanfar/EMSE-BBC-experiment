/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 07:09:29 GMT 2021
 */

package org.mockito.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.RoundingMode;
import java.net.URI;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.StringDescription;
import org.hamcrest.beans.HasProperty;
import org.hamcrest.collection.IsIn;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.IsAnything;
import org.hamcrest.core.IsInstanceOf;
import org.hamcrest.core.IsNull;
import org.junit.runner.RunWith;
import org.mockito.exceptions.Reporter;
import org.mockito.exceptions.base.MockitoAssertionError;
import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
import org.mockito.internal.creation.util.MockitoMethodProxy;
import org.mockito.internal.debugging.LocationImpl;
import org.mockito.internal.debugging.VerboseMockInvocationLogger;
import org.mockito.internal.exceptions.VerificationAwareInvocation;
import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;
import org.mockito.internal.invocation.InvocationImpl;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.internal.invocation.MockitoMethod;
import org.mockito.internal.invocation.SerializableMethod;
import org.mockito.internal.invocation.StubInfoImpl;
import org.mockito.internal.invocation.realmethod.CleanTraceRealMethod;
import org.mockito.internal.invocation.realmethod.DefaultRealMethod;
import org.mockito.internal.invocation.realmethod.RealMethod;
import org.mockito.internal.listeners.NotifiedMethodInvocationReport;
import org.mockito.internal.matchers.LocalizedMatcher;
import org.mockito.internal.stubbing.StubbedInvocationMatcher;
import org.mockito.invocation.DescribedInvocation;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.invocation.Location;
import org.mockito.invocation.StubInfo;
import org.mockito.listeners.InvocationListener;
import org.mockito.listeners.MethodInvocationReport;
import org.mockito.mock.SerializableMode;
import org.mockito.stubbing.Answer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reporter_ESTest extends Reporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'.");
      Class<RoundingMode> class0 = RoundingMode.class;
      // Undeclared exception!
      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<InvocationImpl> class0 = InvocationImpl.class;
      Location location0 = null;
      // Undeclared exception!
      try { 
        reporter0.unfinishedStubbing((Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      ArrayList<VerificationAwareInvocation> arrayList0 = new ArrayList<VerificationAwareInvocation>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("RETURNS_SMART_NULLS", "RETURNS_SMART_NULLS");
      // Undeclared exception!
      try { 
        reporter0.fieldInitialisationThrewException((Field) null, sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      ArrayList<StubbedInvocationMatcher> arrayList0 = new ArrayList<StubbedInvocationMatcher>();
      arrayList0.add((StubbedInvocationMatcher) null);
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Method method0 = null;
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      RoundingMode.values();
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodHasWrongReturnType((Method) null, (Method) null, roundingMode0, roundingMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Method method0 = null;
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      RoundingMode.values();
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodHasWrongReturnType((Method) null, (Method) null, roundingMode0, roundingMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.wrongTypeOfArgumentToReturn((InvocationOnMock) null, "fA:5X=dTVT*?}1", class0, 60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation("z@=", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Location location0 = null;
      int int0 = 6;
      // Undeclared exception!
      try { 
        reporter0.unfinishedVerificationException((Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Invocation invocation0 = null;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-315), (-679));
      LocationImpl locationImpl0 = new LocationImpl();
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForSpyAnnotation("6S", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Invocation invocation0 = null;
      Reporter reporter0 = new Reporter();
      boolean boolean0 = false;
      int int0 = 1;
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentPositionRangeAtInvocationTime(invocation0, boolean0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Invocation invocation0 = null;
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Invocation invocation0 = null;
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Object) null);
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(1031, 1031);
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocationsInOrder(discrepancy0, (DescribedInvocation) null, (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Method method0 = null;
      // Undeclared exception!
      try { 
        reporter0.invalidUseOfMatchers(13, (List<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      int int0 = 9;
      int int1 = 1;
      DescribedInvocation describedInvocation0 = null;
      Vector<VerificationAwareInvocation> vector0 = new Vector<VerificationAwareInvocation>();
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWanted((Invocation) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      // Undeclared exception!
      try { 
        reporter0.tooManyActualInvocationsInOrder(1, 1024, (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Object) null);
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(1031, 1031);
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      notifiedMethodInvocationReport0.getInvocation();
      notifiedMethodInvocationReport0.getInvocation();
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Invocation invocation0 = null;
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWantedInOrder((Invocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Method method0 = null;
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWantedInOrder((Invocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "    doNothing().");
      Reporter reporter0 = new Reporter();
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile1 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-3);
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((byte) (-3), 1009);
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      int int0 = 9;
      DescribedInvocation describedInvocation0 = null;
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      // Undeclared exception!
      try { 
        reporter0.tooManyActualInvocations(9, 1, (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("}", "}", map0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        reporter0.cannotInjectDependency((Field) null, (Object) null, sQLClientInfoException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("  //incorrect - types don't match:", "  //incorrect - types don't match:", hashMap0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        reporter0.cannotInjectDependency((Field) null, hashMap0, sQLClientInfoException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Object) null);
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(1031, 1031);
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocationsInOrder(discrepancy0, (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Object) null);
      Vector<StubbedInvocationMatcher> vector0 = new Vector<StubbedInvocationMatcher>();
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLTransientException0);
      // Undeclared exception!
      try { 
        reporter0.checkedExceptionInvalid(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Object) null);
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfAdditionalMatchers("+] ", 5, (Collection<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesCannotContainMockedType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.mocksHaveToBePassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.inOrderRequiresFamiliarMock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      NotifiedMethodInvocationReport notifiedMethodInvocationReport0 = new NotifiedMethodInvocationReport((Invocation) null, (Object) null);
      notifiedMethodInvocationReport0.getInvocation();
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvokedInOrder((DescribedInvocation) null, (DescribedInvocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher((List<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Don't panic! I'm just a friendly reminder!");
      Location location0 = null;
      // Undeclared exception!
      try { 
        reporter0.smartNullPointerException("", (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      LocationImpl locationImpl0 = new LocationImpl();
      locationImpl0.toString();
      // Undeclared exception!
      try { 
        reporter0.argumentsAreDifferent("/[(4yr[+/V}H{[IP", "/[(4yr[+/V}H{[IP", locationImpl0);
        fail("Expecting exception: ArgumentsAreDifferent");
      
      } catch(ArgumentsAreDifferent e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.missingMethodInvocation();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfApi();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("W x)}SxS7**rYoE#n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      LocationImpl locationImpl0 = new LocationImpl();
      locationImpl0.toString();
      // Undeclared exception!
      try { 
        reporter0.argumentsAreDifferent((String) null, (String) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodDoesNotExistOnDelegate((Method) null, (Object) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger((PrintStream) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        reporter0.neverWantedButInvoked((DescribedInvocation) null, (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      PriorityQueue<LocalizedMatcher> priorityQueue0 = new PriorityQueue<LocalizedMatcher>();
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, priorityQueue0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.nullPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      String string0 = "!:c,FRpRYYNX^1?6*IT";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(":");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("!:c,FRpRYYNX^1?6*IT", "", sQLTransactionRollbackException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement(":", ":", "", (-1066));
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      int int0 = (-1581);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, "", (-1581));
      sQLFeatureNotSupportedException1.getSuppressed();
      sQLFeatureNotSupportedException1.printStackTrace();
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger();
      // Undeclared exception!
      try { 
        reporter0.invocationListenerThrewException(verboseMockInvocationLogger0, sQLFeatureNotSupportedException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      LocationImpl locationImpl0 = new LocationImpl();
      // Undeclared exception!
      try { 
        reporter0.unfinishedVerificationException(locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.mocksHaveToBePassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      SerializableMode serializableMode0 = SerializableMode.NONE;
      // Undeclared exception!
      try { 
        reporter0.usingConstructorWithFancySerializable(serializableMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      int int0 = 0;
      String string0 = "org.hamcrest.core.ShortcutCombination";
      String string1 = "L? jr;";
      String string2 = "";
      // Undeclared exception!
      try { 
        reporter0.wrongTypeOfReturnValue("", "L? jr;", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      int int0 = 62;
      // Undeclared exception!
      try { 
        reporter0.wantedAtMostX(62, 62);
        fail("Expecting exception: MockitoAssertionError");
      
      } catch(MockitoAssertionError e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      SQLException sQLException0 = new SQLException("06lEic", "", (-42));
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation("/^I$\"LI[6u6H", sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.cannotVerifyToString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      String string0 = "";
      int int0 = (-1066);
      PriorityQueue<LocalizedMatcher> priorityQueue0 = new PriorityQueue<LocalizedMatcher>();
      priorityQueue0.isEmpty();
      // Undeclared exception!
      try { 
        reporter0.stubPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.invocationListenersRequiresAtLeastOneListener();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      LocationImpl locationImpl0 = new LocationImpl();
      locationImpl0.toString();
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.cannotMockFinalClass(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher(stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      Stack<LocalizedMatcher> stack0 = new Stack<LocalizedMatcher>();
      TreeSet<RoundingMode> treeSet0 = new TreeSet<RoundingMode>();
      stack0.containsAll(treeSet0);
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher(stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      InvocationListener invocationListener0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", 1813);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(1813, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", "", "", 1813);
      assertNotNull(stackTraceElement0);
      assertEquals("You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once..(:1813)", stackTraceElement0.toString());
      assertEquals(1813, stackTraceElement0.getLineNumber());
      assertEquals("", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals("You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", stackTraceElement0.getClassName());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("X1?)\"*cL>l)", "", (String) null, 0);
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("", stackTraceElement1.getMethodName());
      assertEquals("X1?)\"*cL>l)", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("X1?)\"*cL>l).(Unknown Source)", stackTraceElement1.toString());
      assertNull(stackTraceElement1.getFileName());
      assertEquals(0, stackTraceElement1.getLineNumber());
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", "and you passed the same very interface to the extraInterfaces()", "because this method call was *not* stubbed correctly:", 0);
      assertNotNull(stackTraceElement2);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertEquals("You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once..and you passed the same very interface to the extraInterfaces()(because this method call was *not* stubbed correctly::0)", stackTraceElement2.toString());
      assertEquals("and you passed the same very interface to the extraInterfaces()", stackTraceElement2.getMethodName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("because this method call was *not* stubbed correctly:", stackTraceElement2.getFileName());
      assertEquals(0, stackTraceElement2.getLineNumber());
      assertEquals("You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", stackTraceElement2.getClassName());
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "an empty collection", "ZI2J_B#((D6FX7@Kl", 864);
      assertNotNull(stackTraceElement3);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertEquals(".an empty collection(ZI2J_B#((D6FX7@Kl:864)", stackTraceElement3.toString());
      assertEquals("ZI2J_B#((D6FX7@Kl", stackTraceElement3.getFileName());
      assertEquals(864, stackTraceElement3.getLineNumber());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("an empty collection", stackTraceElement3.getMethodName());
      assertEquals("", stackTraceElement3.getClassName());
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("X1?)\"*cL>l)", "RWx&,?sE}#fFY", "", 864);
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      sQLFeatureNotSupportedException0.getSuppressed();
      sQLFeatureNotSupportedException0.printStackTrace();
      // Undeclared exception!
      try { 
        reporter0.invocationListenerThrewException((InvocationListener) null, sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotStubWithNullThrowable();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentRangeAtIdentityAnswerCreationTime();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "", 3002);
      assertNotNull(sQLWarning0);
      assertEquals("", sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(3002, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      sQLWarning0.printStackTrace();
      assertEquals("", sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(3002, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" in any order", "", 3002, sQLWarning0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("", sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(3002, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(3002, sQLTimeoutException0.getErrorCode());
      assertEquals(" in any order", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException:  in any order", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForSpyAnnotation(" in any order", sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.hamcrest.object.IsCompatibleType");
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("org.hamcrest.object.IsCompatibleType", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: org.hamcrest.object.IsCompatibleType", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "4@UH=gsx%#Rl,sGba%", 2);
      assertNotNull(stackTraceElement0);
      assertEquals(2, stackTraceElement0.getLineNumber());
      assertEquals("", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(".(4@UH=gsx%#Rl,sGba%:2)", stackTraceElement0.toString());
      assertEquals("", stackTraceElement0.getClassName());
      assertEquals("4@UH=gsx%#Rl,sGba%", stackTraceElement0.getFileName());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("4@UH=gsx%#Rl,sGba%", "org.hamcrest.object.IsCompatibleType", "4@UH=gsx%#Rl,sGba%", 0);
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("4@UH=gsx%#Rl,sGba%", stackTraceElement1.getClassName());
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertEquals("4@UH=gsx%#Rl,sGba%.org.hamcrest.object.IsCompatibleType(4@UH=gsx%#Rl,sGba%:0)", stackTraceElement1.toString());
      assertEquals("4@UH=gsx%#Rl,sGba%", stackTraceElement1.getFileName());
      assertEquals("org.hamcrest.object.IsCompatibleType", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      assertEquals(2, stackTraceElementArray0.length);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("org.hamcrest.object.IsCompatibleType", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: org.hamcrest.object.IsCompatibleType", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForSpyAnnotation("org.hamcrest.object.IsCompatibleType", sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.onlyVoidMethodsCanBeSetToDoNothing();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<RoundingMode> class0 = RoundingMode.class;
      // Undeclared exception!
      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "org.hamcrest.Description";
      int int0 = 0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      String string1 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, sQLClientInfoException0);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.hamcrest.Description", "org.hamcrest.Description", (String) null, 0);
      assertNotNull(stackTraceElement0);
      assertNull(stackTraceElement0.getFileName());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertEquals("org.hamcrest.Description", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("org.hamcrest.Description", stackTraceElement0.getMethodName());
      assertEquals("org.hamcrest.Description.org.hamcrest.Description(Unknown Source)", stackTraceElement0.toString());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      // Undeclared exception!
      try { 
        reporter0.spyAndDelegateAreMutuallyExclusive();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenerDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Object object0 = null;
      MockitoMethod mockitoMethod0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) reporter0;
      objectArray0[1] = (Object) reporter0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) reporter0;
      objectArray0[4] = (Object) null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedStubbing(locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<RoundingMode> class0 = RoundingMode.class;
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerify(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerify(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      PriorityQueue<LocalizedMatcher> priorityQueue0 = new PriorityQueue<LocalizedMatcher>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesRequiresAtLeastOneInterface();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesRequiresAtLeastOneInterface();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockitoMethod mockitoMethod0 = null;
      Object[] objectArray0 = new Object[0];
      int int0 = (-605);
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertNotNull(string0);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      
      String string1 = locationImpl0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string1);
      
      // Undeclared exception!
      try { 
        reporter0.smartNullPointerException("ANYTHING", locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.noArgumentValueWasCaptured();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
      try { 
        reporter0.defaultAnswerDoesNotAcceptNullParameter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      PriorityQueue<LocalizedMatcher> priorityQueue0 = new PriorityQueue<LocalizedMatcher>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Matcher<StubbedInvocationMatcher> matcher0 = IsInstanceOf.instanceOf((Class<?>) class0);
      assertNotNull(matcher0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      assertNotNull(localizedMatcher0);
      
      boolean boolean0 = priorityQueue0.add(localizedMatcher0);
      assertTrue(priorityQueue0.contains(localizedMatcher0));
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfAdditionalMatchers("", 0, priorityQueue0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      PriorityQueue<LocalizedMatcher> priorityQueue0 = new PriorityQueue<LocalizedMatcher>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfAdditionalMatchers("", (-1066), priorityQueue0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>(325);
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(325, vector0.capacity());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.remove(object0);
      assertFalse(boolean0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(325, vector0.capacity());
      
      vector0.ensureCapacity(325);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(325, vector0.capacity());
      
      // Undeclared exception!
      try { 
        reporter0.invalidUseOfMatchers(325, vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>(325);
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(325, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.remove(object0);
      assertFalse(boolean0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(325, vector0.capacity());
      assertEquals(0, vector0.size());
      
      vector0.ensureCapacity(325);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(325, vector0.capacity());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        reporter0.invalidUseOfMatchers(325, vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotCallAbstractRealMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.reportNoSubMatchersFound("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.unsupportedCombinationOfAnnotations("9'r#B@YAK", "9'r#B@YAK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.moreThanOneAnnotationNotAllowed((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertNotNull(string0);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      
      reporter0.nullPassedToWhenMethod();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger();
      assertNotNull(verboseMockInvocationLogger0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        verboseMockInvocationLogger0.reportInvocation((MethodInvocationReport) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.debugging.VerboseMockInvocationLogger", e);
      }
  }
}
