/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 07:29:24 GMT 2021
 */

package org.mockito.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.RoundingMode;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hamcrest.Matcher;
import org.hamcrest.StringDescription;
import org.hamcrest.beans.HasProperty;
import org.hamcrest.beans.SamePropertyValuesAs;
import org.hamcrest.collection.IsIn;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.DescribedAs;
import org.hamcrest.core.Is;
import org.hamcrest.core.IsAnything;
import org.hamcrest.core.IsNull;
import org.hamcrest.core.IsSame;
import org.junit.runner.RunWith;
import org.mockito.exceptions.Reporter;
import org.mockito.exceptions.base.MockitoAssertionError;
import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
import org.mockito.internal.creation.util.MockitoMethodProxy;
import org.mockito.internal.debugging.LocationImpl;
import org.mockito.internal.debugging.VerboseMockInvocationLogger;
import org.mockito.internal.exceptions.VerificationAwareInvocation;
import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;
import org.mockito.internal.invocation.InvocationImpl;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.internal.invocation.MockitoMethod;
import org.mockito.internal.invocation.SerializableMethod;
import org.mockito.internal.invocation.realmethod.CleanTraceRealMethod;
import org.mockito.internal.invocation.realmethod.DefaultRealMethod;
import org.mockito.internal.listeners.NotifiedMethodInvocationReport;
import org.mockito.internal.matchers.LocalizedMatcher;
import org.mockito.internal.stubbing.StubbedInvocationMatcher;
import org.mockito.invocation.DescribedInvocation;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.invocation.Location;
import org.mockito.listeners.InvocationListener;
import org.mockito.mock.SerializableMode;
import org.mockito.stubbing.Answer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reporter_ESTest extends Reporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      DescribedInvocation describedInvocation0 = null;
      int int0 = (-2);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Vector<StubbedInvocationMatcher> vector0 = new Vector<StubbedInvocationMatcher>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      ArrayList<InvocationMatcher> arrayList0 = new ArrayList<InvocationMatcher>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((InvocationMatcher) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invalidUseOfMatchers((-380), (List<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(2147483645, 214);
      assertNotNull(discrepancy0);
      assertEquals(2147483645, discrepancy0.getWantedCount());
      assertEquals(214, discrepancy0.getActualCount());
      
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentPositionRangeAtInvocationTime((InvocationOnMock) null, true, 2147483645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodHasWrongReturnType((Method) null, (Method) null, (Object) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Field field0 = null;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      int int0 = 2147483645;
      Location location0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(2147483645, (-632));
      assertNotNull(discrepancy0);
      assertEquals((-632), discrepancy0.getActualCount());
      assertEquals(2147483645, discrepancy0.getWantedCount());
      
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocationsInOrder(discrepancy0, (DescribedInvocation) null, (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(1, 1);
      assertNotNull(discrepancy0);
      assertEquals(1, discrepancy0.getWantedCount());
      assertEquals(1, discrepancy0.getActualCount());
      
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, (DescribedInvocation) null, (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "8SsgPEW-";
      Exception exception0 = null;
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation("8SsgPEW-", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Invocation invocation0 = null;
      int int0 = 1925;
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvokedInOrder((DescribedInvocation) null, (DescribedInvocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      ArrayList<VerificationAwareInvocation> arrayList0 = new ArrayList<VerificationAwareInvocation>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWanted((Invocation) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        reporter0.wrongTypeOfArgumentToReturn((InvocationOnMock) null, ";X%0#}'%kx_}F1YTeB5", class0, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.argumentsAreDifferent((String) null, "", locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.noMoreInteractionsWantedInOrder((Invocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.delegatedMethodDoesNotExistOnDelegate((Method) null, (Object) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DescribedInvocation describedInvocation0 = null;
      LocationImpl locationImpl0 = new LocationImpl((StackTraceFilter) null);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.tooManyActualInvocationsInOrder(62, 62, (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("1");
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("1", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: 1", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        reporter0.fieldInitialisationThrewException((Field) null, sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      DescribedInvocation describedInvocation0 = null;
      Reporter reporter1 = new Reporter();
      assertNotNull(reporter1);
      assertFalse(reporter1.equals((Object)reporter0));
      
      Location location0 = null;
      // Undeclared exception!
      try { 
        reporter1.unfinishedVerificationException((Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForSpyAnnotation("", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      DescribedInvocation describedInvocation0 = null;
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher((List<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("an XML document with XPath ");
      assertNotNull(mockPrintStream0);
      
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger(mockPrintStream0);
      assertNotNull(verboseMockInvocationLogger0);
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenerThrewException(verboseMockInvocationLogger0, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy(2147483645, 2147483645);
      assertNotNull(discrepancy0);
      assertEquals(2147483645, discrepancy0.getWantedCount());
      assertEquals(2147483645, discrepancy0.getActualCount());
      
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      assertEquals(RoundingMode.DOWN, roundingMode0);
      
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentRangeAtIdentityAnswerCreationTime();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invalidArgumentRangeAtIdentityAnswerCreationTime();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.defaultAnswerDoesNotAcceptNullParameter();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Location location0 = null;
      // Undeclared exception!
      try { 
        reporter0.unfinishedStubbing((Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.neverWantedButInvoked((DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Field field0 = null;
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      assertEquals(RoundingMode.DOWN, roundingMode0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      // Undeclared exception!
      try { 
        reporter0.cannotCallAbstractRealMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      assertEquals(RoundingMode.DOWN, roundingMode0);
      
      String string0 = "xEb#i|:A,1){Up";
      String string1 = "W3VcWpIoe.6";
      int int0 = (-1700);
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-195), (-3803));
      assertNotNull(discrepancy0);
      assertEquals((-195), discrepancy0.getWantedCount());
      assertEquals((-3803), discrepancy0.getActualCount());
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.noArgumentValueWasCaptured();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Field field0 = null;
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      assertEquals(RoundingMode.DOWN, roundingMode0);
      
      String string0 = "xEb#i|:A,1){Up";
      int int0 = (-1700);
      org.mockito.internal.reporting.Discrepancy discrepancy0 = new org.mockito.internal.reporting.Discrepancy((-195), (-3803));
      assertNotNull(discrepancy0);
      assertEquals((-3803), discrepancy0.getActualCount());
      assertEquals((-195), discrepancy0.getWantedCount());
      
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      Matcher<InvocationMatcher> matcher0 = IsNull.nullValue(class0);
      assertNotNull(matcher0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher0);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertNotNull(location0);
      
      // Undeclared exception!
      try { 
        reporter0.tooLittleActualInvocations(discrepancy0, (DescribedInvocation) null, location0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      assertEquals(RoundingMode.CEILING, roundingMode0);
      
      // Undeclared exception!
      try { 
        reporter0.smartNullPointerException("y", (Location) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LinkedList<LocalizedMatcher> linkedList0 = new LinkedList<LocalizedMatcher>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        reporter0.invalidUseOfMatchers(2359, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "nH}OM@UhmH'fS~/dKZ";
      // Undeclared exception!
      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("nH}OM@UhmH'fS~/dKZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "Cannot instantiate @InjectMocks field named '";
      // Undeclared exception!
      try { 
        reporter0.cannotStubVoidMethodWithAReturnValue("Cannot instantiate @InjectMocks field named '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "[j>;";
      int int0 = (-1860);
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfAdditionalMatchers("[j>;", (-1860), (Collection<LocalizedMatcher>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      ArrayDeque<LocalizedMatcher> arrayDeque0 = new ArrayDeque<LocalizedMatcher>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfAdditionalMatchers("yI(bX", (-1), arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)40;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)1, (byte)1, (byte)13, (byte)40}, byteArray0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.tooManyActualInvocations((byte)1, (byte)1, (DescribedInvocation) null, locationImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Field field0 = null;
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      assertEquals(RoundingMode.DOWN, roundingMode0);
      
      String string0 = "xEb#i|:A,1){Up";
      String string1 = "W3VcWpIoe.6";
      int int0 = (-1700);
      DescribedInvocation describedInvocation0 = null;
      ArrayList<InvocationMatcher> arrayList0 = new ArrayList<InvocationMatcher>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        reporter0.wantedButNotInvoked((DescribedInvocation) null, (List<? extends DescribedInvocation>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.exceptions.Reporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.inOrderRequiresFamiliarMock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesRequiresAtLeastOneInterface();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1. The wanted argument position is incorrect.");
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        reporter0.cannotMockFinalClass(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerify(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<LocalizedMatcher> class0 = LocalizedMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithDelegatedInstanceType(class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      assertEquals(RoundingMode.DOWN, roundingMode0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.unsupportedCombinationOfAnnotations("k,Q`>>gHO rav\"SfI,", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.missingMethodInvocation();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.reportNoSubMatchersFound("NF>Ib4SIXjib9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.smartNullPointerException("", locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenerDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 2676;
      // Undeclared exception!
      try { 
        reporter0.invocationListenerDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.atMostAndNeverShouldNotBeUsedWithTimeout();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.wantedAtMostX(0, 0);
        fail("Expecting exception: MockitoAssertionError");
      
      } catch(MockitoAssertionError e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LinkedList<LocalizedMatcher> linkedList0 = new LinkedList<LocalizedMatcher>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher((Matcher) null);
      assertNotNull(localizedMatcher0);
      
      boolean boolean0 = linkedList0.add(localizedMatcher0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(localizedMatcher0));
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      ArrayList<LocalizedMatcher> arrayList0 = new ArrayList<LocalizedMatcher>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HasProperty<InvocationImpl> hasProperty0 = new HasProperty<InvocationImpl>(",");
      assertNotNull(hasProperty0);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(hasProperty0);
      assertNotNull(localizedMatcher0);
      
      boolean boolean0 = arrayList0.add(localizedMatcher0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(localizedMatcher0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oh,A>nH`d~UN");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0}, byteArray0);
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      LocationImpl locationImpl0 = new LocationImpl();
      assertNotNull(locationImpl0);
      
      String string0 = locationImpl0.toString();
      assertNotNull(string0);
      assertEquals("-> at <evosuite>.<evosuite>(<evosuite>)", string0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedVerificationException(locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationMatcher> class0 = InvocationMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.serializableWontWorkForObjectsThatDontImplementSerializable(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        reporter0.wrongTypeOfReturnValue("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.spyAndDelegateAreMutuallyExclusive();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      int int0 = 9;
      String string0 = "8fT";
      String string1 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("8fT", "", 9);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("8fT", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 8fT", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(9, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      
      StackTraceElement[] stackTraceElementArray0 = sQLIntegrityConstraintViolationException0.getStackTrace();
      assertEquals(14, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      assertEquals("8fT", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 8fT", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(9, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("8fT", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("8fT", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 8fT", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(9, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 8fT", sQLRecoverableException0.toString());
      assertEquals("8fT", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      
      StackTraceElement[] stackTraceElementArray1 = sQLRecoverableException0.getStackTrace();
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertEquals(14, stackTraceElementArray1.length);
      assertNotNull(stackTraceElementArray1);
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertEquals("8fT", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 8fT", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(9, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 8fT", sQLRecoverableException0.toString());
      assertEquals("8fT", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)sQLRecoverableException0.fillInStackTrace();
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotNull(sQLRecoverableException1);
      assertEquals("8fT", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 8fT", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(9, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 8fT", sQLRecoverableException0.toString());
      assertEquals("8fT", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("8fT", sQLRecoverableException1.getMessage());
      assertEquals("java.sql.SQLRecoverableException: 8fT", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertNull(sQLRecoverableException1.getSQLState());
      
      // Undeclared exception!
      try { 
        reporter0.checkedExceptionInvalid(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)11;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-43), (byte) (-127), (byte) (-17), (byte) (-90), (byte)27, (byte)11}, byteArray0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      
      // Undeclared exception!
      try { 
        reporter0.checkedExceptionInvalid(sQLInvalidAuthorizationSpecException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 5);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      IsIn<Object> isIn0 = new IsIn<Object>(arrayList0);
      assertNotNull(isIn0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      matcherArray0[0] = (Matcher<Object>) isIn0;
      DescribedAs<Object> describedAs0 = new DescribedAs<Object>("**", isIn0, matcherArray0);
      assertEquals(5, matcherArray0.length);
      assertNotNull(describedAs0);
      assertFalse(arrayList0.contains("**"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      matcherArray0[1] = (Matcher<Object>) describedAs0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Matcher<Object> matcher0 = Is.is(object0);
      assertNotNull(matcher0);
      
      matcherArray0[2] = matcher0;
      IsAnything<Object> isAnything0 = new IsAnything<Object>();
      assertNotNull(isAnything0);
      
      matcherArray0[3] = (Matcher<Object>) isAnything0;
      Matcher<Object> matcher1 = IsSame.sameInstance((Object) "org.hamcrest.collection.IsArrayContaining");
      assertNotNull(matcher1);
      assertFalse(matcher1.equals((Object)matcher0));
      
      matcherArray0[4] = matcher1;
      Matcher<InvocationImpl> matcher2 = AllOf.allOf((Matcher<? super InvocationImpl>[]) matcherArray0);
      assertEquals(5, matcherArray0.length);
      assertNotNull(matcher2);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher2);
      assertEquals(5, matcherArray0.length);
      assertNotNull(localizedMatcher0);
      
      Location location0 = localizedMatcher0.getLocation();
      assertEquals(5, matcherArray0.length);
      assertNotNull(location0);
      
      // Undeclared exception!
      try { 
        reporter0.argumentsAreDifferent("org.hamcrest.collection.IsArrayContaining", "org.hamcrest.collection.IsArrayContaining", location0);
        fail("Expecting exception: ArgumentsAreDifferent");
      
      } catch(ArgumentsAreDifferent e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      SerializableMode serializableMode0 = SerializableMode.NONE;
      // Undeclared exception!
      try { 
        reporter0.usingConstructorWithFancySerializable(serializableMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reporter0.mockedTypeIsInconsistentWithSpiedInstanceType(class0, "whose type '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.mocksHaveToBePassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.stubPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, 5771, hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(5771, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(5771, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, (String) null, map0);
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(5771, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(sQLClientInfoException1.getSQLState());
      assertNull(sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLClientInfoException1);
      assertNotNull(sQLTimeoutException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(5771, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(sQLClientInfoException1.getSQLState());
      assertNull(sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.stubPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "%o]We";
      String string1 = "]";
      VerboseMockInvocationLogger verboseMockInvocationLogger0 = new VerboseMockInvocationLogger();
      assertNotNull(verboseMockInvocationLogger0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashMap0);
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("%o]We", hashMap1, mockThrowable0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: %o]We", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("%o]We", sQLClientInfoException0.getMessage());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertNotNull(map0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: %o]We", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("%o]We", sQLClientInfoException0.getMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("]", "]", 0, map0, mockThrowable0);
      assertNotNull(sQLClientInfoException1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: %o]We", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("%o]We", sQLClientInfoException0.getMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: ]", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("]", sQLClientInfoException1.getSQLState());
      assertEquals("]", sQLClientInfoException1.getMessage());
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenerThrewException(verboseMockInvocationLogger0, sQLClientInfoException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      ArrayList<LocalizedMatcher> arrayList0 = new ArrayList<LocalizedMatcher>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        reporter0.misplacedArgumentMatcher(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.moreThanOneAnnotationNotAllowed("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Vector<LocalizedMatcher> vector0 = new Vector<LocalizedMatcher>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      LocalizedMatcher localizedMatcher0 = null;
      boolean boolean0 = vector0.add((LocalizedMatcher) null);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      int int0 = (-638);
      boolean boolean1 = vector0.add((LocalizedMatcher) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        reporter0.invocationListenersRequiresAtLeastOneListener();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<InvocationImpl> class0 = InvocationImpl.class;
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesCannotContainMockedType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToVerifyNoMoreInteractions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("e8@?-/y5r^Be3O8<^C9", "", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: e8@?-/y5r^Be3O8<^C9", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("e8@?-/y5r^Be3O8<^C9", sQLClientInfoException0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("b2", "b2", 10, sQLClientInfoException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: e8@?-/y5r^Be3O8<^C9", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("e8@?-/y5r^Be3O8<^C9", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: b2", sQLTransientConnectionException0.toString());
      assertEquals("b2", sQLTransientConnectionException0.getMessage());
      assertEquals("b2", sQLTransientConnectionException0.getSQLState());
      assertEquals(10, sQLTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForInjectMocksAnnotation(" 2. you are trying to stub a final method, you naughty developer!", sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      assertNotNull(stackTraceFilter0);
      
      LocationImpl locationImpl0 = new LocationImpl(stackTraceFilter0);
      assertNotNull(locationImpl0);
      
      // Undeclared exception!
      try { 
        reporter0.unfinishedStubbing(locationImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.mocksHaveToBePassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.onlyVoidMethodsCanBeSetToDoNothing();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedToWhenMethod();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Matcher<Object>[] matcherArray0 = (Matcher<Object>[]) Array.newInstance(Matcher.class, 5);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      IsIn<Object> isIn0 = new IsIn<Object>(arrayList0);
      assertNotNull(isIn0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      matcherArray0[0] = (Matcher<Object>) isIn0;
      StringDescription stringDescription0 = new StringDescription();
      assertNotNull(stringDescription0);
      
      isIn0.describeTo(stringDescription0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DescribedAs<Object> describedAs0 = new DescribedAs<Object>("**", isIn0, matcherArray0);
      assertEquals(5, matcherArray0.length);
      assertNotNull(describedAs0);
      assertFalse(arrayList0.contains("**"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      matcherArray0[1] = (Matcher<Object>) describedAs0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Matcher<Object> matcher0 = Is.is(object0);
      assertNotNull(matcher0);
      
      matcherArray0[2] = matcher0;
      IsAnything<Object> isAnything0 = new IsAnything<Object>();
      assertNotNull(isAnything0);
      
      matcherArray0[3] = (Matcher<Object>) isAnything0;
      Matcher<Object> matcher1 = IsSame.sameInstance((Object) "org.hamcrest.collection.IsArrayContaining");
      assertNotNull(matcher1);
      assertFalse(matcher1.equals((Object)matcher0));
      
      matcherArray0[4] = matcher1;
      Matcher<InvocationImpl> matcher2 = AllOf.allOf((Matcher<? super InvocationImpl>[]) matcherArray0);
      assertEquals(5, matcherArray0.length);
      assertNotNull(matcher2);
      
      LocalizedMatcher localizedMatcher0 = new LocalizedMatcher(matcher2);
      assertEquals(5, matcherArray0.length);
      assertNotNull(localizedMatcher0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.notAMockPassedWhenCreatingInOrder();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.cannotStubWithNullThrowable();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "t.1~UC`6}";
      // Undeclared exception!
      try { 
        reporter0.cannotStubWithNullThrowable();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      String string0 = "org.hamcrest.core.IsCollectionContaining";
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      Class<StubbedInvocationMatcher> class0 = StubbedInvocationMatcher.class;
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesAcceptsOnlyInterfaces(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.nullPassedToVerify();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      // Undeclared exception!
      try { 
        reporter0.extraInterfacesDoesNotAcceptNullParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      assertNotNull(reporter0);
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 0);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      // Undeclared exception!
      try { 
        reporter0.cannotInitializeForSpyAnnotation((String) null, dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, 5771, hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, (String) null, map0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLClientInfoException1);
      // Undeclared exception!
      try { 
        reporter0.cannotInjectDependency((Field) null, (Object) null, sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      int int0 = 0;
      MockitoMethod mockitoMethod0 = null;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfApi();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.incorrectUseOfApi();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Reporter reporter0 = new Reporter();
      // Undeclared exception!
      try { 
        reporter0.cannotVerifyToString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }
}
