/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 20:55:49 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.math.BigInteger;
import java.nio.file.attribute.FileTime;
import java.util.NoSuchElementException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveEntry_ESTest extends ZipArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setExternalAttributes(65535L);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
      assertEquals(65535L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      Object object0 = zipArchiveEntry0.clone();
      zipArchiveEntry0.setPlatform(828);
      boolean boolean0 = zipArchiveEntry0.equals(object0);
      assertEquals(828, zipArchiveEntry0.getPlatform());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      zipArchiveEntry1.setInternalAttributes(553);
      boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
      assertEquals(553, zipArchiveEntry1.getInternalAttributes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveEntry0.clone();
      assertTrue(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      
      zipArchiveEntry1.setTime((-1550L));
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra fields for entry: ");
      byte[] byteArray0 = new byte[0];
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("Error parsing extra fields for entry: ", byteArray0);
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      zipArchiveEntry0.addExtraField(unicodeCommentExtraField0);
      zipArchiveEntry0.addAsFirstExtraField(unicodePathExtraField0);
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("C~]=v(|");
      byte[] byteArray0 = new byte[4];
      zipArchiveEntry0.setExtra(byteArray0);
      X0019_EncryptionRecipientCertificateList x0019_EncryptionRecipientCertificateList0 = new X0019_EncryptionRecipientCertificateList();
      zipArchiveEntry0.addExtraField(x0019_EncryptionRecipientCertificateList0);
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setPlatform(2469);
      int int0 = zipArchiveEntry0.getUnixMode();
      assertEquals(2469, zipArchiveEntry0.getPlatform());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      zipArchiveEntry0.setMethod((byte)78);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
      assertEquals(78, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "+");
      zipArchiveEntry0.isDirectory();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setVersionRequired((-1));
      int int0 = zipArchiveEntry0.getVersionRequired();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setVersionMadeBy(572);
      int int0 = zipArchiveEntry0.getVersionMadeBy();
      assertEquals(572, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra fields for entry: ");
      zipArchiveEntry0.setSize(1652L);
      long long0 = zipArchiveEntry0.getSize();
      assertEquals(1652L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      byte[] byteArray0 = new byte[9];
      zipArchiveEntry0.setName("", byteArray0);
      zipArchiveEntry0.getRawName();
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setRawFlag(26128);
      int int0 = zipArchiveEntry0.getRawFlag();
      assertEquals(26128, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      zipArchiveEntry0.setRawFlag((-2124));
      int int0 = zipArchiveEntry0.getRawFlag();
      assertEquals((-2124), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setUnixMode(0);
      int int0 = zipArchiveEntry0.getPlatform();
      assertEquals(1L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setPlatform((-97));
      int int0 = zipArchiveEntry0.getPlatform();
      assertEquals((-97), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("C~]=v(|");
      String string0 = zipArchiveEntry0.getName();
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("C~]=v(|", string0);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      
      zipArchiveEntry0.setMethod(0);
      int int0 = zipArchiveEntry0.getMethod();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      zipArchiveEntry0.setMethod((byte)78);
      int int0 = zipArchiveEntry0.getMethod();
      assertEquals(78, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("vnP]s@ISib0r!o");
      zipArchiveEntry0.setInternalAttributes(2082408385);
      int int0 = zipArchiveEntry0.getInternalAttributes();
      assertEquals(2082408385, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      zipArchiveEntry0.setInternalAttributes((-1));
      int int0 = zipArchiveEntry0.getInternalAttributes();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      zipArchiveEntry0.getGeneralPurposeBit();
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
      generalPurposeBit0.useUTF8ForNames(true);
      zipArchiveEntry0.getGeneralPurposeBit();
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
      generalPurposeBit0.useStrongEncryption(true);
      zipArchiveEntry0.getGeneralPurposeBit();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("C~]=v(|");
      X0019_EncryptionRecipientCertificateList x0019_EncryptionRecipientCertificateList0 = new X0019_EncryptionRecipientCertificateList();
      zipArchiveEntry0.addExtraField(x0019_EncryptionRecipientCertificateList0);
      ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("C~]=v(|", zipArchiveEntry0.getName());
      assertEquals(1, zipExtraFieldArray0.length);
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      zipArchiveEntry0.setUnixMode(0);
      long long0 = zipArchiveEntry0.getExternalAttributes();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lPw_-5DK:~IPPNua");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "lPw_-5DK:~IPPNua");
      zipArchiveEntry0.setExternalAttributes((-1819L));
      long long0 = zipArchiveEntry0.getExternalAttributes();
      assertEquals((-1819L), long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[4];
      X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new X5455_ExtendedTimestamp();
      zipExtraFieldArray0[0] = (ZipExtraField) x5455_ExtendedTimestamp0;
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField((ZipEightByteInteger) null, (ZipEightByteInteger) null);
      zipExtraFieldArray0[1] = (ZipExtraField) zip64ExtendedInformationExtraField0;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger((byte)2, mockRandom0);
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger(bigInteger0);
      ZipLong zipLong0 = ZipLong.LFH_SIG;
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new Zip64ExtendedInformationExtraField((ZipEightByteInteger) null, zipEightByteInteger0, (ZipEightByteInteger) null, zipLong0);
      zipExtraFieldArray0[2] = (ZipExtraField) zip64ExtendedInformationExtraField1;
      zipExtraFieldArray0[3] = (ZipExtraField) zip64ExtendedInformationExtraField0;
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Zip64 extended information must contain both size values in the local file header.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile("n");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "n");
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      zipArchiveEntry0.addAsFirstExtraField(unicodePathExtraField0);
      byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
//      try { 
        zipArchiveEntry0.setExtra(byteArray0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Error parsing extra fields for entry: n - UniCode path extra data must have at least 5 bytes.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("1`Uu");
//      try { 
        zipArchiveEntry0.setExtra((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("s");
      X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new X0017_StrongEncryptionHeader();
      zipArchiveEntry0.addExtraField(x0017_StrongEncryptionHeader0);
      byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
//      try { 
        zipArchiveEntry0.setExtra(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipShort", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[5];
      X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new X0017_StrongEncryptionHeader();
      zipExtraFieldArray0[0] = (ZipExtraField) x0017_StrongEncryptionHeader0;
      ZipLong zipLong0 = ZipLong.SINGLE_SEGMENT_SPLIT_MARKER;
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField((ZipEightByteInteger) null, (ZipEightByteInteger) null, (ZipEightByteInteger) null, zipLong0);
      zipExtraFieldArray0[1] = (ZipExtraField) zip64ExtendedInformationExtraField0;
      UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
      zipExtraFieldArray0[2] = (ZipExtraField) unparseableExtraFieldData0;
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      zipExtraFieldArray0[3] = (ZipExtraField) unicodePathExtraField0;
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      zipExtraFieldArray0[4] = (ZipExtraField) unicodeCommentExtraField0;
      zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
      // Undeclared exception!
      zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("C~]=v(|", "central directory zip64 extended information extra field's length doesn't match central directory data.  Expected length ");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "W@3cCP1,s,2CUqh");
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.setCentralDirectoryExtra((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipShort", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("C~]=v(|");
      X0014_X509Certificates x0014_X509Certificates0 = new X0014_X509Certificates();
      zipArchiveEntry0.addExtraField(x0014_X509Certificates0);
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.removeExtraField((ZipShort) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      zipArchiveEntry0.addAsFirstExtraField(x7875_NewUnix0);
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.getExtraField((ZipShort) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      Object object0 = zipArchiveEntry0.clone();
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.equals(object0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("C~]=v(|");
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.addExtraField((ZipExtraField) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getModifyTime();
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField((ZipEightByteInteger) null, zipEightByteInteger0);
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Zip64 extended information must contain both size values in the local file header.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra fields for entry: ");
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.addAsFirstExtraField((ZipExtraField) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((-502L));
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, (ZipEightByteInteger) null);
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.addAsFirstExtraField(zip64ExtendedInformationExtraField0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Zip64 extended information must contain both size values in the local file header.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("C~]=v(|");
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      zipArchiveEntry0.addExtraField(unicodeCommentExtraField0);
      ZipArchiveEntry zipArchiveEntry1 = null;
//      try {
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(Throwable e) {
//         //
//         // UniCode path extra data must have at least 5 bytes.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = null;
//      try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipArchiveEntry) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // entry
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[6];
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
      zipExtraFieldArray0[0] = (ZipExtraField) zip64ExtendedInformationExtraField0;
      X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new X0016_CertificateIdForCentralDirectory();
      zipExtraFieldArray0[1] = (ZipExtraField) x0016_CertificateIdForCentralDirectory0;
      X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new X0017_StrongEncryptionHeader();
      zipExtraFieldArray0[2] = (ZipExtraField) x0017_StrongEncryptionHeader0;
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      zipExtraFieldArray0[3] = (ZipExtraField) unicodePathExtraField0;
      JarMarker jarMarker0 = JarMarker.getInstance();
      zipExtraFieldArray0[4] = (ZipExtraField) jarMarker0;
      zipExtraFieldArray0[5] = (ZipExtraField) zip64ExtendedInformationExtraField0;
      zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      ZipArchiveEntry zipArchiveEntry1 = null;
//      try {
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("C~]=v(|");
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      zipArchiveEntry0.addExtraField(unicodeCommentExtraField0);
      ZipArchiveEntry zipArchiveEntry1 = null;
//      try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(Throwable e) {
//         //
//         // UniCode path extra data must have at least 5 bytes.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = null;
//      try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipEntry) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // entry
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = null;
//      try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = null;
//      try {
        zipArchiveEntry0 = new ZipArchiveEntry((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // name
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = null;
//      try {
        zipArchiveEntry0 = new ZipArchiveEntry((File) null, "Error parsing extra fields for entry: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("C~]=v(|");
      assertEquals("C~]=v(|", zipArchiveEntry0.getName());
      
      byte[] byteArray0 = new byte[0];
      zipArchiveEntry0.setName((String) null, byteArray0);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setPlatform(2469);
      byte[] byteArray0 = new byte[8];
      zipArchiveEntry0.setName("", byteArray0);
      assertEquals(2469, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.getName();
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile("n");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "n");
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      zipArchiveEntry0.addAsFirstExtraField(unicodePathExtraField0);
      byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // UniCode path extra data must have at least 5 bytes.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra fields for entry: ");
      byte[] byteArray0 = new byte[0];
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("Error parsing extra fields for entry: ", byteArray0);
      zipArchiveEntry0.addAsFirstExtraField(unicodePathExtraField0);
      ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNotNull(zipExtraField0);
      assertEquals((-1L), zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra fields for entry: ");
      byte[] byteArray0 = new byte[0];
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("Error parsing extra fields for entry: ", byteArray0);
      zipArchiveEntry0.getExtraField(unicodePathExtraField0.UPATH_ID);
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[8];
      zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      zipArchiveEntry0.removeExtraField(zipShort0);
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setUnixMode((-2794));
      int int0 = zipArchiveEntry0.getUnixMode();
      assertTrue(zipArchiveEntry0.isUnixSymlink());
      assertEquals(62742, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("P`M*-");
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.setMethod((-2082));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -2082
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra fields for entry: ");
      long long0 = zipArchiveEntry0.getSize();
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      int int0 = zipArchiveEntry0.getMethod();
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      boolean boolean0 = zipArchiveEntry0.isDirectory();
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lPw_-5DK:~IPPNua");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "lPw_-5DK:~IPPNua");
      long long0 = zipArchiveEntry0.getExternalAttributes();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, long0);
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      int int0 = zipArchiveEntry0.getPlatform();
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, int0);
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      int int0 = zipArchiveEntry0.getInternalAttributes();
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, int0);
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setExtra();
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertFalse(boolean0);
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals((-1L), zipArchiveEntry1.getSize());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      Object object0 = zipArchiveEntry0.clone();
      assertTrue(object0.equals((Object)zipArchiveEntry0));
      
      AsiExtraField asiExtraField0 = new AsiExtraField();
      zipArchiveEntry0.addExtraField(asiExtraField0);
      zipArchiveEntry0.equals(object0);
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      assertTrue(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      
      zipArchiveEntry1.setCompressedSize(0);
      zipArchiveEntry0.equals(zipArchiveEntry1);
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      assertTrue(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      
      zipArchiveEntry1.setCrc(4278190080L);
      zipArchiveEntry0.equals(zipArchiveEntry1);
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveEntry0.clone();
      zipArchiveEntry1.setSize(0);
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
      assertEquals(0L, zipArchiveEntry1.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(0);
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveEntry0.clone();
      zipArchiveEntry1.setExternalAttributes(3);
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
      assertEquals(3L, zipArchiveEntry1.getExternalAttributes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      zipArchiveEntry1.setUnixMode((-1850));
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
      assertEquals(3, zipArchiveEntry1.getPlatform());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveEntry0.clone();
      zipArchiveEntry1.setInternalAttributes((-1));
      boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
      assertEquals((-1), zipArchiveEntry1.getInternalAttributes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveEntry0.clone();
      assertTrue(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      
      FileTime fileTime0 = FileTime.fromMillis(0);
      zipArchiveEntry1.setLastModifiedTime(fileTime0);
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      zipArchiveEntry1.setComment("");
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry1.getSize());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertTrue(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      Object object0 = zipArchiveEntry0.clone();
      assertTrue(object0.equals((Object)zipArchiveEntry0));
      
      zipArchiveEntry0.setComment(")so/");
      boolean boolean0 = zipArchiveEntry0.equals(object0);
      assertFalse(object0.equals((Object)zipArchiveEntry0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      Object object0 = zipArchiveEntry0.clone();
      assertTrue(object0.equals((Object)zipArchiveEntry0));
      
      zipArchiveEntry0.setName("!av@`");
      boolean boolean0 = zipArchiveEntry0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("P`M*-");
      boolean boolean0 = zipArchiveEntry0.equals("P`M*-");
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(boolean0);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      boolean boolean0 = zipArchiveEntry0.equals((Object) null);
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(boolean0);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertTrue(boolean0);
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[8];
      zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
      zipArchiveEntry0.setExtra(byteArray0);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
      zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-85);
      zipArchiveEntry0.setExtra(byteArray0);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra fields for entry: ");
      zipArchiveEntry0.getRawName();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra fields for entry: ");
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.setSize((byte) (-23));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // invalid entry size
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setPlatform((-1912));
      zipArchiveEntry0.setName("b");
      assertEquals((-1912), zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setName((String) null);
      String string0 = zipArchiveEntry0.getName();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNotNull(string0);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.removeUnparseableExtraFieldData();
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra fields for entry: ");
      byte[] byteArray0 = new byte[5];
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("/G$q(n#7f", byteArray0);
      zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.removeExtraField(unicodePathExtraField0.UPATH_ID);
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.removeExtraField(unicodeCommentExtraField0.UCOM_ID);
//        fail("Expecting exception: NoSuchElementException");
      
//      } catch(NoSuchElementException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("C~]=v(|");
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      zipArchiveEntry0.addExtraField(unicodeCommentExtraField0);
      zipArchiveEntry0.addAsFirstExtraField(unicodeCommentExtraField0);
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("C~]=v(|", zipArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)107;
      zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
      UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
      assertNotNull(unparseableExtraFieldData0);
      
      zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      zipArchiveEntry0.addExtraField(unicodeCommentExtraField0);
      zipArchiveEntry0.addExtraField(unicodeCommentExtraField0);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      X0014_X509Certificates x0014_X509Certificates0 = new X0014_X509Certificates();
      zipArchiveEntry0.addExtraField(x0014_X509Certificates0);
      ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(1, zipExtraFieldArray0.length);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
      zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
      zipArchiveEntry0.removeUnparseableExtraFieldData();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(true);
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipExtraFieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("P`M*-");
      boolean boolean0 = zipArchiveEntry0.isUnixSymlink();
      assertFalse(boolean0);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setUnixMode((-2637));
      boolean boolean0 = zipArchiveEntry0.isUnixSymlink();
      assertEquals((-172818432L), zipArchiveEntry0.getExternalAttributes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/D?/");
      zipArchiveEntry0.setUnixMode(0);
      assertEquals(17L, zipArchiveEntry0.getExternalAttributes());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "+");
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      zipArchiveEntry0.addAsFirstExtraField(x7875_NewUnix0);
      ZipShort zipShort0 = UnicodePathExtraField.UPATH_ID;
      ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipExtraField0);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(3);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
      assertEquals(3, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("D5L@w!z");
      X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new X0017_StrongEncryptionHeader();
      zipArchiveEntry0.addAsFirstExtraField(x0017_StrongEncryptionHeader0);
      ZipArchiveEntry zipArchiveEntry1 = null;
//      try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipShort", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = null;
//      try {
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      int int0 = zipArchiveEntry0.getRawFlag();
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, int0);
      assertEquals((-1), zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setVersionRequired(1);
      int int0 = zipArchiveEntry0.getVersionRequired();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[5];
      UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
      zipExtraFieldArray0[2] = (ZipExtraField) unparseableExtraFieldData0;
      // Undeclared exception!
//      try { 
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
      generalPurposeBit0.useDataDescriptor(true);
      zipArchiveEntry0.getGeneralPurposeBit();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      int int0 = zipArchiveEntry0.getVersionMadeBy();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, int0);
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setVersionMadeBy((-1610612734));
      int int0 = zipArchiveEntry0.getVersionMadeBy();
      assertEquals((-1610612734), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile("n");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "n");
      byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
      assertNotNull(byteArray0);
      
      zipArchiveEntry0.setExtra(byteArray0);
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra fields for entry: ");
      zipArchiveEntry0.getUnparseableExtraFieldData();
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("C~]=v(|");
      zipArchiveEntry0.hashCode();
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("C~]=v(|", zipArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("P`M*-");
      byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
      zipArchiveEntry0.setName("P`M*-", byteArray0);
      byte[] byteArray1 = zipArchiveEntry0.getRawName();
      assertNotNull(byteArray1);
      
      zipArchiveEntry0.setCentralDirectoryExtra(byteArray1);
      ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields(false);
      assertEquals(0, zipExtraFieldArray0.length);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.getExtraFields();
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.getLastModifiedDate();
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      assertEquals((-1), zipArchiveEntry0.getMethod());
      
      zipArchiveEntry0.setMethod(3);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
      assertEquals(3, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      int int0 = zipArchiveEntry0.getVersionRequired();
      assertEquals(0, int0);
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
  }
}
