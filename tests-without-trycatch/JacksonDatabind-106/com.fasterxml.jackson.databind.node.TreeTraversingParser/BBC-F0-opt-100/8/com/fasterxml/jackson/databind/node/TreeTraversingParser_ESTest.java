/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:27:33 GMT 2021
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NodeCursor;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.format.TextStyle;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextToken();
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      treeTraversingParser0.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertFalse(jsonParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      byte[] byteArray0 = new byte[4];
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      int int0 = treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FloatNode floatNode0 = new FloatNode(0.0F);
      POJONode pOJONode0 = new POJONode(floatNode0);
      JsonPointer jsonPointer0 = JsonPointer.valueOf((String) null);
      JsonNode jsonNode0 = pOJONode0._at(jsonPointer0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      JsonToken jsonToken0 = treeTraversingParser0.nextToken();
      assertEquals((-1), jsonToken0.id());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LongNode longNode0 = new LongNode(2302L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0, (ObjectCodec) null);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      ValueNode valueNode0 = jsonNodeFactory0.pojoNode(decimalNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getTextLength();
      assertEquals(4, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(33.1353235);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.nextLongValue((-2548L));
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertEquals(10, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextValue();
      char[] charArray0 = treeTraversingParser0.getTextCharacters();
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LongNode longNode0 = new LongNode(2302L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0, (ObjectCodec) null);
      treeTraversingParser0.close();
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertNull(jsonStreamContext0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      NodeCursor.ObjectCursor nodeCursor_ObjectCursor0 = (NodeCursor.ObjectCursor)treeTraversingParser0.getParsingContext();
      assertEquals(JsonToken.END_OBJECT, nodeCursor_ObjectCursor0.endToken());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertTrue(jsonStreamContext0.inArray());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      BigDecimal bigDecimal0 = new BigDecimal((-1129));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      JsonParser jsonParser0 = bigIntegerNode0.traverse();
      long long0 = jsonParser0.getLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(2147483647L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-1743.648));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals((-1743L), long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LongNode longNode0 = new LongNode(2302L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0, (ObjectCodec) null);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals(2302, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      Short short0 = Short.valueOf((short) (-1233));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      int int0 = treeTraversingParser0.getIntValue();
      assertEquals((-1233), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(2.14748365E9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1.0));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0, (ObjectCodec) null);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      BigInteger bigInteger0 = BigInteger.valueOf(2319L);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, (ObjectCodec) null);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(2319.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf((-3451.806));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals((-3451.806), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(2.147483658660193E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((short)10, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      BigDecimal bigDecimal0 = treeTraversingParser0.getDecimalValue();
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ShortNode shortNode0 = ShortNode.valueOf((short) (-324));
      ValueNode valueNode0 = jsonNodeFactory0.pojoNode(shortNode0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertSame(objectCodec0, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      byte[] byteArray0 = new byte[4];
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      byte[] byteArray1 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LongNode longNode0 = new LongNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0, (ObjectCodec) null);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte) (-1), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short)1366);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(1366.0, jsonNode0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Byte byte0 = new Byte((byte)31);
      ValueNode valueNode0 = arrayNode0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.canConvertToInt());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FloatNode floatNode0 = new FloatNode((-3878.0F));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonNode0.asToken());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertFalse(jsonNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertTrue(jsonNode0.isBigInteger());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(0, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(1L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNumericNode();
      assertEquals(1.0F, jsonNode0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode((-544.0));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.nextToken();
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short)3);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertSame(shortNode0, jsonNode0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      POJONode pOJONode0 = new POJONode(decimalNode0);
      JsonNode jsonNode0 = pOJONode0.findPath("com.fasterxml.jackson.databind.introspect.ClassIntrospector");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      JsonNode jsonNode1 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode1.isDouble());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((byte) (-83));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(0, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(0, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0, (ObjectCodec) null);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertFalse(jsonNode0.isBigDecimal());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectMapper0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(JsonNodeType.NUMBER, jsonNode0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals("true", jsonNode0.asText());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FloatNode floatNode0 = FloatNode.valueOf(9.223372E18F);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(floatNode0);
      JsonNode jsonNode0 = treeTraversingParser0.currentNode();
      assertEquals(9.223372036854776E18, jsonNode0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("primitive");
//      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockFileOutputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("0 |4j(xlT_j_}", (-1223.0));
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode1, objectMapper0);
      Short short0 = new Short((short)3701);
      objectNode0.put("M|zy7ZFY&&I", short0);
      treeTraversingParser0.nextToken();
      // Undeclared exception!
//      try { 
        treeTraversingParser0.nextToken();
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.close();
      treeTraversingParser0._startContainer = true;
      // Undeclared exception!
//      try { 
        treeTraversingParser0.nextToken();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      // Undeclared exception!
//      try { 
        treeTraversingParser0.getText();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, objectMapper0);
//      try { 
        treeTraversingParser0.getNumberValue();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current token (null) not numeric, cannot use numeric value accessors
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      POJONode pOJONode0 = new POJONode(textStyle0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
//      try { 
        treeTraversingParser0.getLongValue();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
//      try { 
        treeTraversingParser0.getFloatValue();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current token (VALUE_TRUE) not numeric, cannot use numeric value accessors
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 8);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
//      try { 
        treeTraversingParser0.getDoubleValue();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current token (null) not numeric, cannot use numeric value accessors
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      ValueNode valueNode0 = jsonNodeFactory0.pojoNode(decimalNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
//      try { 
        treeTraversingParser0.getDecimalValue();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      // Undeclared exception!
//      try { 
        treeTraversingParser0.getBigIntegerValue();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
//      try { 
        treeTraversingParser0.getBigIntegerValue();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current token (null) not numeric, cannot use numeric value accessors
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
//      try { 
        treeTraversingParser0.currentNumericNode();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current token (null) not numeric, cannot use numeric value accessors
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      TreeTraversingParser treeTraversingParser0 = null;
//      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null, objectReader0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TreeTraversingParser treeTraversingParser0 = null;
//      try {
        treeTraversingParser0 = new TreeTraversingParser((JsonNode) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getValueAsString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getCurrentLocation();
      assertEquals((-1), jsonLocation0.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      BigInteger bigInteger0 = BigInteger.valueOf(739L);
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0, objectMapper0);
      treeTraversingParser0.close();
//      try { 
        treeTraversingParser0.getIntValue();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current token (null) not numeric, cannot use numeric value accessors
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
//      try { 
        treeTraversingParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      TextNode textNode0 = arrayNode0.textNode("u}+Vwjsd}{38*");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      // Undeclared exception!
//      try { 
        treeTraversingParser0.getBinaryValue((Base64Variant) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue((Base64Variant) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NumericNode numericNode0 = arrayNode0.numberNode(Double.NEGATIVE_INFINITY);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      POJONode pOJONode0 = new POJONode(textStyle0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertEquals(TextStyle.NARROW, object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      byte[] byteArray0 = new byte[5];
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertSame(byteArray0, object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.close();
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
      assertEquals(JsonParser.NumberType.DOUBLE, jsonParser_NumberType0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ShortNode shortNode0 = ShortNode.valueOf((short) (-324));
      ValueNode valueNode0 = jsonNodeFactory0.pojoNode(shortNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0._nodeCursor = null;
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("21", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LongNode longNode0 = new LongNode(2302L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0, (ObjectCodec) null);
      treeTraversingParser0.close();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.overrideCurrentName("com.fasterxml.jackson.databind.ser.std.CollectionSerializer");
      assertFalse(treeTraversingParser0.canParseAsync());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode((-22L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.overrideCurrentName("~c,f#vdGLKh,A");
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LongNode longNode0 = new LongNode(21L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.getCurrentName();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      String string0 = treeTraversingParser0.currentName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.skipChildren();
      assertEquals(4, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, objectReader0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      assertEquals(2, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.nextTextValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.nextToken();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      ValueNode valueNode0 = jsonNodeFactory0.pojoNode(decimalNode0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getText();
      assertEquals(4, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      treeTraversingParser0._nextToken = jsonToken0;
      treeTraversingParser0.nextToken();
      String string0 = treeTraversingParser0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextToken();
      int int0 = treeTraversingParser0.getTextLength();
      assertEquals(12, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.close();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      // Undeclared exception!
//      try { 
        treeTraversingParser0.getDoubleValue();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      // Undeclared exception!
//      try { 
        treeTraversingParser0.getLongValue();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      // Undeclared exception!
//      try { 
        treeTraversingParser0.getDecimalValue();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
//      try { 
        treeTraversingParser0.getTextCharacters();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<POJONode> class0 = POJONode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0, objectReader0);
      // Undeclared exception!
//      try { 
        treeTraversingParser0.getIntValue();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      JsonLocation jsonLocation0 = treeTraversingParser0.getTokenLocation();
      assertEquals((-1L), jsonLocation0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short)1366);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      // Undeclared exception!
//      try { 
        treeTraversingParser0._handleEOF();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      ValueNode valueNode0 = arrayNode0.numberNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      JsonStreamContext jsonStreamContext0 = treeTraversingParser0.getParsingContext();
      assertTrue(jsonStreamContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
//      try { 
        treeTraversingParser0.getNumberType();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, cannot use numeric value accessors
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Byte byte0 = new Byte((byte)31);
      ValueNode valueNode0 = arrayNode0.numberNode(byte0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      BigInteger bigInteger0 = treeTraversingParser0.getBigIntegerValue();
      assertEquals((byte)31, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      boolean boolean0 = treeTraversingParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      // Undeclared exception!
//      try { 
        treeTraversingParser0.getTextLength();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FloatNode floatNode0 = new FloatNode(0.0F);
      POJONode pOJONode0 = new POJONode(floatNode0);
      JsonPointer jsonPointer0 = JsonPointer.valueOf((String) null);
      JsonNode jsonNode0 = pOJONode0._at(jsonPointer0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0);
      ObjectCodec objectCodec0 = treeTraversingParser0.getCodec();
      assertNull(objectCodec0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      Number number0 = treeTraversingParser0.getNumberValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DoubleNode doubleNode0 = new DoubleNode(0L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      float float0 = treeTraversingParser0.getFloatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      Version version0 = treeTraversingParser0.version();
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(2.147483647E9);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(doubleNode0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      treeTraversingParser0.setCodec(objectMapper0);
      assertFalse(treeTraversingParser0.canParseAsync());
  }
}
