/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 20:31:20 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.JsonWriteFeature;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharConversionException;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectReader_ESTest extends ObjectReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(0, nullNode0.size());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.textValue());
      assertEquals("null", nullNode0.asText());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isBigInteger());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertTrue(nullNode0.isEmpty());
      assertNotNull(nullNode0);
      
      IntNode intNode0 = (IntNode)objectReader0.readTree("2");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isDouble());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertTrue(intNode0.canConvertToInt());
      assertEquals(2L, intNode0.longValue());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals(2.0, intNode0.doubleValue(), 0.01);
      assertEquals(2, intNode0.intValue());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isShort());
      assertEquals((short)2, intNode0.shortValue());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(2.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertNotNull(intNode0);
      assertSame(objectMapper0, objectMapper1);
      
      // Undeclared exception!
//      try { 
        objectReader0.withoutFeatures((FormatFeature[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(typeFactory0);
      
      Class<MapType> class0 = MapType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.isFinal());
      assertNotNull(mapLikeType0);
      
      MapLikeType mapLikeType1 = mapLikeType0.withKeyValueHandler(pipedReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType1.isArrayType());
      assertTrue(mapLikeType1.hasContentType());
      assertTrue(mapLikeType1.isFinal());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isMapLikeType());
      assertTrue(mapLikeType1.hasHandlers());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.isConcrete());
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertNotNull(mapLikeType1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      
      Version version0 = Version.unknownVersion();
      assertEquals("", version0.getArtifactId());
      assertFalse(version0.isSnapshot());
      assertTrue(version0.isUnknownVersion());
      assertEquals(0, version0.getPatchLevel());
      assertTrue(version0.isUknownVersion());
      assertEquals("", version0.getGroupId());
      assertEquals(0, version0.getMajorVersion());
      assertEquals(0, version0.getMinorVersion());
      assertNotNull(version0);
      
      SimpleModule simpleModule0 = new SimpleModule("", version0);
      assertEquals("", version0.getArtifactId());
      assertFalse(version0.isSnapshot());
      assertTrue(version0.isUnknownVersion());
      assertEquals(0, version0.getPatchLevel());
      assertTrue(version0.isUknownVersion());
      assertEquals("", version0.getGroupId());
      assertEquals(0, version0.getMajorVersion());
      assertEquals(0, version0.getMinorVersion());
      assertEquals("", simpleModule0.getModuleName());
      assertNotNull(simpleModule0);
      
      NamedType[] namedTypeArray0 = new NamedType[8];
      NamedType namedType0 = new NamedType(class0, "");
      assertNull(namedType0.getName());
      assertFalse(namedType0.hasName());
      assertNotNull(namedType0);
      
      namedTypeArray0[0] = namedType0;
      NamedType namedType1 = new NamedType(class0);
      assertNull(namedType1.getName());
      assertFalse(namedType1.hasName());
      assertTrue(namedType1.equals((Object)namedType0));
      assertNotNull(namedType1);
      
      namedTypeArray0[1] = namedType1;
      NamedType namedType2 = new NamedType(class0, "");
      assertFalse(namedType2.hasName());
      assertNull(namedType2.getName());
      assertTrue(namedType2.equals((Object)namedType0));
      assertTrue(namedType2.equals((Object)namedType1));
      assertNotNull(namedType2);
      
      namedTypeArray0[2] = namedType2;
      NamedType namedType3 = new NamedType(class0, " ;,B@uj~D@uitqF");
      assertTrue(namedType3.hasName());
      assertEquals(" ;,B@uj~D@uitqF", namedType3.getName());
      assertTrue(namedType3.equals((Object)namedType2));
      assertTrue(namedType3.equals((Object)namedType0));
      assertTrue(namedType3.equals((Object)namedType1));
      assertNotNull(namedType3);
      
      namedTypeArray0[3] = namedType3;
      NamedType namedType4 = new NamedType(class0, "(?8'0;[~/Rw&Lda");
      assertEquals("(?8'0;[~/Rw&Lda", namedType4.getName());
      assertTrue(namedType4.hasName());
      assertTrue(namedType4.equals((Object)namedType1));
      assertTrue(namedType4.equals((Object)namedType0));
      assertTrue(namedType4.equals((Object)namedType3));
      assertTrue(namedType4.equals((Object)namedType2));
      assertNotNull(namedType4);
      
      namedTypeArray0[4] = namedType4;
      NamedType namedType5 = new NamedType(class0);
      assertFalse(namedType5.hasName());
      assertNull(namedType5.getName());
      assertTrue(namedType5.equals((Object)namedType2));
      assertTrue(namedType5.equals((Object)namedType4));
      assertTrue(namedType5.equals((Object)namedType0));
      assertTrue(namedType5.equals((Object)namedType1));
      assertTrue(namedType5.equals((Object)namedType3));
      assertNotNull(namedType5);
      
      namedTypeArray0[5] = namedType5;
      NamedType namedType6 = new NamedType(class0);
      assertNull(namedType6.getName());
      assertFalse(namedType6.hasName());
      assertTrue(namedType6.equals((Object)namedType4));
      assertTrue(namedType6.equals((Object)namedType5));
      assertTrue(namedType6.equals((Object)namedType2));
      assertTrue(namedType6.equals((Object)namedType3));
      assertTrue(namedType6.equals((Object)namedType0));
      assertTrue(namedType6.equals((Object)namedType1));
      assertNotNull(namedType6);
      
      namedTypeArray0[6] = namedType6;
      NamedType namedType7 = new NamedType(class0);
      assertFalse(namedType7.hasName());
      assertNull(namedType7.getName());
      assertTrue(namedType7.equals((Object)namedType1));
      assertTrue(namedType7.equals((Object)namedType3));
      assertTrue(namedType7.equals((Object)namedType2));
      assertTrue(namedType7.equals((Object)namedType4));
      assertTrue(namedType7.equals((Object)namedType6));
      assertTrue(namedType7.equals((Object)namedType0));
      assertTrue(namedType7.equals((Object)namedType5));
      assertNotNull(namedType7);
      
      namedTypeArray0[7] = namedType7;
      SimpleModule simpleModule1 = simpleModule0.registerSubtypes(namedTypeArray0);
      assertEquals("", version0.getArtifactId());
      assertFalse(version0.isSnapshot());
      assertTrue(version0.isUnknownVersion());
      assertEquals(0, version0.getPatchLevel());
      assertTrue(version0.isUknownVersion());
      assertEquals("", version0.getGroupId());
      assertEquals(0, version0.getMajorVersion());
      assertEquals(0, version0.getMinorVersion());
      assertEquals("", simpleModule0.getModuleName());
      assertEquals("", simpleModule1.getModuleName());
      assertNotNull(simpleModule1);
      assertEquals(8, namedTypeArray0.length);
      assertSame(simpleModule0, simpleModule1);
      assertSame(simpleModule1, simpleModule0);
      
      MapLikeType mapLikeType2 = mapLikeType1.withValueHandler(simpleModule1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType1.isArrayType());
      assertTrue(mapLikeType1.hasContentType());
      assertTrue(mapLikeType1.isFinal());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isMapLikeType());
      assertTrue(mapLikeType1.hasHandlers());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.isConcrete());
      assertEquals("", version0.getArtifactId());
      assertFalse(version0.isSnapshot());
      assertTrue(version0.isUnknownVersion());
      assertEquals(0, version0.getPatchLevel());
      assertTrue(version0.isUknownVersion());
      assertEquals("", version0.getGroupId());
      assertEquals(0, version0.getMajorVersion());
      assertEquals(0, version0.getMinorVersion());
      assertEquals("", simpleModule0.getModuleName());
      assertEquals("", simpleModule1.getModuleName());
      assertTrue(mapLikeType2.isFinal());
      assertFalse(mapLikeType2.isPrimitive());
      assertFalse(mapLikeType2.isArrayType());
      assertFalse(mapLikeType2.isInterface());
      assertTrue(mapLikeType2.hasHandlers());
      assertFalse(mapLikeType2.isCollectionLikeType());
      assertTrue(mapLikeType2.isMapLikeType());
      assertTrue(mapLikeType2.hasContentType());
      assertFalse(mapLikeType2.isAbstract());
      assertTrue(mapLikeType2.isContainerType());
      assertTrue(mapLikeType2.hasValueHandler());
      assertFalse(mapLikeType2.isEnumType());
      assertFalse(mapLikeType2.isJavaLangObject());
      assertTrue(mapLikeType2.isConcrete());
      assertEquals(0, mapLikeType2.containedTypeCount());
      assertFalse(mapLikeType2.useStaticType());
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertTrue(mapLikeType2.equals((Object)mapLikeType0));
      assertTrue(mapLikeType2.equals((Object)mapLikeType1));
      assertNotNull(mapLikeType2);
      assertEquals(8, namedTypeArray0.length);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType0, mapLikeType2);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotSame(mapLikeType1, mapLikeType2);
      assertSame(simpleModule0, simpleModule1);
      assertSame(simpleModule1, simpleModule0);
      assertNotSame(mapLikeType2, mapLikeType1);
      assertNotSame(mapLikeType2, mapLikeType0);
      
      // Undeclared exception!
//      try { 
        objectReader0._prefetchRootDeserializer(mapLikeType2);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.io.PipedReader cannot be cast to com.fasterxml.jackson.databind.KeyDeserializer
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.put("(", (short)0);
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isDouble());
      assertNotNull(objectNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      ObjectNode objectNode2 = objectNode1.put("bhK#Bc:_", true);
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertNotNull(objectNode2);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      
      ObjectNode objectNode3 = objectNode2.putObject("tBdo40GyPTH^O< d&");
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(3, objectNode2.size());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertEquals(0, objectNode3.size());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isBigDecimal());
      assertNull(objectNode3.numberType());
      assertTrue(objectNode3.isEmpty());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isMissingNode());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.equals((Object)objectNode1));
      assertFalse(objectNode3.equals((Object)objectNode2));
      assertFalse(objectNode3.equals((Object)objectNode0));
      assertNotNull(objectNode3);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode3);
      assertNotSame(objectNode3, objectNode1);
      assertNotSame(objectNode3, objectNode2);
      assertNotSame(objectNode3, objectNode0);
      
      ArrayNode arrayNode0 = objectNode3.withArray("bhK#Bc:_");
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(3, objectNode2.size());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isBigDecimal());
      assertNull(objectNode3.numberType());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isEmpty());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isShort());
      assertEquals(1, objectNode3.size());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isMissingNode());
      assertNull(objectNode3.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(objectNode0.equals((Object)objectNode3));
      assertFalse(objectNode1.equals((Object)objectNode3));
      assertFalse(objectNode2.equals((Object)objectNode3));
      assertFalse(objectNode3.equals((Object)objectNode1));
      assertFalse(objectNode3.equals((Object)objectNode2));
      assertFalse(objectNode3.equals((Object)objectNode0));
      assertNotNull(arrayNode0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode3);
      assertNotSame(objectNode3, objectNode1);
      assertNotSame(objectNode3, objectNode2);
      assertNotSame(objectNode3, objectNode0);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.textValue());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.numberType());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isFloat());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertNotNull(missingNode0);
      
      ArrayNode arrayNode1 = objectMapper0.updateValue(arrayNode0, (Object) missingNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(3, objectNode2.size());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isBigDecimal());
      assertNull(objectNode3.numberType());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isEmpty());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isShort());
      assertEquals(1, objectNode3.size());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isMissingNode());
      assertNull(objectNode3.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.textValue());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.numberType());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isFloat());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(0, arrayNode1.size());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isFloat());
      assertEquals("", arrayNode1.asText());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isBigInteger());
      assertNull(arrayNode1.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertFalse(objectNode0.equals((Object)objectNode3));
      assertFalse(objectNode1.equals((Object)objectNode3));
      assertFalse(objectNode2.equals((Object)objectNode3));
      assertFalse(objectNode3.equals((Object)objectNode1));
      assertFalse(objectNode3.equals((Object)objectNode2));
      assertFalse(objectNode3.equals((Object)objectNode0));
      assertNotNull(arrayNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode3);
      assertNotSame(objectNode3, objectNode1);
      assertNotSame(objectNode3, objectNode2);
      assertNotSame(objectNode3, objectNode0);
      assertSame(arrayNode0, arrayNode1);
      assertSame(arrayNode1, arrayNode0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
//      try { 
        objectReader0.readValue((InputStream) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertNotNull(javaType0);
      
      MapType mapType0 = typeFactory0.constructMapType(class0, javaType0, javaType0);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertNotNull(mapType0);
      
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isDouble());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isNaN());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertNotNull(decimalNode0);
      
      MapType mapType1 = mapType0.withKeyValueHandler(decimalNode0);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isDouble());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isNaN());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      
      MapType mapType2 = mapType1.withContentTypeHandler(class0);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isDouble());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isNaN());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isJavaLangObject());
      assertEquals(2, mapType2.containedTypeCount());
      assertTrue(mapType2.hasHandlers());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.useStaticType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertNotNull(mapType2);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues((JsonParser) null, (ResolvedType) mapType2);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.node.DecimalNode cannot be cast to com.fasterxml.jackson.databind.KeyDeserializer
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isFloat());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isObject());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.numberType());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertNotNull(nullNode0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactory0);
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(typeFactory0);
      
      Class<ArrayType> class0 = ArrayType.class;
      Class<List> class1 = List.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.hasContentType());
      assertTrue(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertNotNull(javaType0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      
      ReferenceType referenceType0 = (ReferenceType)typeFactory0.constructReferenceType(class0, javaType0);
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasHandlers());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.hasContentType());
      assertTrue(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertNotNull(referenceType0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValue((JsonParser) null, (JavaType) referenceType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0.with((TimeZone) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.BaseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(priorityQueue0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(64);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) pipedInputStream0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNull(jsonParser0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      URL uRL0 = null;
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(typeFactory0);
      assertNotSame(objectReader1, objectReader0);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, priorityQueue0.size());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(priorityQueue0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(mapType0);
      assertNotSame(objectReader1, objectReader0);
      
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isDouble());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isBigDecimal());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isShort());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isMissingNode());
      assertNotNull(booleanNode0);
      
      MapLikeType mapLikeType0 = mapType0.withKeyValueHandler(booleanNode0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, priorityQueue0.size());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isDouble());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isBigDecimal());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isShort());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(priorityQueue0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(mapLikeType0.equals((Object)mapType0));
      assertNotNull(mapLikeType0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(mapLikeType0, mapType0);
      
      // Undeclared exception!
//      try { 
        objectReader1.withType((Type) mapLikeType0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.node.BooleanNode cannot be cast to com.fasterxml.jackson.databind.KeyDeserializer
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, objectReader1, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(iOContext0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)1;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1349), (InputStream) null, objectReader1, byteQuadsCanonicalizer0, byteArray0, (byte) (-33), 0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals((-1349), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)0, (byte) (-113), (byte)1, (byte)3, (byte)1}, byteArray0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) uTF8StreamJsonParser0, (JsonParser) uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals((-1349), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals((-1349), jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonParserSequence0);
      assertEquals(6, byteArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)0, (byte) (-113), (byte)1, (byte)3, (byte)1}, byteArray0);
      
      JsonParserSequence jsonParserSequence1 = (JsonParserSequence)jsonParserSequence0.skipChildren();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals((-1349), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals((-1349), jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(0, jsonParserSequence1.getFormatFeatures());
      assertFalse(jsonParserSequence1.requiresCustomCodec());
      assertFalse(jsonParserSequence1.canReadTypeId());
      assertEquals((-1349), jsonParserSequence1.getFeatureMask());
      assertEquals(2, jsonParserSequence1.containedParsersCount());
      assertFalse(jsonParserSequence1.canReadObjectId());
      assertFalse(jsonParserSequence1.canParseAsync());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonParserSequence1);
      assertEquals(6, byteArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonParserSequence0, jsonParserSequence1);
      assertSame(jsonParserSequence1, jsonParserSequence0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)0, (byte) (-113), (byte)1, (byte)3, (byte)1}, byteArray0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader1.createDeserializationContext(jsonParserSequence1);
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals((-1349), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals((-1349), jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(0, jsonParserSequence1.getFormatFeatures());
      assertFalse(jsonParserSequence1.requiresCustomCodec());
      assertFalse(jsonParserSequence1.canReadTypeId());
      assertEquals((-1349), jsonParserSequence1.getFeatureMask());
      assertEquals(2, jsonParserSequence1.containedParsersCount());
      assertFalse(jsonParserSequence1.canReadObjectId());
      assertFalse(jsonParserSequence1.canParseAsync());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(6, byteArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonParserSequence0, jsonParserSequence1);
      assertSame(jsonParserSequence1, jsonParserSequence0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)0, (byte) (-113), (byte)1, (byte)3, (byte)1}, byteArray0);
      
      // Undeclared exception!
//      try { 
        objectReader1._initForReading(defaultDeserializationContext_Impl0, uTF8StreamJsonParser0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -33
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode(0.0F);
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((short)0, floatNode0.shortValue());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isObject());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertEquals(0, floatNode0.intValue());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertNotNull(floatNode0);
      
      FloatNode floatNode1 = objectMapper0.updateValue(floatNode0, (Object) floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((short)0, floatNode0.shortValue());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isObject());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertEquals(0, floatNode0.intValue());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode1.isShort());
      assertFalse(floatNode1.isObject());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isInt());
      assertTrue(floatNode1.isEmpty());
      assertNull(floatNode1.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isNaN());
      assertFalse(floatNode1.isLong());
      assertEquals(0.0, floatNode1.doubleValue(), 0.01);
      assertEquals(0L, floatNode1.longValue());
      assertFalse(floatNode1.isBigDecimal());
      assertFalse(floatNode1.isArray());
      assertFalse(floatNode1.booleanValue());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isDouble());
      assertEquals(0, floatNode1.intValue());
      assertFalse(floatNode1.isMissingNode());
      assertTrue(floatNode1.isFloat());
      assertFalse(floatNode1.isBigInteger());
      assertEquals((short)0, floatNode1.shortValue());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertEquals(0.0F, floatNode1.floatValue(), 0.01F);
      assertTrue(floatNode1.isFloatingPointNumber());
      assertTrue(floatNode1.canConvertToInt());
      assertEquals(0, floatNode1.size());
      assertTrue(floatNode1.equals((Object)floatNode0));
      assertNotNull(floatNode1);
      assertNotSame(floatNode0, floatNode1);
      assertNotSame(floatNode1, floatNode0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      ObjectReader objectReader2 = objectReader1.with(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader2.treeAsTokens(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((short)0, floatNode0.shortValue());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isObject());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertEquals(0, floatNode0.intValue());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertTrue(floatNode0.equals((Object)floatNode1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(treeTraversingParser0);
      assertNotSame(floatNode0, floatNode1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      FloatNode floatNode2 = (FloatNode)objectReader1._bindAsTree(treeTraversingParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((short)0, floatNode0.shortValue());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isObject());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertEquals(0, floatNode0.intValue());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(8, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertTrue(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(8, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(floatNode2.isBigInteger());
      assertEquals(0L, floatNode2.longValue());
      assertTrue(floatNode2.canConvertToInt());
      assertFalse(floatNode2.isBigDecimal());
      assertFalse(floatNode2.booleanValue());
      assertTrue(floatNode2.isFloat());
      assertFalse(floatNode2.isShort());
      assertEquals(0, floatNode2.intValue());
      assertFalse(floatNode2.isArray());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode2.numberType());
      assertNull(floatNode2.textValue());
      assertTrue(floatNode2.isFloatingPointNumber());
      assertTrue(floatNode2.isEmpty());
      assertEquals(0.0, floatNode2.doubleValue(), 0.01);
      assertTrue(floatNode2.canConvertToLong());
      assertFalse(floatNode2.isObject());
      assertFalse(floatNode2.isLong());
      assertEquals(0.0F, floatNode2.floatValue(), 0.01F);
      assertEquals(0, floatNode2.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode2.asToken());
      assertEquals(JsonNodeType.NUMBER, floatNode2.getNodeType());
      assertFalse(floatNode2.isNaN());
      assertFalse(floatNode2.isIntegralNumber());
      assertFalse(floatNode2.isDouble());
      assertFalse(floatNode2.isInt());
      assertFalse(floatNode2.isMissingNode());
      assertEquals((short)0, floatNode2.shortValue());
      assertTrue(floatNode0.equals((Object)floatNode1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertTrue(floatNode2.equals((Object)floatNode0));
      assertTrue(floatNode2.equals((Object)floatNode1));
      assertNotNull(floatNode2);
      assertNotSame(floatNode0, floatNode1);
      assertNotSame(floatNode0, floatNode2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(floatNode2, floatNode0);
      assertNotSame(floatNode2, floatNode1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader1._findTreeDeserializer(defaultDeserializationContext_Impl1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(jsonDeserializer0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader(1);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(0, 2);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertNotNull(readerBasedJsonParser1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
//      try { 
        objectReader0._bindAsTree(readerBasedJsonParser1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader((JsonNodeFactory) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      String string0 = "root";
      // Undeclared exception!
//      try { 
        objectReader0.createObjectNode();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      LongNode longNode0 = new LongNode(1000000000L);
      assertFalse(longNode0.isNaN());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isMissingNode());
      assertEquals(1.0E9F, longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.booleanValue());
      assertEquals((short) (-13824), longNode0.shortValue());
      assertEquals(1000000000, longNode0.intValue());
      assertFalse(longNode0.isBigDecimal());
      assertTrue(longNode0.canConvertToLong());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isArray());
      assertEquals(1000000000L, longNode0.longValue());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isLong());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isObject());
      assertEquals(1.0E9, longNode0.doubleValue(), 0.01);
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertNotNull(longNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertFalse(longNode0.isNaN());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isMissingNode());
      assertEquals(1.0E9F, longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.booleanValue());
      assertEquals((short) (-13824), longNode0.shortValue());
      assertEquals(1000000000, longNode0.intValue());
      assertFalse(longNode0.isBigDecimal());
      assertTrue(longNode0.canConvertToLong());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isArray());
      assertEquals(1000000000L, longNode0.longValue());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isLong());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isObject());
      assertEquals(1.0E9, longNode0.doubleValue(), 0.01);
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertFalse(longNode0.isNaN());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isMissingNode());
      assertEquals(1.0E9F, longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.booleanValue());
      assertEquals((short) (-13824), longNode0.shortValue());
      assertEquals(1000000000, longNode0.intValue());
      assertFalse(longNode0.isBigDecimal());
      assertTrue(longNode0.canConvertToLong());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isArray());
      assertEquals(1000000000L, longNode0.longValue());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isLong());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isObject());
      assertEquals(1.0E9, longNode0.doubleValue(), 0.01);
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer0);
      
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext1, 2, dataInputStream0, objectReader0, byteQuadsCanonicalizer0, (-868));
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(longNode0.isNaN());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isMissingNode());
      assertEquals(1.0E9F, longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.booleanValue());
      assertEquals((short) (-13824), longNode0.shortValue());
      assertEquals(1000000000, longNode0.intValue());
      assertFalse(longNode0.isBigDecimal());
      assertTrue(longNode0.canConvertToLong());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isArray());
      assertEquals(1000000000L, longNode0.longValue());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isLong());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isObject());
      assertEquals(1.0E9, longNode0.doubleValue(), 0.01);
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertFalse(uTF8DataInputJsonParser0.isNaN());
      assertNull(uTF8DataInputJsonParser0.getCurrentToken());
      assertEquals(0, uTF8DataInputJsonParser0.currentTokenId());
      assertFalse(uTF8DataInputJsonParser0.hasTextCharacters());
      assertFalse(uTF8DataInputJsonParser0.canParseAsync());
      assertEquals(0, uTF8DataInputJsonParser0.getCurrentTokenId());
      assertNull(uTF8DataInputJsonParser0.currentToken());
      assertEquals(0L, uTF8DataInputJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8DataInputJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8DataInputJsonParser0.getTokenLineNr());
      assertFalse(uTF8DataInputJsonParser0.isClosed());
      assertFalse(uTF8DataInputJsonParser0.hasCurrentToken());
      assertNull(uTF8DataInputJsonParser0.getCurrentName());
      assertNull(uTF8DataInputJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8DataInputJsonParser0.getFormatFeatures());
      assertFalse(uTF8DataInputJsonParser0.requiresCustomCodec());
      assertEquals(2, uTF8DataInputJsonParser0.getFeatureMask());
      assertFalse(uTF8DataInputJsonParser0.canReadTypeId());
      assertFalse(uTF8DataInputJsonParser0.canReadObjectId());
      assertFalse(uTF8DataInputJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8DataInputJsonParser0.getTokenColumnNr());
      assertNotNull(uTF8DataInputJsonParser0);
      
      Class<ArrayType> class0 = ArrayType.class;
//      try { 
        objectReader0.readValue((JsonParser) uTF8DataInputJsonParser0, class0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EAGER_DESERIALIZER_FETCH");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.put("hiBIv\"geXl6>|z37V", (Short) null);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertNotNull(objectNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode2 = objectNode1.put("com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer", float0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(2, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertNotNull(objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      
      ObjectNode objectNode3 = objectNode2.removeAll();
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(0, objectNode1.size());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isEmpty());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isFloat());
      assertEquals(0, objectNode2.size());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.booleanValue());
      assertNull(objectNode3.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertTrue(objectNode3.isObject());
      assertEquals(0, objectNode3.size());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isBigDecimal());
      assertTrue(objectNode3.isEmpty());
      assertFalse(objectNode3.isIntegralNumber());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isLong());
      assertNotNull(objectNode3);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectNode3);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(0, objectNode1.size());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isEmpty());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isFloat());
      assertEquals(0, objectNode2.size());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.booleanValue());
      assertNull(objectNode3.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertTrue(objectNode3.isObject());
      assertEquals(0, objectNode3.size());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isBigDecimal());
      assertTrue(objectNode3.isEmpty());
      assertFalse(objectNode3.isIntegralNumber());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isLong());
      assertNotNull(objectReader0);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ShortNode shortNode0 = ShortNode.valueOf((short)0);
      assertTrue(shortNode0.isEmpty());
      assertEquals(0L, shortNode0.longValue());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isInt());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isFloat());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isArray());
      assertTrue(shortNode0.isShort());
      assertNull(shortNode0.textValue());
      assertNotNull(shortNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, shortNode0, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertTrue(shortNode0.isEmpty());
      assertEquals(0L, shortNode0.longValue());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isInt());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isFloat());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isArray());
      assertTrue(shortNode0.isShort());
      assertNull(shortNode0.textValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader(3);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 3, 3, false);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0L, shortNode0.longValue());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isInt());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isFloat());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isArray());
      assertTrue(shortNode0.isShort());
      assertNull(shortNode0.textValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(readerBasedJsonParser0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'l'}, charArray0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.skipChildren();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0L, shortNode0.longValue());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isInt());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isFloat());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isArray());
      assertTrue(shortNode0.isShort());
      assertNull(shortNode0.textValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(readerBasedJsonParser1);
      assertEquals(1, charArray0.length);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser1);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(2, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0L, shortNode0.longValue());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isInt());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isFloat());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isArray());
      assertTrue(shortNode0.isShort());
      assertNull(shortNode0.textValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(jsonParserDelegate0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'l'}, charArray0);
      
      MappingIterator<Module> mappingIterator0 = objectReader0.readValues((JsonParser) jsonParserDelegate0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(0, objectNode1.size());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isEmpty());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isFloat());
      assertEquals(0, objectNode2.size());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.booleanValue());
      assertNull(objectNode3.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertTrue(objectNode3.isObject());
      assertEquals(0, objectNode3.size());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isBigDecimal());
      assertTrue(objectNode3.isEmpty());
      assertFalse(objectNode3.isIntegralNumber());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isLong());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0L, shortNode0.longValue());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isInt());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isFloat());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isArray());
      assertTrue(shortNode0.isShort());
      assertNull(shortNode0.textValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(2, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertNotNull(mappingIterator0);
      assertEquals(1, charArray0.length);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertArrayEquals(new char[] {'l'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode(0.0F);
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(0, floatNode0.intValue());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isShort());
      assertNull(floatNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isDouble());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isLong());
      assertNotNull(floatNode0);
      
      FloatNode floatNode1 = objectMapper0.updateValue(floatNode0, (Object) floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(0, floatNode0.intValue());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isShort());
      assertNull(floatNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isDouble());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isLong());
      assertEquals(0, floatNode1.size());
      assertFalse(floatNode1.isLong());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.isDouble());
      assertEquals(0, floatNode1.intValue());
      assertNull(floatNode1.textValue());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertEquals((short)0, floatNode1.shortValue());
      assertTrue(floatNode1.isFloat());
      assertFalse(floatNode1.isArray());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertEquals(0.0, floatNode1.doubleValue(), 0.01);
      assertFalse(floatNode1.isBigDecimal());
      assertTrue(floatNode1.isEmpty());
      assertEquals(0L, floatNode1.longValue());
      assertFalse(floatNode1.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isObject());
      assertFalse(floatNode1.isNaN());
      assertFalse(floatNode1.isShort());
      assertFalse(floatNode1.isBigInteger());
      assertTrue(floatNode1.canConvertToInt());
      assertFalse(floatNode1.booleanValue());
      assertFalse(floatNode1.isInt());
      assertTrue(floatNode1.canConvertToLong());
      assertEquals(0.0F, floatNode1.floatValue(), 0.01F);
      assertTrue(floatNode1.equals((Object)floatNode0));
      assertNotNull(floatNode1);
      assertNotSame(floatNode0, floatNode1);
      assertNotSame(floatNode1, floatNode0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      MissingNode missingNode0 = (MissingNode)objectReader1.readTree((InputStream) dataInputStream0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isFloat());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.booleanValue());
      assertTrue(missingNode0.isMissingNode());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isLong());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isArray());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(missingNode0);
      assertEquals(2, byteArray0.length);
      assertNotSame(objectReader1, objectReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((InputStream) bufferedInputStream0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(2, byteArray0.length);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(2, byteArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
//      try { 
        objectReader1._initForReading(defaultDeserializationContext_Impl0, uTF8StreamJsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (BufferedInputStream); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-60);
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-95);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      TextNode textNode0 = jsonNodeFactory0.textNode("Cannot use source of type ");
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isDouble());
      assertEquals("Cannot use source of type ", textNode0.textValue());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("Cannot use source of type ", textNode0.asText());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.booleanValue());
      assertTrue(textNode0.isEmpty());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertNotNull(textNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, textNode0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isDouble());
      assertEquals("Cannot use source of type ", textNode0.textValue());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("Cannot use source of type ", textNode0.asText());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.booleanValue());
      assertTrue(textNode0.isEmpty());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isDouble());
      assertEquals("Cannot use source of type ", textNode0.textValue());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("Cannot use source of type ", textNode0.asText());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.booleanValue());
      assertTrue(textNode0.isEmpty());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      File file0 = MockFile.createTempFile("Cannot use source of type ", "Cannot use source of type ");
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("Cannot use source of type 0Cannot use source of type ", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/tmp/Cannot use source of type 0Cannot use source of type ", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      InputStream inputStream0 = objectReader0._inputStream(file0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("Cannot use source of type 0Cannot use source of type ", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/tmp/Cannot use source of type 0Cannot use source of type ", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, inputStream0.available());
      assertNotNull(inputStream0);
      assertSame(objectMapper0, objectMapper1);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, inputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, 2048, (-3234), true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("Cannot use source of type 0Cannot use source of type ", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/tmp/Cannot use source of type 0Cannot use source of type ", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, inputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isDouble());
      assertEquals("Cannot use source of type ", textNode0.textValue());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("Cannot use source of type ", textNode0.asText());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.booleanValue());
      assertTrue(textNode0.isEmpty());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-60), (byte) (-13), (byte)0, (byte) (-95)}, byteArray0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValue((JsonParser) uTF8StreamJsonParser0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      
      JsonFactory jsonFactory4 = jsonFactory2.copy();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory1);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory4));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      Class<Integer> class1 = Integer.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class1);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory4));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory4));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(typeFactory0);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory4));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(typeFactory0, typeFactory1);
      
      Class<NioPathDeserializer> class2 = NioPathDeserializer.class;
      Class<MapType> class3 = MapType.class;
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType(class3, class0, class2);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isFinal());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory4));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapLikeType0);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      MapLikeType mapLikeType1 = mapLikeType0.withKeyValueHandler(jsonpCharacterEscapes0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isFinal());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertFalse(mapLikeType1.hasValueHandler());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.useStaticType());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.isFinal());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isContainerType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertTrue(mapLikeType1.hasContentType());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory4));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertNotNull(mapLikeType1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues((JsonParser) null, (JavaType) mapLikeType1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.core.JsonpCharacterEscapes cannot be cast to com.fasterxml.jackson.databind.KeyDeserializer
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer((JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonDeserializer0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[7] = (byte) (-39);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)89;
//      try { 
        objectReader0.readValue(byteArray0, 0, 703);
//        fail("Expecting exception: CharConversionException");
      
//      } catch(CharConversionException e) {
//         //
//         // Unsupported UCS-4 endianness (2143) detected
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(typeFactory0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<DecimalNode> class1 = DecimalNode.class;
      Class<NioPathDeserializer> class2 = NioPathDeserializer.class;
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType(class1, class1, class2);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapLikeType0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
//      try { 
        objectReader0.readValues((JsonParser) null, (JavaType) mapLikeType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot find a Value deserializer for type [map-like type; class com.fasterxml.jackson.databind.node.DecimalNode, [simple type, class com.fasterxml.jackson.databind.node.DecimalNode] -> [simple type, class com.fasterxml.jackson.databind.ext.NioPathDeserializer]]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, (TokenFilter) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)42, (byte)23, (byte)0, (byte)0}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)42, (byte)23, (byte)0, (byte)0}, byteArray0);
      
//      try { 
        objectReader1.readTree((InputStream) bufferedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected character ('*' (code 42)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
//         //  at [Source: (BufferedInputStream); line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertNotNull(decimalNode0);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(decimalNode0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      boolean boolean1 = decimalNode0.isNull();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      MappingIterator<Integer> mappingIterator0 = objectReader1.readValues((byte[]) null, (-2906), (-2906));
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(mappingIterator0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertNotNull(nonBlockingJsonParser0);
      
//      try { 
        objectReader0._bindAndCloseAsTree(nonBlockingJsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getCreatorVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getFieldVisibility());
      assertNotNull(jsonAutoDetect_Value0);
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getCreatorVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      // Undeclared exception!
//      try { 
        objectReader0.forType((TypeReference<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonNode jsonNode0 = objectReader1.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      assertNotNull(jacksonAnnotationIntrospector0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair(jacksonAnnotationIntrospector0, jacksonAnnotationIntrospector0);
      assertNotNull(annotationIntrospector0);
      
      BaseSettings baseSettings1 = baseSettings0.withAppendedAnnotationIntrospector(annotationIntrospector0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertNotNull(baseSettings1);
      assertNotSame(baseSettings0, baseSettings1);
      assertNotSame(baseSettings1, baseSettings0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      BaseSettings baseSettings2 = baseSettings1.with(locale0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertFalse(baseSettings2.hasExplicitTimeZone());
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(baseSettings2.equals((Object)baseSettings0));
      assertNotNull(baseSettings2);
      assertNotSame(baseSettings0, baseSettings1);
      assertNotSame(baseSettings0, baseSettings2);
      assertNotSame(baseSettings1, baseSettings0);
      assertSame(baseSettings1, baseSettings2);
      assertSame(baseSettings2, baseSettings1);
      assertNotSame(baseSettings2, baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = objectMapper0._configOverrides;
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings2, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertFalse(baseSettings2.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings0.equals((Object)baseSettings2));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(baseSettings2.equals((Object)baseSettings0));
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader2 = objectReader1._with(deserializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertFalse(baseSettings2.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings0.equals((Object)baseSettings2));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(baseSettings2.equals((Object)baseSettings0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(baseSettings0, baseSettings1);
      assertNotSame(baseSettings0, baseSettings2);
      assertNotSame(baseSettings1, baseSettings0);
      assertSame(baseSettings1, baseSettings2);
      assertSame(baseSettings2, baseSettings1);
      assertNotSame(baseSettings2, baseSettings0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '.';
      charArray0[2] = 'F';
      charArray0[3] = 'J';
      charArray0[4] = 'l';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, (-455), (-455));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(5, charArray0.length);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertArrayEquals(new char[] {'K', '.', 'F', 'J', 'l'}, charArray0);
      
//      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (char[])\"K.FJl\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TextNode textNode0 = TextNode.valueOf("vlF");
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertEquals("vlF", textNode0.asText());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isLong());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals("vlF", textNode0.textValue());
      assertFalse(textNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertNotNull(textNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(textNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertEquals("vlF", textNode0.asText());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isLong());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals("vlF", textNode0.textValue());
      assertFalse(textNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNotNull(jsonParser0);
      
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 5);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNotNull(coreXMLDeserializers_Std0);
      
      JavaType javaType0 = coreXMLDeserializers_Std0.getValueType();
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNull(javaType0);
      
//      try { 
        objectReader0.readValue(jsonParser0, (ResolvedType) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)3;
      byte byte0 = (byte)20;
      byteArray0[2] = (byte)20;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)3, (byte)41);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)41, (byte)3, (byte)20, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)41, (byte)3, (byte)20, (byte)0, (byte)0, (byte)0}, byteArray0);
      
//      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (DataInputStream); line: 1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<POJONode> class0 = POJONode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MappingIterator<FloatNode> mappingIterator0 = objectReader0.readValues((InputStream) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 0);
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertNotNull(arrayNode0);
      
      List<JsonNode> list0 = arrayNode0.findParents("`Snlx");
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<JsonNode> list1 = arrayNode0.findParents("`Snlx", list0);
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list1);
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(0, arrayNode1.size());
      assertTrue(arrayNode1.isArray());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isIntegralNumber());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      
      ObjectNode objectNode0 = arrayNode1.objectNode();
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(0, arrayNode1.size());
      assertTrue(arrayNode1.isArray());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isIntegralNumber());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(objectNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertNotSame(arrayNode1, arrayNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(0, arrayNode1.size());
      assertTrue(arrayNode1.isArray());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isIntegralNumber());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(jsonParser0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertNotSame(arrayNode1, arrayNode0);
      
//      try { 
        objectReader0.readValues(jsonParser0, (ResolvedType) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNotNull(arrayNode0);
      
      BooleanNode booleanNode0 = arrayNode0.booleanNode(true);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(booleanNode0.isEmpty());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigDecimal());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isIntegralNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.booleanValue());
      assertNotNull(booleanNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(booleanNode0.isEmpty());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigDecimal());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isIntegralNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.booleanValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertNotNull(byteQuadsCanonicalizer0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-4453), sequenceInputStream0, objectReader0, byteQuadsCanonicalizer0, (byte[]) null, 0, 0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(booleanNode0.isEmpty());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigDecimal());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isIntegralNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.booleanValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals((-4453), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(uTF8StreamJsonParser0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = (UTF8StreamJsonParser)objectReader1._considerFilter(uTF8StreamJsonParser0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(booleanNode0.isEmpty());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigDecimal());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isIntegralNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.booleanValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals((-4453), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser1.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(0, uTF8StreamJsonParser1.currentTokenId());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.canParseAsync());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.isNaN());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser1.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals((-4453), uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.currentToken());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(uTF8StreamJsonParser1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      assertSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(875);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, pipedReader0, objectMapper0, charsToNameCanonicalizer1);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(66, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(66, readerBasedJsonParser1.getFeatureMask());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNotNull(beanProperty_Bogus0);
      
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertNotNull(simpleType0);
      
//      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser1, (ResolvedType) simpleType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      assertTrue(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
//      try { 
        objectReader0.readValue(uRL0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (URL); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte) (-88);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-40), (byte) (-1), (byte)8, (byte)59, (byte)70, (byte)41, (byte) (-88)}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2925);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-40), (byte) (-1), (byte)8, (byte)59, (byte)70, (byte)41, (byte) (-88)}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-40), (byte) (-1), (byte)8, (byte)59, (byte)70, (byte)41, (byte) (-88)}, byteArray0);
      
//      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected character ('%' (code 37)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
//         //  at [Source: (DataInputStream); line: 1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      PipedReader pipedReader0 = new PipedReader(666);
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) pipedReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNotNull(readerBasedJsonParser0);
      
//      try { 
        objectReader0._bindAndReadValues((JsonParser) readerBasedJsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, (-1), (-1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertNotNull(jsonNode0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNode0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = 'X';
      charArray0[2] = 'F';
      charArray0[3] = 'J';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-750), pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, (-797), 0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals((-750), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNotNull(readerBasedJsonParser0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {')', 'X', 'F', 'J'}, charArray0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(1, (-1862));
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1280, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(1280, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, charArray0.length);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {')', 'X', 'F', 'J'}, charArray0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser1);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1280, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(1280, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(1280, jsonParserDelegate0.getFeatureMask());
      assertNotNull(jsonParserDelegate0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {')', 'X', 'F', 'J'}, charArray0);
      
      // Undeclared exception!
//      try { 
        objectReader0._bindAndReadValues((JsonParser) jsonParserDelegate0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -797
//         //
//         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertEquals(5, deserializationFeatureArray0.length);
      
      ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(objectReader0));
      assertNotNull(arrayList0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayList0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(objectReader0));
      assertNotNull(dataFormatReaders1);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0, 64);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51}, byteArray0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat((InputStream) pushbackInputStream0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(objectReader0));
      assertNotNull(dataFormatReaders_Match0);
      assertEquals(2, byteArray0.length);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51}, byteArray0);
      
      // Undeclared exception!
//      try { 
        objectReader0._reportUnkownFormat((DataFormatReaders) null, dataFormatReaders_Match0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0._findRootDeserializer((DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withRootName("o a8NDDtWe20");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      
//      try { 
        objectReader1.readValues("19e");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected end-of-inputexpected a digit for number exponent
//         //  at [Source: (String)\"19e\"; line: 1, column: 7]
//         //
//         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertNotNull(jsonNode0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
//      try { 
        objectReader0.readValues(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: (byte[])\"\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byte byte0 = (byte)1;
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = '.';
      charArray0[2] = 'w';
      charArray0[3] = 'O';
      charArray0[4] = '.';
      charArray0[5] = '0';
      charArray0[6] = 'w';
      charArray0[7] = 'T';
      charArray0[8] = '\'';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser(charArray0, (int) (byte)1, 1942);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotNull(readerBasedJsonParser0);
      assertEquals(9, charArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertArrayEquals(new char[] {'7', '.', 'w', 'O', '.', '0', 'w', 'T', '\''}, charArray0);
      
//      try { 
        objectReader0._bindAndReadValues((JsonParser) readerBasedJsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected character ('.' (code 46)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
//         //  at [Source: (char[])\"7.wO.0wT'\"; line: 1, column: 3]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)24, (byte)2, (byte)1, (byte)0, (byte) (-53), (byte)1, (byte)93, (byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)24, (byte)2, (byte)1, (byte)0, (byte) (-53), (byte)1, (byte)93, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)24, (byte)2, (byte)1, (byte)0, (byte) (-53), (byte)1, (byte)93, (byte)0}, byteArray0);
      
//      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid UTF-8 middle byte 0x1
//         //  at [Source: (DataInputStream); line: 1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = FloatNode.valueOf(3353.0F);
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isEmpty());
      assertEquals(3353L, floatNode0.longValue());
      assertNull(floatNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(3353.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isObject());
      assertEquals(3353, floatNode0.intValue());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((short)3353, floatNode0.shortValue());
      assertEquals(0, floatNode0.size());
      assertEquals(3353.0, floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.canConvertToLong());
      assertNotNull(floatNode0);
      
      FloatNode floatNode1 = objectMapper0.updateValue(floatNode0, (Object) floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isEmpty());
      assertEquals(3353L, floatNode0.longValue());
      assertNull(floatNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(3353.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isObject());
      assertEquals(3353, floatNode0.intValue());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((short)3353, floatNode0.shortValue());
      assertEquals(0, floatNode0.size());
      assertEquals(3353.0, floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(0, floatNode1.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertFalse(floatNode1.isLong());
      assertFalse(floatNode1.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertEquals(3353, floatNode1.intValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertFalse(floatNode1.isArray());
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isDouble());
      assertTrue(floatNode1.canConvertToInt());
      assertTrue(floatNode1.isEmpty());
      assertEquals((short)3353, floatNode1.shortValue());
      assertTrue(floatNode1.canConvertToLong());
      assertEquals(3353.0, floatNode1.doubleValue(), 0.01);
      assertFalse(floatNode1.booleanValue());
      assertFalse(floatNode1.isInt());
      assertFalse(floatNode1.isBigInteger());
      assertFalse(floatNode1.isNaN());
      assertEquals(3353L, floatNode1.longValue());
      assertEquals(3353.0F, floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.isBigDecimal());
      assertFalse(floatNode1.isObject());
      assertTrue(floatNode1.isFloat());
      assertNull(floatNode1.textValue());
      assertFalse(floatNode1.isShort());
      assertTrue(floatNode1.equals((Object)floatNode0));
      assertNotNull(floatNode1);
      assertNotSame(floatNode0, floatNode1);
      assertNotSame(floatNode1, floatNode0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
//      try { 
        objectReader0._reportUndetectableSource("[method ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot use source of type java.lang.String with format auto-detection: must be byte- not char-based
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isMissingNode());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertNotNull(jsonNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isMissingNode());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNotNull(jsonParser0);
      
      Class<MapType> class0 = MapType.class;
//      try { 
        objectReader0.readValue(jsonParser0, class0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize instance of `com.fasterxml.jackson.databind.type.MapType` out of NOT_AVAILABLE token
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readTree((byte[]) null, (-2546), 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertEquals(6, deserializationFeatureArray0.length);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      assertEquals(6, deserializationFeatureArray0.length);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      assertEquals(6, deserializationFeatureArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory2);
      assertEquals(6, deserializationFeatureArray0.length);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertNotNull(jsonFactory3);
      assertEquals(6, deserializationFeatureArray0.length);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory3.createNonBlockingByteArrayParser();
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertNotNull(nonBlockingJsonParser0);
      assertEquals(6, deserializationFeatureArray0.length);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser)objectReader0._considerFilter(nonBlockingJsonParser0, false);
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, nonBlockingJsonParser1.getTextOffset());
      assertNull(nonBlockingJsonParser1.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser1.currentTokenId());
      assertFalse(nonBlockingJsonParser1.isClosed());
      assertFalse(nonBlockingJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser1.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser1.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser1.currentToken());
      assertEquals(1, nonBlockingJsonParser1.getTokenColumnNr());
      assertTrue(nonBlockingJsonParser1.needMoreInput());
      assertFalse(nonBlockingJsonParser1.canReadObjectId());
      assertFalse(nonBlockingJsonParser1.canReadTypeId());
      assertEquals(8193, nonBlockingJsonParser1.getFeatureMask());
      assertTrue(nonBlockingJsonParser1.canParseAsync());
      assertNull(nonBlockingJsonParser1.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser1.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser1.getTextLength());
      assertFalse(nonBlockingJsonParser1.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser1.hasCurrentToken());
      assertNull(nonBlockingJsonParser1.getCurrentName());
      assertFalse(nonBlockingJsonParser1.hasTextCharacters());
      assertFalse(nonBlockingJsonParser1.isNaN());
      assertEquals(0L, nonBlockingJsonParser1.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser1.getTokenLineNr());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertNotNull(nonBlockingJsonParser1);
      assertEquals(6, deserializationFeatureArray0.length);
      assertSame(nonBlockingJsonParser0, nonBlockingJsonParser1);
      assertSame(nonBlockingJsonParser1, nonBlockingJsonParser0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      JsonNodeFactory jsonNodeFactory1 = JsonNodeFactory.instance;
      assertFalse(jsonNodeFactory1.equals((Object)jsonNodeFactory0));
      assertNotNull(jsonNodeFactory1);
      assertNotSame(jsonNodeFactory1, jsonNodeFactory0);
      
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      assertTrue(decimalNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isBigInteger());
      assertTrue(decimalNode0.isEmpty());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.booleanValue());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isInt());
      assertNotNull(decimalNode0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      // Undeclared exception!
//      try { 
        objectReader0.treeToValue((TreeNode) decimalNode0, (Class<Integer>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNotNull(nonBlockingJsonParser0);
      
//      try { 
        objectReader0._bindAndReadValues((JsonParser) nonBlockingJsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'e';
      charArray0[2] = '`';
      charArray0[3] = 'k';
      charArray0[4] = '\\';
      charArray0[5] = ')';
      charArray0[6] = 'h';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8449, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNotNull(readerBasedJsonParser0);
      assertEquals(7, charArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertArrayEquals(new char[] {':', 'e', '`', 'k', '\\', ')', 'h'}, charArray0);
      
//      try { 
        objectReader0._bindAndCloseAsTree(readerBasedJsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected character (':' (code 58)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
//         //  at [Source: (char[])\":e`k\\)h\"; line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      Class<ArrayType> class0 = ArrayType.class;
      IntNode intNode0 = new IntNode((-418));
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals((-418), intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-418L), intNode0.longValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isShort());
      assertEquals((-418.0), intNode0.doubleValue(), 0.01);
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isMissingNode());
      assertEquals((short) (-418), intNode0.shortValue());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-418.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isDouble());
      assertNotNull(intNode0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertNotNull(placeholderForType0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("com.fasterxml.jackson.databind.deser.std.StdDeserializer", (Object) placeholderForType0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertNotNull(injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      
      InjectableValues.Std injectableValues_Std2 = injectableValues_Std0.addValue((Class<?>) class0, (Object) intNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals((-418), intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-418L), intNode0.longValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isShort());
      assertEquals((-418.0), intNode0.doubleValue(), 0.01);
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isMissingNode());
      assertEquals((short) (-418), intNode0.shortValue());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-418.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isDouble());
      assertNotNull(injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals((-418), intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-418L), intNode0.longValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isShort());
      assertEquals((-418.0), intNode0.doubleValue(), 0.01);
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isMissingNode());
      assertEquals((short) (-418), intNode0.shortValue());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-418.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isDouble());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      
      Version version0 = objectReader0.version();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals((-418), intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-418L), intNode0.longValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isShort());
      assertEquals((-418.0), intNode0.doubleValue(), 0.01);
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isMissingNode());
      assertEquals((short) (-418), intNode0.shortValue());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-418.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isDouble());
      assertEquals(10, version0.getMinorVersion());
      assertTrue(version0.isSnapshot());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUknownVersion());
      assertEquals(0, version0.getPatchLevel());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertFalse(version0.isUnknownVersion());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(version0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      
      JsonParser jsonParser0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("6 A$a+", class0, "JSON");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(jsonMappingException0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
//      try { 
        objectReader0._verifyNoTrailingTokens((JsonParser) null, defaultDeserializationContext0, placeholderForType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isBigInteger());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isMissingNode());
      assertNull(decimalNode0.textValue());
      assertNotNull(decimalNode0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, decimalNode0, true);
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isBigInteger());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isMissingNode());
      assertNull(decimalNode0.textValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isBigInteger());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isMissingNode());
      assertNull(decimalNode0.textValue());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      StringReader stringReader0 = new StringReader("o=9?Ypy*Xl&9><DGM");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '0';
      charArray0[2] = 'h';
      charArray0[3] = '\\';
      charArray0[4] = '^';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-5090), 317, true);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isBigInteger());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isMissingNode());
      assertNull(decimalNode0.textValue());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'1', '0', 'h', '\\', '^'}, charArray0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isBigInteger());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isMissingNode());
      assertNull(decimalNode0.textValue());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(readerBasedJsonParser1);
      assertEquals(5, charArray0.length);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertArrayEquals(new char[] {'1', '0', 'h', '\\', '^'}, charArray0);
      
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      // Undeclared exception!
//      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser1, class0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -5090
//         //
//         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-10), (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      String string0 = "ALLOW_MISSING_VALUES";
      Class<LongNode> class0 = LongNode.class;
      ObjectReader objectReader2 = objectMapper1.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertNotNull(nioPathDeserializer0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, nioPathDeserializer0, false);
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext0, iOContext1);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)33;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)33}, byteArray1);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(dataInputStream0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)33}, byteArray1);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)47);
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext1, 1, dataInputStream0, objectReader2, byteQuadsCanonicalizer1, 47);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(1, uTF8DataInputJsonParser0.getFeatureMask());
      assertEquals(0, uTF8DataInputJsonParser0.getFormatFeatures());
      assertFalse(uTF8DataInputJsonParser0.requiresCustomCodec());
      assertNull(uTF8DataInputJsonParser0.getLastClearedToken());
      assertFalse(uTF8DataInputJsonParser0.canReadTypeId());
      assertFalse(uTF8DataInputJsonParser0.canReadObjectId());
      assertEquals(1, uTF8DataInputJsonParser0.getTokenColumnNr());
      assertFalse(uTF8DataInputJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8DataInputJsonParser0.currentTokenId());
      assertNull(uTF8DataInputJsonParser0.getCurrentToken());
      assertEquals(0, uTF8DataInputJsonParser0.getCurrentTokenId());
      assertFalse(uTF8DataInputJsonParser0.canParseAsync());
      assertEquals(0L, uTF8DataInputJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8DataInputJsonParser0.currentToken());
      assertFalse(uTF8DataInputJsonParser0.hasTextCharacters());
      assertFalse(uTF8DataInputJsonParser0.isNaN());
      assertFalse(uTF8DataInputJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8DataInputJsonParser0.getTokenLineNr());
      assertFalse(uTF8DataInputJsonParser0.hasCurrentToken());
      assertNull(uTF8DataInputJsonParser0.getCurrentName());
      assertFalse(uTF8DataInputJsonParser0.isClosed());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(uTF8DataInputJsonParser0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)33}, byteArray1);
      
      Class<NullNode> class1 = NullNode.class;
//      try { 
        objectReader2.readValue((JsonParser) uTF8DataInputJsonParser0, class1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)
//         //  at [Source: UNKNOWN; line: 1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
//      try { 
        objectReader0.readValue(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected end-of-input in null
//         //  at [Source: (byte[])\"\uFFFD\uFFFD\"; line: 1, column: 5]
//         //
//         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      // Undeclared exception!
//      try { 
        objectReader0._new((ObjectReader) null, jsonFactory1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertNotNull(javaType0);
      
      MapType mapType0 = typeFactory1.constructMapType(class0, javaType0, javaType0);
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      MapType mapType1 = mapType0.withValueHandler(javaType0);
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isFinal());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      
      MapType mapType2 = mapType1.withKeyTypeHandler(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isFinal());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isCollectionLikeType());
      assertEquals(2, mapType2.containedTypeCount());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.hasHandlers());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertNotNull(mapType2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer(mapType2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isFinal());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isCollectionLikeType());
      assertEquals(2, mapType2.containedTypeCount());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.hasHandlers());
      assertFalse(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertNotNull(jsonDeserializer0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertNotNull(arrayNode0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(27, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(27, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(27, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(27, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '{';
      charArray0[2] = 'H';
      charArray0[3] = 'Y';
      charArray0[4] = '8';
      charArray0[5] = '<';
      charArray0[6] = '!';
      charArray0[7] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(8, charArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertArrayEquals(new char[] {')', '{', 'H', 'Y', '8', '<', '!', ' '}, charArray0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(filteringParserDelegate0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {')', '{', 'H', 'Y', '8', '<', '!', ' '}, charArray0);
      
//      try { 
        objectReader1._initForReading(defaultDeserializationContext0, filteringParserDelegate0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected character (')' (code 41)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
//         //  at [Source: (char[])\"){HY8<! \"; line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("5");
      assertNotNull(stringReader0);
      
      IntNode intNode0 = (IntNode)objectReader0.readTree((Reader) stringReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.booleanValue());
      assertEquals(5, intNode0.intValue());
      assertTrue(intNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(5.0F, intNode0.floatValue(), 0.01F);
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isShort());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isArray());
      assertEquals((short)5, intNode0.shortValue());
      assertEquals(5L, intNode0.longValue());
      assertTrue(intNode0.isEmpty());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(5.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isNaN());
      assertNotNull(intNode0);
      
//      try { 
        objectReader0.readValue((Reader) stringReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IntNode intNode0 = (IntNode)objectReader0.readTree("294");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isShort());
      assertEquals(294L, intNode0.longValue());
      assertEquals(294.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.canConvertToLong());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.canConvertToInt());
      assertEquals(294.0F, intNode0.floatValue(), 0.01F);
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigDecimal());
      assertEquals(294, intNode0.intValue());
      assertEquals(0, intNode0.size());
      assertNull(intNode0.textValue());
      assertEquals((short)294, intNode0.shortValue());
      assertNotNull(intNode0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0.with((FormatFeature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(boolean0);
      
      ObjectReader objectReader1 = objectMapper0.reader((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(2371, 2371);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader2 = objectReader0.with((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertNotNull(jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser("JSON");
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(readerBasedJsonParser0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertNotNull(defaultDeserializationContext_Impl1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      
//      try { 
        objectReader2._verifyNoTrailingTokens(readerBasedJsonParser0, defaultDeserializationContext_Impl1, (JavaType) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
//         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-43);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-1), (byte)58, (byte)2, (byte) (-48), (byte)0, (byte) (-43)}, byteArray0);
      
//      try { 
        objectReader0.readValues((InputStream) byteArrayInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Illegal character ((CTRL-CHAR, code 16)): only regular white space (\\r, \\n, \\t) is allowed between tokens
//         //  at [Source: (ByteArrayInputStream); line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      // Undeclared exception!
//      try { 
        objectReader1._bindAndCloseAsTree((JsonParser) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature1, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertNotNull(objectReader0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isDouble());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.isLong());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isBigDecimal());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isMissingNode());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertNotNull(valueNode0);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      assertNotSame(class1, class0);
      
      Integer integer0 = objectReader0.treeToValue((TreeNode) valueNode0, class1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isDouble());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.isLong());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isBigDecimal());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isMissingNode());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(class1.equals((Object)class0));
      assertNotNull(integer0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(class1, class0);
      assertEquals(0, (int)integer0);
      
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(class0.equals((Object)class1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(class0, class1);
      assertNotSame(objectReader1, objectReader0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.removeAll();
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(0, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNotNull(objectNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      ObjectNode objectNode2 = objectNode1.put(",0Ju98", 1);
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertEquals(1, objectNode2.size());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.booleanValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertNotNull(objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      
      ArrayNode arrayNode0 = objectNode2.putArray((String) null);
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.booleanValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertNotNull(arrayNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.booleanValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertNotNull(jsonParser0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      
      JsonNode jsonNode0 = objectReader1._bindAndCloseAsTree(jsonParser0);
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.booleanValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertTrue(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isArray());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(class0.equals((Object)class1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(class0, class1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      
      DeserializationConfig deserializationConfig0 = objectReader1.getConfig();
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237022352, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(class0.equals((Object)class1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(deserializationConfig0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(class0, class1);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      File file0 = MockFile.createTempFile("]ZDa'", "]ZDa'");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/]ZDa'0]ZDa'", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("]ZDa'0]ZDa'", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      InputStream inputStream0 = objectReader0._inputStream(file0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/]ZDa'0]ZDa'", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("]ZDa'0]ZDa'", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0, inputStream0.available());
      assertNotNull(inputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/]ZDa'0]ZDa'", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("]ZDa'0]ZDa'", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0, inputStream0.available());
      assertNotNull(dataInputStream0);
      
//      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
//        fail("Expecting exception: EOFException");
      
//      } catch(EOFException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertFalse(nullNode0.isMissingNode());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isShort());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertTrue(nullNode0.isEmpty());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isArray());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertNotNull(nullNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(nullNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nullNode0.isMissingNode());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isShort());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertTrue(nullNode0.isEmpty());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isArray());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nullNode0.isMissingNode());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isShort());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertTrue(nullNode0.isEmpty());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isArray());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.VALUE_NULL, jsonParser0.getCurrentToken());
      assertEquals(11, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(JsonToken.VALUE_NULL, jsonParser0.currentToken());
      assertEquals(11, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NULL, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertEquals("null", jsonNode0.asText());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonNodeType.NULL, jsonNode0.getNodeType());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isMissingNode());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertNotNull(jsonNode0);
      assertSame(nullNode0, jsonNode0);
      assertSame(jsonNode0, nullNode0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
//      try { 
        objectReader0.readValue(uRL0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree((Reader) stringReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isMissingNode());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertNotNull(jsonNode0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMaxInputLookahead(3);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-25);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertFalse(vector0.contains(objectReader0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders_Match0);
      assertEquals(4, byteArray0.length);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-9), (byte)120, (byte) (-25)}, byteArray0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertFalse(vector0.contains(objectReader0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNull(jsonParser0);
      assertEquals(4, byteArray0.length);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-9), (byte)120, (byte) (-25)}, byteArray0);
      
      Class<String> class0 = String.class;
      Iterator<String> iterator0 = objectReader0.readValues((JsonParser) null, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)14;
      byte byte0 = (byte)0;
      JsonFactory jsonFactory0 = new JsonFactory(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser("JSON");
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(readerBasedJsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(8193, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonParserDelegate0);
      
//      try { 
        objectReader0.readValue((JsonParser) jsonParserDelegate0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
//         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      
//      try { 
        objectReader0.readValues((Reader) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("N ,@D3JCD|-");
      assertNotNull(mockFile0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      assertNotNull(annotationIntrospector1);
      
      BaseSettings baseSettings1 = baseSettings0.withInsertedAnnotationIntrospector(annotationIntrospector1);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertNotNull(baseSettings1);
      assertNotSame(baseSettings0, baseSettings1);
      assertNotSame(baseSettings1, baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = objectMapper0._configOverrides;
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, deserializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
//      try { 
        objectReader1.readValue((File) mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      // Undeclared exception!
//      try { 
        objectReader1.withoutFeatures((FormatFeature[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((char[]) null, 0, 1534);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNotNull(readerBasedJsonParser0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("JSON");
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertNotNull(tokenFilter1);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      
      TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter2.includeNull());
      assertTrue(tokenFilter2.includeBinary());
      assertTrue(tokenFilter2.includeRawValue());
      assertNotNull(tokenFilter2);
      assertSame(tokenFilter2, tokenFilter0);
      assertSame(tokenFilter2, tokenFilter1);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter2, true, true);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(tokenFilter2.includeNull());
      assertTrue(tokenFilter2.includeBinary());
      assertTrue(tokenFilter2.includeRawValue());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNotNull(filteringParserDelegate0);
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(tokenFilter2.includeNull());
      assertTrue(tokenFilter2.includeBinary());
      assertTrue(tokenFilter2.includeRawValue());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(formatSchema0);
      assertSame(tokenFilter2, tokenFilter0);
      assertSame(tokenFilter2, tokenFilter1);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter2, true, true);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(tokenFilter2.includeNull());
      assertTrue(tokenFilter2.includeBinary());
      assertTrue(tokenFilter2.includeRawValue());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertEquals(8193, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.equals((Object)filteringParserDelegate0));
      assertNotNull(filteringParserDelegate1);
      
      TokenFilterContext tokenFilterContext0 = (TokenFilterContext)filteringParserDelegate1.getParsingContext();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(tokenFilter2.includeNull());
      assertTrue(tokenFilter2.includeBinary());
      assertTrue(tokenFilter2.includeRawValue());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertEquals(8193, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(tokenFilterContext0.inArray());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inObject());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertTrue(tokenFilterContext0.inRoot());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertFalse(filteringParserDelegate0.equals((Object)filteringParserDelegate1));
      assertFalse(filteringParserDelegate1.equals((Object)filteringParserDelegate0));
      assertNotNull(tokenFilterContext0);
      assertSame(tokenFilter2, tokenFilter0);
      assertSame(tokenFilter2, tokenFilter1);
      assertNotSame(filteringParserDelegate0, filteringParserDelegate1);
      assertNotSame(filteringParserDelegate1, filteringParserDelegate0);
      
      JsonPointer jsonPointer0 = JsonPointer.forPath(tokenFilterContext0, true);
      assertEquals('/', JsonPointer.SEPARATOR);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(tokenFilter2.includeNull());
      assertTrue(tokenFilter2.includeBinary());
      assertTrue(tokenFilter2.includeRawValue());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertEquals(8193, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(tokenFilterContext0.inArray());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inObject());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertTrue(tokenFilterContext0.inRoot());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("", jsonPointer0.toString());
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(filteringParserDelegate0.equals((Object)filteringParserDelegate1));
      assertFalse(filteringParserDelegate1.equals((Object)filteringParserDelegate0));
      assertNotNull(jsonPointer0);
      assertSame(tokenFilter2, tokenFilter0);
      assertSame(tokenFilter2, tokenFilter1);
      assertNotSame(filteringParserDelegate0, filteringParserDelegate1);
      assertNotSame(filteringParserDelegate1, filteringParserDelegate0);
      
      ObjectReader objectReader2 = objectReader0.at(jsonPointer0);
      assertEquals('/', JsonPointer.SEPARATOR);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(tokenFilter2.includeNull());
      assertTrue(tokenFilter2.includeBinary());
      assertTrue(tokenFilter2.includeRawValue());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertEquals(8193, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(tokenFilterContext0.inArray());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inObject());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertTrue(tokenFilterContext0.inRoot());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("", jsonPointer0.toString());
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(filteringParserDelegate0.equals((Object)filteringParserDelegate1));
      assertFalse(filteringParserDelegate1.equals((Object)filteringParserDelegate0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertSame(tokenFilter2, tokenFilter0);
      assertSame(tokenFilter2, tokenFilter1);
      assertNotSame(filteringParserDelegate0, filteringParserDelegate1);
      assertNotSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(deserializationConfig0);
      
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      assertNotNull(basicClassIntrospector0);
      
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertNotNull(simpleType0);
      
      SerializationConfig serializationConfig0 = null;
//      try {
        serializationConfig0 = new SerializationConfig((SerializationConfig) null, (SimpleMixInResolver) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1?mM`AM'/j", true);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      byte[] byteArray0 = new byte[5];
      TextNode textNode0 = jsonNodeFactory0.textNode("JSON");
      assertEquals("JSON", textNode0.asText());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isIntegralNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isLong());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isDouble());
      assertEquals("JSON", textNode0.textValue());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isBigDecimal());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertNotNull(textNode0);
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-92);
      MockFile mockFile0 = new MockFile("1?mM`AM'/j");
      assertNotNull(mockFile0);
      
//      try { 
        objectReader0.readValue((File) mockFile0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected character ('\u00AC' (code 172)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
//         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValue((InputStream) dataInputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature2, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature0));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature1));
      assertNotNull(objectReader0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature2, deserializationFeature0);
      assertNotSame(deserializationFeature2, deserializationFeature1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isMissingNode());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isIntegralNumber());
      assertEquals("null", valueNode0.asText());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.booleanValue());
      assertNotNull(valueNode0);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("int", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      assertNotSame(class1, class0);
      
      Integer integer0 = objectReader0.treeToValue((TreeNode) valueNode0, class1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isMissingNode());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isIntegralNumber());
      assertEquals("null", valueNode0.asText());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.booleanValue());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("int", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature0));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature1));
      assertFalse(class1.equals((Object)class0));
      assertNotNull(integer0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature2, deserializationFeature0);
      assertNotSame(deserializationFeature2, deserializationFeature1);
      assertNotSame(class1, class0);
      assertEquals(0, (int)integer0);
      
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature0));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature1));
      assertFalse(class0.equals((Object)class1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature2, deserializationFeature0);
      assertNotSame(deserializationFeature2, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(class0, class1);
      assertNotSame(objectReader1, objectReader0);
      
      DeserializationConfig deserializationConfig0 = objectReader1.getConfig();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(deserializationConfig0.requiresFullValue());
      assertEquals(253815952, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature0));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(class0.equals((Object)class1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(deserializationConfig0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature2, deserializationFeature0);
      assertNotSame(deserializationFeature2, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(class0, class1);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer((JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonDeserializer0);
      
      byte[] byteArray0 = new byte[0];
//      try { 
        objectReader0.readValue(byteArray0, (-11), (-11));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (byte[])\"\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-80);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)29185, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-80), (byte)0, (byte) (-77), (byte)0, (byte) (-119), (byte)114, (byte)1}, byteArray0);
      
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      assertEquals((short)29185, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isShort());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.booleanValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertNotNull(bigIntegerNode0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-80), (byte)0, (byte) (-77), (byte)0, (byte) (-119), (byte)114, (byte)1}, byteArray0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(bigIntegerNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short)29185, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isShort());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.booleanValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertNotNull(objectReader0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-80), (byte)0, (byte) (-77), (byte)0, (byte) (-119), (byte)114, (byte)1}, byteArray0);
      
      // Undeclared exception!
//      try { 
        objectReader0._bind((JsonParser) null, bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0._bindAndReadValues((JsonParser) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree((Reader) stringReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isShort());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isObject());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNotNull(jsonNode0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'x';
      charArray0[2] = '>';
      charArray0[3] = 'E';
      charArray0[4] = ')';
      charArray0[5] = 'y';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, (-655), (-655));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotNull(readerBasedJsonParser0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'x', '>', 'E', ')', 'y'}, charArray0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeNull());
      assertNotNull(tokenFilter1);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(filteringParserDelegate0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'x', '>', 'E', ')', 'y'}, charArray0);
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNull(formatSchema0);
      assertEquals(6, charArray0.length);
      assertSame(tokenFilter0, tokenFilter1);
      assertArrayEquals(new char[] {'Y', 'x', '>', 'E', ')', 'y'}, charArray0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withRootName((PropertyName) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      
      StringReader stringReader0 = new StringReader("JF~?_");
      assertNotNull(stringReader0);
      
//      try { 
        objectReader0.readValue((Reader) stringReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'JF': was expecting ('true', 'false' or 'null')
//         //  at [Source: (StringReader); line: 1, column: 3]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
//      try { 
        objectReader1.readValue(byteArray0);
//        fail("Expecting exception: CharConversionException");
      
//      } catch(CharConversionException e) {
//         //
//         // Unsupported UCS-4 endianness (2143) detected
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1?mM`AM'/j", true);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 76, objectMapper0, objectOutputStream0, byteArray0, (-7), true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-7), uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(76, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-48), (byte)0, (byte) (-92), (byte)1}, byteArray0);
      
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0.getCharacterEscapes();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-7), uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(76, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertNull(characterEscapes0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-48), (byte)0, (byte) (-92), (byte)1}, byteArray0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0, (-1440), (int) (byte) (-48));
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, charArray0.length);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertArrayEquals(new char[] {}, charArray0);
      
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertNotNull(resolvedRecursiveType0);
      
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)resolvedRecursiveType0.withTypeHandler(jsonFactory1);
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertTrue(resolvedRecursiveType1.isJavaLangObject());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertNotNull(resolvedRecursiveType1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      
      // Undeclared exception!
//      try { 
        objectReader0._unwrapAndDeserialize(readerBasedJsonParser0, (DeserializationContext) null, resolvedRecursiveType1, (JsonDeserializer<Object>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      ObjectReader objectReader1 = objectReader0.withView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[0];
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertNotNull(arrayNode0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("eBIS3OfAh7,{`}A2:l");
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)objectReader0._considerFilter(readerBasedJsonParser0, false);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(8193, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNotNull(readerBasedJsonParser1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      Class<String> class0 = String.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, class0);
      assertNotNull(objectIdGenerator_IdKey0);
      
      Class<?> class1 = objectIdGenerator_IdKey0.scope;
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertNotNull(class1);
      
      TypeReference<CollectionLikeType> typeReference0 = (TypeReference<CollectionLikeType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(typeReference0).getType();
      ObjectReader objectReader1 = objectReader0.withType(typeReference0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      ObjectNode objectNode0 = (ObjectNode)objectReader1.createObjectNode();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectNode0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[4];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(128, jsonReadFeature0.getMask());
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      
      formatFeatureArray0[3] = (FormatFeature) jsonReadFeature0;
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(1, jsonWriteFeature0.getMask());
      assertEquals(JsonGenerator.Feature.QUOTE_FIELD_NAMES, jsonWriteFeature0.mappedFeature());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertEquals(JsonWriteFeature.QUOTE_FIELD_NAMES, jsonWriteFeature0);
      
      formatFeatureArray0[1] = (FormatFeature) jsonWriteFeature0;
      Class<Integer> class2 = Integer.class;
//      try { 
        objectReader1.treeToValue((TreeNode) arrayNode0, class2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize instance of `java.lang.Integer` out of START_ARRAY token
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader1 = objectReader0.with(deserializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues((URL) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = null;
      Class<BooleanNode> class0 = BooleanNode.class;
      // Undeclared exception!
//      try { 
        objectReader0.readValue((JsonParser) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertEquals(5, deserializationFeatureArray0.length);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "INCLUDE_SOURCE_IN_LOCATION");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      
//      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: (DataInputStream); line: 1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInput dataInput0 = null;
      // Undeclared exception!
//      try { 
        objectReader0.with((DeserializationConfig) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertNotNull(arrayNode0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-79);
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(binaryNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, binaryNode0.asToken());
      assertFalse(binaryNode0.isIntegralNumber());
      assertEquals(JsonNodeType.BINARY, binaryNode0.getNodeType());
      assertFalse(binaryNode0.isBigInteger());
      assertFalse(binaryNode0.isInt());
      assertFalse(binaryNode0.isShort());
      assertFalse(binaryNode0.booleanValue());
      assertNull(binaryNode0.numberType());
      assertFalse(binaryNode0.isObject());
      assertEquals(0, binaryNode0.size());
      assertFalse(binaryNode0.isFloatingPointNumber());
      assertFalse(binaryNode0.isLong());
      assertFalse(binaryNode0.isMissingNode());
      assertNull(binaryNode0.textValue());
      assertFalse(binaryNode0.isFloat());
      assertFalse(binaryNode0.isDouble());
      assertFalse(binaryNode0.isArray());
      assertTrue(binaryNode0.isEmpty());
      assertNotNull(binaryNode0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)0, (byte) (-79)}, byteArray0);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isDouble());
      assertEquals(0, nullNode0.size());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isBigDecimal());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertNotNull(nullNode0);
      
//      try { 
        objectReader0.readValue((JsonNode) nullNode0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(dataInputStream0);
      
//      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1882), (-1882));
      assertEquals((-1882), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals((-1882), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
//      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
//        fail("Expecting exception: EOFException");
      
//      } catch(EOFException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      File file0 = null;
      // Undeclared exception!
//      try { 
        objectReader0.withType((Type) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("DQU.*Ds+?K_yTt");
      assertNotNull(stringReader0);
      
      stringReader0.close();
//      try { 
        objectReader0.readTree((Reader) stringReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0._inputStream((URL) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[Integer with %d digits]");
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      ObjectReader objectReader1 = objectMapper1.reader(deserializationFeature0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader2 = objectReader1.with((InjectableValues) injectableValues_Std0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader2._new(objectReader0, (DeserializationConfig) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      byte[] byteArray0 = new byte[4];
      Version version0 = objectReader0.version();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(version0.isUnknownVersion());
      assertFalse(version0.isUknownVersion());
      assertEquals(0, version0.getPatchLevel());
      assertEquals(2, version0.getMajorVersion());
      assertTrue(version0.isSnapshot());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals(10, version0.getMinorVersion());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertNotNull(version0);
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)86;
//      try { 
        mockFileInputStream0.read(byteArray0, (int) (byte)86, (int) (byte)86);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Locale locale0 = new Locale("U`xjN BK)e_ot]V!@F", "U`xjN BK)e_ot]V!@F");
      assertEquals("u`xjn bk)e_ot]v!@f", locale0.getLanguage());
      assertEquals("u`xjn bk)e_ot]v!@f_U`XJN BK)E_OT]V!@F", locale0.toString());
      assertEquals("U`XJN BK)E_OT]V!@F", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("u`xjn bk)e_ot]v!@f", locale0.getLanguage());
      assertEquals("u`xjn bk)e_ot]v!@f_U`XJN BK)E_OT]V!@F", locale0.toString());
      assertEquals("U`XJN BK)E_OT]V!@F", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = null;
      // Undeclared exception!
//      try { 
        objectReader1.with(deserializationFeature0, (DeserializationFeature[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isObject());
      assertNotNull(jsonNode0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isObject());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 3);
      assertEquals((-3), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals((-3), byteArrayInputStream0.available());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals((-3), byteArrayInputStream0.available());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      assertEquals(0, byteArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, byteArrayInputStream0, objectReader0, (ByteQuadsCanonicalizer) null, byteArray0, 1148, (-625), false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-3), byteArrayInputStream0.available());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
//      try { 
        objectReader0._bindAsTree(uTF8StreamJsonParser0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<MissingNode> class0 = MissingNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0._findTreeDeserializer((DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isShort());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(0, jsonNode0.size());
      assertTrue(jsonNode0.isArray());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)49}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)49}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)49}, byteArray0);
      
//      try { 
        objectReader1.readValues((DataInput) dataInputStream0);
//        fail("Expecting exception: EOFException");
      
//      } catch(EOFException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      StringReader stringReader0 = new StringReader(",contentFilter=");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3314);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectMapper0, charsToNameCanonicalizer1);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(2711, (-3417));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(647, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(647, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      BufferedInputStream bufferedInputStream0 = objectReader0.readValue((JsonParser) readerBasedJsonParser1, class0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(2, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(647, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.VALUE_NULL, readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(647, readerBasedJsonParser1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(2, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNull(bufferedInputStream0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        objectReader0.readValues(byteArray0, 1, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%N,gl{)<a<");
      assertNotNull(stringReader0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertEquals(2, deserializationFeatureArray0.length);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertNotNull(arrayNode0);
      
      ObjectNode objectNode0 = arrayNode0.objectNode();
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertNotNull(objectNode0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("%N,gl{)<a<"));
      assertNotNull(arrayList0);
      
      ObjectNode objectNode1 = objectNode0.remove((Collection<String>) arrayList0);
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertEquals(0, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(arrayList0.contains("%N,gl{)<a<"));
      assertNotNull(objectNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      ObjectNode objectNode2 = objectNode1.putNull((String) null);
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(arrayList0.contains("%N,gl{)<a<"));
      assertNotNull(objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      
//      try { 
        objectReader0.readValue((JsonNode) objectNode2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
//      try { 
        objectReader0.readValues((Reader) stringReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237085840, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      Class<ArrayType> class0 = ArrayType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      assertEquals(0, javaTypeArray0.length);
      
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertNotNull(simpleType0);
      
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0, (JavaType) simpleType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertNotNull(mapType0);
      assertEquals(0, javaTypeArray0.length);
      
      MapType mapType1 = mapType0.withKeyType(simpleType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertNotNull(mapType1);
      assertEquals(0, javaTypeArray0.length);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      MapType mapType2 = mapType1.withStaticTyping();
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.isFinal());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertNotNull(mapType2);
      assertEquals(0, javaTypeArray0.length);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType0, mapType2);
      assertSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType2);
      assertSame(mapType1, mapType0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader0, (OutputStream) null);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertNotNull(uTF8JsonGenerator0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCodec(objectMapper0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS;
      boolean boolean0 = objectReader0.isEnabled(mapperFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader1.withFeatures((JsonParser.Feature[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(arrayNode0);
      assertNotSame(objectMapper1, objectMapper0);
      
      ValueNode valueNode0 = arrayNode0.numberNode((Long) null);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isShort());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isLong());
      assertEquals(0, valueNode0.size());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertTrue(valueNode0.isEmpty());
      assertEquals("null", valueNode0.asText());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isObject());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isInt());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(valueNode0);
      assertNotSame(objectMapper1, objectMapper0);
      
      // Undeclared exception!
//      try { 
        objectReader0.writeTree((JsonGenerator) null, valueNode0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " with format auto-detection: must be byte- not char-based");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      String string0 = "";
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(priorityQueue0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotNull(bufferedInputStream1);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) bufferedInputStream1);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, priorityQueue0.size());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertFalse(priorityQueue0.contains(objectReader0));
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotNull(dataFormatReaders_Match0);
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      
//      try { 
        objectReader0._reportUnkownFormat(dataFormatReaders0, dataFormatReaders_Match0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot detect format from input, does not look like any of detectable formats []
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      MissingNode missingNode0 = MissingNode.getInstance();
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isShort());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertTrue(missingNode0.isMissingNode());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(0, missingNode0.size());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isFloat());
      assertTrue(missingNode0.isEmpty());
      assertNotNull(missingNode0);
      
//      try { 
        objectReader0.readValues("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: (String)\"\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      StringReader stringReader0 = new StringReader("JGT_");
      assertNotNull(stringReader0);
      
//      try { 
        objectReader0.readTree((Reader) stringReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'JGT_': was expecting ('true', 'false' or 'null')
//         //  at [Source: (StringReader); line: 1, column: 9]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, (-1), (-1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertNotNull(jsonNode0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNotNull(arrayNode0);
      
      boolean boolean0 = false;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
//      try { 
        objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Y),ke/com.fasterxml.jackson.databind.ser.BeanSerializerModifier");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte) (-70);
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-70)}, byteArray0);
      assertTrue(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      String string0 = "Y),ke";
      MockFile mockFile0 = new MockFile("Y),ke", "com.fasterxml.jackson.databind.ser.BeanSerializerModifier");
      assertNotNull(mockFile0);
      
//      try { 
        objectReader0.readValues((File) mockFile0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token '\u00BA': was expecting ('true', 'false' or 'null')
//         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 3]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("Y),ke", "com.fasterxml.jackson.databind.ser.BeanSerializerModifier");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/Y),ke", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Y),ke/com.fasterxml.jackson.databind.ser.BeanSerializerModifier", mockFile0.toString());
      assertEquals("com.fasterxml.jackson.databind.ser.BeanSerializerModifier", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
//      try { 
        objectReader0.readValue(uRL0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, (TokenFilter) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedReader pipedReader0 = new PipedReader(1);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = 'y';
      charArray0[2] = '&';
      charArray0[3] = 'r';
      charArray0[4] = 'B';
      charArray0[5] = 'v';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 46, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 33, 3, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(46, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(readerBasedJsonParser0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {']', 'y', '&', 'r', 'B', 'v'}, charArray0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(0, 33);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(14, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(14, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(readerBasedJsonParser1);
      assertEquals(6, charArray0.length);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertArrayEquals(new char[] {']', 'y', '&', 'r', 'B', 'v'}, charArray0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Stack> class1 = Stack.class;
      Class<DoubleNode> class2 = DoubleNode.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertNotNull(collectionType0);
      
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.useStaticType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isJavaLangObject());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(46);
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertNotNull(placeholderForType0);
      
      CollectionType collectionType2 = (CollectionType)collectionType1.withContentTypeHandler(placeholderForType0);
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.useStaticType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isJavaLangObject());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.hasHandlers());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.hasValueHandler());
      assertTrue(collectionType2.useStaticType());
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      
      CollectionType collectionType3 = (CollectionType)collectionType2.withTypeHandler(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.useStaticType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isJavaLangObject());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.hasHandlers());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.hasValueHandler());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType3.isAbstract());
      assertTrue(collectionType3.isCollectionLikeType());
      assertFalse(collectionType3.isEnumType());
      assertTrue(collectionType3.useStaticType());
      assertFalse(collectionType3.isFinal());
      assertTrue(collectionType3.hasContentType());
      assertFalse(collectionType3.isPrimitive());
      assertFalse(collectionType3.isArrayType());
      assertFalse(collectionType3.isInterface());
      assertFalse(collectionType3.isMapLikeType());
      assertTrue(collectionType3.isContainerType());
      assertTrue(collectionType3.isConcrete());
      assertTrue(collectionType3.hasHandlers());
      assertFalse(collectionType3.hasValueHandler());
      assertFalse(collectionType3.isJavaLangObject());
      assertEquals(1, collectionType3.containedTypeCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertTrue(collectionType3.equals((Object)collectionType1));
      assertTrue(collectionType3.equals((Object)collectionType2));
      assertTrue(collectionType3.equals((Object)collectionType0));
      assertNotNull(collectionType3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType3);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType3);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType3);
      assertNotSame(collectionType3, collectionType0);
      assertNotSame(collectionType3, collectionType1);
      assertNotSame(collectionType3, collectionType2);
      
      // Undeclared exception!
//      try { 
        objectReader1.readValue((JsonParser) readerBasedJsonParser1, (JavaType) collectionType3);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.type.PlaceholderForType cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      byte[] byteArray0 = new byte[0];
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      deserializationFeatureArray0[5] = deserializationFeature1;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(deserializationFeature0, deserializationFeature1);
      
//      try { 
        objectReader0.readValues("q~,/G@5A]:p&1DKu#'9");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'q': was expecting ('true', 'false' or 'null')
//         //  at [Source: (String)\"q~,/G@5A]:p&1DKu#'9\"; line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      MockFile mockFile0 = new MockFile("#temporary-name", "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("#temporary-name", "Not implemented for ObjectReader");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockFile mockFile2 = new MockFile(mockFile1, "=Gzi");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertNotNull(mockFile2);
      
      File file0 = MockFile.createTempFile("MkO", "=Gzi", (File) null);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/MkO0=Gzi", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("MkO0=Gzi", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(file0, mockFile1);
      assertNotSame(file0, mockFile2);
      assertNotSame(file0, mockFile0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader1.readValue((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
//      try { 
        objectReader0.readValue("+");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected end-of-input in a Number value
//         //  at [Source: (String)\"+\"; line: 1, column: 3]
//         //
//         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(29, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertEquals(29, jsonFactory4.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory4.getRootValueSeparator());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertNotNull(jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory2);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory4);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(29, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertEquals(29, jsonFactory4.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory4.getRootValueSeparator());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      File file0 = MockFile.createTempFile("%=[LT ,DNEM\"kb f", "");
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/%=[LT ,DNEM\"kb f0", file0.toString());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("%=[LT ,DNEM\"kb f0", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory2.createParser(file0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp/%=[LT ,DNEM\"kb f0", file0.toString());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("%=[LT ,DNEM\"kb f0", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(uTF8StreamJsonParser0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      
//      try { 
        objectReader1._bind(uTF8StreamJsonParser0, jsonFactory2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readTree((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      BigDecimal bigDecimal0 = new BigDecimal(3104.705552417);
      assertEquals((short)3104, bigDecimal0.shortValue());
      assertEquals((byte)32, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      assertEquals((short)3104, bigDecimal0.shortValue());
      assertEquals((byte)32, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isShort());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isInt());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertTrue(decimalNode0.isEmpty());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isDouble());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.booleanValue());
      assertEquals(0, decimalNode0.size());
      assertNotNull(decimalNode0);
      
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(decimalNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short)3104, bigDecimal0.shortValue());
      assertEquals((byte)32, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isShort());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isInt());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertTrue(decimalNode0.isEmpty());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isDouble());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.booleanValue());
      assertEquals(0, decimalNode0.size());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      jsonParser_FeatureArray0[2] = jsonParser_Feature0;
      jsonParser_FeatureArray0[3] = jsonParser_Feature0;
      jsonParser_FeatureArray0[4] = jsonParser_Feature0;
      jsonParser_FeatureArray0[5] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[7] = jsonParser_Feature2;
      ObjectReader objectReader3 = objectReader2.withFeatures(jsonParser_FeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short)3104, bigDecimal0.shortValue());
      assertEquals((byte)32, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isShort());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isInt());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertTrue(decimalNode0.isEmpty());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isDouble());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.booleanValue());
      assertEquals(0, decimalNode0.size());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      assertEquals(8, jsonParser_FeatureArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      
      TypeReference<NullNode> typeReference0 = (TypeReference<NullNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
//      try { 
        objectReader3.forType(typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      ObjectReader objectReader2 = objectReader1.withFeatures(jsonParser_FeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(1, jsonParser_FeatureArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isObject());
      assertNotNull(arrayNode0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)89;
//      try { 
        objectReader0.readValue(byteArray0, 0, 717);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token '\u00D9\u0100\u7D00': was expecting ('true', 'false' or 'null')
//         //  at [Source: (byte[])\"\u0000\uFFFD\u0001\u0000}\u0000\uFFFD\u0000Y\"; line: 1, column: 4]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues((byte[]) null, 9, 207);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      ObjectReader objectReader1 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      ObjectReader objectReader2 = objectReader1.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isDouble());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-9);
//      try { 
        objectReader0.readTree(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected end-of-input in null
//         //  at [Source: (byte[])\"b\u0001\u0001\uFFFD\"; line: 1, column: 9]
//         //
//         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      File file0 = MockFile.createTempFile(", column: ", ", column: ");
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("/tmp/, column: 0, column: ", file0.toString());
      assertEquals(", column: 0, column: ", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
//      try { 
        objectReader0.readValues(file0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-126);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
//      try { 
        objectReader0.readTree(byteArray0, (int) (byte) (-26), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -26
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "Current token not FIELD_NAME (to contain expected root name '%s'), but %s");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      File file0 = MockFile.createTempFile("m{rL-c(%4p&D3Gl?O+", "Current token not FIELD_NAME (to contain expected root name '%s'), but %s", (File) mockFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/m{rL-c(%4p&D3Gl?O+0Current token not FIELD_NAME (to contain expected root name '%s'), but %s", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertEquals("m{rL-c(%4p&D3Gl?O+0Current token not FIELD_NAME (to contain expected root name '%s'), but %s", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertNotNull(file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
//      try { 
        objectReader0.readValue((File) mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("LV,C$=s#$)o J4p", "; expected Class<JsonSerializer>");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "gGs5z_");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      File file0 = MockFile.createTempFile("gGs5z_", "gGs5z_", (File) mockFile1);
      assertEquals("; expected Class<JsonSerializer>", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/LV,C$=s#$)o J4p", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/LV,C$=s#$)o J4p/; expected Class<JsonSerializer>", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/LV,C$=s#$)o J4p/; expected Class<JsonSerializer>", mockFile1.getParent());
      assertEquals("/experiment/LV,C$=s#$)o J4p/; expected Class<JsonSerializer>/gGs5z_", mockFile1.toString());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isDirectory());
      assertEquals("gGs5z_", mockFile1.getName());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("gGs5z_0gGs5z_", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/experiment/LV,C$=s#$)o J4p/; expected Class<JsonSerializer>/gGs5z_/gGs5z_0gGs5z_", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/experiment/LV,C$=s#$)o J4p/; expected Class<JsonSerializer>/gGs5z_", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotSame(file0, mockFile0);
      
//      try { 
        objectReader0.readValue(file0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      assertFalse(nioPathSerializer0.isUnwrappingSerializer());
      assertFalse(nioPathSerializer0.usesObjectId());
      assertNotNull(nioPathSerializer0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
//      try { 
        objectReader0.readValue((File) mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readTree((DataInput) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      
      byte[] byteArray0 = new byte[2];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, (-1), (-1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(0, jsonNode0.size());
      assertNotNull(jsonNode0);
      assertEquals(2, byteArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(objectMapper0, objectMapper1);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        objectReader0.withoutFeatures((JsonParser.Feature[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectReader objectReader2 = objectReader0.without(jsonParser_Feature1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      // Undeclared exception!
//      try { 
        objectReader2.withFeatures((DeserializationFeature[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = (DecimalNode)jsonNodeFactory0.numberNode(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isFloat());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isObject());
      assertNotNull(decimalNode0);
      
//      try { 
        objectReader0.readValue("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (String)\"\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertNotNull(arrayNode0);
      
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      assertNotNull(double0);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectReader objectReader1 = objectReader0.withType((JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      DoubleNode doubleNode0 = (DoubleNode)arrayNode0.numberNode(double0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertEquals((short) (-1), doubleNode0.shortValue());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isNaN());
      assertFalse(doubleNode0.canConvertToLong());
      assertEquals(Double.POSITIVE_INFINITY, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(Float.POSITIVE_INFINITY, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isLong());
      assertEquals(9223372036854775807L, doubleNode0.longValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.booleanValue());
      assertEquals(0, doubleNode0.size());
      assertEquals(Integer.MAX_VALUE, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isShort());
      assertNull(doubleNode0.textValue());
      assertNotNull(doubleNode0);
      
      Class<Integer> class0 = Integer.class;
//      try { 
        objectReader0.treeToValue((TreeNode) doubleNode0, class0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Numeric value (Infinity) out of range of int (-2147483648 - 2147483647)
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature2, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature0));
      assertNotNull(objectReader0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature2, deserializationFeature1);
      assertNotSame(deserializationFeature2, deserializationFeature0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationFeature0, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertNotNull(iOContext0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2193);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1305, (Reader) null, objectMapper0, charsToNameCanonicalizer1);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1305, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideFormatFeatures(33, 3);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1305, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1305, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      MissingNode missingNode0 = (MissingNode)objectReader0._bindAsTree(readerBasedJsonParser1);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1305, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertTrue(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertTrue(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1305, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isObject());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isInt());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isFloat());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isLong());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(missingNode0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature2, deserializationFeature1);
      assertNotSame(deserializationFeature2, deserializationFeature0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues((DataInput) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNotNull(jsonParser0);
      
      JsonToken jsonToken0 = objectReader0._initForReading(defaultDeserializationContext0, jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(3, jsonParser0.currentTokenId());
      assertEquals(3, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.getCurrentToken());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.currentToken());
      assertTrue(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isStructEnd());
      assertEquals("[", jsonToken0.asString());
      assertTrue(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isBoolean());
      assertEquals(3, jsonToken0.id());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(JsonToken.START_ARRAY, jsonToken0);
      
//      try { 
        objectReader0._bindAndClose(jsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0.treeAsTokens((TreeNode) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Random.setNextRandom((-1448));
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(1, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(1, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(1, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      // Undeclared exception!
//      try { 
        objectReader0.without(deserializationFeature0, (DeserializationFeature[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(linkedList0);
      
      URI uRI0 = MockURI.aFileURI;
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertNotNull(uRI0);
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
//      try { 
        objectReader0.readValues(uRL0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = null;
      StringReader stringReader0 = new StringReader(" with format auto-detection: must be byte- not char-based");
      assertNotNull(stringReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNull(deserializationConfig0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      // Undeclared exception!
//      try { 
        objectReader0._with((DeserializationConfig) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("", "com.fasterxml.jackson.databind.cfg.MapperConfigBase");
      assertNotNull(mockFile0);
      
//      try { 
        objectReader0.readValues((File) mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.putObject("\"h=@;y$L1`7*Y\"v");
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(0, objectNode1.size());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertNotNull(objectNode1);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode0);
      
      ArrayNode arrayNode0 = objectNode1.withArray("R+ZrCXGWq");
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertNotNull(arrayNode0);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode0);
      
      ObjectNode objectNode2 = arrayNode0.insertObject((-756));
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertTrue(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(0, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertNotNull(objectNode2);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      
      ObjectNode objectNode3 = objectNode2.put("R+ZrCXGWq", (-756));
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isShort());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isEmpty());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(1, objectNode3.size());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isBigInteger());
      assertNull(objectNode3.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isLong());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode3.equals((Object)objectNode1));
      assertFalse(objectNode3.equals((Object)objectNode0));
      assertNotNull(objectNode3);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode3);
      assertNotSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode3);
      assertNotSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode3);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode3, objectNode1);
      assertNotSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode2);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode3);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isShort());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isEmpty());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(1, objectNode3.size());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isBigInteger());
      assertNull(objectNode3.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isLong());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.booleanValue());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode0.equals((Object)objectNode3));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode1.equals((Object)objectNode3));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode3.equals((Object)objectNode1));
      assertFalse(objectNode3.equals((Object)objectNode0));
      assertNotNull(jsonParser0);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode3);
      assertNotSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode3);
      assertNotSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode3);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode3, objectNode1);
      assertNotSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode2);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isShort());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isEmpty());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(1, objectNode3.size());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isBigInteger());
      assertNull(objectNode3.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isLong());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.booleanValue());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertEquals(2, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isEmpty());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertEquals(1, jsonNode0.size());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode0.equals((Object)objectNode3));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode1.equals((Object)objectNode3));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode3.equals((Object)objectNode1));
      assertFalse(objectNode3.equals((Object)objectNode0));
      assertFalse(jsonNode0.equals((Object)objectNode0));
      assertTrue(jsonNode0.equals((Object)objectNode2));
      assertFalse(jsonNode0.equals((Object)objectNode1));
      assertTrue(jsonNode0.equals((Object)objectNode3));
      assertNotNull(jsonNode0);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode3);
      assertNotSame(objectNode0, jsonNode0);
      assertNotSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode3);
      assertNotSame(objectNode1, jsonNode0);
      assertNotSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode3);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, jsonNode0);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode3, objectNode1);
      assertNotSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertNotSame(objectNode3, jsonNode0);
      assertNotSame(jsonNode0, objectNode0);
      assertNotSame(jsonNode0, objectNode3);
      assertNotSame(jsonNode0, objectNode1);
      assertNotSame(jsonNode0, objectNode2);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues((DataInput) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 5331, pushbackInputStream0, objectMapper0, byteQuadsCanonicalizer1, byteArray0, 3, 0, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(5331, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
//      try { 
        objectReader0._bindAndCloseAsTree(uTF8StreamJsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
//      try { 
        objectReader0.readValues((Reader) stringReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: (StringReader); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
      
      System.setCurrentTimeMillis(0L);
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser("4(");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(readerBasedJsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      
//      try { 
        objectReader0._bind(readerBasedJsonParser0, jsonFactory1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected character ('(' (code 40)): Expected space separating root-level values
//         //  at [Source: (String)\"4(\"; line: 1, column: 3]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      TypeReference<ObjectMapper.DefaultTyping> typeReference0 = (TypeReference<ObjectMapper.DefaultTyping>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
//      try { 
        objectReader0.forType(typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
//      try { 
        objectReader0.readValues(uRL0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonParser jsonParser0 = objectReader1._considerFilter((JsonParser) null, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNull(jsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<BooleanNode> class0 = BooleanNode.class;
      MapLikeType mapLikeType0 = typeFactory1.constructRawMapLikeType(class0);
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapLikeType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(class0);
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertFalse(mapLikeType1.isArrayType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isConcrete());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.hasContentType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isFinal());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertNotNull(mapLikeType1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      
      // Undeclared exception!
//      try { 
        objectReader1.readValue((JsonParser) null, (ResolvedType) mapLikeType1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[7] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertNotNull(objectReader0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      assertFalse(valueNode0.isFloat());
      assertEquals("null", valueNode0.asText());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isBigDecimal());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isInt());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isArray());
      assertNotNull(valueNode0);
      
      Class<Integer> class0 = Integer.class;
      Integer integer0 = objectReader0.treeToValue((TreeNode) valueNode0, class0);
      assertFalse(valueNode0.isFloat());
      assertEquals("null", valueNode0.asText());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isBigDecimal());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isInt());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isArray());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertNull(integer0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      
      Class<NullNode> class1 = NullNode.class;
      ObjectReader objectReader1 = objectReader0.forType(class1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      
      ObjectReader objectReader2 = objectReader0.with((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.putPOJO("}[~?~7~hdY5l7GT", object0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isDouble());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.textValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNotNull(objectNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)18944, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte)0}, byteArray0);
      
      ObjectNode objectNode2 = objectNode1.put("6noM", bigInteger0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isDouble());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.textValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals((short)18944, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertNull(objectNode2.textValue());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isMissingNode());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.booleanValue());
      assertNotNull(objectNode2);
      assertEquals(2, byteArray0.length);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertArrayEquals(new byte[] {(byte)74, (byte)0}, byteArray0);
      
      ArrayNode arrayNode0 = objectNode2.putArray(")44");
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(3, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isDouble());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.textValue());
      assertEquals(3, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals((short)18944, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isMissingNode());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertNotNull(arrayNode0);
      assertEquals(2, byteArray0.length);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertArrayEquals(new byte[] {(byte)74, (byte)0}, byteArray0);
      
      NumericNode numericNode0 = arrayNode0.numberNode((-4640L));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(3, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isDouble());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.textValue());
      assertEquals(3, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals((short)18944, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isMissingNode());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isMissingNode());
      assertEquals((short) (-4640), numericNode0.shortValue());
      assertTrue(numericNode0.isLong());
      assertFalse(numericNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.LONG, numericNode0.numberType());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isNaN());
      assertTrue(numericNode0.canConvertToInt());
      assertTrue(numericNode0.isEmpty());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertFalse(numericNode0.isObject());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isShort());
      assertEquals((-4640.0F), numericNode0.floatValue(), 0.01F);
      assertTrue(numericNode0.isIntegralNumber());
      assertEquals((-4640), numericNode0.intValue());
      assertFalse(numericNode0.isInt());
      assertEquals((-4640.0), numericNode0.doubleValue(), 0.01);
      assertNull(numericNode0.textValue());
      assertEquals(0, numericNode0.size());
      assertEquals((-4640L), numericNode0.longValue());
      assertFalse(numericNode0.isArray());
      assertNotNull(numericNode0);
      assertEquals(2, byteArray0.length);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertArrayEquals(new byte[] {(byte)74, (byte)0}, byteArray0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(numericNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(3, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isDouble());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.textValue());
      assertEquals(3, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals((short)18944, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isMissingNode());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isMissingNode());
      assertEquals((short) (-4640), numericNode0.shortValue());
      assertTrue(numericNode0.isLong());
      assertFalse(numericNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.LONG, numericNode0.numberType());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isNaN());
      assertTrue(numericNode0.canConvertToInt());
      assertTrue(numericNode0.isEmpty());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertFalse(numericNode0.isObject());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isShort());
      assertEquals((-4640.0F), numericNode0.floatValue(), 0.01F);
      assertTrue(numericNode0.isIntegralNumber());
      assertEquals((-4640), numericNode0.intValue());
      assertFalse(numericNode0.isInt());
      assertEquals((-4640.0), numericNode0.doubleValue(), 0.01);
      assertNull(numericNode0.textValue());
      assertEquals(0, numericNode0.size());
      assertEquals((-4640L), numericNode0.longValue());
      assertFalse(numericNode0.isArray());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNotNull(jsonParser0);
      assertEquals(2, byteArray0.length);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertArrayEquals(new byte[] {(byte)74, (byte)0}, byteArray0);
      
//      try { 
        objectReader0.readTree("}[~?~7~hdY5l7GT");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected close marker '}': expected ']' (for root starting at [Source: (String)\"}[~?~7~hdY5l7GT\"; line: 1, column: 0])
//         //  at [Source: (String)\"}[~?~7~hdY5l7GT\"; line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertEquals(1, deserializationFeatureArray0.length);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isLong());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isObject());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isBigInteger());
      assertEquals("null", valueNode0.asText());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isArray());
      assertTrue(valueNode0.isEmpty());
      assertNotNull(valueNode0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Integer integer0 = objectReader0.treeToValue((TreeNode) valueNode0, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isLong());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isObject());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isBigInteger());
      assertEquals("null", valueNode0.asText());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isArray());
      assertTrue(valueNode0.isEmpty());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(integer0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertEquals(0, (int)integer0);
      
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(linkedList0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with((DeserializationConfig) null);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(objectReader0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withOptimalMatch(matchStrength0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(objectReader0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)1;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders2.findFormat(byteArray0, 1, (-395));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(objectReader0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders_Match0);
      assertEquals(6, byteArray0.length);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-15), (byte)2, (byte)0, (byte) (-1), (byte)1}, byteArray0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(objectReader0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertNull(jsonParser0);
      assertEquals(6, byteArray0.length);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-15), (byte)2, (byte)0, (byte) (-1), (byte)1}, byteArray0);
      
      Class<BooleanNode> class1 = BooleanNode.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.getSuperClass();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertNull(javaType0);
      
//      try { 
        objectReader0.readValues((JsonParser) null, (JavaType) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute((Object) null);
      assertNotNull(contextAttributes1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(contextAttributes0, contextAttributes1);
      
      TokenFilter tokenFilter0 = null;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, (TokenFilter) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      FloatNode floatNode0 = new FloatNode((byte)31);
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((short)31, floatNode0.shortValue());
      assertEquals(31L, floatNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertNull(floatNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isMissingNode());
      assertTrue(floatNode0.isFloat());
      assertEquals(31, floatNode0.intValue());
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(31.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isArray());
      assertEquals(31.0F, floatNode0.floatValue(), 0.01F);
      assertNotNull(floatNode0);
      
      ObjectReader objectReader2 = objectReader1.withValueToUpdate((Object) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
//      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      MappingIterator<BooleanNode> mappingIterator0 = objectReader1.readValues(byteArray0, (int)  (-61), (int)  (-61));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(mappingIterator0);
      assertEquals(1, byteArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertArrayEquals(new byte[] {(byte) (-61)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readTree((byte[]) null, (-2721), 2672);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertNotNull(arrayNode0);
      
      BooleanNode booleanNode0 = arrayNode0.booleanNode(true);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(booleanNode0.isInt());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isArray());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertEquals("true", booleanNode0.asText());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isBigInteger());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertNotNull(booleanNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(booleanNode0.isInt());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isArray());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertEquals("true", booleanNode0.asText());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isBigInteger());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(booleanNode0.isInt());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isArray());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertEquals("true", booleanNode0.asText());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isBigInteger());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(JsonToken.VALUE_TRUE, jsonParser0.currentToken());
      assertEquals(JsonToken.VALUE_TRUE, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(9, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(9, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonNode0.isIntegralNumber());
      assertTrue(jsonNode0.asBoolean());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonToken.VALUE_TRUE, jsonNode0.asToken());
      assertEquals(JsonNodeType.BOOLEAN, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals("true", jsonNode0.asText());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertNotNull(jsonNode0);
      assertSame(booleanNode0, jsonNode0);
      assertSame(jsonNode0, booleanNode0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues((DataInput) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("z");
      assertNotNull(minimalPrettyPrinter0);
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(10241, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(10241, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(10241, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(10241, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(10241, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNotNull(nonBlockingJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      
      JsonDeserializer<BinaryNode> jsonDeserializer0 = (JsonDeserializer<BinaryNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      MappingIterator<BigIntegerNode> mappingIterator0 = objectReader1._newIterator((JsonParser) nonBlockingJsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (JsonDeserializer<?>) jsonDeserializer0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(10241, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(10241, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(10241, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(mappingIterator0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = new JsonFactory(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl1.getConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNull(deserializationConfig0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
//      try { 
        objectMapper0.createDeserializationContext(nonBlockingJsonParser0, (DeserializationConfig) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Could not find JsonDeserializer for type ");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      Class<BinaryNode> class1 = BinaryNode.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertNotNull(mapType0);
      
      MapType mapType1 = mapType0.withKeyTypeHandler(typeFactory0);
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      MapType mapType2 = mapType1.withContentValueHandler(integer0);
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType2.hasValueHandler());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.hasHandlers());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.isMapLikeType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertNotNull(mapType2);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(mapType2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType2.hasValueHandler());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.hasHandlers());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.isMapLikeType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertNotNull(objectReader0);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      
      StringReader stringReader0 = new StringReader("Could not find JsonDeserializer for type ");
      assertNotNull(stringReader0);
      
//      try { 
        objectReader0.readValues((Reader) stringReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'Could': was expecting ('true', 'false' or 'null')
//         //  at [Source: (StringReader); line: 1, column: 6]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)0;
//      try { 
        objectReader0.readTree(byteArray0);
//        fail("Expecting exception: CharConversionException");
      
//      } catch(CharConversionException e) {
//         //
//         // Unexpected EOF in the middle of a 4-byte UTF-32 char: got 3, needed 4, at char #1, byte #7)
//         //
//         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(159, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(159, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(159, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(159, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(159, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(159, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(159, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      ObjectReader objectReader1 = objectReader0.with(timeZone0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(159, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(159, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValue((byte[]) null, 2, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("|aS", "5 Gm6|GaTLp[`Hh|1");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("5 Gm6|GaTLp[`Hh|1", "5 Gm6|GaTLp[`Hh|1", (File) mockFile0);
      assertEquals("/experiment/|aS/5 Gm6|GaTLp[`Hh|1", mockFile0.toString());
      assertEquals("/experiment/|aS", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("5 Gm6|GaTLp[`Hh|1", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("5 Gm6|GaTLp[`Hh|105 Gm6|GaTLp[`Hh|1", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/|aS/5 Gm6|GaTLp[`Hh|1", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/experiment/|aS/5 Gm6|GaTLp[`Hh|1/5 Gm6|GaTLp[`Hh|105 Gm6|GaTLp[`Hh|1", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      InputStream inputStream0 = objectReader0._inputStream(file0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("/experiment/|aS/5 Gm6|GaTLp[`Hh|1", mockFile0.toString());
      assertEquals("/experiment/|aS", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("5 Gm6|GaTLp[`Hh|1", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("5 Gm6|GaTLp[`Hh|105 Gm6|GaTLp[`Hh|1", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/|aS/5 Gm6|GaTLp[`Hh|1", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/experiment/|aS/5 Gm6|GaTLp[`Hh|1/5 Gm6|GaTLp[`Hh|105 Gm6|GaTLp[`Hh|1", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, inputStream0.available());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(inputStream0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      byte[] byteArray0 = null;
      int int0 = (-599);
      TypeReference<BeanDeserializer> typeReference0 = (TypeReference<BeanDeserializer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
//      try { 
        objectMapper0.convertValue((Object) objectReader0, typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isMissingNode());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isDouble());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertNotNull(jsonNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isMissingNode());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isDouble());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode1 = objectReader0._bindAsTree(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isMissingNode());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isDouble());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertEquals(4, jsonParser0.currentTokenId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonNode1.size());
      assertFalse(jsonNode1.isMissingNode());
      assertFalse(jsonNode1.isLong());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isDouble());
      assertFalse(jsonNode1.isInt());
      assertEquals("", jsonNode1.asText());
      assertEquals(JsonNodeType.ARRAY, jsonNode1.getNodeType());
      assertNull(jsonNode1.textValue());
      assertFalse(jsonNode1.isBigInteger());
      assertTrue(jsonNode1.isArray());
      assertFalse(jsonNode1.isBigDecimal());
      assertFalse(jsonNode1.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, jsonNode1.asToken());
      assertNull(jsonNode1.numberType());
      assertFalse(jsonNode1.isObject());
      assertFalse(jsonNode1.isFloat());
      assertFalse(jsonNode1.booleanValue());
      assertTrue(jsonNode1.equals((Object)jsonNode0));
      assertNotNull(jsonNode1);
      assertNotSame(jsonNode0, jsonNode1);
      assertNotSame(jsonNode1, jsonNode0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues((DataInput) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      LongNode longNode0 = LongNode.valueOf((-1621L));
      assertEquals((-1621.0), longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.isEmpty());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isFloatingPointNumber());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isObject());
      assertEquals((-1621L), longNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isNaN());
      assertEquals(0, longNode0.size());
      assertEquals((-1621), longNode0.intValue());
      assertFalse(longNode0.isMissingNode());
      assertEquals((short) (-1621), longNode0.shortValue());
      assertEquals((-1621.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isInt());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.booleanValue());
      assertNotNull(longNode0);
      
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(longNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals((-1621.0), longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.isEmpty());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isFloatingPointNumber());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isObject());
      assertEquals((-1621L), longNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isNaN());
      assertEquals(0, longNode0.size());
      assertEquals((-1621), longNode0.intValue());
      assertFalse(longNode0.isMissingNode());
      assertEquals((short) (-1621), longNode0.shortValue());
      assertEquals((-1621.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isInt());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.booleanValue());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      
      LongNode longNode1 = (LongNode)objectReader0._bindAsTree(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals((-1621.0), longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.isEmpty());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isFloatingPointNumber());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isObject());
      assertEquals((-1621L), longNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isNaN());
      assertEquals(0, longNode0.size());
      assertEquals((-1621), longNode0.intValue());
      assertFalse(longNode0.isMissingNode());
      assertEquals((short) (-1621), longNode0.shortValue());
      assertEquals((-1621.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isInt());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.booleanValue());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonParser0.currentToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(7, jsonParser0.getCurrentTokenId());
      assertEquals(7, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals((-1621.0), longNode1.doubleValue(), 0.01);
      assertTrue(longNode1.isEmpty());
      assertFalse(longNode1.isObject());
      assertTrue(longNode1.canConvertToLong());
      assertFalse(longNode1.isShort());
      assertTrue(longNode1.isLong());
      assertNull(longNode1.textValue());
      assertTrue(longNode1.isIntegralNumber());
      assertFalse(longNode1.isBigDecimal());
      assertEquals((-1621L), longNode1.longValue());
      assertEquals(JsonParser.NumberType.LONG, longNode1.numberType());
      assertFalse(longNode1.booleanValue());
      assertFalse(longNode1.isArray());
      assertFalse(longNode1.isDouble());
      assertFalse(longNode1.isFloat());
      assertFalse(longNode1.isFloatingPointNumber());
      assertFalse(longNode1.isNaN());
      assertEquals(0, longNode1.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode1.asToken());
      assertEquals(JsonNodeType.NUMBER, longNode1.getNodeType());
      assertEquals((-1621.0F), longNode1.floatValue(), 0.01F);
      assertFalse(longNode1.isInt());
      assertFalse(longNode1.isBigInteger());
      assertTrue(longNode1.canConvertToInt());
      assertEquals((short) (-1621), longNode1.shortValue());
      assertFalse(longNode1.isMissingNode());
      assertEquals((-1621), longNode1.intValue());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(longNode1.equals((Object)longNode0));
      assertNotNull(longNode1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(longNode0, longNode1);
      assertNotSame(longNode1, longNode0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues((DataInput) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[7] = deserializationFeature2;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertNotNull(bufferedInputStream1);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNotNull(deserializationConfig0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, contextAttributes0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig1);
      
      DeserializationConfig deserializationConfig2 = new DeserializationConfig(deserializationConfig1, (SimpleMixInResolver) null);
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig2.getRootName());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig2);
      
      ObjectReader objectReader0 = new ObjectReader(objectMapper0, deserializationConfig2);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig2.getRootName());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertNotNull(objectReader0);
      
//      try { 
        objectReader0.readValues((InputStream) bufferedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>(890);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(priorityQueue0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMaxInputLookahead(3);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isObject());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isFloat());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertNotNull(bigIntegerNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(bigIntegerNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isObject());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isFloat());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNotNull(jsonParser0);
      
      BigIntegerNode bigIntegerNode1 = (BigIntegerNode)objectReader0._bindAsTree(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isObject());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isFloat());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertEquals(7, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonParser0.currentToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(7, jsonParser0.getCurrentTokenId());
      assertEquals(0, bigIntegerNode1.size());
      assertFalse(bigIntegerNode1.isFloatingPointNumber());
      assertFalse(bigIntegerNode1.isMissingNode());
      assertFalse(bigIntegerNode1.isLong());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode1.numberType());
      assertTrue(bigIntegerNode1.isIntegralNumber());
      assertFalse(bigIntegerNode1.isNaN());
      assertNull(bigIntegerNode1.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode1.asToken());
      assertFalse(bigIntegerNode1.isShort());
      assertFalse(bigIntegerNode1.booleanValue());
      assertFalse(bigIntegerNode1.isObject());
      assertFalse(bigIntegerNode1.isInt());
      assertFalse(bigIntegerNode1.isBigDecimal());
      assertTrue(bigIntegerNode1.isEmpty());
      assertFalse(bigIntegerNode1.isFloat());
      assertFalse(bigIntegerNode1.isArray());
      assertTrue(bigIntegerNode1.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode1.getNodeType());
      assertFalse(bigIntegerNode1.isDouble());
      assertTrue(bigIntegerNode1.equals((Object)bigIntegerNode0));
      assertNotNull(bigIntegerNode1);
      assertNotSame(bigIntegerNode0, bigIntegerNode1);
      assertNotSame(bigIntegerNode1, bigIntegerNode0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8225, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8225, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8225, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(8225, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8225, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(8225, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.booleanValue());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
      
      JsonNode jsonNode1 = objectReader0.readTree(byteArray0, (-1), (-1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode1.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode1.getNodeType());
      assertFalse(jsonNode1.isIntegralNumber());
      assertFalse(jsonNode1.isBigInteger());
      assertNull(jsonNode1.textValue());
      assertFalse(jsonNode1.isArray());
      assertTrue(jsonNode1.isEmpty());
      assertEquals(0, jsonNode1.size());
      assertEquals("", jsonNode1.asText());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode1.asToken());
      assertFalse(jsonNode1.isLong());
      assertFalse(jsonNode1.isFloat());
      assertFalse(jsonNode1.isInt());
      assertTrue(jsonNode1.isMissingNode());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.booleanValue());
      assertNull(jsonNode1.numberType());
      assertFalse(jsonNode1.isObject());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode1);
      assertEquals(2, byteArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonNode1, jsonNode0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = objectReader1.isEnabled(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-9);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser(byteArray0, 2278, (int) (byte) (-9));
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(2, byteArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-9)}, byteArray0);
      
      TypeReference<JsonDeserializer<ObjectNode>> typeReference0 = (TypeReference<JsonDeserializer<ObjectNode>>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
//      try { 
        objectReader0.readValue((JsonParser) uTF8StreamJsonParser0, typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8209, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory3.createNonBlockingByteArrayParser();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8209, jsonFactory3.getParserFeatures());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(8209, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertNotNull(nonBlockingJsonParser0);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValue((JsonParser) nonBlockingJsonParser0, (TypeReference<DOMDeserializer.DocumentDeserializer>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader2 = new ObjectReader(objectReader1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      // Undeclared exception!
//      try { 
        objectReader0.readValue(byteArray0, (int) 107, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 107
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader2 = new ObjectReader(objectReader1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JsonNode jsonNode0 = objectReader2.readTree((InputStream) sequenceInputStream0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      
//      try { 
        objectReader1.readValues((InputStream) sequenceInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: (SequenceInputStream); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-89);
      FloatNode floatNode0 = new FloatNode((byte) (-89));
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals((-89L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isArray());
      assertEquals((short) (-89), floatNode0.shortValue());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertEquals((-89.0F), floatNode0.floatValue(), 0.01F);
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals((-89), floatNode0.intValue());
      assertNull(floatNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isObject());
      assertEquals((-89.0), floatNode0.doubleValue(), 0.01);
      assertNotNull(floatNode0);
      
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals((-89L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isArray());
      assertEquals((short) (-89), floatNode0.shortValue());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertEquals((-89.0F), floatNode0.floatValue(), 0.01F);
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals((-89), floatNode0.intValue());
      assertNull(floatNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isObject());
      assertEquals((-89.0), floatNode0.doubleValue(), 0.01);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-36);
//      try { 
        objectReader1.readTree(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected character ('\u00A7' (code 167)): Expected space separating root-level values
//         //  at [Source: (byte[])\"0\uFFFD\u0001\u001F%\uFFFD\"; line: 1, column: 3]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
      
      JsonNode jsonNode1 = objectReader0.readTree(byteArray0, (-1), (-1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode1.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode1.getNodeType());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.isInt());
      assertFalse(jsonNode1.isBigInteger());
      assertNull(jsonNode1.textValue());
      assertFalse(jsonNode1.booleanValue());
      assertTrue(jsonNode1.isMissingNode());
      assertNull(jsonNode1.numberType());
      assertFalse(jsonNode1.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode1.asToken());
      assertEquals("", jsonNode1.asText());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isLong());
      assertEquals(0, jsonNode1.size());
      assertFalse(jsonNode1.isFloat());
      assertFalse(jsonNode1.isDouble());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isIntegralNumber());
      assertFalse(jsonNode1.isArray());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode1);
      assertEquals(2, byteArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonNode1, jsonNode0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectReader1);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(95, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser("JSON");
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(95, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(readerBasedJsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)objectReader1._considerFilter(readerBasedJsonParser0, true);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(95, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(8193, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(readerBasedJsonParser1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      // Undeclared exception!
//      try { 
        objectReader1.without((FormatFeature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.withoutRootName();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader3 = objectReader0.with(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertNotNull(objectReader3);
      assertSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
//      try { 
        objectReader0.readValue((Reader) stringReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (StringReader); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = null;
      String string0 = " with format auto-detection: must be byte- not char-based";
      StringReader stringReader0 = new StringReader(" with format auto-detection: must be byte- not char-based");
      assertNotNull(stringReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
//      try { 
        objectReader1.readValue((Reader) pipedReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      deserializationFeatureArray0[4] = deserializationFeature4;
      DeserializationFeature deserializationFeature5 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      deserializationFeatureArray0[5] = deserializationFeature5;
      DeserializationFeature deserializationFeature6 = DeserializationFeature.WRAP_EXCEPTIONS;
      deserializationFeatureArray0[6] = deserializationFeature6;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
//      try { 
        objectReader0.readValue(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected character ('\u00BB' (code 187)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
//         //  at [Source: (byte[])\"\uFFFD\"; line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      byte[] byteArray0 = new byte[2];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertNotNull(placeholderForType0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) placeholderForType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertNotNull(arrayType0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) arrayType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertNotNull(objectReader1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      JsonNode jsonNode0 = objectReader2.createObjectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertEquals(0, jsonNode0.size());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectReader objectReader3 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      assertEquals(9, deserializationFeatureArray0.length);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      
      DeserializationConfig deserializationConfig0 = objectReader3.getConfig();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020336, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(deserializationConfig0);
      assertEquals(9, deserializationFeatureArray0.length);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      boolean boolean0 = objectReader3.isEnabled(deserializationFeature1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertEquals(9, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte)45, (byte)1, (byte) (-1), (byte)55, (byte)1, (byte)1}, byteArray0);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      bufferedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
//      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertNotNull(tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(159, jsonFactory2.getGeneratorFeatures());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(159, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      
      JsonFactory jsonFactory4 = jsonFactory3.setCharacterEscapes((CharacterEscapes) null);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(159, jsonFactory2.getGeneratorFeatures());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(159, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals("", jsonFactory4.getRootValueSeparator());
      assertEquals(159, jsonFactory4.getGeneratorFeatures());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory4);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(159, jsonFactory2.getGeneratorFeatures());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(159, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals("", jsonFactory4.getRootValueSeparator());
      assertEquals(159, jsonFactory4.getGeneratorFeatures());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      ObjectReader objectReader2 = objectReader1.with(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(159, jsonFactory2.getGeneratorFeatures());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(159, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals("", jsonFactory4.getRootValueSeparator());
      assertEquals(159, jsonFactory4.getGeneratorFeatures());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "KY#]A:ML");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[4] = deserializationFeature1;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader2 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(typeFactory0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectReader objectReader3 = objectReader0.with(deserializationFeature2, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature0));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(objectReader3);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature2, deserializationFeature0);
      assertNotSame(deserializationFeature2, deserializationFeature1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      
      ObjectReader objectReader4 = objectReader2.with(deserializationFeature1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader4);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(deserializationFeature1, deserializationFeature2);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader2, objectReader4);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = 3;
      // Undeclared exception!
//      try { 
        objectReader4.readValues(byteArray0, 3, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isMissingNode());
      assertNotNull(jsonNode0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory4.createNonBlockingByteArrayParser();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertNotNull(nonBlockingJsonParser0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      
//      try { 
        objectReader0._bindAsTree(nonBlockingJsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper2.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(iOContext1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedReader pipedReader0 = new PipedReader(1);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, pipedReader0, objectMapper2, charsToNameCanonicalizer1, charArray0, 0, 3, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'R', '`'}, charArray0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideFormatFeatures(1799, 33);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser1);
      assertEquals(2, charArray0.length);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertArrayEquals(new char[] {'R', '`'}, charArray0);
      
//      try { 
        objectReader0.readTree((JsonParser) readerBasedJsonParser1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'R': was expecting ('true', 'false' or 'null')
//         //  at [Source: UNKNOWN; line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(objectReader0);
      
      InjectableValues injectableValues0 = objectReader0.getInjectableValues();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues0);
      assertSame(injectableValues_Std0, injectableValues0);
      assertSame(injectableValues0, injectableValues_Std0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)3;
      // Undeclared exception!
//      try { 
        objectReader0.readTree(byteArray0, (int) (byte)16, (int) (byte)2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 16
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(typeFactory0);
      assertNotSame(objectReader0, objectReader1);
      
      JsonParser jsonParser0 = objectReader0._considerFilter((JsonParser) null, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNull(jsonParser0);
      assertNotSame(objectReader0, objectReader1);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(objectReader0, objectReader1);
      
      // Undeclared exception!
//      try { 
        objectReader1._initForReading(defaultDeserializationContext0, (JsonParser) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)0;
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, 1224, 0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertNotNull(jsonNode0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)16, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonReadFeature[] jsonReadFeatureArray0 = new JsonReadFeature[8];
      jsonReadFeatureArray0[0] = jsonReadFeature0;
      jsonReadFeatureArray0[1] = jsonReadFeature0;
      jsonReadFeatureArray0[2] = jsonReadFeature0;
      jsonReadFeatureArray0[3] = jsonReadFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      jsonReadFeatureArray0[4] = jsonReadFeature1;
      jsonReadFeatureArray0[5] = jsonReadFeature0;
      jsonReadFeatureArray0[6] = jsonReadFeature0;
      jsonReadFeatureArray0[7] = jsonReadFeature0;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.disable(jsonReadFeature0, jsonReadFeatureArray0);
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8203, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8203, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature1));
      assertNotNull(jsonFactoryBuilder1);
      assertEquals(8, jsonReadFeatureArray0.length);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertNotSame(jsonReadFeature0, jsonReadFeature1);
      
      ObjectReader objectReader2 = objectReader0.forType((JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      
      JsonFactoryBuilder jsonFactoryBuilder2 = jsonFactoryBuilder1.rootValueSeparator("()C/Csfs<u* vf!Z~");
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8203, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(8203, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8203, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature1));
      assertNotNull(jsonFactoryBuilder2);
      assertEquals(8, jsonReadFeatureArray0.length);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertNotSame(jsonReadFeature0, jsonReadFeature1);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder2);
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8203, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(8203, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8203, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("()C/Csfs<u* vf!Z~", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8203, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature1));
      assertNotNull(jsonFactory0);
      assertEquals(8, jsonReadFeatureArray0.length);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8203, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(8203, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8203, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("()C/Csfs<u* vf!Z~", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8203, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("()C/Csfs<u* vf!Z~", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8203, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature1));
      assertNotNull(jsonFactory1);
      assertEquals(8, jsonReadFeatureArray0.length);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertNotSame(jsonReadFeature0, jsonReadFeature1);
      
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertNull(jsonNode0.textValue());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader3 = objectReader2.with(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(objectReader0);
      
      InjectableValues injectableValues0 = objectReader0.getInjectableValues();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues0);
      assertSame(injectableValues_Std0, injectableValues0);
      assertSame(injectableValues0, injectableValues_Std0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte)42;
//      try { 
        objectReader0.readTree(byteArray0, 0, (int) (byte)2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Illegal character ((CTRL-CHAR, code 2)): only regular white space (\\r, \\n, \\t) is allowed between tokens
//         //  at [Source: (byte[])\"\u0002\u0003\u0000\u0002\u0000\u0010\u0002p*\"; line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
//      try { 
        objectReader0.readTree((InputStream) pipedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_SINGLE_QUOTES;
      assertEquals(JsonParser.Feature.ALLOW_SINGLE_QUOTES, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(4, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonReadFeature.ALLOW_SINGLE_QUOTES, jsonReadFeature0);
      
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_SINGLE_QUOTES;
      assertEquals(JsonParser.Feature.ALLOW_SINGLE_QUOTES, jsonReadFeature1.mappedFeature());
      assertEquals(4, jsonReadFeature1.getMask());
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_SINGLE_QUOTES, jsonReadFeature1);
      
      formatFeatureArray0[1] = (FormatFeature) jsonReadFeature1;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(2, formatFeatureArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader2 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isMissingNode());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      
      byte[] byteArray0 = new byte[6];
//      try { 
        objectReader2.readTree(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
//         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValue((byte[]) null, (-599), 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues_Std0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("1Bfq]dU", object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(objectReader0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.withoutRootName();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader3 = objectReader2.with(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader3);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertSame(objectReader3, objectReader2);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMaxInputLookahead(3);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(objectReader0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withOptimalMatch(matchStrength0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(objectReader0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertNotNull(dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders2.findFormat((InputStream) null);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(objectReader0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertNotNull(dataFormatReaders_Match0);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      
      // Undeclared exception!
//      try { 
        objectReader3._detectBindAndClose(dataFormatReaders_Match0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("k{)g");
      assertNotNull(mockFile0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader2 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader2.readTree(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      assertEquals(0, byteArray0.length);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader(577);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 131, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(131, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.skipChildren();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(131, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(131, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNotNull(readerBasedJsonParser1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
//      try { 
        objectReader0._bindAndClose(readerBasedJsonParser1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IaWnud|75'$7j$mm");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNotNull(coreXMLDeserializers_Std0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, coreXMLDeserializers_Std0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = '<';
      charArray0[2] = '7';
      boolean boolean1 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "IaWnud|75'$7j$mm");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      charArray0[3] = 'e';
      charArray0[4] = '}';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 11, pipedReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, 1, 0, true);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(11, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'P', '<', '7', 'e', '}'}, charArray0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(11, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(11, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'P', '<', '7', 'e', '}'}, charArray0);
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(11, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(11, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNull(formatSchema0);
      assertEquals(5, charArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertArrayEquals(new char[] {'P', '<', '7', 'e', '}'}, charArray0);
      
      ObjectReader objectReader0 = objectMapper1.reader((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      JsonFactory jsonFactory0 = objectReader0.getFactory();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isShort());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
//      try { 
        objectReader0.readTree(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid UTF-8 middle byte 0x68
//         //  at [Source: (byte[])\"\uFFFDj\uFFFDh\u0000\u0000\"; line: 1, column: 5]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<Stack> class0 = Stack.class;
      JavaType javaType0 = typeFactory1.constructType((Type) class0, (TypeBindings) null);
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(javaType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isContainerType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertNotNull(collectionType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(decimalNode0.isFloat());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isShort());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isInt());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isObject());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isLong());
      assertNotNull(decimalNode0);
      
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.useStaticType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, javaType0);
      
      CollectionType collectionType2 = collectionType1.withTypeHandler((Object) null);
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.useStaticType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType2.hasHandlers());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.useStaticType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)javaType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(collectionType2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, javaType0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser((Reader) pipedReader0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertNotNull(readerBasedJsonParser0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      
      Iterator<DeserializationConfig> iterator0 = objectReader0.readValues((JsonParser) readerBasedJsonParser0, (ResolvedType) collectionType2);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.useStaticType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType2.hasHandlers());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.useStaticType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)javaType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(iterator0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, javaType0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      Iterator<ArrayType> iterator1 = objectReader0.readValues((JsonParser) readerBasedJsonParser0, javaType0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(javaType0.equals((Object)collectionType1));
      assertFalse(javaType0.equals((Object)collectionType0));
      assertFalse(javaType0.equals((Object)collectionType2));
      assertNotNull(iterator1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(javaType0, collectionType1);
      assertNotSame(javaType0, collectionType0);
      assertNotSame(javaType0, collectionType2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(16, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature0);
      
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_SINGLE_QUOTES;
      assertEquals(JsonParser.Feature.ALLOW_SINGLE_QUOTES, jsonReadFeature1.mappedFeature());
      assertEquals(4, jsonReadFeature1.getMask());
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_SINGLE_QUOTES, jsonReadFeature1);
      
      formatFeatureArray0[1] = (FormatFeature) jsonReadFeature1;
      // Undeclared exception!
//      try { 
        JsonWriteFeature.valueOf("O& >:%/");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant com.fasterxml.jackson.core.json.JsonWriteFeature.O& >:%/
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonNode jsonNode0 = objectReader1.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isShort());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(0, jsonNode0.size());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader1, objectReader0);
      
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader1));
      assertNotNull(priorityQueue0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader1));
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader2 = objectReader1.withFormatDetection(dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
//      try { 
        objectReader0.readValue(byteArray0, 0, 1343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader2 = objectReader0.without(jsonParser_Feature1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader2.readTree((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = null;
      int int0 = (-1859);
      StringReader stringReader0 = new StringReader(" with format auto-detection: must be byte- not char-based");
      assertNotNull(stringReader0);
      
//      try { 
        objectReader0.readValue((Reader) stringReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'with': was expecting ('true', 'false' or 'null')
//         //  at [Source: (StringReader); line: 1, column: 6]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      int int0 = 86;
      // Undeclared exception!
//      try { 
        objectReader1.readValue((DataInput) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<InputStream> class0 = InputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      assertNotNull(bufferedInputStream0);
      
      // Undeclared exception!
//      try { 
        objectReader0._detectBindAndCloseAsTree(bufferedInputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)2;
      // Undeclared exception!
//      try { 
        objectReader1.readValues(byteArray0, (int) 2, (int) 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)3;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)112, (byte)17, (byte)85, (byte)38, (byte)1, (byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
//      try { 
        objectReader1._inputStream(uRL0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ShortNode> class0 = ShortNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ObjectReader objectReader1 = objectReader0.withAttributes(hashMap0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNotNull(uRL0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-103);
      // Undeclared exception!
//      try { 
        objectReader1._detectBindAndClose(byteArray0, 1000, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("k{)g");
      assertNotNull(mockFile0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 1);
      assertEquals((-1), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals((-1), byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
//      try { 
        objectReader1.readValue(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (byte[])\"\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      byte[] byteArray0 = new byte[2];
//      try { 
        objectReader0.readValues(byteArray0, (int)  (-61), 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: (byte[])\"\u0000\u0000\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader2 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      boolean boolean0 = true;
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory2);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory0.copy();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      
      char[] charArray0 = new char[5];
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertNotNull(bufferedInputStream0);
      
      // Undeclared exception!
//      try { 
        objectReader1.readTree((InputStream) bufferedInputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.SequenceInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte byte0 = (byte)0;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte)0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertNotNull(placeholderForType0);
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertNull(javaType0);
      
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      assertFalse(booleanNode0.isBigInteger());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isFloat());
      assertEquals("true", booleanNode0.asText());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isShort());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isBigDecimal());
      assertNotNull(booleanNode0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader1 = null;
//      try {
        objectReader1 = new ObjectReader(objectMapper0, (DeserializationConfig) null, (JavaType) null, booleanNode0, (FormatSchema) null, injectableValues_Std0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader2 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      JsonNode jsonNode0 = objectReader2.readTree((InputStream) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(0, jsonNode0.size());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader2 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(jsonFactory2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory0.copy();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertNotNull(jsonFactory3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      
      char[] charArray0 = new char[5];
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertNotNull(bufferedInputStream0);
      
      JsonNode jsonNode0 = objectReader1.readTree((InputStream) bufferedInputStream0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isObject());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      
      charArray0[0] = '[';
      charArray0[1] = 'h';
      charArray0[2] = '>';
      charArray0[3] = 'A';
      charArray0[4] = '%';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(5, charArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertArrayEquals(new char[] {'[', 'h', '>', 'A', '%'}, charArray0);
      
      JsonFactory jsonFactory4 = jsonFactory2.enable(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(8225, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8225, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertNotNull(jsonFactory4);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory5 = jsonFactory4.configure(jsonParser_Feature1, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(8241, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8241, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8241, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals(31, jsonFactory5.getGeneratorFeatures());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertEquals(8241, jsonFactory5.getParserFeatures());
      assertTrue(jsonFactory5.canParseAsync());
      assertEquals(0, jsonFactory5.getFormatParserFeatures());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals(0, jsonFactory5.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8241, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory5.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertNotNull(jsonFactory5);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory6 = jsonFactory5.copy();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(8241, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8241, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8241, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals(31, jsonFactory5.getGeneratorFeatures());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertEquals(8241, jsonFactory5.getParserFeatures());
      assertTrue(jsonFactory5.canParseAsync());
      assertEquals(0, jsonFactory5.getFormatParserFeatures());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals(0, jsonFactory5.getFormatGeneratorFeatures());
      assertTrue(jsonFactory6.canParseAsync());
      assertEquals(" ", jsonFactory6.getRootValueSeparator());
      assertFalse(jsonFactory6.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory6.getFormatName());
      assertEquals(0, jsonFactory6.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory6.getFormatParserFeatures());
      assertFalse(jsonFactory6.requiresPropertyOrdering());
      assertFalse(jsonFactory6.requiresCustomCodec());
      assertEquals(31, jsonFactory6.getGeneratorFeatures());
      assertTrue(jsonFactory6.canUseCharArrays());
      assertEquals(8241, jsonFactory6.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8241, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory5.equals((Object)jsonFactory3));
      assertFalse(jsonFactory6.equals((Object)jsonFactory5));
      assertFalse(jsonFactory6.equals((Object)jsonFactory3));
      assertFalse(jsonFactory6.equals((Object)jsonFactory4));
      assertFalse(jsonFactory6.equals((Object)jsonFactory2));
      assertFalse(jsonFactory6.equals((Object)jsonFactory1));
      assertFalse(jsonFactory6.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertNotNull(jsonFactory6);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory6);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory6);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory6);
      assertNotSame(jsonFactory5, jsonFactory6);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory2);
      assertNotSame(jsonFactory6, jsonFactory5);
      assertNotSame(jsonFactory6, jsonFactory3);
      assertNotSame(jsonFactory6, jsonFactory4);
      assertNotSame(jsonFactory6, jsonFactory2);
      assertNotSame(jsonFactory6, jsonFactory1);
      assertNotSame(jsonFactory6, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      
      ArrayNode arrayNode0 = (ArrayNode)objectReader0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isObject());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(arrayNode0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      
      // Undeclared exception!
//      try { 
        objectReader1.readValues((DataInput) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<Stack> class0 = Stack.class;
      JavaType javaType0 = typeFactory1.constructType((Type) class0, (TypeBindings) null);
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(javaType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertNotNull(collectionType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isFloat());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isLong());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isBigDecimal());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isBigInteger());
      assertNotNull(decimalNode0);
      
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType1, collectionType0);
      
      CollectionType collectionType2 = collectionType1.withTypeHandler((Object) null);
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.isConcrete());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.hasHandlers());
      assertTrue(collectionType2.isCollectionLikeType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.useStaticType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)javaType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(collectionType2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, javaType0);
      assertNotSame(collectionType2, collectionType0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser((Reader) pipedReader0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(readerBasedJsonParser0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      
      Iterator<DeserializationConfig> iterator0 = objectReader0.readValues((JsonParser) readerBasedJsonParser0, (ResolvedType) collectionType2);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.isConcrete());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.hasHandlers());
      assertTrue(collectionType2.isCollectionLikeType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.useStaticType());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)javaType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(iterator0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, javaType0);
      assertNotSame(collectionType2, collectionType0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      ObjectReader objectReader1 = objectReader0.withType((Type) class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(jsonFactory2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      ObjectReader objectReader2 = objectReader1._new(objectReader0, jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile("35&");
      assertNotNull(mockFile0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      ObjectReader objectReader2 = objectReader0.withFeatures(formatFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, formatFeatureArray0.length);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1598, (byte)1);
      assertEquals((-1593), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals((-1593), byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertEquals((-1), int0);
      
//      try { 
        objectReader1.readValue((InputStream) byteArrayInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (ByteArrayInputStream); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237085840, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237085840, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ArrayType> class0 = ArrayType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      assertEquals(0, javaTypeArray0.length);
      
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertNotNull(simpleType0);
      
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0, (JavaType) simpleType0);
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isFinal());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(mapType0);
      assertEquals(0, javaTypeArray0.length);
      
      MapType mapType1 = mapType0.withKeyType(simpleType0);
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertEquals(0, mapType1.containedTypeCount());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(mapType1);
      assertEquals(0, javaTypeArray0.length);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      MapType mapType2 = mapType1.withStaticTyping();
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.hasHandlers());
      assertTrue(mapType2.isFinal());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.isJavaLangObject());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isAbstract());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertNotNull(mapType2);
      assertEquals(0, javaTypeArray0.length);
      assertSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      
      MapType mapType3 = mapType2.withTypeHandler(class0);
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.hasHandlers());
      assertTrue(mapType2.isFinal());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.isJavaLangObject());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isAbstract());
      assertFalse(mapType3.isJavaLangObject());
      assertFalse(mapType3.hasValueHandler());
      assertTrue(mapType3.useStaticType());
      assertTrue(mapType3.hasHandlers());
      assertTrue(mapType3.isFinal());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isPrimitive());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.hasContentType());
      assertTrue(mapType3.isMapLikeType());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isAbstract());
      assertFalse(mapType3.isArrayType());
      assertEquals(0, mapType3.containedTypeCount());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType3.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType0));
      assertTrue(mapType3.equals((Object)mapType2));
      assertNotNull(mapType3);
      assertEquals(0, javaTypeArray0.length);
      assertNotSame(mapType0, mapType3);
      assertSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType3, mapType1);
      
      ObjectReader objectReader1 = objectMapper1.readerFor((JavaType) mapType3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237085840, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isFinal());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.hasHandlers());
      assertTrue(mapType2.isFinal());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.isJavaLangObject());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isAbstract());
      assertFalse(mapType3.isJavaLangObject());
      assertFalse(mapType3.hasValueHandler());
      assertTrue(mapType3.useStaticType());
      assertTrue(mapType3.hasHandlers());
      assertTrue(mapType3.isFinal());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isPrimitive());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.hasContentType());
      assertTrue(mapType3.isMapLikeType());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isAbstract());
      assertFalse(mapType3.isArrayType());
      assertEquals(0, mapType3.containedTypeCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType3));
      assertTrue(mapType1.equals((Object)mapType3));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType2.equals((Object)mapType3));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType3.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType0));
      assertTrue(mapType3.equals((Object)mapType2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, javaTypeArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(mapType0, mapType3);
      assertSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType3, mapType1);
      assertNotSame(objectReader1, objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader0, (OutputStream) null);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(uTF8JsonGenerator0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCodec(objectMapper0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(uTF8JsonGenerator1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      // Undeclared exception!
//      try { 
        objectReader1.writeValue(uTF8JsonGenerator1, objectMapper1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Not implemented for ObjectReader
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      URI uRI0 = null;
      String string0 = ";H7P00K>4mtKZRWl1$g";
//      try { 
        objectReader0.readValues((JsonParser) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue(class0, (Object) null);
      assertNotNull(injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      ObjectReader objectReader1 = null;
//      try {
        objectReader1 = new ObjectReader(objectReader0, (DeserializationConfig) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("k{)g");
      assertNotNull(mockFile0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFile0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("k{)g", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("k{)g", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectReader1, charsToNameCanonicalizer0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("k{)g", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("k{)g", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature1);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("k{)g", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("k{)g", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(128, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(128, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(readerBasedJsonParser1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertNotNull(mapType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertNotNull(referenceType0);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) mapType0;
      javaTypeArray0[1] = (JavaType) mapType0;
      javaTypeArray0[2] = (JavaType) referenceType0;
      javaTypeArray0[3] = (JavaType) mapType0;
      javaTypeArray0[4] = (JavaType) referenceType0;
      ReferenceType referenceType1 = (ReferenceType)referenceType0.refine(class0, typeBindings0, mapType0, javaTypeArray0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasValueHandler());
      assertEquals(2, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.hasContentType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertNotNull(referenceType1);
      assertEquals(5, javaTypeArray0.length);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType0, referenceType1);
      
//      try { 
        objectReader1.readValue((JsonParser) readerBasedJsonParser1, (JavaType) referenceType1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      ObjectReader objectReader2 = objectReader1.with(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader2._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
//      try { 
        objectReader1._findRootDeserializer(defaultDeserializationContext_Impl0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("k{)g");
      assertNotNull(mockFile0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
//      try { 
        objectReader1.readValue(uRL0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      Class<LongNode> class0 = LongNode.class;
      ObjectReader objectReader2 = objectMapper1.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      ObjectReader objectReader3 = objectReader2.withRootName("ALLOW_MISSING_VALUES");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertNotNull(jsonNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = (DecimalNode)jsonNodeFactory0.numberNode(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertNotNull(decimalNode0);
      
      Class<Integer> class0 = Integer.class;
//      try { 
        objectReader0.treeToValue((TreeNode) jsonNode0, class0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize instance of `java.lang.Integer` out of START_ARRAY token
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      deserializationFeatureArray0[3] = deserializationFeature1;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertNotNull(objectReader0);
      assertEquals(4, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1269L));
      assertEquals((short) (-1269), bigDecimal0.shortValue());
      assertEquals((byte)11, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = (DecimalNode)jsonNodeFactory0.numberNode(bigDecimal0);
      assertEquals((short) (-1269), bigDecimal0.shortValue());
      assertEquals((byte)11, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isMissingNode());
      assertTrue(decimalNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isNaN());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isFloat());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isDouble());
      assertEquals(0, decimalNode0.size());
      assertNotNull(decimalNode0);
      
      Class<Integer> class0 = Integer.class;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)122;
      MissingNode missingNode0 = (MissingNode)objectMapper0.readTree(byteArray0, (int) (byte) (-65), (int) (byte) (-65));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isEmpty());
      assertNotNull(missingNode0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)57, (byte) (-65), (byte)0, (byte) (-97), (byte)122}, byteArray0);
      
      Class<Integer> class1 = Integer.class;
//      try { 
        objectReader0.treeToValue((TreeNode) missingNode0, class1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize instance of `java.lang.Integer` out of NOT_AVAILABLE token
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      ObjectReader objectReader2 = objectReader0.with(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<Stack> class0 = Stack.class;
      JavaType javaType0 = typeFactory1.constructType((Type) class0, (TypeBindings) null);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(javaType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertNotNull(collectionType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.booleanValue());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isDouble());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isFloat());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isBigDecimal());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isNaN());
      assertNotNull(decimalNode0);
      
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.isContainerType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertNotNull(collectionType1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, javaType0);
      
      CollectionType collectionType2 = collectionType1.withTypeHandler((Object) null);
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.isContainerType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isAbstract());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)javaType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(collectionType2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, javaType0);
      assertNotSame(collectionType2, collectionType0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser((Reader) pipedReader0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(readerBasedJsonParser0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      
      Iterator<DeserializationConfig> iterator0 = objectReader1.readValues((JsonParser) readerBasedJsonParser0, (ResolvedType) collectionType2);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.isContainerType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isAbstract());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)javaType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(iterator0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, javaType0);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      ObjectReader objectReader2 = objectReader1.with(locale0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      ObjectReader objectReader3 = objectReader2.withoutFeatures(jsonParser_FeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      assertEquals(7, jsonParser_FeatureArray0.length);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("]&E9}(QdyScz)d");
      assertNotNull(mockFile0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues_Std0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s", (Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      
      ObjectReader objectReader1 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      
      ObjectReader objectReader2 = objectReader1.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_LONG_FOR_INTS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.USE_LONG_FOR_INTS;
      deserializationFeatureArray0[4] = deserializationFeature4;
      DeserializationFeature deserializationFeature5 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      deserializationFeatureArray0[5] = deserializationFeature5;
      DeserializationFeature deserializationFeature6 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[6] = deserializationFeature6;
      DeserializationFeature deserializationFeature7 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[7] = deserializationFeature7;
      ObjectReader objectReader3 = objectReader2.withFeatures(deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertNotNull(objectReader3);
      assertEquals(8, deserializationFeatureArray0.length);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      
      byte[] byteArray0 = new byte[0];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
//      try { 
        objectReader2.readValue((InputStream) pipedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(typeFactory0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.WRAP_EXCEPTIONS;
      deserializationFeatureArray0[4] = deserializationFeature2;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertNotNull(objectReader1);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("k{)g");
      assertNotNull(mockFile0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      JsonReadFeature[] jsonReadFeatureArray0 = new JsonReadFeature[2];
      jsonReadFeatureArray0[0] = jsonReadFeature0;
      jsonReadFeatureArray0[1] = jsonReadFeature0;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.disable(jsonReadFeature0, jsonReadFeatureArray0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(9217, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(9217, jsonFactoryBuilder1.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder1);
      assertEquals(2, jsonReadFeatureArray0.length);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      JsonFactoryBuilder jsonFactoryBuilder2 = jsonFactoryBuilder1.disable(jsonReadFeature1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(9217, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(9217, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(9217, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertNotNull(jsonFactoryBuilder2);
      assertEquals(2, jsonReadFeatureArray0.length);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertNotSame(jsonReadFeature0, jsonReadFeature1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder2);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(9217, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(9217, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(9217, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(9217, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertEquals(2, jsonReadFeatureArray0.length);
      
      ObjectReader objectReader2 = objectReader0.with(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(9217, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(9217, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(9217, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(9217, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(2, jsonReadFeatureArray0.length);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertNotSame(jsonReadFeature0, jsonReadFeature1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader3 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      assertEquals(4, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader4 = objectReader1.with(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertNotNull(objectReader4);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertSame(objectReader1, objectReader4);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader3);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("k{)g");
      assertNotNull(mockFile0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 1);
      assertEquals((-1), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
//      try { 
        objectReader0.readValue((InputStream) byteArrayInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (ByteArrayInputStream); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("Current token not FIELD_NAME (to contain expected root name '%s'), but %s");
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      
      Class<CoreXMLDeserializers.Std>[] classArray0 = (Class<CoreXMLDeserializers.Std>[]) Array.newInstance(Class.class, 9);
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      classArray0[0] = class0;
      Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
      classArray0[1] = class1;
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'c';
      charArray0[2] = 'S';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser(charArray0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(3, charArray0.length);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertArrayEquals(new char[] {'\'', 'c', 'S'}, charArray0);
      
      Class<CoreXMLDeserializers.Std> class2 = CoreXMLDeserializers.Std.class;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      NullNode nullNode0 = (NullNode)jsonNodeFactory0.numberNode((BigDecimal) null);
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isBigInteger());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isArray());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isShort());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isBigDecimal());
      assertNotNull(nullNode0);
      
      Class<Integer> class3 = Integer.class;
      Integer integer0 = objectReader0.treeToValue((TreeNode) nullNode0, class3);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isBigInteger());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isArray());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isShort());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNull(integer0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      
      ObjectReader objectReader1 = objectReader0.forType(class2);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      
      TypeReference<BinaryNode> typeReference0 = (TypeReference<BinaryNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      Iterator<BinaryNode> iterator0 = objectReader1.readValues((JsonParser) readerBasedJsonParser0, typeReference0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("Current token not FIELD_NAME (to contain expected root name '%s'), but %s", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(iterator0);
      assertEquals(3, charArray0.length);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertNotSame(objectReader1, objectReader0);
      assertArrayEquals(new char[] {'\'', 'c', 'S'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals("", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser((Reader) stringReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNotNull(readerBasedJsonParser0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)objectReader0._considerFilter(readerBasedJsonParser0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(8193, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNotNull(readerBasedJsonParser1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      LongNode longNode0 = LongNode.valueOf(0L);
      assertFalse(longNode0.isInt());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals((short)0, longNode0.shortValue());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.isLong());
      assertNull(longNode0.textValue());
      assertEquals(0.0, longNode0.doubleValue(), 0.01);
      assertEquals(0L, longNode0.longValue());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isBigDecimal());
      assertEquals(0, longNode0.size());
      assertEquals(0, longNode0.intValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertEquals(0.0F, longNode0.floatValue(), 0.01F);
      assertNotNull(longNode0);
      
      ObjectReader objectReader1 = objectReader0.withoutAttribute(longNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(longNode0.isInt());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals((short)0, longNode0.shortValue());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.isLong());
      assertNull(longNode0.textValue());
      assertEquals(0.0, longNode0.doubleValue(), 0.01);
      assertEquals(0L, longNode0.longValue());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isBigDecimal());
      assertEquals(0, longNode0.size());
      assertEquals(0, longNode0.intValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertEquals(0.0F, longNode0.floatValue(), 0.01F);
      assertNotNull(objectReader1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isArray());
      assertEquals(0, jsonNode0.size());
      assertNotNull(jsonNode0);
      assertSame(objectMapper0, objectMapper1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("eBIS3OfAh7,{`}A2:l");
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNotNull(readerBasedJsonParser0);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("JSON", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("JSON", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("JSON", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("JSON", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertNotNull(filteringGeneratorDelegate0);
      
      FormatSchema formatSchema0 = filteringGeneratorDelegate0.getSchema();
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("JSON", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("JSON", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertNull(formatSchema0);
      
      ObjectReader objectReader1 = objectMapper1.reader((FormatSchema) null);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider((FilterProvider) null);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
//      try { 
        objectReader1.readValues(byteArray0);
//        fail("Expecting exception: CharConversionException");
      
//      } catch(CharConversionException e) {
//         //
//         // Unsupported UCS-4 endianness (2143) detected
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[7] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertNotNull(objectReader0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isLong());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isBigDecimal());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isBigInteger());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.isFloat());
      assertNull(valueNode0.textValue());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isArray());
      assertNotNull(valueNode0);
      
      Class<Integer> class0 = Integer.class;
      Integer integer0 = objectReader0.treeToValue((TreeNode) valueNode0, class0);
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isLong());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isBigDecimal());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isBigInteger());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.isFloat());
      assertNull(valueNode0.textValue());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isArray());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertNull(integer0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      
//      try { 
        objectReader0.readTree("[method ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'method': was expecting ('true', 'false' or 'null')
//         //  at [Source: (String)\"[method \"; line: 1, column: 8]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(objectReader0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotSame(objectMapper0, objectMapper1);
      assertTrue(boolean0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(objectReader0));
      assertNotNull(dataFormatReaders1);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0, 0, (int) (byte)91);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertEquals(MatchStrength.SOLID_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertTrue(vector0.contains(objectReader0));
      assertNotNull(dataFormatReaders_Match0);
      assertEquals(2, byteArray0.length);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertArrayEquals(new byte[] {(byte)91, (byte)0}, byteArray0);
      
      // Undeclared exception!
//      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("k{)g");
      assertNotNull(mockFile0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)1;
//      try { 
        objectReader0.readValues(byteArray0, 1, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'v': was expecting ('true', 'false' or 'null')
//         //  at [Source: (byte[])\"`v\t%%\u0001\uFFFDa\u0001\"; line: 1, column: 4]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isInt());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isArray());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertNotNull(missingNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(missingNode0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isInt());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isArray());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      Class<ObjectReader> class0 = ObjectReader.class;
      ObjectReader objectReader1 = objectReader0.withType(class0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isInt());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isArray());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3; '[-~");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(contextAttributes1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ConcurrentHashMap<Object, ObjectReader> concurrentHashMap0 = new ConcurrentHashMap<Object, ObjectReader>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ContextAttributes contextAttributes2 = contextAttributes1.withSharedAttributes(concurrentHashMap0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertNotNull(contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes1);
      
      ContextAttributes contextAttributes3 = contextAttributes2.withSharedAttribute("3; '[-~", concurrentHashMap0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertNotNull(contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes1);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes3);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertNotNull(objectReader0);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectReaderArray0.length);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.USE_LONG_FOR_INTS;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[4] = deserializationFeature4;
      DeserializationFeature deserializationFeature5 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      deserializationFeatureArray0[5] = deserializationFeature5;
      DeserializationFeature deserializationFeature6 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      deserializationFeatureArray0[6] = deserializationFeature6;
      ObjectReader objectReader2 = objectReader1.withFeatures(deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature3;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature3;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature3, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature3.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature3.equals((Object)deserializationFeature0));
      assertFalse(deserializationFeature3.equals((Object)deserializationFeature1));
      assertNotNull(objectReader0);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature3, deserializationFeature2);
      assertNotSame(deserializationFeature3, deserializationFeature0);
      assertNotSame(deserializationFeature3, deserializationFeature1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = (DecimalNode)jsonNodeFactory0.numberNode(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isInt());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isFloat());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertNotNull(decimalNode0);
      
      Class<Integer> class0 = Integer.class;
      Integer integer0 = objectReader0.treeToValue((TreeNode) decimalNode0, class0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isInt());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isFloat());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(deserializationFeature3.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature3.equals((Object)deserializationFeature0));
      assertFalse(deserializationFeature3.equals((Object)deserializationFeature1));
      assertNotNull(integer0);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature3, deserializationFeature2);
      assertNotSame(deserializationFeature3, deserializationFeature0);
      assertNotSame(deserializationFeature3, deserializationFeature1);
      assertEquals(0, (int)integer0);
      
      TypeReference<ArrayNode> typeReference0 = (TypeReference<ArrayNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      ObjectReader objectReader1 = objectMapper0.readerFor(typeReference0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      Class<DeserializationConfig> class1 = DeserializationConfig.class;
      ObjectReader objectReader2 = objectReader1.forType(class1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute((Object) null);
      assertNotNull(contextAttributes1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ConcurrentHashMap<BinaryNode, MissingNode> concurrentHashMap0 = new ConcurrentHashMap<BinaryNode, MissingNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ContextAttributes contextAttributes2 = contextAttributes1.withSharedAttributes(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      
      Nulls nulls0 = Nulls.SET;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls0);
      assertEquals(Nulls.SET, jsonSetter_Value0.nonDefaultContentNulls());
      assertEquals(Nulls.SET, jsonSetter_Value0.getValueNulls());
      assertEquals(Nulls.SET, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.SET, jsonSetter_Value0.nonDefaultValueNulls());
      assertNotNull(jsonSetter_Value0);
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(Nulls.SET, jsonSetter_Value0.nonDefaultContentNulls());
      assertEquals(Nulls.SET, jsonSetter_Value0.getValueNulls());
      assertEquals(Nulls.SET, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.SET, jsonSetter_Value0.nonDefaultValueNulls());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertNotNull(objectReader1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      
//      try { 
        MockURL.URL((URL) null, "u_P72T]3");
//        fail("Expecting exception: MalformedURLException");
      
//      } catch(MalformedURLException e) {
//         //
//         // no protocol: u_P72T]3
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<Stack> class0 = Stack.class;
      JavaType javaType0 = typeFactory1.constructType((Type) class0, (TypeBindings) null);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertTrue(javaType0.isCollectionLikeType());
      assertTrue(javaType0.hasContentType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(javaType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertNotNull(collectionType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.booleanValue());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isLong());
      assertTrue(decimalNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isMissingNode());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isBigInteger());
      assertNotNull(decimalNode0);
      
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.useStaticType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertNotNull(collectionType1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType1, collectionType0);
      
      JsonSetter jsonSetter0 = mock(JsonSetter.class, new ViolatedAssumptionAnswer());
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
      assertNull(jsonSetter_Value0.nonDefaultValueNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getContentNulls());
      assertNull(jsonSetter_Value0.nonDefaultContentNulls());
      assertNotNull(jsonSetter_Value0);
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
      assertNull(jsonSetter_Value0.nonDefaultValueNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getContentNulls());
      assertNull(jsonSetter_Value0.nonDefaultContentNulls());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      CollectionType collectionType2 = collectionType1.withTypeHandler((Object) null);
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.useStaticType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType2.isFinal());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.hasContentType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isArrayType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertFalse(collectionType2.equals((Object)javaType0));
      assertNotNull(collectionType2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, javaType0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectMapper0, objectMapper1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertNotNull(intArray0);
      assertEquals(128, intArray0.length);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser((Reader) pipedReader0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNotNull(readerBasedJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      Iterator<DeserializationConfig> iterator0 = objectReader1.readValues((JsonParser) readerBasedJsonParser0, (ResolvedType) collectionType2);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.useStaticType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType2.isFinal());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.hasContentType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isArrayType());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertFalse(collectionType2.equals((Object)javaType0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(iterator0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, javaType0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectReader objectReader2 = objectReader0.without(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("k{)g");
      assertNotNull(mockFile0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isMissingNode());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
//      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertNotNull(arrayNode0);
      
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isMissingNode());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(jsonNode0, arrayNode0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues((DataInput) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature3;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature3;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature3, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature3.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature3.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature3.equals((Object)deserializationFeature0));
      assertNotNull(objectReader0);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature3, deserializationFeature2);
      assertNotSame(deserializationFeature3, deserializationFeature1);
      assertNotSame(deserializationFeature3, deserializationFeature0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = (DecimalNode)jsonNodeFactory0.numberNode(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isBigDecimal());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isNaN());
      assertNotNull(decimalNode0);
      
      Class<Integer> class0 = Integer.class;
      Integer integer0 = objectReader0.treeToValue((TreeNode) decimalNode0, class0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isBigDecimal());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isNaN());
      assertFalse(deserializationFeature3.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature3.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature3.equals((Object)deserializationFeature0));
      assertNotNull(integer0);
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature3, deserializationFeature2);
      assertNotSame(deserializationFeature3, deserializationFeature1);
      assertNotSame(deserializationFeature3, deserializationFeature0);
      assertEquals(0, (int)integer0);
      
      TypeReference<ArrayNode> typeReference0 = (TypeReference<ArrayNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      
//      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<Stack> class0 = Stack.class;
      JavaType javaType0 = typeFactory1.constructType((Type) class0, (TypeBindings) null);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertTrue(javaType0.isContainerType());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(javaType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertNotNull(collectionType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(decimalNode0.booleanValue());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isDouble());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isFloat());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(0, decimalNode0.size());
      assertTrue(decimalNode0.isBigDecimal());
      assertNotNull(decimalNode0);
      
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isArrayType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isFinal());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, javaType0);
      
      CollectionType collectionType2 = collectionType1.withTypeHandler((Object) null);
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isArrayType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.hasValueHandler());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isJavaLangObject());
      assertEquals(1, collectionType2.containedTypeCount());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)javaType0));
      assertNotNull(collectionType2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, javaType0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertNotNull(intArray0);
      assertEquals(128, intArray0.length);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser((Reader) pipedReader0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(readerBasedJsonParser0);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      
      Iterator<DeserializationConfig> iterator0 = objectReader1.readValues((JsonParser) readerBasedJsonParser0, (ResolvedType) collectionType2);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isArrayType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.hasValueHandler());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isJavaLangObject());
      assertEquals(1, collectionType2.containedTypeCount());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isCollectionLikeType());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)javaType0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(iterator0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, javaType0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
//      try { 
        objectReader1.readValue((JsonParser) readerBasedJsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      String string0 = "Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s";
      MockFile mockFile0 = new MockFile("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s");
      assertNotNull(mockFile0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      // Undeclared exception!
//      try { 
        objectReader2.readValues((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, objectMapper0, (Writer) null);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertNotNull(filteringGeneratorDelegate0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = (FilteringGeneratorDelegate)filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate1.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate1.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate1.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate1.getMatchCount());
      assertTrue(filteringGeneratorDelegate1.canOmitFields());
      assertFalse(filteringGeneratorDelegate1.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate1.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate1.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate1.canWriteBinaryNatively());
      assertNotNull(filteringGeneratorDelegate1);
      assertSame(filteringGeneratorDelegate0, filteringGeneratorDelegate1);
      assertSame(filteringGeneratorDelegate1, filteringGeneratorDelegate0);
      
      FormatSchema formatSchema0 = filteringGeneratorDelegate0.getSchema();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertNull(formatSchema0);
      assertSame(filteringGeneratorDelegate0, filteringGeneratorDelegate1);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser("JSON");
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(readerBasedJsonParser0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertNotNull(tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, true);
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(filteringParserDelegate0);
      
//      try { 
        objectReader0._bindAndClose(filteringParserDelegate0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
//         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[7] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertNotNull(objectReader0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      assertFalse(valueNode0.isIntegralNumber());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.booleanValue());
      assertEquals("null", valueNode0.asText());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isMissingNode());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertNotNull(valueNode0);
      
      Class<Integer> class0 = Integer.class;
      Integer integer0 = objectReader0.treeToValue((TreeNode) valueNode0, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(valueNode0.isIntegralNumber());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.booleanValue());
      assertEquals("null", valueNode0.asText());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isMissingNode());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertNull(integer0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      
      Class<NullNode> class1 = NullNode.class;
      ObjectReader objectReader1 = objectReader0.forType(class1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[4];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader1;
      ObjectReader objectReader2 = objectReader0.withFormatDetection(objectReaderArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(8, deserializationFeatureArray0.length);
      assertEquals(4, objectReaderArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      deserializationFeatureArray0[2] = deserializationFeature2;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature1;
      ObjectReader objectReader1 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertNotNull(intArray0);
      assertEquals(128, intArray0.length);
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader2 = objectReader0.withType(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValue((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(248, 248);
      assertNotNull(lRUMap0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<Stack> class0 = Stack.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (TypeBindings) null);
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.hasContentType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertNotNull(javaType0);
      assertNotSame(typeFactory0, typeFactory1);
      
      Class<Stack> class1 = Stack.class;
      Class<SimpleType> class2 = SimpleType.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertNotNull(collectionType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertSame(class1, class0);
      assertNotSame(collectionType0, javaType0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isNaN());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertNotNull(decimalNode0);
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertNotNull(nioPathDeserializer0);
      
      CollectionType collectionType1 = collectionType0.withContentValueHandler(nioPathDeserializer0);
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isInterface());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertNotNull(collectionType1);
      assertNotSame(typeFactory0, typeFactory1);
      assertSame(class1, class0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType1, collectionType0);
      
      CollectionType collectionType2 = collectionType1.withTypeHandler(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isInterface());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isAbstract());
      assertTrue(collectionType2.hasHandlers());
      assertEquals(1, collectionType2.containedTypeCount());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.useStaticType());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isFinal());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertFalse(collectionType2.equals((Object)javaType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertNotNull(collectionType2);
      assertNotSame(typeFactory0, typeFactory1);
      assertSame(class1, class0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, javaType0);
      assertNotSame(collectionType2, collectionType1);
      
      ObjectReader objectReader1 = objectReader0.forType((JavaType) collectionType2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isInterface());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isAbstract());
      assertTrue(collectionType2.hasHandlers());
      assertEquals(1, collectionType2.containedTypeCount());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.useStaticType());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isFinal());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertFalse(collectionType2.equals((Object)javaType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(typeFactory0, typeFactory1);
      assertSame(class1, class0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, javaType0);
      assertNotSame(collectionType2, collectionType1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory0.enable(jsonParser_Feature0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(9217, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(9217, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(9217, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(9217, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(9217, jsonFactory3.getParserFeatures());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertNotNull(intArray0);
      assertEquals(128, intArray0.length);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser((Reader) pipedReader0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(9217, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(9217, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(9217, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNotNull(readerBasedJsonParser0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      
      TypeReference<ObjectNode> typeReference0 = (TypeReference<ObjectNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(javaType0).when(typeReference0).getType();
      ObjectReader objectReader2 = objectMapper0.readerFor(typeReference0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.hasContentType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(javaType0.equals((Object)collectionType2));
      assertFalse(javaType0.equals((Object)collectionType0));
      assertFalse(javaType0.equals((Object)collectionType1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(typeFactory0, typeFactory1);
      assertSame(class0, class1);
      assertNotSame(javaType0, collectionType2);
      assertNotSame(javaType0, collectionType0);
      assertNotSame(javaType0, collectionType1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      
      Iterator<DeserializationConfig> iterator0 = objectReader2.readValues((JsonParser) readerBasedJsonParser0, (ResolvedType) collectionType1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(9217, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(9217, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.hasContentType());
      assertEquals(9217, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isInterface());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(javaType0.equals((Object)collectionType2));
      assertFalse(javaType0.equals((Object)collectionType0));
      assertFalse(javaType0.equals((Object)collectionType1));
      assertFalse(collectionType0.equals((Object)javaType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.equals((Object)javaType0));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(iterator0);
      assertNotSame(typeFactory0, typeFactory1);
      assertSame(class0, class1);
      assertNotSame(javaType0, collectionType2);
      assertNotSame(javaType0, collectionType0);
      assertNotSame(javaType0, collectionType1);
      assertSame(class1, class0);
      assertNotSame(collectionType0, javaType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, javaType0);
      assertNotSame(collectionType1, collectionType0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotSame(objectReader1, objectReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertNull(valueNode0.textValue());
      assertEquals(0, valueNode0.size());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.isLong());
      assertTrue(valueNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isInt());
      assertNotNull(valueNode0);
      
      Class<Integer> class0 = Integer.class;
      Integer integer0 = objectReader1.treeToValue((TreeNode) valueNode0, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertNull(valueNode0.textValue());
      assertEquals(0, valueNode0.size());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.isLong());
      assertTrue(valueNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isInt());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNull(integer0);
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotSame(objectReader1, objectReader0);
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.hasContentType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isInterface());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertNotNull(simpleType0);
      
      ObjectReader objectReader2 = objectMapper0.readerFor((JavaType) simpleType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleType0.hasContentType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isInterface());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      // Undeclared exception!
//      try { 
        objectReader2.readValue((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, objectMapper0, (Writer) null);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertNotNull(filteringGeneratorDelegate0);
      
      FormatSchema formatSchema0 = filteringGeneratorDelegate0.getSchema();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertNull(formatSchema0);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
//      try { 
        objectReader0.readValues(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
//         //  at [Source: (byte[])\"\u0000\"; line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      MockFile mockFile0 = new MockFile("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s");
      assertNotNull(mockFile0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader1;
      Class<DoubleNode> class1 = DoubleNode.class;
      ObjectReader objectReader2 = objectMapper0.readerWithView(class1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      
      objectReaderArray0[1] = objectReader2;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader1;
      objectReaderArray0[5] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      assertEquals(6, objectReaderArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)104;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader3 = objectReader1.with(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertNotNull(objectReader3);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataFormatReaders0, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertEquals(6, objectReaderArray0.length);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      assertEquals(6, objectReaderArray0.length);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      PipedReader pipedReader0 = new PipedReader(282);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = 'w';
      charArray0[2] = ',';
      charArray0[3] = '/';
      charArray0[4] = '/';
      charArray0[5] = 'i';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 738, pipedReader0, objectReader3, charsToNameCanonicalizer0, charArray0, 368, 4000, true);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(738, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'?', 'w', ',', '/', '/', 'i'}, charArray0);
      
      objectReader1._initForMultiRead(deserializationContext0, readerBasedJsonParser0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(738, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertEquals(6, objectReaderArray0.length);
      assertEquals(6, charArray0.length);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertArrayEquals(new char[] {'?', 'w', ',', '/', '/', 'i'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[7] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertNotNull(objectReader0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      boolean boolean0 = false;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      assertFalse(valueNode0.isBigDecimal());
      assertTrue(valueNode0.isEmpty());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.booleanValue());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isMissingNode());
      assertNotNull(valueNode0);
      
      Class<Integer> class0 = Integer.class;
      Integer integer0 = objectReader0.treeToValue((TreeNode) valueNode0, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(valueNode0.isBigDecimal());
      assertTrue(valueNode0.isEmpty());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.booleanValue());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertNull(integer0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      
      Class<NullNode> class1 = NullNode.class;
      ObjectReader objectReader1 = objectReader0.forType(class1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[8];
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      ObjectReader objectReader2 = null;
//      try {
        objectReader2 = new ObjectReader(objectMapper0, (DeserializationConfig) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader0 = null;
//      try {
        objectReader0 = new ObjectReader(objectMapper0, (DeserializationConfig) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNotNull(arrayNode0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("eBIS3OfAh7,{`}A2:l");
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)objectReader0._considerFilter(readerBasedJsonParser0, false);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(8193, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNotNull(readerBasedJsonParser1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      TypeReference<CollectionLikeType> typeReference0 = (TypeReference<CollectionLikeType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
//      try { 
        objectReader0.withType(typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
//      try { 
        objectReader0.withType((TypeReference<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      deserializationFeatureArray0[2] = deserializationFeature2;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature1;
      ObjectReader objectReader1 = objectMapper1.reader(deserializationFeature1, deserializationFeatureArray0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(5, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(deserializationFeature1, deserializationFeature2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
//      try { 
        objectReader1.readValues((InputStream) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No value type configured for ObjectReader
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertNotNull(arrayNode0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("eBIS3OfAh7,{`}A2:l");
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)objectReader0._considerFilter(readerBasedJsonParser0, false);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(8193, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNotNull(readerBasedJsonParser1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)3;
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertNotNull(simpleType0);
      
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertEquals("null", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      boolean boolean0 = objectMapper0.canDeserialize((JavaType) simpleType0, atomicReference0);
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("null", atomicReference0.toString());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(objectMapper0, objectMapper1);
      assertTrue(boolean0);
      
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 1);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)1, (byte) (-1), (byte)3, (byte) (-5), (byte)28, (byte)1}, byteArray0);
      
//      try { 
        objectReader0.readValue((InputStream) byteArrayInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
//         //  at [Source: (ByteArrayInputStream); line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNotNull(arrayNode0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("eBIS3OfAh7,{`}A2:l");
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)objectReader0._considerFilter(readerBasedJsonParser0, false);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(8193, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNotNull(readerBasedJsonParser1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 1);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)1, (byte) (-1), (byte)3, (byte) (-5), (byte)28, (byte)1}, byteArray0);
      
//      try { 
        objectReader0.readValue((InputStream) byteArrayInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
//         //  at [Source: (ByteArrayInputStream); line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        objectReader1.treeToValue((TreeNode) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertEquals(4, deserializationFeatureArray0.length);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      boolean boolean0 = objectReader0.isEnabled(deserializationFeature1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertEquals(4, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      int int0 = (-763);
      // Undeclared exception!
//      try { 
        jsonNodeFactory0.arrayNode((-763));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -763
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[7] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertNotNull(objectReader0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      assertFalse(valueNode0.isBigDecimal());
      assertTrue(valueNode0.isEmpty());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertEquals(0, valueNode0.size());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isLong());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertNotNull(valueNode0);
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      
      boolean boolean0 = objectReader1.isEnabled(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<TextNode> class2 = TextNode.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class2);
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertNotNull(mapLikeType0);
      
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType1.useStaticType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertTrue(mapLikeType1.hasContentType());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isFinal());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.isArrayType());
      assertTrue(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.isContainerType());
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertNotNull(mapLikeType1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectReader0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)40;
//      try { 
        objectReader0.readValue("JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
//         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isShort());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isArray());
      assertNotNull(jsonNode0);
      assertSame(objectMapper0, objectMapper1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("eBIS3OfAh7,{`}A2:l");
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNotNull(readerBasedJsonParser0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper1.treeAsTokens(jsonNode0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isShort());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isArray());
      assertFalse(treeTraversingParser0.isClosed());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertNotNull(treeTraversingParser0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TreeTraversingParser treeTraversingParser1 = (TreeTraversingParser)objectReader0._considerFilter(treeTraversingParser0, true);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isShort());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isArray());
      assertFalse(treeTraversingParser0.isClosed());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser1.getFeatureMask());
      assertFalse(treeTraversingParser1.canReadObjectId());
      assertFalse(treeTraversingParser1.canReadTypeId());
      assertFalse(treeTraversingParser1.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser1.hasTextCharacters());
      assertEquals(0, treeTraversingParser1.getTextOffset());
      assertEquals(0, treeTraversingParser1.currentTokenId());
      assertFalse(treeTraversingParser1.isClosed());
      assertFalse(treeTraversingParser1.canParseAsync());
      assertFalse(treeTraversingParser1.hasCurrentToken());
      assertEquals(0, treeTraversingParser1.getFormatFeatures());
      assertNull(treeTraversingParser1.currentToken());
      assertFalse(treeTraversingParser1.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser1.requiresCustomCodec());
      assertEquals(0, treeTraversingParser1.getCurrentTokenId());
      assertNull(treeTraversingParser1.getCurrentToken());
      assertNull(treeTraversingParser1.getLastClearedToken());
      assertNotNull(treeTraversingParser1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(treeTraversingParser0, treeTraversingParser1);
      assertSame(treeTraversingParser1, treeTraversingParser0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValues(uRL0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[7] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertNotNull(objectReader0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isArray());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isLong());
      assertTrue(valueNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isBigInteger());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isInt());
      assertNotNull(valueNode0);
      
      Class<Integer> class0 = Integer.class;
      Integer integer0 = objectReader0.treeToValue((TreeNode) valueNode0, class0);
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isArray());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isLong());
      assertTrue(valueNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isBigInteger());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isInt());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertNull(integer0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      
      // Undeclared exception!
//      try { 
        objectReader0.readValue((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertEquals(0, deserializationFeatureArray0.length);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 0);
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(arrayNode0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      assertNotSame(objectMapper1, objectMapper0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, (TokenFilter) null, false, false);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.enable(jsonParser_Feature0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(256, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(256, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(256, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      
      MappingIterator<ArrayType> mappingIterator0 = objectReader0._newIterator((JsonParser) filteringParserDelegate0, (DeserializationContext) defaultDeserializationContext_Impl0, (JsonDeserializer<?>) null, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(256, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(256, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(mappingIterator0);
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.WRITE_NAN_AS_STRINGS;
      assertEquals(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS, jsonWriteFeature0.mappedFeature());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(2, jsonWriteFeature0.getMask());
      assertEquals(JsonWriteFeature.WRITE_NAN_AS_STRINGS, jsonWriteFeature0);
      
      ObjectReader objectReader1 = objectReader0.without((FormatFeature) jsonWriteFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS, jsonWriteFeature0.mappedFeature());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(2, jsonWriteFeature0.getMask());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-66);
//      try { 
        objectReader1.readValue(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Illegal character ((CTRL-CHAR, code 2)): only regular white space (\\r, \\n, \\t) is allowed between tokens
//         //  at [Source: (byte[])\"\u0002#\u0015\u0000\uFFFD\"; line: 1, column: 2]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory1);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      // Undeclared exception!
//      try { 
        objectReader0._inputStream((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = new ObjectMapper();
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper2, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTimeZone();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("Current token not FIELD_NAME (to contain expected root name '%s'), but %s");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<CoreXMLDeserializers.Std>[] classArray0 = (Class<CoreXMLDeserializers.Std>[]) Array.newInstance(Class.class, 9);
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      classArray0[0] = class0;
      Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
      classArray0[1] = class1;
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'c';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0);
      Class<CoreXMLDeserializers.Std> class2 = CoreXMLDeserializers.Std.class;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      jsonNodeFactory0.numberNode((BigDecimal) null);
      ObjectReader objectReader1 = objectReader0.forType(class2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      JsonDeserializer<MapType> jsonDeserializer0 = (JsonDeserializer<MapType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      objectReader0._newIterator(jsonParser0, deserializationContext0, (JsonDeserializer<?>) jsonDeserializer0, false);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0, deserializationFeatureArray0);
      assertSame(objectReader1, objectReader2);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<TextNode> class2 = TextNode.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class2);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) mapLikeType1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)40;
      objectReader0.createObjectNode();
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_SINGLE_QUOTES;
      // Undeclared exception!
//      try { 
        JsonReadFeature.valueOf("JSON");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant com.fasterxml.jackson.core.json.JsonReadFeature.JSON
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<ArrayType> class0 = ArrayType.class;
      objectMapper1.readerWithView(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = new JsonFactory();
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory1);
      ObjectMapper objectMapper3 = new ObjectMapper();
      ObjectMapper objectMapper4 = new ObjectMapper(objectMapper3);
      ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper4.reader();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      ObjectReader objectReader2 = objectReader1.with(jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      objectMapper0.reader(contextAttributes0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      Class<Stack> class0 = Stack.class;
      typeFactory1.constructType((Type) class0, (TypeBindings) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withTypeHandler((Object) null);
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      PipedReader pipedReader0 = new PipedReader();
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) pipedReader0);
      Iterator<DeserializationConfig> iterator0 = objectReader0.readValues(jsonParser0, (ResolvedType) collectionType2);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[0];
      objectReader0.readTree(byteArray0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[3];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      dataFormatReaders_Match0.createParserWithMatch();
      objectReader0._considerFilter((JsonParser) null, false);
      // Undeclared exception!
//      try { 
        objectReader0.readTree((JsonParser) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = 'G';
      charArray0[2] = 'T';
      charArray0[3] = 'F';
      charArray0[4] = 'T';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 2426, 2426);
      // Undeclared exception!
//      try { 
        objectReader0.readTree(jsonParser0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2426
//         //
//         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("Current token not FIELD_NAME (to contain expected root name '%s'), but %s");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<CoreXMLDeserializers.Std>[] classArray0 = (Class<CoreXMLDeserializers.Std>[]) Array.newInstance(Class.class, 9);
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      classArray0[0] = class0;
      Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
      classArray0[1] = class1;
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'c';
      charArray0[2] = 'S';
      jsonFactory3.createParser(charArray0);
      Class<CoreXMLDeserializers.Std> class2 = CoreXMLDeserializers.Std.class;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      Class<Integer> class3 = Integer.class;
      objectReader0.treeToValue((TreeNode) valueNode0, class3);
      ObjectReader objectReader1 = objectReader0.forType(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      // Undeclared exception!
//      try { 
        objectReader1.readTree((JsonParser) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.withoutRootName();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'y';
      charArray0[2] = '1';
      charArray0[3] = 'p';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 0, 0);
      // Undeclared exception!
//      try { 
        objectReader0.readValues(jsonParser0, (TypeReference<Stack<MapLikeType>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("Current token not FIELD_NAME (to contain expected root name '%s'), but %s");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<CoreXMLDeserializers.Std>[] classArray0 = (Class<CoreXMLDeserializers.Std>[]) Array.newInstance(Class.class, 9);
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      classArray0[0] = class0;
      Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
      classArray0[1] = class1;
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'c';
      charArray0[2] = 'S';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0);
      Class<CoreXMLDeserializers.Std> class2 = CoreXMLDeserializers.Std.class;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      Class<Integer> class3 = Integer.class;
      objectReader0.treeToValue((TreeNode) valueNode0, class3);
      ObjectReader objectReader1 = objectReader0.forType(class2);
      TypeReference<BinaryNode> typeReference0 = (TypeReference<BinaryNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
//      try { 
        objectReader1.readValues(jsonParser0, typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.ESCAPE_NON_ASCII;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.configure(jsonWriteFeature0, false);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder1);
      StringReader stringReader0 = new StringReader("JSON");
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) stringReader0);
//      try { 
        objectReader0._bindAsTree(jsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
//         //  at [Source: (StringReader); line: 1, column: 9]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Short short0 = new Short((short)1132);
      jsonNodeFactory0.numberNode(short0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      objectMapper0.writer(serializationFeature0, serializationFeatureArray0);
      Short short1 = new Short((short)0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short1);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(valueNode0);
      objectReader0._bindAsTree(jsonParser0);
      // Undeclared exception!
//      try { 
        objectReader0.readValues((DataInput) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      String string0 = "Cannot detect format from input, does not look like any of detectable formats ";
      objectMapper1.reader();
      // Undeclared exception!
//      try { 
        objectReader1._bindAndClose((JsonParser) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("Current token not FIELD_NAME (to contain expected root name '%s'), but %s");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<CoreXMLDeserializers.Std>[] classArray0 = (Class<CoreXMLDeserializers.Std>[]) Array.newInstance(Class.class, 9);
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      jsonFactory1.createParser(charArray0);
      classArray0[0] = class0;
      Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
      classArray0[1] = class1;
      Class<CoreXMLDeserializers.Std> class2 = CoreXMLDeserializers.Std.class;
      classArray0[2] = class2;
      Class<CoreXMLDeserializers.Std> class3 = CoreXMLDeserializers.Std.class;
      classArray0[3] = class3;
      Class<CoreXMLDeserializers.Std> class4 = CoreXMLDeserializers.Std.class;
      classArray0[4] = class4;
      Class<CoreXMLDeserializers.Std> class5 = CoreXMLDeserializers.Std.class;
      classArray0[5] = class5;
      Class<CoreXMLDeserializers.Std> class6 = CoreXMLDeserializers.Std.class;
      classArray0[6] = class6;
      Class<CoreXMLDeserializers.Std> class7 = CoreXMLDeserializers.Std.class;
      classArray0[7] = class7;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((BigDecimal) null);
      Class<Integer> class8 = Integer.class;
      objectReader0.treeToValue((TreeNode) valueNode0, class8);
      ObjectReader objectReader1 = objectReader0.forType(class4);
      assertFalse(objectReader1.equals((Object)objectReader0));
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader2 = objectReader0.withFeatures(deserializationFeatureArray0);
      assertSame(objectReader0, objectReader2);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[7] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[6];
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
//      try { 
        objectReader0.readValues((InputStream) bufferedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(248, 248);
      typeFactory0.withCache(lRUMap0);
      Class<Stack> class0 = Stack.class;
      typeFactory0.constructType((Type) class0, (TypeBindings) null);
      Class<Stack> class1 = Stack.class;
      Class<SimpleType> class2 = SimpleType.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      CollectionType collectionType1 = collectionType0.withContentValueHandler(nioPathDeserializer0);
      CollectionType collectionType2 = collectionType1.withTypeHandler(objectReader0);
      objectReader0.forType((JavaType) collectionType2);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      PipedReader pipedReader0 = new PipedReader();
      CharacterEscapes.standardAsciiEscapesForJSON();
      jsonFactory1.createParser((Reader) pipedReader0);
      TypeReference<ObjectNode> typeReference0 = (TypeReference<ObjectNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
//      try { 
        objectMapper0.readerFor(typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper3 = new ObjectMapper(objectMapper1);
      ContextAttributes.Impl.getEmpty();
      objectMapper2.reader();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      ObjectReader objectReader2 = objectReader1.with(jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      // Undeclared exception!
//      try { 
        objectReader0.withFeatures((FormatFeature[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.at("");
      MockFile mockFile0 = new MockFile("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s");
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader1;
      Class<DoubleNode> class1 = DoubleNode.class;
      ObjectReader objectReader2 = objectMapper0.readerWithView(class1);
      objectReaderArray0[1] = objectReader2;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader1;
      objectReaderArray0[5] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)104;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (-1272), (-1175));
      dataFormatReaders_Match0.createParserWithMatch();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      objectReader1.with(deserializationFeature0);
      // Undeclared exception!
//      try { 
        objectReader2._detectBindAndReadValues(dataFormatReaders_Match0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.at("");
      MockFile mockFile0 = new MockFile("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s");
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader1;
      Class<DoubleNode> class1 = DoubleNode.class;
      ObjectReader objectReader2 = objectMapper0.readerWithView(class1);
      objectReaderArray0[1] = objectReader2;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader1;
      objectReaderArray0[5] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      dataFormatReaders0.findFormat(byteArray0, (-1272), (-1));
      byte[] byteArray1 = new byte[0];
//      try { 
        objectReader1.readValue(byteArray1, (int) 0, (-1859));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (byte[])\"\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      objectReader0.without(jsonParser_Feature0);
//      try { 
        objectReader0.readTree("7v>g|~${!bN");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected character ('v' (code 118)): Expected space separating root-level values
//         //  at [Source: (String)\"7v>g|~${!bN\"; line: 1, column: 3]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      objectReader0.isEnabled(mapperFeature0);
      objectReader0.without(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
//      try { 
        objectReader1.readTree("Root name '%s' does not match expected ('%s') for type %s");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'Root': was expecting ('true', 'false' or 'null')
//         //  at [Source: (String)\"Root name '%s' does not match expected ('%s') for type %s\"; line: 1, column: 5]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext defaultDeserializationContext0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot use FormatSchema of type ");
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      objectReader0.isEnabled(mapperFeature0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
//      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser((IOContext) null, (-1221), stringReader0, objectReader0, charsToNameCanonicalizer1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      objectReader0.createArrayNode();
      JsonParser jsonParser0 = jsonFactory0.createParser("eBIS3OfAh7,{`}A2:l");
      objectReader0._considerFilter(jsonParser0, false);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
//      try { 
        objectReader0.readValues(uRL0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
//      try { 
        objectReader0.readValues(uRL0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("Current token not FIELD_NAME (to contain expected root name '%s'), but %s");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      Class<CoreXMLDeserializers.Std>[] classArray0 = (Class<CoreXMLDeserializers.Std>[]) Array.newInstance(Class.class, 9);
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      classArray0[0] = class0;
      Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
      classArray0[1] = class1;
      Class<CoreXMLDeserializers.Std> class2 = CoreXMLDeserializers.Std.class;
      classArray0[2] = class2;
      Class<CoreXMLDeserializers.Std> class3 = CoreXMLDeserializers.Std.class;
      classArray0[3] = class3;
      Class<CoreXMLDeserializers.Std> class4 = CoreXMLDeserializers.Std.class;
      classArray0[4] = class4;
      Class<CoreXMLDeserializers.Std> class5 = CoreXMLDeserializers.Std.class;
      classArray0[5] = class5;
      Class<CoreXMLDeserializers.Std> class6 = CoreXMLDeserializers.Std.class;
      classArray0[6] = class6;
      Class<CoreXMLDeserializers.Std> class7 = CoreXMLDeserializers.Std.class;
      classArray0[7] = class7;
      Class<CoreXMLDeserializers.Std> class8 = CoreXMLDeserializers.Std.class;
      classArray0[8] = class8;
      objectMapper0.registerSubtypes(classArray0);
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectReader1, objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Short short0 = new Short((short)789);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      Class<Object> class9 = Object.class;
      Object object0 = objectReader1.treeToValue((TreeNode) valueNode0, class9);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.at("");
      MockFile mockFile0 = new MockFile("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s");
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader1;
      Class<DoubleNode> class1 = DoubleNode.class;
      ObjectReader objectReader2 = objectMapper0.readerWithView(class1);
      objectReaderArray0[1] = objectReader2;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader1;
      objectReaderArray0[5] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (-1272), (-1));
      // Undeclared exception!
//      try { 
        objectReader2._detectBindAndReadValues(dataFormatReaders_Match0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[7] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
//      try { 
        objectReader0.readValue(uRL0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<TextNode> class2 = TextNode.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class2);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) mapLikeType1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)40;
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      dataFormatReaders0.withType(mapLikeType0);
//      try { 
        objectReader0.readValue(byteArray0, (-1), (int)  (-73));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (byte[])\"\uFFFD(\u0000\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      // Undeclared exception!
//      try { 
        objectReader1.with((JsonFactory) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("z");
      objectMapper0.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
      String string0 = "";
      JsonFactory jsonFactory0 = new JsonFactory(objectReader1);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      jsonFactory3.createParser("1Zx 69.dzMY");
      DeserializationContext deserializationContext0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)3;
      objectReader0.withHandler((DeserializationProblemHandler) null);
      byteArray0[3] = (byte) (-1);
      // Undeclared exception!
//      try { 
        objectReader0._detectBindAndClose(byteArray0, 125, 2029);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      objectReader0.withAttribute(objectMapper0, objectMapper0);
      String string0 = "Cannot detect format from input, does not look like any of detectable formats ";
      // Undeclared exception!
//      try { 
        objectReader0.at("Cannot detect format from input, does not look like any of detectable formats ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid input: JSON Pointer expression must start with '/': \"Cannot detect format from input, does not look like any of detectable formats \"
//         //
//         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader0 = null;
//      try {
        objectReader0 = new ObjectReader((ObjectReader) null, tokenFilter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = true;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonParser_Feature0);
      ObjectReader objectReader0 = null;
//      try {
        objectReader0 = new ObjectReader((ObjectReader) null, jsonFactory4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
      Class<LongNode> class0 = LongNode.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) objectMapper0);
      objectMapper0.reader((InjectableValues) injectableValues_Std1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonFactory1.configure(jsonGenerator_Feature1, true);
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(objectMapper0);
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withStaticTyping();
      Vector<JavaType> vector0 = new Vector<JavaType>(0);
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("JSON");
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType2, typeBindings1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
//      try { 
        injectableValues_Std1.findInjectableValue(arrayType0, defaultDeserializationContext0, beanProperty_Bogus0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
//      try { 
        objectReader0._reportUndetectableSource(objectMapper0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot use source of type com.fasterxml.jackson.databind.ObjectMapper with format auto-detection: must be byte- not char-based
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      objectReader0.createArrayNode();
      JsonParser jsonParser0 = jsonFactory0.createParser("eBIS3OfAh7,{`}A2:l");
//      try { 
        objectReader0.readValue(jsonParser0, (JavaType) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'eBIS3OfAh7': was expecting ('true', 'false' or 'null')
//         //  at [Source: (String)\"eBIS3OfAh7,{`}A2:l\"; line: 1, column: 11]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("Current token not FIELD_NAME (to contain expected root name '%s'), but %s");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      objectReader0.createArrayNode();
      Class<CoreXMLDeserializers.Std>[] classArray0 = (Class<CoreXMLDeserializers.Std>[]) Array.newInstance(Class.class, 9);
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      classArray0[0] = class0;
      Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
      classArray0[1] = class1;
      Class<CoreXMLDeserializers.Std> class2 = CoreXMLDeserializers.Std.class;
      classArray0[2] = class2;
      Class<CoreXMLDeserializers.Std> class3 = CoreXMLDeserializers.Std.class;
      classArray0[3] = class3;
      Class<CoreXMLDeserializers.Std> class4 = CoreXMLDeserializers.Std.class;
      classArray0[4] = class4;
      Class<CoreXMLDeserializers.Std> class5 = CoreXMLDeserializers.Std.class;
      classArray0[5] = class5;
      Class<CoreXMLDeserializers.Std> class6 = CoreXMLDeserializers.Std.class;
      classArray0[6] = class6;
      Class<CoreXMLDeserializers.Std> class7 = CoreXMLDeserializers.Std.class;
      classArray0[7] = class7;
      Class<CoreXMLDeserializers.Std> class8 = CoreXMLDeserializers.Std.class;
      classArray0[8] = class8;
      objectMapper0.registerSubtypes(classArray0);
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute((Object) null, class3);
      ObjectReader objectReader1 = objectReader0.with(contextAttributes1);
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[7] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)18;
//      try { 
        objectReader0.readValue(byteArray0, (int)  (-1), (int)  (-1));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No content to map due to end-of-input
//         //  at [Source: (byte[])\"\uFFFD\u0000X\uFFFD\uFFFD\u0012\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.withType((JavaType) null);
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.ESCAPE_NON_ASCII;
      ObjectReader objectReader2 = objectReader1.with((FormatFeature) jsonWriteFeature0);
      assertNotSame(objectReader2, objectReader1);
      
      ObjectReader objectReader3 = objectReader0.at("");
      MockFile mockFile0 = new MockFile("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s");
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader3;
      Class<DoubleNode> class1 = DoubleNode.class;
      ObjectReader objectReader4 = objectMapper0.readerWithView(class1);
      objectReaderArray0[1] = objectReader4;
      objectReaderArray0[2] = objectReader3;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader3;
      objectReaderArray0[5] = objectReader3;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      objectReader3.getAttributes();
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      objectReader0.createArrayNode();
      String string0 = "eBIS3OfAh7,{`}A2:l";
      JsonParser jsonParser0 = jsonFactory0.createParser("eBIS3OfAh7,{`}A2:l");
//      try { 
        objectReader0.readValue(jsonParser0, (JavaType) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized token 'eBIS3OfAh7': was expecting ('true', 'false' or 'null')
//         //  at [Source: (String)\"eBIS3OfAh7,{`}A2:l\"; line: 1, column: 11]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile.createTempFile("JSON", "JSON");
//      try { 
        objectReader0._inputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls((Object) null);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext0);
      objectMapper0.readerForUpdating(jsonGenerator_Feature0);
      objectMapper0.setSerializerProvider(defaultSerializerProvider0);
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream("g5a|7v='[");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<TextNode> class2 = TextNode.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class2);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) mapLikeType1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      byte byte0 = (byte)40;
      byteArray0[1] = (byte)40;
      byte byte1 = (byte)46;
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType(mapLikeType0);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0, 0, 1631);
      // Undeclared exception!
//      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[7] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature1, deserializationFeatureArray0);
      assertSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      objectReader0.createArrayNode();
      jsonFactory0.createParser("eBIS3OfAh7,{`}A2:l");
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      // Undeclared exception!
//      try { 
        objectMapper0.reader(deserializationFeature0, (DeserializationFeature[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      objectReader0.at("");
      MockFile mockFile0 = new MockFile("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s");
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "FOOw(:xu");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal mode \"FOOw(:xu\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
//      try { 
        MockURI.URI("", "", "", "");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Expected scheme name at index 0: ://#
//         //
//         verifyException("java.net.URI$Parser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      TreeSet<ObjectReader> treeSet0 = new TreeSet<ObjectReader>();
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>(treeSet0);
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[2];
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      // Undeclared exception!
//      try { 
        objectMapper0.readerForUpdating(defaultSerializerProvider_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 101, false);
      uTF8JsonGenerator0.getSchema();
      ObjectReader objectReader0 = objectMapper1.reader((FormatSchema) null);
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory0);
      URI uRI0 = MockURI.create("JSON");
      // Undeclared exception!
//      try { 
        MockURI.toURL(uRI0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI is not absolute
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(objectMapper1, objectMapper1);
      contextAttributes1.withoutSharedAttribute(objectMapper1);
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes1);
      InjectableValues injectableValues0 = objectReader0.getInjectableValues();
      assertNull(injectableValues0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      Class<Stack> class0 = Stack.class;
      typeFactory1.constructType((Type) class0, (TypeBindings) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(decimalNode0);
      CollectionType collectionType2 = collectionType1.withTypeHandler((Object) null);
      // Undeclared exception!
//      try { 
        objectReader0.forType((JavaType) collectionType2);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.node.DecimalNode cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
//      }
  }
}
