/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 09:42:25 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriterBasedJsonGenerator_ESTest extends WriterBasedJsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 99, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)62);
      writerBasedJsonGenerator0.flush();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      writerBasedJsonGenerator0.writeBinaryField("\"HxF05MMvUs&", byteArray0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeFieldName("\"HxF05MMvUs&");
      writerBasedJsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1399, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw("?#xSO|");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 536860920, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      writerBasedJsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1115, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      iOContext0.withEncoding(jsonEncoding1);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeBinaryField("l6epb<L@j.:9", byteArray0);
      writerBasedJsonGenerator0.writeNumber(" does not support schema of type '");
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      SerializedString serializedString0 = new SerializedString("write a number");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 'T';
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      int int0 = 38;
      StringWriter stringWriter0 = new StringWriter(38);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      iOContext0.allocReadIOBuffer(1);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 2;
      writerBasedJsonGenerator0.writeNumber((short)62);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) (short) (-1338));
      BigInteger bigInteger0 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = '8';
      charArray0[2] = 'r';
      charArray0[3] = 'Q';
      charArray0[4] = '&';
      charArray0[5] = ')';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 38);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(38);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      short short0 = (short) (-1338);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(1);
      writerBasedJsonGenerator0._maximumNonEscapedChar = 2;
      writerBasedJsonGenerator0.writeNumber((short)62);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) (short) (-1338));
      writerBasedJsonGenerator0.writeBinaryField("\"HxF05MvUs", byteArray0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber(3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 99, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeBinaryField("oS", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(99);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNumber((short)4255);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeStartArray(107);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)1261);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      writerBasedJsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      String string0 = ",|xV";
      writerBasedJsonGenerator0.writeBinaryField(",|xV", byteArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2264, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._outputEnd = 3;
      String string0 = "";
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeObjectField("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-3591);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      String string0 = "*x[[bu,6-Lx;;x<j\"";
      writerBasedJsonGenerator0.writeNumberField("*x[[bu,6-Lx;;x<j\"", bigDecimal0);
      writerBasedJsonGenerator0.writeNumber("");
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1413, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._outputEnd = 3;
      String string0 = "";
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeObjectField("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)33);
      stringWriter0.write("ny.&l");
      writerBasedJsonGenerator0.writeStartArray(48);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeBinaryField("l6epb<L@j.:9", byteArray0);
      writerBasedJsonGenerator0.writeNumber("start an array");
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw("start an array", 49, 1274);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding((JsonEncoding) null);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1115, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumberField("2ab<OkWxSA`JDdO6CWN", (long) (short) (-1338));
      writerBasedJsonGenerator0.writeNumber((short)33);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      iOContext0.withEncoding(jsonEncoding1);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeBinaryField("l6epb<L@j.:9", byteArray0);
      writerBasedJsonGenerator0.writeNumber(" does not support schema of type '");
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      SerializedString serializedString0 = new SerializedString("write a number");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.flush();
//      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite(";#I+{-';(");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not ;#I+{-';(, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1115, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumberField("2ab<OkWxSA`JDdO6CWN", (long) (short) (-1338));
      writerBasedJsonGenerator0.writeNumber((short)33);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      iOContext0.withEncoding(jsonEncoding1);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeBinaryField("l6epb<L@j.:9", byteArray0);
      writerBasedJsonGenerator0.writeNumber(" does not support schema of type '");
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.writeBoolean(false);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      SerializedString serializedString0 = new SerializedString("write a number");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.flush();
//      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      SerializedString serializedString0 = new SerializedString("Failed to decode VALUE_STRING as base64 (");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short)33);
      stringWriter0.write("ny.&l");
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeBinaryField("l6epb<L@j.:9", byteArray0);
      writerBasedJsonGenerator0.writeNumber("start an array");
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber(1.0F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 99, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)62);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) (short) (-1338));
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      writerBasedJsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      writerBasedJsonGenerator0.writeBinaryField("\"HxF05MMvUs&", byteArray0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeFieldName("\"HxF05MMvUs&");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 1359, 2786);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 99, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0._maximumNonEscapedChar = 2;
      writerBasedJsonGenerator0.writeNumber((short)62);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) (short) (-1338));
      writerBasedJsonGenerator0.writeBinaryField("\"HxF05MMvUs&", byteArray0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeFieldName("\"HxF05MMvUs&");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, serializedString0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)7;
      serializedString1.appendQuotedUTF8(byteArray0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      IOContext iOContext2 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
      writerBasedJsonGenerator0.writeNumber(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext3 = new IOContext(bufferRecycler1, bufferedInputStream0, true);
      StringReader stringReader0 = new StringReader(">*R'>{0c@<ZOpjO~L");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext3, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
//      try { 
        readerBasedJsonParser0.getDecimalValue();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current token (null) not numeric, can not use numeric value accessors
//         //  at [Source: java.io.BufferedInputStream@0000000005; line: 1, column: 1]
//         //
//         verifyException("com.fasterxml.jackson.core.JsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1399, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 47, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)1307);
      writerBasedJsonGenerator0.writeNumber((short)1307);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0.writeStartObject();
//      try { 
        writerBasedJsonGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a null, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec1 = null;
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)33);
      writerBasedJsonGenerator0.writeStartArray(3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) (short) (-1338));
      writerBasedJsonGenerator0.writeBinaryField(",Pr:e", byteArray0);
      writerBasedJsonGenerator0.writeString((String) null);
      writerBasedJsonGenerator0.writeString((char[]) null, 9, 0);
      writerBasedJsonGenerator0.writeNumber(2);
      writerBasedJsonGenerator0.writeStartObject();
//      try { 
        writerBasedJsonGenerator0.writeNumber(2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1862, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber(3681.12017021);
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)66;
      writerBasedJsonGenerator0.writeBinaryField("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", byteArray0);
      writerBasedJsonGenerator0.writeString(" bytes (out of ");
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = '&';
      charArray0[2] = '|';
      writerBasedJsonGenerator0.writeString(charArray0, 819, (-1183));
      writerBasedJsonGenerator0.writeNumber(1862);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = 'x';
      stringWriter0.write(charArray0);
      writerBasedJsonGenerator0.writeNumber((short)33);
      writerBasedJsonGenerator0.writeStartArray(48);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      writerBasedJsonGenerator0.writeStartArray();
      IOContext iOContext1 = new IOContext((BufferRecycler) null, iOContext0, true);
      char[] charArray1 = new char[2];
      charArray1[0] = '+';
      charArray1[1] = 'k';
      writerBasedJsonGenerator0.writeRawValue(charArray1, 0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 48);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 7998);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter(14);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 99, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)62);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) (short) (-1338));
      writerBasedJsonGenerator0.writeBinaryField("\"HxF05MMvUs&", byteArray0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeFieldName("\"HxF05MMvUs&");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0._rootValueSeparator = null;
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeStringField("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)55;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 7995, 1024);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeString("AipeO>{[Mn&=V>a");
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'g';
      charArray0[2] = 'T';
      charArray0[3] = 'g';
      charArray0[4] = '@';
      charArray0[5] = '>';
      charArray0[6] = 'z';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(564);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter3, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      filteringGeneratorDelegate0.getCodec();
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '\u0014';
      charArray0[2] = '\u0014';
      charArray0[3] = '\u0014';
      writerBasedJsonGenerator0._outputBuffer = charArray0;
      writerBasedJsonGenerator0.writeString(charArray0, 3, (-487));
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((-487));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(564);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter3, false, false);
      filteringGeneratorDelegate0.getCodec();
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '\u0014';
      charArray0[2] = '\u0014';
      charArray0[3] = '\u0014';
      writerBasedJsonGenerator0._outputBuffer = charArray0;
      char[] charArray1 = new char[8];
      charArray1[0] = '\u0014';
      charArray1[1] = '\u0014';
      charArray1[2] = '\u0014';
      BigDecimal bigDecimal0 = new BigDecimal(1678);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.util.BufferRecycler");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 7974, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.appendQuoted(charArray0, 2233);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(56320);
      writerBasedJsonGenerator1.writeNumber((BigDecimal) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
//      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext1, 56319, (ObjectCodec) null, (Writer) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((float) 2);
      SerializedString serializedString0 = new SerializedString("+ckZ[0:b+s1s");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      IOContext iOContext3 = new IOContext(bufferRecycler0, "+ckZ[0:b+s1s", true);
      iOContext3.allocWriteEncodingBuffer();
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      writerBasedJsonGenerator0._outputBuffer = charArray0;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((short)33);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      String string0 = "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator";
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(564);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter3, false, false);
      filteringGeneratorDelegate0.getCodec();
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = 'P';
      charArray0[5] = '%';
      charArray0[6] = '%';
      charArray0[7] = '%';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 536868246);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw((String) null, 4, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1024, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeRaw('');
      writerBasedJsonGenerator0.writeBoolean(true);
      boolean boolean1 = false;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writeFieldName((String) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(182);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeStartObject();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "NdZ73";
      writerBasedJsonGenerator0.writeBinaryField("NdZ73", byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
//      try { 
        writerBasedJsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      StringWriter stringWriter1 = stringWriter0.append('L');
      stringWriter1.write("$9QM>x[");
      StringWriter stringWriter2 = stringWriter1.append('L');
      stringWriter2.append('L');
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      StringWriter stringWriter3 = stringWriter0.append('I');
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator1.writeNumber(101);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw('I');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeStringField("<aG'tCQ~BsVE,18p~", "<aG'tCQ~BsVE,18p~");
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = 'G';
      charArray0[2] = '|';
      writerBasedJsonGenerator0.writeNumber((short)10);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 2);
      byte byte0 = (byte)115;
      writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)115);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext0, false);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext3, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(83.0F);
      iOContext0.constructTextBuffer();
      iOContext1.allocWriteEncodingBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = '9';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, (-3821), 1325);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(1028);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1830, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((short)109);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      Writer writer0 = null;
      String string0 = "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator";
      EvoSuiteFile evoSuiteFile0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      char char0 = '<';
      writerBasedJsonGenerator0.writeNumber((short)466);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)33);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.util.BufferRecycler");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 7974, (ObjectCodec) null, (Writer) null);
      char[] charArray1 = new char[5];
      charArray1[0] = '';
      charArray1[1] = '^';
      charArray1[2] = 'b';
      charArray1[3] = '9';
      charArray1[4] = '';
      writerBasedJsonGenerator1.writeString(charArray1, 3, 2);
      BigDecimal bigDecimal0 = new BigDecimal(57343);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      SerializableString serializableString0 = writerBasedJsonGenerator1._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator1.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      char char0 = '|';
      writerBasedJsonGenerator0.writeStringField("<aG'tCQ~BsVE,18p~", "<aG'tCQ~BsVE,18p~");
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = '|';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRawValue(charArray0, 2595, 65);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      writerBasedJsonGenerator0.writeBinaryField(" ENfH(\"W6", byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate0.getCodec();
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '%';
      charArray0[4] = '[';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      writerBasedJsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)33);
      writerBasedJsonGenerator0.writeStartArray(48);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) (short)33);
      writerBasedJsonGenerator0.writeBinaryField(",Pr:e", byteArray0);
      writerBasedJsonGenerator0.writeString("lAT=#VBT|uBZL=~wF");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw("2L-)cq}5.W>u/G#", (-685), 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((short)7);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)33);
      writerBasedJsonGenerator0.flush();
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = '%';
      charArray0[2] = '`';
      charArray0[3] = 'W';
      charArray0[4] = 'M';
      charArray0[5] = ' ';
      charArray0[6] = 'W';
      charArray0[7] = 'A';
      charArray0[8] = '';
      writerBasedJsonGenerator0.writeRaw(charArray0, 1, 1);
      BigDecimal bigDecimal0 = null;
//      try {
        bigDecimal0 = new BigDecimal(charArray0);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext3, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(83.0F);
      iOContext0.constructTextBuffer();
      iOContext1.allocWriteEncodingBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 607, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeNumber((short)33);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator1.writeNumber((-1923.5318662));
      writerBasedJsonGenerator1.writeNumberField("was expecting double-quote to start field name", 0.0F);
      writerBasedJsonGenerator0.writeNumber(57343);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
//      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext3, (-2497), (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.util.BufferRecycler");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeStartObject();
//      try { 
        writerBasedJsonGenerator0.writeNumber((double) 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter((byte)63);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1940), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((long) 3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(182);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3692, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)1307);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)1307);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeBinaryField("-u dCaQiy{", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(54);
//      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.constructTextBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      iOContext0.allocWriteEncodingBuffer(57343);
      writerBasedJsonGenerator0.writeBinaryField("3J;2&)Y:8zLLz.r_", byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      writerBasedJsonGenerator0.writeStartArray();
      iOContext1.withEncoding(jsonEncoding1);
      BigDecimal bigDecimal0 = new BigDecimal(9);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("PX]OB4|hk#jRv");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.allocReadIOBuffer(19);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(695);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder0);
      StringWriter stringWriter2 = stringWriter1.append('q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeNumber((short)357);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)357);
      writerBasedJsonGenerator0.writeRaw("7{%sJR1pPd!Sxt");
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeStartObject();
//      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 2676, 49);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a binary value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext3, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(83.0F);
      SerializedString serializedString0 = new SerializedString("+ckZ[0:b+s1s");
      iOContext1.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short) (-2662));
      writerBasedJsonGenerator0.writeNumber(2980.293158405373);
      writerBasedJsonGenerator0.writeStartObject();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter0);
//      try { 
        writerBasedJsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("PX]OB4|hk#jRv");
      String string0 = ":MK-h=q@0Q?==4>RLeR";
      writerBasedJsonGenerator0.writeString(":MK-h=q@0Q?==4>RLeR");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 115, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      writerBasedJsonGenerator0.writeStringField(" bytes (out of ", "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[5] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-42);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0._flushBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[2] = 'm';
      charArray0[3] = 'z';
      charArray0[6] = '/';
      charArray0[5] = '/';
      charArray0[6] = '/';
      writerBasedJsonGenerator0.writeStringField("XReN", (String) null);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 472);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.allocReadIOBuffer(19);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = new SerializedString("L");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString("gZcKACA$:4G4#\"%");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(83.0F);
      SerializedString serializedString0 = new SerializedString("+ckZ[0:b+s1s");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "L");
      stringWriter1.append('r');
      stringWriter0.append('}');
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding2);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext3, 102, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-3663));
      iOContext3.allocBase64Buffer();
      writerBasedJsonGenerator1.writeRaw('!');
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-42);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0._flushBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[2] = 'm';
      charArray0[3] = 'z';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = '/';
      writerBasedJsonGenerator0.writeStringField("XReN", (String) null);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 472);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      String string0 = "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator";
      String string1 = "com.fasterxml.jackson.core.util.BufferRecycler";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.util.BufferRecycler");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      writerBasedJsonGenerator0.writeBinaryField("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(56319);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      int int0 = 182;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(182);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3692, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)1307);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)1307);
      writerBasedJsonGenerator0.flush();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeBinaryField("WS-U&vez*", byteArray0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.allocTokenBuffer(1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding2);
      writerBasedJsonGenerator0.writeStartArray();
      iOContext0.withEncoding(jsonEncoding1);
      writerBasedJsonGenerator0.writeBinaryField("WS-U&vez*", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-1718));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
//      try { 
        writerBasedJsonGenerator0.writeFieldName("WS-U&vez*");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeBinaryField("3J;2&)Y:8zLLz.r_", byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      writerBasedJsonGenerator0.writeStartArray();
      iOContext1.withEncoding(jsonEncoding1);
      writerBasedJsonGenerator0.writeBinaryField("3J;2&)Y:8zLLz.r_", byteArray0);
      writerBasedJsonGenerator0.writeNumber("start an array");
      writerBasedJsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      writerBasedJsonGenerator0._verifyPrettyValueWrite("PX]OB4|hk#jRv");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writePPFieldName("start an array", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(182);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3692, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeStartObject();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = ":IZkROz:^2kEg";
//      try { 
        writerBasedJsonGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      StringWriter stringWriter2 = stringWriter1.append('U');
      StringWriter stringWriter3 = stringWriter2.append('\"');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 15, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.writeNumber(25);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = true;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeBinaryField("3J;2&)Y:8zLLz.r_", byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      writerBasedJsonGenerator0.writeStartArray();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      writerBasedJsonGenerator0.writeBinaryField("3J;2&)Y:8zLLz.r_", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(9);
      iOContext2.withEncoding(jsonEncoding1);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("PX]OB4|hk#jRv");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(182);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3692, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeStartObject();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = ":IZkROz:^2kEg";
//      try { 
        writerBasedJsonGenerator0.writeNumber((short)1932);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      File file0 = MockFile.createTempFile("Null String illegal for SerializedString", "c>edYZ@/.k");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 174, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("p*Yg</H:s'BkG3");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 904, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocReadIOBuffer(20);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '<';
      charArray0[2] = ')';
      charArray0[3] = 'b';
      charArray0[4] = '{';
      charArray0[5] = '^';
      charArray0[6] = '0';
      charArray0[7] = 't';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 20, 20);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 7);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('F');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (byte)100, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeNumber((-3661));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "No FormatFeatures defined for parser of type ", false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-505), (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.allocReadIOBuffer(19);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = new SerializedString("L");
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = 't';
      charArray0[2] = 'n';
      charArray0[3] = 'H';
      charArray0[4] = '3';
      charArray0[5] = ']';
      charArray0[6] = '~';
      serializedString0.appendQuoted(charArray0, 1847);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)33);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) (short)33);
      writerBasedJsonGenerator0.writeBinaryField(",Pr:e", byteArray0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      BigDecimal bigDecimal0 = new BigDecimal((-562));
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.writeNumberField("", 302.2271F);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString1, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, serializedString0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator1.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      int int0 = 182;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(182);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3692, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)1307);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)1307);
      writerBasedJsonGenerator0.flush();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeBinaryField("WS-U&vez*", byteArray0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding2);
      writerBasedJsonGenerator0.writeStartArray();
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      writerBasedJsonGenerator0.writeBinaryField("WS-U&vez*", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-1718));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((short)7);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.allocReadIOBuffer(19);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = new SerializedString("L");
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">SJkz^bA", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputBuffered();
//      try { 
        writerBasedJsonGenerator1.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._cfgUnqNames = false;
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      writerBasedJsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)33);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) (short)33);
      writerBasedJsonGenerator0.writeBinaryField(",Pr:e", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getOutputBuffered();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, (-377), 2048);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeBinaryField("3J;2&)Y:8zLLz.r_", byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      writerBasedJsonGenerator0.writeStartArray();
      iOContext1.withEncoding(jsonEncoding1);
      writerBasedJsonGenerator0.writeBinaryField("3J;2&)Y:8zLLz.r_", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(9);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger1);
      writerBasedJsonGenerator0.writeNumber(bigDecimal1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'D';
      charArray0[2] = 'd';
      charArray0[3] = ']';
      charArray0[4] = 'F';
      charArray0[5] = '#';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2230, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1343, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(33);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      iOContext1.allocTokenBuffer((-1296));
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeFieldName("write a null");
      writerBasedJsonGenerator0._writeFieldName("I,;^$~0TdA4c&!r5T5", true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">SJkz^bA", true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ">SJkz^bA");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1100, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte byte0 = (byte) (-55);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byte[] byteArray1 = iOContext1.allocReadIOBuffer(2);
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = new SerializedString("L");
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 125, (ObjectCodec) null, (Writer) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray1, (byte) (-55), 101);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-55), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0._flushBuffer();
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[0] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 1342);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw("Vd5zyo-nZ_#%`M", 0, 57343);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-55);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)54;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 48, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 14, (byte) (-55));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">SJkz^bA", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(false);
      Object object0 = new Object();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      writerBasedJsonGenerator0.disable(jsonGenerator_Feature0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext3 = new IOContext(bufferRecycler0, ">SJkz^bA", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)93;
      writerBasedJsonGenerator0.writeBinaryField("write a string", byteArray0);
      IOContext iOContext4 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext4.withEncoding(jsonEncoding0);
      String string0 = "write a null";
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite(">SJkz^bA");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1307), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)2;
      writerBasedJsonGenerator0.writeBinaryField("J", byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      iOContext0.withEncoding(jsonEncoding0);
      writerBasedJsonGenerator0.writeString((char[]) null, (-1404), (-229));
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 567, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      writerBasedJsonGenerator0.writeBinaryField("start an object", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)90);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 56, (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)2;
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
//      try { 
        writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("A\rSU\"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      int int0 = (-285);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-285), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      writerBasedJsonGenerator0.writeBinaryField("A\rSU\"", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-383));
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (byte)93, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.withEncoding((JsonEncoding) null);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3692, (ObjectCodec) null, stringWriter0);
      short short0 = (short)1306;
      writerBasedJsonGenerator0.writeNumber((short)1306);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)1306);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0.writeStartObject();
      Base64Variant base64Variant0 = null;
      InputStream inputStream0 = null;
//      try { 
        writerBasedJsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)9);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) 3);
      writerBasedJsonGenerator0.writeStartObject();
      InputStream inputStream0 = null;
      int int0 = 695;
//      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 695, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a binary value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      BigInteger bigInteger0 = BigInteger.ZERO;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputBuffered();
//      try { 
        writerBasedJsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1307), (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)2;
      writerBasedJsonGenerator0.writeBinaryField("J", byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "", false);
      iOContext1.withEncoding(jsonEncoding0);
      writerBasedJsonGenerator0.writeString((char[]) null, (-1404), (-229));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler2, object0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)2;
      writerBasedJsonGenerator0.writeBinaryField("QqmzBoSz}PP^", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)2);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)50;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._flushBuffer();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+;Yb*d<|r)8%=");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      byte byte0 = (byte)93;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-287), (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      writerBasedJsonGenerator0.writeBinaryField("+;Yb*d<|r)8%=", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-383));
      IOContext iOContext2 = null;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0._flushBuffer();
      char[] charArray0 = new char[0];
      writerBasedJsonGenerator0.writeString(charArray0, (int) (byte)54, (int) (byte) (-55));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">SJkz^bA", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator1.writeBinaryField(">SJkz^bA", byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      charArray0[6] = '[';
      writerBasedJsonGenerator1.writeString(charArray0, 119, (-798));
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator1._writePPFieldName(">SJkz^bA", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(1765L);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-55);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0._flushBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[2] = 'm';
      charArray0[3] = 'z';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = '/';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 472);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      assertEquals(58, writerBasedJsonGenerator0.getOutputBuffered());
      
      writerBasedJsonGenerator0.writeRaw("Unexpected end-of-String in base64 content", 1, 0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler2, object0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)2;
      writerBasedJsonGenerator0.writeBinaryField("QqmzBoSz}PP^", byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)2);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 2, (-1313));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.allocReadIOBuffer(0);
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 2, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext3 = new IOContext(bufferRecycler1, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext3, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator1.writeNumber((short)3985);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      byte byte0 = (byte)2;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 56, (ObjectCodec) null, (Writer) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)2;
      writerBasedJsonGenerator0.writeBinaryField("", byteArray0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writePPFieldName("", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 182;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(1153);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 182, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)1307);
      byte[] byteArray0 = iOContext2.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short) (-335));
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0.writeStartObject();
      Base64Variant base64Variant0 = null;
      InputStream inputStream0 = null;
//      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 1, 123);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a binary value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3591), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)85;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, (byte)85, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = new SerializedString("write a string");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">SJkz^bA", false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(false);
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext3 = new IOContext(bufferRecycler0, ">SJkz^bA", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)93;
      writerBasedJsonGenerator0.writeBinaryField("write a string", byteArray0);
      IOContext iOContext4 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext4.withEncoding(jsonEncoding0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writePPFieldName("write a null", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-55), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0._flushBuffer();
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = '/';
      charArray0[2] = '/';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+;Yb*d<|r)8%=");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 98, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeStartArray();
      SerializedString serializedString0 = new SerializedString("+;Yb*d<|r)8%=");
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 's';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      charArray0[7] = 'j';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 43, 1800);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 43
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MoC.^P`B_phS\"{Q<");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 48, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (-1338));
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)33);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((double) (short)33);
      writerBasedJsonGenerator0.writeBinaryField(",Pr:e", byteArray0);
      writerBasedJsonGenerator0.writeString("lAT=#VBT|uBZL=~wF");
      writerBasedJsonGenerator0._verifyValueWrite("");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">SJkz^bA", false);
      ObjectCodec objectCodec0 = null;
      Writer writer0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream0, (byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.allocReadIOBuffer(123);
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-55), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0._flushBuffer();
      char[] charArray0 = new char[4];
      writerBasedJsonGenerator0.close();
      charArray0[0] = 'z';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writePPFieldName("}", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)85;
      writerBasedJsonGenerator0.writeBinaryField("write a string", byteArray0);
      iOContext2.withEncoding(jsonEncoding0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writePPFieldName("", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = new SerializedString("L");
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 2, 1734);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      writerBasedJsonGenerator0.writeString(charArray0, 16, 0);
      assertEquals(11, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+;Yb*d<|r)8%=");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('j');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 98, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeStartArray();
      SerializedString serializedString0 = new SerializedString("+;Yb*d<|r)8%=");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      Base64Variant base64Variant0 = null;
      InputStream inputStream0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 661, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-60);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byte byte0 = (byte)52;
      byteArray0[8] = (byte)52;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)34, (-1878));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+;Yb*d<|r)8%=");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('j');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter1);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      readerBasedJsonParser0._getText2(jsonToken0);
      writerBasedJsonGenerator0._writeFieldName("+;Yb*d<|r)8%=", false);
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      assertEquals("j", stringWriter0.toString());
      assertEquals(15, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte) (-55), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0._flushBuffer();
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 1342);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeBoolean(true);
      Base64Variant base64Variant0 = null;
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(2047);
      StringWriter stringWriter1 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator((IOContext) null, 2, (ObjectCodec) null, stringWriter1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, (Writer) null);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((short)3985);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-2925), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      assertEquals("", stringWriter0.toString());
      
//      try { 
        writerBasedJsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(182);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2278), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)1307);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)1307);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0.writeStartObject();
      Base64Variant base64Variant0 = null;
      InputStream inputStream0 = null;
//      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (short)1307, (int) (short)1307);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a binary value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)52;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (byte)0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter((byte)12);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1037, (ObjectCodec) null, stringWriter0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0._flushBuffer();
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '!';
      charArray0[3] = 'X';
      charArray0[4] = 'z';
      writerBasedJsonGenerator0.writeString(charArray0, 0, (int) (byte)0);
      assertEquals(3, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.allocReadIOBuffer(0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 78, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(1295.9126F);
      String string0 = "L";
      SerializedString serializedString0 = new SerializedString("L");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.getOutputTarget();
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.flush();
      boolean boolean0 = false;
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "_:Yk", false, '.', (-555));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 4)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(182);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2278), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short)1307);
      writerBasedJsonGenerator0.writeNumber((short)1307);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0.writeStartObject();
      Base64Variant base64Variant0 = null;
      ObjectInputStream objectInputStream0 = null;
//      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('p');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(1751L);
      assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      assertEquals(56, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw("Vd5zo-nZ_#%`M", 0, 904);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2046), (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeStartObject();
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBinary((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 108, (ObjectCodec) null, (Writer) null);
      boolean boolean0 = false;
      writerBasedJsonGenerator0.writeBoolean(false);
      Base64Variant base64Variant0 = null;
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FileInputStream", e);
//      }
  }
}
