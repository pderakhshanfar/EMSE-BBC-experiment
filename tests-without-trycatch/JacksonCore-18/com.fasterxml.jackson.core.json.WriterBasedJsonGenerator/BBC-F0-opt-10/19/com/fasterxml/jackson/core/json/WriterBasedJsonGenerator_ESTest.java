/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 09:42:41 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriterBasedJsonGenerator_ESTest extends WriterBasedJsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#(6Bv");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)jsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      byte[] byteArray0 = new byte[3];
      jsonGenerator0.writeRaw('O');
      byteArray0[0] = (byte)13;
      byteArray0[2] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator1._writeFieldName("#(6Bv", false);
      writerBasedJsonGenerator0._writeFieldName(defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR, true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1125), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#6Bv");
      writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      writerBasedJsonGenerator0.getCharacterEscapes();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      writerBasedJsonGenerator0.writeRaw('O');
      writerBasedJsonGenerator0.writeStartArray();
      BigDecimal bigDecimal0 = BigDecimal.valueOf((long) 3, 44);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator1.writeRawValue("zd=h*A{1");
      writerBasedJsonGenerator1.writeNumber(3452);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator1._verifyPrettyValueWrite("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 35;
      writerBasedJsonGenerator0.writeString("0jlI=mV^*L7O+6DmZ");
      short short0 = (short)113;
      writerBasedJsonGenerator0.writeNumber((short)113);
      writerBasedJsonGenerator0.canOmitFields();
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0._writeFieldName("0jlI=mV^*L7O+6DmZ", true);
      writerBasedJsonGenerator0.writeRaw("was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");
      writerBasedJsonGenerator0.writeNumber(2);
//      try { 
        writerBasedJsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      String string0 = "Eo)z83j\"";
      writerBasedJsonGenerator0.writeBooleanField("Eo)z83j\"", true);
      writerBasedJsonGenerator0._flushBuffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      SerializedString serializedString0 = new SerializedString("H%]Veomc+");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeBooleanField("Eo)z83j\"", true);
      writerBasedJsonGenerator0._flushBuffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[2] = (byte)82;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (byte) (-71), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-71));
//      try { 
        writerBasedJsonGenerator0.writeBooleanField("Eo)z83j\"", false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FkBvtEE2H,@)3D}_");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      byte[] byteArray0 = new byte[3];
      writerBasedJsonGenerator0.getCharacterEscapes();
      writerBasedJsonGenerator1.setCharacterEscapes((CharacterEscapes) null);
      writerBasedJsonGenerator1.writeRaw('O');
      byteArray0[0] = (byte) (-1);
      writerBasedJsonGenerator1._writeFieldName("", false);
      writerBasedJsonGenerator0.writeNumber(56319);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator1.writeNumber((short)26465);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext2, (-1053), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator2.writeNumber(1);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeStartArray();
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dz!u~");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#(6Bv");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("(js>SUR;9brkz\f");
      jsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      jsonGenerator0.writeFieldName("");
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.writeNumber((short) (byte)13);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber("-f]SCcy,m/");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 1;
      writerBasedJsonGenerator0.writeBooleanField("Eo)z83j\"", true);
      writerBasedJsonGenerator0._flushBuffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)35;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 55, (byte)35);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      System.setCurrentTimeMillis(118L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.flush();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-48);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 123, (byte) (-109));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      // Undeclared exception!
      writerBasedJsonGenerator0.writeBooleanField("Eo)z83j\"", true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dz!u~");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#(6Bv");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      String string0 = "";
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("(js>SUR;9brkz\f");
      jsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      byte[] byteArray0 = new byte[3];
      jsonGenerator0.writeRaw('O');
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      writerBasedJsonGenerator0.writeBinaryField("T", byteArray0);
//      try { 
        jsonGenerator0.writeBooleanField("", true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FkBvtEE2H,@)3D}_");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      iOContext0.allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#6Bv");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      byte[] byteArray0 = new byte[3];
      jsonGenerator0.writeNull();
      jsonGenerator0.writeRaw('O');
      byteArray0[0] = (byte) (-1);
      SerializedString serializedString0 = null;
//      try {
        serializedString0 = new SerializedString((String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Null String illegal for SerializedString
//         //
//         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString1 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      serializedString1.asQuotedUTF8();
      iOContext0.withEncoding(jsonEncoding0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      writerBasedJsonGenerator1.writeStartArray();
      BigDecimal bigDecimal0 = BigDecimal.valueOf(0L, (-184));
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1125), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#6Bv");
      writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      writerBasedJsonGenerator0.getCharacterEscapes();
      writerBasedJsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      writerBasedJsonGenerator0.writeRaw('O');
      writerBasedJsonGenerator0.writeStartArray();
      BigDecimal bigDecimal0 = BigDecimal.valueOf((long) 3, 44);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeBinaryField("+jIXj_S\"I;>l", byteArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FkBvtEE2H,@)3D}_");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeString("FkBvtEE2H,@)3D}_");
      writerBasedJsonGenerator0.writeNumber((short)1875);
      writerBasedJsonGenerator0.canOmitFields();
      writerBasedJsonGenerator0._writeFieldName("(XKq>'I3DvoZ~,", true);
      writerBasedJsonGenerator0.writeNumber((short)113);
      writerBasedJsonGenerator0.writeNumber(44);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.writeNumber((long) (short)1875);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((-1317.81288988243));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNumber((short)0);
      writerBasedJsonGenerator0.canOmitFields();
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeNumber((short)0);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      int int0 = (-1141);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      int int1 = 1877;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBinary((byte[]) null, 1877, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1125), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#6Bv");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      writerBasedJsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator1 = jsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      jsonGenerator0.writeRaw('Q');
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-161L), 3994);
      jsonGenerator1.writeNumber(bigDecimal0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      charArray0[6] = 'Q';
      jsonGenerator0.writeString(charArray0, 0, 3);
      writerBasedJsonGenerator0.writeNumber(206);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      BigDecimal bigDecimal0 = BigDecimal.valueOf((long) 2, 0);
      // Undeclared exception!
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1121), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#6Bv");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      writerBasedJsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator1 = jsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      jsonGenerator0.writeRaw('O');
      jsonGenerator1.writeStartArray();
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-161L), 3994);
      jsonGenerator1.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeBinaryField("write a number", byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      String string0 = "n&";
      // Undeclared exception!
      writerBasedJsonGenerator0.writeString(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FkBvtEE2H,@)3D}_");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext1.allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = (-1141);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeObject("#6Bv");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      jsonGenerator0.writeStartArray();
      stringWriter0.flush();
      writerBasedJsonGenerator0.writeNumber((-2359));
      writerBasedJsonGenerator0.getOutputBuffered();
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeString("");
      SerializedString serializedString0 = new SerializedString("U<KYFj#");
      byte[] byteArray0 = new byte[0];
      serializedString0.appendQuotedUTF8(byteArray0, 0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("Dz!u~");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      stringWriter0.flush();
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[1];
      writerBasedJsonGenerator0.writeRaw('0');
      byteArray0[0] = (byte) (-122);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      serializedString0.appendQuotedUTF8(byteArray0, 55296);
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        jsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(109);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString1 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      iOContext0.allocReadIOBuffer(4409);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1900);
      int int0 = 4;
//      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 4);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 88, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = new byte[3];
      char[] charArray0 = new char[1];
      stringWriter0.write(charArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 73);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 70 bytes (out of 73)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1121), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeNumber(2609L);
      writerBasedJsonGenerator0.writeBinaryField("#6Bv", byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-858L), 3519);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber((long) 3);
      writerBasedJsonGenerator0.writeNumber((-1050));
      writerBasedJsonGenerator0.writeRaw('Q');
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dz!u~");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      writerBasedJsonGenerator0.writeObject("#(6Bv");
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeBinary(byteArray0, 200, 0);
      writerBasedJsonGenerator0.writeBoolean(false);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBinary(byteArray0, 2144, 2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FkBvtEE2H,@)3D}_");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#6Bv");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      byte[] byteArray0 = new byte[3];
      writerBasedJsonGenerator1.writeNull();
      writerBasedJsonGenerator0.getCharacterEscapes();
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = (WriterBasedJsonGenerator)writerBasedJsonGenerator1.setCharacterEscapes((CharacterEscapes) null);
      writerBasedJsonGenerator1.writeRaw('O');
      byteArray0[0] = (byte) (-1);
      writerBasedJsonGenerator1._writeFieldName("", false);
      writerBasedJsonGenerator0.writeNumber(1446);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator2.writeNumber((long) 0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator2.writeRaw(charArray0, (-106), 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3042), (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.setRootValueSeparator((SerializableString) null);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber((float) 1);
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1121), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#6Bv");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      writerBasedJsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator1 = jsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      jsonGenerator0.writeRaw('O');
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-161L), 3994);
      jsonGenerator1.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeBinaryField("write a number", byteArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dz!u~");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      jsonGenerator0.writeNumberField("Dz!u~", (-9.223372036854776E18));
      jsonGenerator0.writeNumber((-2359));
//      try { 
        writerBasedJsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 88, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._flushBuffer();
//      try { 
        writerBasedJsonGenerator0.writeNumber(1.0F);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RwJb+!<");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      stringWriter0.flush();
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[1];
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      serializedString0.appendQuotedUTF8(byteArray0, 55296);
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        jsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(940);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 16, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-337));
      writerBasedJsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.BufferRecycler");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 752, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('J');
      stringWriter1.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString1 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      writerBasedJsonGenerator0._outputTail = 1899;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      writerBasedJsonGenerator0.writeString(charArray0, 2, 1);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FkBvtEE2H,@)3D}_");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1121), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#6Bv");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      writerBasedJsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator1 = jsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      jsonGenerator0.writeRaw('O');
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-161L), 3994);
      jsonGenerator1.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber((-2147483648L));
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeNumber(93);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("Dz!u~");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      stringWriter0.flush();
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      serializedString0.appendQuotedUTF8(byteArray0, 55296);
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        jsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("Dz!u~");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      serializedString0.appendQuotedUTF8(byteArray0, 55296);
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeNumber((short) (byte) (-122));
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator0.writeNumber(0.0F);
      System.setCurrentTimeMillis(57343);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FkBvtEE2H,@)3D}_");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#6Bv");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      byte[] byteArray0 = new byte[3];
      writerBasedJsonGenerator0.getCharacterEscapes();
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = (WriterBasedJsonGenerator)writerBasedJsonGenerator1.setCharacterEscapes((CharacterEscapes) null);
      writerBasedJsonGenerator1.writeRaw('O');
      byteArray0[0] = (byte) (-1);
      writerBasedJsonGenerator1._writeFieldName("", false);
      writerBasedJsonGenerator0.writeNumber(1449);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      writerBasedJsonGenerator2.writeNumber((long) 0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator2.writeRaw(charArray0, (-106), 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FkBvtEE2H,@)3D}_");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#6Bv");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      byte[] byteArray0 = new byte[3];
      writerBasedJsonGenerator0.getCharacterEscapes();
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = (WriterBasedJsonGenerator)writerBasedJsonGenerator1.setCharacterEscapes((CharacterEscapes) null);
      writerBasedJsonGenerator1.writeRaw('O');
      byteArray0[0] = (byte) (-1);
      writerBasedJsonGenerator1._writeFieldName("", false);
      writerBasedJsonGenerator1.writeNumber(1589);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator2.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(1);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(109);
      StringWriter stringWriter1 = stringWriter0.append('J');
      stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString1 = new SerializedString("VR");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0._writeFieldName("\"", false);
      writerBasedJsonGenerator0.writeRaw("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
//      try { 
        writerBasedJsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1017, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((short)93);
      writerBasedJsonGenerator0.writeBinary(byteArray0, (int) (short)93, 3964);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      short short0 = (short)1322;
      writerBasedJsonGenerator0.writeNumber((short)93);
      writerBasedJsonGenerator0.writeNumber((-311));
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      int int0 = 1596;
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeString("");
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((double) 2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("Dz!u~");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      serializedString0.appendQuotedUTF8(byteArray0, 55296);
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        jsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dz!u~");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#(6Bv");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = 'N';
      charArray0[2] = 'Q';
      charArray0[3] = 'U';
      jsonGenerator0.writeString(charArray0, 861, (-1275));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3263, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._flushBuffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-99);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.valueOf(10000000000L, 1518);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber((long) 1);
      writerBasedJsonGenerator0.writeNumber((int) (byte) (-79));
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dz!u~");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#(6Bv");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        jsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 246);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 244 bytes (out of 246)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      writerBasedJsonGenerator0.writeString("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = '[';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 97, 97);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dz!u~");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#(6Bv");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      byte[] byteArray0 = new byte[3];
      writerBasedJsonGenerator0.getCharacterEscapes();
      writerBasedJsonGenerator1.setCharacterEscapes((CharacterEscapes) null);
      writerBasedJsonGenerator1.writeRaw('O');
      byteArray0[0] = (byte) (-1);
      writerBasedJsonGenerator1._writeFieldName("", false);
      writerBasedJsonGenerator0.writeNumber(1449);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(0);
      String string0 = "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)";
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('J');
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString1 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      writerBasedJsonGenerator0.writeRaw('+');
      // Undeclared exception!
//      try { 
        stringWriter2.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", 3, (-642));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(0);
      String string0 = "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)";
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('J');
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString1 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      writerBasedJsonGenerator0.writeString(charArray0, 2, 1);
      writerBasedJsonGenerator0.writeRaw('+');
      // Undeclared exception!
//      try { 
        stringWriter2.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", 3, (-642));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dz!u~");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#(6Bv");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      String string0 = "";
      byte[] byteArray0 = new byte[3];
      jsonGenerator0.writeRaw('O');
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      writerBasedJsonGenerator0.writeBinaryField("T", byteArray0);
//      try { 
        jsonGenerator0.writeBooleanField("", true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      CharBuffer.allocate(3);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-3614), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.canWriteTypeId();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      writerBasedJsonGenerator0.setHighestNonEscapedChar(1);
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-7);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0._writeFieldName("1ZwBM3h`N[z{.6", false);
      writerBasedJsonGenerator0.writeRaw("1ZwBM3h`N[z{.6");
      writerBasedJsonGenerator0.writeNumber((-1677));
//      try { 
        writerBasedJsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1017, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((short)93);
      writerBasedJsonGenerator0.writeBinary(byteArray0, (int) (short)93, 3964);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNumber((short)93);
      writerBasedJsonGenerator0.writeNumber((-311));
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 1596, (int) (short)1322);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1227);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, false);
      iOContext1.allocReadIOBuffer();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, (-311), (int) (short)93);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dz!u~");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      writerBasedJsonGenerator0.writeObject("#(6Bv");
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      jsonGenerator0.writeBooleanField("", true);
//      try { 
        jsonGenerator0.writeFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dz!u~");
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 3;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.configure(jsonGenerator_Feature0, true);
      jsonGenerator0.writeBooleanField("", true);
//      try { 
        jsonGenerator0.writeFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1141), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputEnd = 0;
      String string0 = "";
      writerBasedJsonGenerator0.writeString("");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBooleanField("", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3263, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._flushBuffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-99);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) (-99));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, (int) (byte) (-99), 34);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 93, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      charArray0[7] = 'k';
      stringWriter0.write(charArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-2151));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 3, (int) (byte)47);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(109);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      writerBasedJsonGenerator0.writeNumber(1032);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[2] = 'M';
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
      iOContext0.allocReadIOBuffer();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (-1702), 32);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1702
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._flushBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      int int0 = 343;
//      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2420);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 2416 bytes (out of 2420)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 3);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 0);
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = null;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, (-1156), 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(109);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      writerBasedJsonGenerator0.writeNumber((short)1331);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator1.writeNumber((short)1331);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger0);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1017, (ObjectCodec) null, stringWriter0);
      iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeNumber((short)522);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-68);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (short)522);
//      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 64);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 64 bytes (out of 64)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'M';
      intArray0[1] = 0;
      intArray0[2] = 2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      writerBasedJsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 343);
      iOContext0.allocReadIOBuffer();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 343, 1511);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "AEFaCpB(,in", true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-3058), (ObjectCodec) null, (Writer) null);
//      try { 
        writerBasedJsonGenerator1.writeBinary((InputStream) sequenceInputStream0, (-3058));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3271, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._flushBuffer();
      iOContext0.allocWriteEncodingBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = '\u008B';
      charArray0[1] = 'n';
      charArray0[2] = '\u008B';
      charArray0[4] = 'n';
      charArray0[5] = 'e';
      charArray0[6] = '\u008B';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1, 97);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      String string0 = "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)";
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(109);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString1 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      writerBasedJsonGenerator1._writeFieldName("1ZwBM3h`N[z{.6", false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-893), (ObjectCodec) null, stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
//      try { 
        writerBasedJsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[8];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeString(charArray0, (-885), (-885));
      writerBasedJsonGenerator0.writeNumber((double) 2);
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((long) 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(0);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(109);
      StringWriter stringWriter1 = stringWriter0.append('J');
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString1 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      writerBasedJsonGenerator0.writeString(charArray0, 2, 1);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(0);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(109);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString1 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      writerBasedJsonGenerator0.writeString(charArray0, 2, 1);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString("");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(109);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString1 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      // Undeclared exception!
      writerBasedJsonGenerator0.writeRaw("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(109);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString1 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      writerBasedJsonGenerator0.writeNumber((short)1331);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber(1032);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger0);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1017, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeNumber((short)522);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0._writeFieldName("IJzt9c)0]R!$doB", false);
      writerBasedJsonGenerator0.writeNumber((short)522);
      writerBasedJsonGenerator0.writeNumber(1846);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeString(charArray0, 3, 710);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-897), (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      stringWriter2.write("u");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator1.writeNumber((short)6);
      writerBasedJsonGenerator1._writeFieldName("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", true);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      SerializableString serializableString0 = writerBasedJsonGenerator1._currentEscape;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator1._writeFieldName(serializedString1, false);
      writerBasedJsonGenerator1.writeNumber(56320);
      writerBasedJsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(0);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(109);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString1 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      writerBasedJsonGenerator1._outputEnd = 0;
      writerBasedJsonGenerator0.writeString(charArray0, 2, 1);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer.allocate(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      String string0 = "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)";
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("zotF0vf5XHCd>/!");
      writerBasedJsonGenerator0._writeFieldName("", true);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNumber((short)1331);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 0, 2203);
      writerBasedJsonGenerator0.writeStartObject();
//      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) serializedString1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger0);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1017, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((short)93);
      writerBasedJsonGenerator0.writeNumber((short)123);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8, 3);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._outputHead = 2687;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeRaw("etkfM?Dhn!l");
//      try { 
        writerBasedJsonGenerator0.writeString("H,d-(x$<'|6z2<");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 56319;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((String) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1410, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0.close();
      Base64Variant base64Variant0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream(99);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
//      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Already connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 97, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)29;
      byteArray0[2] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1303, 97);
//      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a binary value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Random.setNextRandom(5);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.flush();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      String string0 = "write a number";
      stringWriter0.append((CharSequence) "write a number");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("write a number");
      writerBasedJsonGenerator0.flush();
      iOContext1.constructTextBuffer();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 882, (int) (byte)42);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(0);
      iOContext1.allocReadIOBuffer();
      String string0 = "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)";
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-897), (ObjectCodec) null, stringWriter2);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator1.writeNumber((short)6);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator1._writeFieldName("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", false);
      writerBasedJsonGenerator0.writeNumber((short) (-262));
      writerBasedJsonGenerator1.writeNumber(2136);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 1341);
      writerBasedJsonGenerator1._writeFieldName("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", true);
      writerBasedJsonGenerator1._releaseBuffers();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeEndArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('L');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1843, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.Version");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      writerBasedJsonGenerator0._verifyValueWrite("=y_'Zta#");
      writerBasedJsonGenerator0._writeFieldName("Can not ", false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNumber((short)1331);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeBinary(byteArray0, (-936), (-936));
      writerBasedJsonGenerator0.writeBinary(byteArray0, 248, 1821);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw("com.fasterxml.jackson.core.Version", 4000, 4000);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeRaw("yP");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, (byte[]) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(0);
      iOContext1.allocReadIOBuffer();
      String string0 = "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)";
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-897), (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator1.writeNumber((short)6);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator1._writeFieldName("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", false);
      writerBasedJsonGenerator0.writeNumber((short) (-262));
      writerBasedJsonGenerator1.writeNumber(2136);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 1341);
      writerBasedJsonGenerator1._writeFieldName("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", true);
      writerBasedJsonGenerator1._releaseBuffers();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeEndArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.and(bigInteger1);
      BigInteger.valueOf((-1L));
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.divide(bigInteger0);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1031, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeNumber((short)2785);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0._writeFieldName("!&.HkQxHI2.", false);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(serializedString1, false);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('\u0016');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56284, (ObjectCodec) null, stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeStartArray(3);
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0016';
      charArray0[0] = '\u0016';
      charArray0[2] = '0';
      charArray0[3] = '\u0016';
      charArray0[4] = '\u0016';
      charArray0[5] = '\u0016';
      writerBasedJsonGenerator0.writeString("~=`oADx");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0._writeFieldName(") not numeric, can not use numeric value accessors", false);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(0);
      ObjectCodec objectCodec0 = null;
      char[] charArray1 = new char[8];
      charArray1[2] = '*';
      iOContext1.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "Current context not an object but ";
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      int int0 = 7;
      StringWriter stringWriter0 = new StringWriter(7);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Current context not an object but ");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeString(charArray0, 2, 166);
      writerBasedJsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.flipBit(8);
//      try { 
        writerBasedJsonGenerator0.writeString("Current context not an object but ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1964);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenFilter0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-32768), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeEndObject();
      writerBasedJsonGenerator0.writeRaw("");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("zotF0vf5XHCd>/!");
      writerBasedJsonGenerator0._writeFieldName("", true);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeBinary(byteArray0, 3, (int) (short)1331);
      writerBasedJsonGenerator0.writeRaw('2');
      System.setCurrentTimeMillis(1L);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._verifyValueWrite("; line: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.bitCount();
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0._writeFieldName("tDy", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNumber((short)93);
      writerBasedJsonGenerator0.writeNumber(0);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 114, (-1630));
      writerBasedJsonGenerator0.writeBinary(byteArray0, 1821, 4000);
      SerializedString serializedString1 = new SerializedString("Can not ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString1);
      writerBasedJsonGenerator0.writeNumber((float) (short)93);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      CharBuffer.allocate(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2165), (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNumber((short)1331);
      writerBasedJsonGenerator0.writeNumber(251);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 1, 95);
      char[] charArray0 = new char[16];
      charArray0[0] = '\"';
      charArray0[1] = '%';
      charArray0[2] = '\"';
      charArray0[3] = 'a';
      charArray0[4] = 'W';
      charArray0[5] = ',';
      charArray0[6] = 'Z';
      charArray0[7] = 't';
      writerBasedJsonGenerator0.writeString(charArray0, 2, 1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      iOContext1.allocReadIOBuffer();
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-897), (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator1.writeNumber((short)6);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator1._writeFieldName("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", false);
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      SerializableString serializableString0 = writerBasedJsonGenerator1._currentEscape;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator1._writeFieldName(serializedString1, false);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(0);
      iOContext1.allocReadIOBuffer();
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-897), (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.enable(jsonGenerator_Feature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator1.writeNumber((short)6);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator1._writeFieldName("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", false);
      writerBasedJsonGenerator0.writeNumber((short) (-262));
      writerBasedJsonGenerator1.writeNumber(2136);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeString(charArray0, 0, 1341);
      writerBasedJsonGenerator1._writeFieldName("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", true);
      writerBasedJsonGenerator1._releaseBuffers();
      writerBasedJsonGenerator0._releaseBuffers();
      assertEquals(407, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharBuffer.allocate(0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 128, (ObjectCodec) null, stringWriter0);
      stringWriter0.close();
      String string0 = "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)";
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeRaw("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("u4P# c!*ue7");
      writerBasedJsonGenerator0.writeNumber((long) 0);
      writerBasedJsonGenerator0.writeRaw('#');
      System.setCurrentTimeMillis(1011L);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('(');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeStartArray(3);
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '0';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = 'W';
      writerBasedJsonGenerator0.writeString(charArray0, 1, 2);
      writerBasedJsonGenerator0.writeNumber((-1372));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.flipBit(2);
      writerBasedJsonGenerator0.writeFieldName("37yWB");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      char[] charArray0 = new char[8];
      iOContext1.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter('\u0000');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Current context not an object but ", 0, 11);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.flipBit(51);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeFieldName("Ud?P~x");
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 10, (-434));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartArray(2);
      char[] charArray0 = new char[0];
      writerBasedJsonGenerator0.writeString(charArray0, 2, 0);
      bigInteger1.toByteArray();
      writerBasedJsonGenerator0.writeNumber(2184);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger1.flipBit(0);
      writerBasedJsonGenerator0.writeFieldName("");
//      try { 
        writerBasedJsonGenerator0.writeFieldName("ARRAY");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      iOContext0.allocWriteEncodingBuffer();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("?k#r.g}f>m");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._writeFieldName("?k#r.g}f>m", false);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator1.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator1.writeNumber((double) 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8Q");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      CharBuffer.allocate(1043);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2165), (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      writerBasedJsonGenerator0.writeRaw("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.JsonFactory");
      writerBasedJsonGenerator0._writeFieldName("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeNumber((short)715);
      writerBasedJsonGenerator0.writeNumber((short)1331);
      writerBasedJsonGenerator0.writeNumber(277);
      writerBasedJsonGenerator0.writeNumber((short)1331);
      writerBasedJsonGenerator0.writeNumber(3);
      writerBasedJsonGenerator0.writeStartArray();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-12);
      byteArray0[8] = (byte)95;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 1, (byte)95);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 66, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeStartObject();
      char[] charArray0 = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
//      try { 
        writerBasedJsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.add(bigInteger0);
      bigInteger1.divide(bigInteger2);
      CharsToNameCanonicalizer.createRoot();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((short)93);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeStartArray();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('L');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1843, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("Current]context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("Current]context not an ARRAY but ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeNumber((short) (-762));
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0._writeFieldName("Current]context not an ARRAY but ", false);
      writerBasedJsonGenerator0.writeNumber((short) (-762));
      writerBasedJsonGenerator0.writeNumber((int) (short)2112);
      writerBasedJsonGenerator0.writeStartArray();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FAIL_ON_SYMBOL_HASH_OVERFLOW");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.xor(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = BigInteger.TEN;
      bigInteger1.divide(bigInteger0);
      CharsToNameCanonicalizer.createRoot();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 326, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((short)93);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 1, 2);
      writerBasedJsonGenerator0.writeFieldName("<7$6FAgN>");
      writerBasedJsonGenerator0.writeNumber((float) 3);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('L');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1843, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("Current]context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("Current]context not an ARRAY but ");
      writerBasedJsonGenerator0.writeNumber((short)93);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 32768, 65599);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, 1462);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(4000);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._flushBuffer();
//      try { 
        writerBasedJsonGenerator0.writeNumber(2.147483647E9);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      CharBuffer.allocate(1043);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2165), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-128);
      serializedString0.appendUnquotedUTF8(byteArray0, 61);
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeRaw("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      String string0 = null;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = new char[6];
      charArray0[1] = '^';
      charArray0[2] = 'Z';
      charArray0[3] = 'I';
      charArray0[4] = 'G';
      charArray0[5] = '7';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray1 = new char[8];
      charArray1[0] = 'M';
      charArray1[2] = 'M';
      charArray1[3] = 'M';
      charArray1[4] = 'M';
      charArray1[5] = 'M';
      charArray1[6] = 'M';
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(56319);
      writerBasedJsonGenerator0.writeNumber(bigInteger1);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((short)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 52, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 128, (ObjectCodec) null, (Writer) null);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((short)93);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBinary(byteArray1, 1, 56319);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      sequenceInputStream0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.close();
      writerBasedJsonGenerator0._verifyValueWrite((String) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRawUTF8String(byteArray0, 3, 31);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(0);
      iOContext0.allocReadIOBuffer();
      String string0 = "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)";
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      boolean boolean0 = true;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.close();
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (-897), (-897));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(3066);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-15);
      writerBasedJsonGenerator0.writeBinaryField("n43MRIL;WW", byteArray0);
      char[] charArray0 = new char[0];
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (-3945), 618);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(3066);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      String string0 = "n43MRIL;WW";
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-44);
      byteArray0[0] = (byte) (-44);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext2.allocWriteEncodingBuffer();
//      try { 
        writerBasedJsonGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a null, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      CharBuffer.allocate(1043);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2165), (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeStartArray();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0._verifyPrettyValueWrite("|RKM}uD_<J~74cUB9");
      writerBasedJsonGenerator0._writeFieldName("|9kqUPMSvwsI>~", true);
      StringWriter stringWriter1 = new StringWriter(56319);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 91);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, (-2372));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      iOContext0.allocWriteEncodingBuffer();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'M';
      intArray0[1] = 0;
      intArray0[2] = 2;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      writerBasedJsonGenerator0.writeString("?k#r.g}f>m");
      writerBasedJsonGenerator0.writeString(charArray0, 3, 3);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, (-21), 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -21
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3066);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 57, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-15);
      writerBasedJsonGenerator0.writeBinaryField("n43MRIL;WW", byteArray0);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeUTF8String(byteArray1, 3, 9);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.allocate(3);
      StringWriter stringWriter1 = new StringWriter(94);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 79, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 2);
      bigDecimal0.abs();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("write a null");
      writerBasedJsonGenerator0.writeNumber((-1782L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      writerBasedJsonGenerator0.writeRaw('}');
      System.setCurrentTimeMillis((-749L));
      stringWriter1.append('\u0080');
      writerBasedJsonGenerator0._verifyValueWrite("");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw("expected digit (0-9) to follow minus sign, for valid numeric value", 2480, 57343);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('L');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1843, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("Current]context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("Current]context not an ARRAY but ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeNumber((short) (-762));
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0._writeFieldName("Current]context not an ARRAY but ", false);
      writerBasedJsonGenerator0.writeNumber((short)2112);
      SerializedString serializedString0 = new SerializedString("Current]context not an ARRAY but ");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeRaw('L');
      writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-85);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigInteger0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[2];
      writerBasedJsonGenerator0.writeStartArray();
      charArray0[0] = 'A';
      iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeRaw("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      writerBasedJsonGenerator0._writeFieldName("", true);
      writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1467, (ObjectCodec) null, stringWriter0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((short)93);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 4000, 102);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      CharBuffer.allocate(1043);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2165), (ObjectCodec) null, stringWriter0);
      String string0 = "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)";
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeStartArray();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeRaw("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("|RKM}uD_<J~74cUB9");
      writerBasedJsonGenerator0._writeFieldName("|9kqUPMSvwsI>~", true);
      StringWriter stringWriter1 = new StringWriter(56319);
      StringWriter stringWriter2 = stringWriter1.append('A');
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(4000);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      iOContext0.allocReadIOBuffer(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._flushBuffer();
//      try { 
        writerBasedJsonGenerator0._verifyValueWrite("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not , expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1467, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      writerBasedJsonGenerator0.writeNumber((short)93);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0._writeFieldName("1ZwBM3h`N[z{.$", false);
      writerBasedJsonGenerator0.writeNumber((long) 108);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.intValueExact();
      bigInteger0.divide(bigInteger1);
      StringWriter stringWriter1 = new StringWriter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("Current]ontext not an A+RAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("D7A!FW_1'~f");
      writerBasedJsonGenerator0.writeNumber((short)25);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0._writeFieldName("Current]ontext not an A+RAY but ", true);
      writerBasedJsonGenerator0.writeNumber((short)25);
      SerializedString serializedString0 = new SerializedString("Current]ontext not an A+RAY but ");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-85);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigInteger0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[2];
      writerBasedJsonGenerator0.writeStartArray();
      charArray0[0] = 'A';
      iOContext0.allocBase64Buffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeRaw("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      writerBasedJsonGenerator0.writeString("");
      writerBasedJsonGenerator0.writeString(charArray0, (int) (byte) (-85), (int) (byte) (-85));
      writerBasedJsonGenerator1._writeFieldName("Invalid UTF-8 start byte 0x", true);
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-85);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigInteger0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = new SerializedString("gm)|>dI[4x1R))ww~M{");
      serializedString0.asQuotedChars();
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      writerBasedJsonGenerator0.writeBinary(byteArray0, 7, (-1482));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divide(bigInteger1);
      StringWriter stringWriter1 = new StringWriter(1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, stringWriter0, true);
      StringWriter stringWriter2 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 125, (ObjectCodec) null, stringWriter2);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 2);
      BigDecimal bigDecimal1 = new BigDecimal(908);
      BigDecimal bigDecimal2 = bigDecimal0.abs();
      writerBasedJsonGenerator0.writeString((String) null);
      bigDecimal2.setScale(52);
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0._writeFieldName("", true);
      System.setCurrentTimeMillis(482L);
      writerBasedJsonGenerator0.writeStartObject();
//      try { 
        writerBasedJsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1743, (ObjectCodec) null, stringWriter0);
      String string0 = "B<}_9=/G`|xfl?6vY";
      SerializedString serializedString0 = new SerializedString("B<}_9=/G`|xfl?6vY");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-78);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBinary(byteArray0, 75, 2135);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 75
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.testBit(3);
      bigInteger1.signum();
      StringWriter stringWriter0 = new StringWriter(1048);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber(2);
      BigInteger bigInteger2 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger2);
      writerBasedJsonGenerator0.writeStartObject();
      Object object0 = writerBasedJsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, (-2305), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.close();
//      try { 
        writerBasedJsonGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1964);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 97, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._flushBuffer();
      int int0 = 33;
//      try { 
        writerBasedJsonGenerator0.writeNumber(33);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1743, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = new SerializedString("B<}_9=/G`|xfl?6vY");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal(379.340136729);
      writerBasedJsonGenerator0.writeString((String) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 18, 32);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-85);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigInteger0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[2];
      writerBasedJsonGenerator0.writeStartArray();
      charArray0[0] = 'A';
      iOContext0.allocBase64Buffer();
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeRaw("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      writerBasedJsonGenerator0.writeNumber((short)666);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(0);
      StringWriter stringWriter2 = new StringWriter(4788);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4788, (ObjectCodec) null, stringWriter1);
      SerializedString serializedString0 = new SerializedString(",wU@[v9IxZ");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 1);
      BigDecimal bigDecimal1 = new BigDecimal(3);
      bigDecimal1.abs();
      writerBasedJsonGenerator0.writeString("4%!Hk,aUP");
      BigDecimal bigDecimal2 = bigDecimal0.setScale(46);
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      writerBasedJsonGenerator0.writeNumber(bigDecimal2);
      writerBasedJsonGenerator0.writeBoolean(true);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0._writeFieldName("R{$L)D0", false);
      System.setCurrentTimeMillis(3046L);
      writerBasedJsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.allocate(3);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-3614), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext0.allocBase64Buffer();
      JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeRaw("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("D7A!FW_1'~f");
      short short0 = (short)97;
      jsonGenerator0.writeNumber((short)97);
      jsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0._writeFieldName("write a string", true);
      System.setCurrentTimeMillis(0L);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(3);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-3614), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)17;
      byteArray0[5] = (byte)15;
      writerBasedJsonGenerator0.writeStartArray();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw((String) null, (-1034), 49);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext2.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      int int0 = 25;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 25, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeStartArray();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.JsonGenerationException");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.JsonGenerationException");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(278L);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.allocate(3);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-3614), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.useDefaultPrettyPrinter();
      writerBasedJsonGenerator0.writeRaw("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("D7A!FW_1'~f");
      writerBasedJsonGenerator0.writeNumber((short)20);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.testBit(3);
      bigInteger1.signum();
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(1043);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[6];
      charArray0[0] = '\u008C';
      charArray0[1] = 'Z';
      charArray0[2] = 'J';
      charArray0[3] = '%';
      charArray0[4] = '#';
      charArray0[5] = 'z';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 1);
      writerBasedJsonGenerator0.writeNumber(2);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.divide(bigInteger1);
      writerBasedJsonGenerator0.writeNumber(bigInteger2);
      writerBasedJsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRawUTF8String((byte[]) null, 1100, 5);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(3);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-3614), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "D7A!FW_1'~f";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 128, (byte)23);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, (-3614));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(91);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Current context not an object but ", 0, 8);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Current context not an object but ");
      StringWriter stringWriter3 = stringWriter2.append('t');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 12, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      StringWriter stringWriter4 = new StringWriter(1247);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      writerBasedJsonGenerator0.writeNumber("Current context not an object but ");
      SerializedString serializedString0 = new SerializedString("`X[93zY+~&RE+");
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      stringWriter3.write(1464);
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeRaw("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("D7A!FW_1'~f");
      writerBasedJsonGenerator0.writeNumber((short)25);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0._writeFieldName("Current context not an ARRAY but ", true);
      writerBasedJsonGenerator0.writeNumber((short)25);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
      writerBasedJsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((int) (short)25);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(994);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(1369);
      writerBasedJsonGenerator0.writeNumber((short)65);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0._writeFieldName(">eo<:5rK/a&U>", false);
      System.setCurrentTimeMillis(3);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigInteger0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[2];
      writerBasedJsonGenerator0.writeStartArray();
      charArray0[0] = 'A';
      writerBasedJsonGenerator0.writeString("STRICT_DUPLICATE_DETECTION");
      charArray0[1] = 'M';
      writerBasedJsonGenerator0.writeString(charArray0, (int) (byte) (-85), (-1533));
      writerBasedJsonGenerator0.writeNumber((-2937.486));
      writerBasedJsonGenerator0.writeEndArray();
      writerBasedJsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '^';
      charArray0[2] = 'Z';
      charArray0[3] = 'I';
      charArray0[4] = 'G';
      charArray0[5] = '7';
      stringWriter0.write(charArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray1 = new char[8];
      charArray1[0] = 'M';
      charArray1[2] = 'M';
      charArray1[3] = 'M';
      charArray1[4] = 'M';
      charArray1[5] = 'M';
      charArray1[6] = 'M';
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(56319);
      writerBasedJsonGenerator0.writeNumber(bigInteger1);
      writerBasedJsonGenerator0.writeStartObject();
//      try { 
        writerBasedJsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but OBJECT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeRaw("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("D7A!FW_1'~f");
      writerBasedJsonGenerator0.writeNumber((short)25);
      writerBasedJsonGenerator0.canWriteBinaryNatively();
      writerBasedJsonGenerator0._writeFieldName("Current context not an ARRAY but ", false);
      System.setCurrentTimeMillis(0L);
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '=';
      charArray0[2] = 'W';
      charArray0[3] = 'y';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 1);
      writerBasedJsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer0.append(stringBuffer1);
      CharBuffer.wrap((CharSequence) stringBuffer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger2, 439);
      BigDecimal bigDecimal1 = new BigDecimal(0.15000319266214232);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-4484), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("null");
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 57343, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeNumber(bigDecimal1);
      writerBasedJsonGenerator1._flushBuffer();
      writerBasedJsonGenerator1.writeStartArray();
      SerializableString serializableString0 = writerBasedJsonGenerator1._currentEscape;
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, true);
      writerBasedJsonGenerator1.close();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
      writerBasedJsonGenerator0.writeNumber(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(0);
      char[] charArray1 = new char[8];
      iOContext1.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(91);
      stringWriter0.append((CharSequence) "Current context not an object but ", 0, 11);
      stringWriter0.write("AUTO_CLOSE_JSON_CONTENT");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Current context not an object but ");
      StringWriter stringWriter2 = stringWriter1.append('t');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 12, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      StringWriter stringWriter3 = new StringWriter(1244);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      writerBasedJsonGenerator0.writeNumber("Current context not an object but ");
      writerBasedJsonGenerator0.writeRaw(charArray0, 716, 0);
      writerBasedJsonGenerator0.writeNumber((float) 1244);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-85);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigInteger0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      charArray0[0] = 'A';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 73, 386);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2000);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 97, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0._writeFieldName("", true);
      System.setCurrentTimeMillis(3);
//      try { 
        writerBasedJsonGenerator0.writeNumber(0L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      iOContext0.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      char char0 = 't';
      stringWriter1.append('t');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeString("{.*:^]Sr9-Z");
      int int0 = 1247;
      StringWriter stringWriter2 = new StringWriter(0);
      writerBasedJsonGenerator0.writeString("{.*:^]Sr9-Z");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2000);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 97, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
//      try { 
        writerBasedJsonGenerator0.writeNumber((short)115);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 291, 2, false);
      iOContext0.allocWriteEncodingBuffer(0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder(92);
      StringBuilder stringBuilder1 = new StringBuilder(stringBuilder0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((long) 2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.flipBit(4096);
      BigInteger bigInteger1 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger1);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRaw('U');
//      try { 
        writerBasedJsonGenerator0.writeNumber((short)1352);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1733, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[0];
      writerBasedJsonGenerator0.writeString(charArray0, 3967, (-358));
      writerBasedJsonGenerator0.writeRaw('V');
      writerBasedJsonGenerator0.writeStartArray();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber((-3240));
      bigDecimal0.setScale(3);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeBoolean(true);
//      try { 
        writerBasedJsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ARRAY
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      char char0 = '?';
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 57343, (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator1.writeString(charArray0, 2, 44);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharBuffer.allocate(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.divide(bigInteger0);
      BigInteger bigInteger3 = BigInteger.TEN;
      bigInteger1.nextProbablePrime();
      BigInteger bigInteger4 = BigInteger.TEN;
      bigInteger2.divide(bigInteger0);
      StringWriter stringWriter0 = new StringWriter(3964);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(2340);
      writerBasedJsonGenerator0.writeNumber((short)2758);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      writerBasedJsonGenerator0._writeFieldName(", expecting field name", false);
      writerBasedJsonGenerator0.writeNumber(9.223372036854776E18);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(55296);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext2.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 25, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeStartArray();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.JsonGenerationException");
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
      System.setCurrentTimeMillis(2147483647L);
      writerBasedJsonGenerator0.writeNumber((short)2);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.JsonGenerationException");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[8];
      charArray0[2] = '*';
      iOContext1.allocReadIOBuffer();
      StringWriter stringWriter0 = new StringWriter(91);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Current context not an object but ", 0, 8);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Current context not an object but ");
      StringWriter stringWriter3 = stringWriter2.append('t');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      writerBasedJsonGenerator0.writeRaw('*');
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 55296;
      intArray0[2] = 1;
      intArray0[3] = 56320;
      intArray0[4] = (int) '*';
      intArray0[5] = (-2103);
      intArray0[6] = 1;
      writerBasedJsonGenerator0._outputEscapes = intArray0;
      writerBasedJsonGenerator0._writeFieldName("sX2wsHFyH5mFPX#{D&", true);
      writerBasedJsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1743;
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter(16);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      String string0 = "B<}_9=/G`|xfl?6vY";
      SerializedString serializedString0 = new SerializedString("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      bigDecimal0.abs();
      String string1 = "~KDtJ+h";
      writerBasedJsonGenerator0.writeString(", Ilthough was sOpposed to have one");
      bigDecimal0.setScale(0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      writerBasedJsonGenerator0.writeNumber(bigDecimal1);
      writerBasedJsonGenerator0.writeBoolean(true);
//      try { 
        writerBasedJsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = '*';
      charArray0[2] = 'E';
      charArray0[3] = 'q';
      charArray0[4] = '\\';
      charArray0[5] = '(';
      charArray0[6] = 'x';
      charArray0[7] = 'x';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 9, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-309), (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(990);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1467, (ObjectCodec) null, stringWriter1);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      String string0 = "write a binary value";
      writerBasedJsonGenerator0.writeString("write a binary value");
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 2, 762);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(2);
      Writer writer0 = null;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, (Writer) null);
      BigDecimal bigDecimal0 = new BigDecimal(92);
      writerBasedJsonGenerator0.writeNumber((short)93);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = ":E/hW]tu&P&=D1nM";
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writeFieldName((String) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.wrap((CharSequence) stringBuffer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      iOContext0.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 116, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[1];
      writerBasedJsonGenerator0.writeString(charArray0, 605, 0);
      StringWriter stringWriter1 = new StringWriter(1);
      writerBasedJsonGenerator0.writeString("^}");
      writerBasedJsonGenerator0.writeNumber("^}");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer(0);
      char[] charArray1 = new char[8];
      charArray1[2] = '*';
      iOContext1.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(7);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Current context not an object but ");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.writeString(charArray0, 2, 166);
      writerBasedJsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
//      try { 
        writerBasedJsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2000);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 97, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0._flushBuffer();
//      try { 
        writerBasedJsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 291, 2, false);
      iOContext0.allocWriteEncodingBuffer(0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder(92);
      StringBuilder stringBuilder1 = new StringBuilder(stringBuilder0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((long) 2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.flipBit(4096);
      BigInteger bigInteger1 = BigInteger.ONE;
      writerBasedJsonGenerator0.writeNumber(bigInteger1);
      writerBasedJsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRaw('U');
//      try { 
        writerBasedJsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[8];
      charArray0[2] = '*';
      iOContext1.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(91);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Current context not an object but ", 0, 8);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Current context not an object but ");
      StringWriter stringWriter3 = stringWriter2.append('t');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 12, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      StringWriter stringWriter4 = new StringWriter(1247);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      writerBasedJsonGenerator0.writeNumber(0.0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter0);
      iOContext2.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeStartArray();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[8];
      iOContext1.allocReadIOBuffer();
      StringWriter stringWriter0 = new StringWriter(91);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Current context not an object but ");
      StringWriter stringWriter2 = stringWriter1.append('t');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter2);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      writerBasedJsonGenerator0.writeRaw('\u0000');
      writerBasedJsonGenerator0._writeFieldName("sX2wsHFyH5mFPX#{D&", true);
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw("Z5LHqNh_\"Y}VvG#g{", 0, 3);
      writerBasedJsonGenerator0.writeNumber("9}a%s6T.0`e={JT+i");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.allocate(3);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-3614), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeRaw("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("D7A!FW_1'~f");
      BigDecimal bigDecimal0 = BigDecimal.valueOf((long) 33, 5005);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0._flushBuffer();
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 77);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeStartObject();
//      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("sX2wsHFyH5mFPX#{D&");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not sX2wsHFyH5mFPX#{D&, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[8];
      charArray0[2] = '*';
      iOContext1.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(91);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Current context not an object but ", 0, 8);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Current context not an object but ");
      StringWriter stringWriter3 = stringWriter2.append('t');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 12, (ObjectCodec) null, stringWriter3);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      StringWriter stringWriter4 = new StringWriter(1247);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      writerBasedJsonGenerator0.writeNumber("Current context not an object but ");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 1595, 8);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.allocate(3);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Az[6YFi!Xj*t%");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("D7A!FW_1'~f");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      writerBasedJsonGenerator0.writeNumber((long) 2);
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      writerBasedJsonGenerator0.getOutputBuffered();
      charArray0[1] = 'b';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 3, 116);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 56320, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
      writerBasedJsonGenerator0.writeNumber(2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator1.writeNumber(bigInteger0);
      writerBasedJsonGenerator1.writeStartObject();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRawUTF8String((byte[]) null, 12, 1023);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[8];
      charArray0[1] = '*';
      iOContext1.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1865), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString(charArray0, 1, 0);
      writerBasedJsonGenerator0.writeRaw('V');
      writerBasedJsonGenerator0.writeStartArray();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeNumber(53);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("KVyeB}-`Vfl_b", "KVyeB}-`Vfl_b", false, 'H', 31);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 13)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[8];
      charArray0[2] = '*';
      iOContext1.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "Iw&/:zC/\">Q|_a7";
      StringWriter stringWriter0 = new StringWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-407), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("Iw&/:zC/\">Q|_a7");
      writerBasedJsonGenerator0.writeString(charArray0, 1, (-407));
      writerBasedJsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 56320, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
      writerBasedJsonGenerator0.writeNumber(2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator1.writeNumber(bigInteger0);
      writerBasedJsonGenerator1.writeStartObject();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw("LLQ?T[U~6hLt", 0, (-455));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(2);
      Writer writer0 = null;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2, (ObjectCodec) null, (Writer) null);
      String string0 = "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator";
      writerBasedJsonGenerator0.writeString("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      int int0 = 4000;
      StringWriter stringWriter1 = new StringWriter(4000);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, (Writer) null);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._flushBuffer();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.allocate(3);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.bitCount();
      bigInteger0.divide(bigInteger1);
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("D7A!FW_1'~f");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("D7A!FW_1'~f");
      writerBasedJsonGenerator0.writeNumber((short)20);
      SerializedString serializedString0 = new SerializedString("");
      writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.allocate(3);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-3614), (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("Current context not an ARRAY but ");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("D7A!FW_1'~f");
      writerBasedJsonGenerator0.writeNumber((short)20);
      writerBasedJsonGenerator0._writeFieldName("Current context not an ARRAY but ", true);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 10, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeString("");
      writerBasedJsonGenerator0.writeNumber((BigInteger) null);
      StringWriter stringWriter1 = new StringWriter(2);
      writerBasedJsonGenerator0.writeString("");
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
//      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext3, (-434), (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      Writer writer0 = null;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, (Writer) null);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString("Iw&/:zC/\">Q|_a7");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.wrap((CharSequence) stringBuffer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      bigInteger1.getLowestSetBit();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger2, 439);
      BigDecimal bigDecimal1 = new BigDecimal(0.15000319266214232);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-2646), (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[1] = '*';
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      charArray0[2] = 'E';
      charArray0[4] = '\\';
      charsToNameCanonicalizer0.release();
      charArray0[6] = '~';
      charArray0[7] = '~';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 9, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter(2650);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('a');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeStartArray();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      stringWriter2.append((CharSequence) stringBuffer0);
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeNumberField((String) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.wrap((CharSequence) stringBuffer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(982);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1467, (ObjectCodec) null, stringWriter1);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(108);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0._flushBuffer();
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 1467, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1467
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('#');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 34, (ObjectCodec) null, stringWriter1);
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = '#';
      charArray0[6] = '#';
      charArray0[7] = 'b';
      charArray0[8] = '#';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 128, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.allocate(3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(15);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigInteger2, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeString((char[]) null, (int) (byte) (-85), 0);
      writerBasedJsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(56319);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 56320, (ObjectCodec) null, stringWriter0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      writerBasedJsonGenerator1.configure(jsonGenerator_Feature0, true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
      writerBasedJsonGenerator0.writeString("");
      writerBasedJsonGenerator1.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 56320, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
      writerBasedJsonGenerator0.writeRaw('M');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)21;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator1.writeUTF8String(byteArray0, 18, 56319);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 1023, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator1.writeString((String) null);
      StringWriter stringWriter1 = new StringWriter(55296);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      boolean boolean0 = false;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator2 = null;
//      try {
        writerBasedJsonGenerator2 = new WriterBasedJsonGenerator(iOContext1, 128, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3042), (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.writeNumber(0.0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-85);
      byteArray0[0] = (byte) (-85);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2265, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeString("Current context not an object but ");
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-434));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      CharBuffer.allocate(1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter2 = new StringWriter(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 734, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-3614), 1571, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-3614));
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-3614), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("D7A!FW_1'~f");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      writerBasedJsonGenerator0.writeNumber((short)20);
      writerBasedJsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 115, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((-2685.72F));
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter0);
      iOContext2.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeStartArray();
      writerBasedJsonGenerator0.writeRaw("write a binary value");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("write a binary value");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[1] = '*';
      charArray0[2] = 'E';
      charArray0[4] = '\\';
      charsToNameCanonicalizer0.release();
      charArray0[6] = 'x';
      charArray0[7] = 'x';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 9, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-309), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) 0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.wrap((CharSequence) stringBuffer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-3614), (ObjectCodec) null, stringWriter1);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(3);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0._flushBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '<';
      charArray0[4] = 'k';
      charArray0[5] = '8';
      charArray0[6] = '8';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 0, 33);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.wrap((CharSequence) stringBuffer0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger2, 439);
      BigDecimal bigDecimal1 = new BigDecimal(0.15000319266214232);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-4484), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("null");
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'M';
      writerBasedJsonGenerator0.writeString(charArray0, (-2738), (-273));
      writerBasedJsonGenerator0.writeNumber(1.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(56319);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      writerBasedJsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 527, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)0);
      stringWriter0.write("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      iOContext0.allocTokenBuffer();
      bigInteger0.doubleValue();
      stringWriter0.append(',');
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.clearBit(527);
      bigInteger0.divide(bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, 527);
      bigDecimal0.setScale(0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeBoolean(true);
      BigInteger bigInteger2 = BigInteger.TEN;
      writerBasedJsonGenerator0.writeNumber(bigInteger2);
//      try { 
        writerBasedJsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 21, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      StringWriter stringWriter1 = new StringWriter(15);
      stringWriter1.write(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 32, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0.writeRawValue((SerializableString) serializedString0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext0, (-2972), (ObjectCodec) null, stringWriter1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[1] = '*';
      iOContext0.allocReadIOBuffer();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 9, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 132, 33, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter(366);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writePPFieldName(serializedString0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[1] = '*';
      iOContext1.allocReadIOBuffer();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 55296, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-636), 1, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-650), (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 56320, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3042), (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[2] = 'i';
      charArray0[3] = '5';
      charArray0[4] = '?';
      charArray0[5] = 'a';
      writerBasedJsonGenerator0.writeNumber((double) 1);
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writePPFieldName("Unexpected end-of-input", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3042), (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      StringWriter stringWriter1 = new StringWriter(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      stringWriter0.write(3);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      char char0 = 'M';
      writerBasedJsonGenerator0.writeString("");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 2, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[1] = '*';
      charArray0[2] = 'E';
      charArray0[3] = 'q';
      charArray0[4] = '\\';
      charArray0[6] = 'x';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 'x', true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-309), (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
//      try { 
        writerBasedJsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      BigInteger bigInteger0 = BigInteger.ONE;
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 102, (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.writeNumber(9.223372036854776E18);
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writePPFieldName("[6%Lw\baVgQNV}", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char char0 = 'E';
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-3202));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-437), (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, (-973), (-973), true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 9, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeString((char[]) null, (-1618), (-3202));
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigInteger0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      writerBasedJsonGenerator0.writeString("STRICT_DUPLICATE_DETECTION");
      charArray0[1] = 'M';
      writerBasedJsonGenerator0.writeString(charArray0, (int) (byte) (-85), (-1533));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[1] = '*';
      charArray0[2] = 'E';
      charArray0[3] = 'q';
      charArray0[4] = '\\';
      charArray0[6] = 'x';
      iOContext1.allocReadIOBuffer();
      charArray0[7] = 'x';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 9, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-309), (ObjectCodec) null, (Writer) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      writerBasedJsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter0);
      iOContext2.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeStartArray();
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._writeFieldName((SerializableString) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 21, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'u';
      charArray0[1] = '0';
      charArray0[2] = '\\';
      charArray0[3] = '8';
      charArray0[4] = 'X';
      charArray0[5] = '&';
      charArray0[6] = '\\';
      charArray0[7] = '8';
      stringWriter0.write(charArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      SerializedString serializedString0 = (SerializedString)writerBasedJsonGenerator0._rootValueSeparator;
      writerBasedJsonGenerator0._writeFieldName(serializedString0, false);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      int int0 = 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger2, 2);
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal1.setScale(1153);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 745, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeBoolean(false);
//      try { 
        writerBasedJsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[8];
      charArray0[1] = '*';
      iOContext1.allocReadIOBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-650), (ObjectCodec) null, (Writer) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigInteger0);
      writerBasedJsonGenerator0.writeNumber((long) 2);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      CharBuffer.allocate(3);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      StringWriter stringWriter1 = new StringWriter(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("D7A!FW_1'~f");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("D7A!FW_1'~f");
      writerBasedJsonGenerator0.writeNumber((long) 0);
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '8';
      charArray0[2] = 'k';
      charArray0[3] = '!';
      charArray0[4] = 'b';
      charArray0[5] = '%';
      charArray0[6] = '_';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw(charArray0, 3, 3998);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 291, 0, false);
      iOContext0.allocWriteEncodingBuffer(0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder(92);
      StringBuilder stringBuilder1 = new StringBuilder(stringBuilder0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0.writeNumber((long) 2);
      writerBasedJsonGenerator0._verifyValueWrite("");
//      try { 
        writerBasedJsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[1] = '*';
      charArray0[2] = 'E';
      charArray0[3] = 'q';
      charArray0[4] = '\\';
      charArray0[6] = 'x';
      charArray0[7] = 'x';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 9, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-309), (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3042), (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[2] = 'i';
      charArray0[3] = '5';
      charArray0[4] = '?';
      charArray0[5] = 'a';
      charArray0[6] = '8';
      charArray0[7] = '9';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 13, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 13
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeString("");
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 56320, (ObjectCodec) null, stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[5] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      writerBasedJsonGenerator0.writeString(charArray0, 3, 2);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 291, 0, false);
      iOContext0.allocWriteEncodingBuffer(0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder(92);
      StringBuilder stringBuilder1 = new StringBuilder(stringBuilder0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 706);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = '*';
      charArray0[2] = 'E';
      charArray0[4] = '\\';
      charArray0[5] = '(';
      charArray0[6] = 'x';
      charArray0[7] = 'x';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 9, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-313), (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeString(charArray0, 0, 0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 57343);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger2, 2);
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal1.setScale(1153);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 745, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = null;
//      try {
        writerBasedJsonGenerator1 = new WriterBasedJsonGenerator(iOContext1, 161, (ObjectCodec) null, (Writer) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(346);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0._verifyValueWrite("yP");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)82;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-85), true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      BigInteger bigInteger0 = BigInteger.ONE;
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 102, (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0.writeNumber(9.223372036854776E18);
      writerBasedJsonGenerator0._flushBuffer();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString((char[]) null, 128, 12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertSame(bigInteger1, bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertNotNull(charsToNameCanonicalizer0);
      
      StringWriter stringWriter1 = new StringWriter(990);
      assertEquals("", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1467, (ObjectCodec) null, stringWriter1);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("", stringWriter1.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(1467, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertNotNull(writerBasedJsonGenerator0);
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(byteArray0);
      assertEquals(8000, byteArray0.length);
      
      writerBasedJsonGenerator0.writeNull();
      assertNotSame(stringWriter1, stringWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("", stringWriter1.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(1467, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      
      BigDecimal bigDecimal0 = new BigDecimal(108);
      assertEquals((byte)108, bigDecimal0.byteValue());
      assertEquals((short)108, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      writerBasedJsonGenerator0.writeNumber((short)93);
      assertNotSame(stringWriter1, stringWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("", stringWriter1.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(9, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(1467, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      writerBasedJsonGenerator0._writeFieldName(".nIy_D?Wr'WTSB;1", true);
      assertNotSame(stringWriter1, stringWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("", stringWriter1.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(1467, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(28, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      
      System.setCurrentTimeMillis(1629L);
      writerBasedJsonGenerator0.writeNumber(0L);
      assertNotSame(stringWriter1, stringWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("", stringWriter1.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(1467, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(32, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      
      writerBasedJsonGenerator0.flush();
      assertNotSame(stringWriter1, stringWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("null \"93\",\".nIy_D?Wr'WTSB;1\" \"0\"", stringWriter1.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(1467, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      StringWriter stringWriter0 = new StringWriter(0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 0, (ObjectCodec) null, stringWriter0);
      iOContext2.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0._flushBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("D7A!FW_1'~f");
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0._verifyPrettyValueWrite("start an array");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3042), (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.flush();
      int int0 = 64;
      StringBuffer stringBuffer0 = new StringBuffer("ZiJV[gGx.7{{vz");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      // Undeclared exception!
//      try { 
        stringBuilder0.insert(57343, (CharSequence) stringBuffer0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // dstOffset 57343
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3042), (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      writerBasedJsonGenerator0._flushBuffer();
      writerBasedJsonGenerator0.writeStartArray();
      assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3042), (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[2] = 'i';
      charArray0[3] = '5';
      charArray0[4] = '?';
      charArray0[5] = 'a';
      charArray0[6] = '8';
      charArray0[7] = '9';
      writerBasedJsonGenerator0.writeString(charArray0, 0, 1);
      writerBasedJsonGenerator0.close();
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeRaw(';');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter0);
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      writerBasedJsonGenerator0.writeRaw("yP");
      writerBasedJsonGenerator0._verifyPrettyValueWrite("yP");
      assertEquals(2, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 291, 0, false);
      iOContext0.allocWriteEncodingBuffer(0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder(92);
      StringBuilder stringBuilder1 = new StringBuilder(stringBuilder0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter1);
      writerBasedJsonGenerator0.flush();
      writerBasedJsonGenerator0._releaseBuffers();
      writerBasedJsonGenerator0._verifyPrettyValueWrite("");
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeString(charArray0, 3, 706);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 527, (ObjectCodec) null, stringWriter0);
      writerBasedJsonGenerator0.writeNumber((double) 1);
      iOContext0.allocWriteEncodingBuffer();
      writerBasedJsonGenerator0.writeNumber((short)0);
      stringWriter0.write("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      iOContext0.allocTokenBuffer();
      bigInteger0.doubleValue();
      stringWriter0.append(',');
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divide(bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, 527);
      bigDecimal0.setScale(0);
      writerBasedJsonGenerator0.writeNumber(bigDecimal0);
      writerBasedJsonGenerator0.writeBoolean(true);
//      try { 
        writerBasedJsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(32767);
      StringWriter stringWriter1 = stringWriter0.append('q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 14, (ObjectCodec) null, stringWriter1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter(502);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3042), (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        writerBasedJsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }
}
