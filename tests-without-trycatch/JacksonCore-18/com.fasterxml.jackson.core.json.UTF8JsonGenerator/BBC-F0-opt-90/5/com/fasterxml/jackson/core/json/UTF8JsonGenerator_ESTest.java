/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 05:13:49 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 197, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1554, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("");
      byte[] byteArray0 = new byte[18];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)51, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeArrayFieldStart("2lZ/&?|B1p[T.M=");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 2);
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeString("2lZ/&?|B1p[T.M=");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      byte[] byteArray1 = new byte[19];
      byteArray1[0] = (byte)114;
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 5, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 718, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw("\"mF[r~cz\u0003");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o|");
      byte[] byteArray0 = new byte[29];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2254, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeBinaryField("o|", byteArray0);
      uTF8JsonGenerator0.writeBoolean(false);
      mockFileOutputStream0.close();
      jsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw('}');
      uTF8JsonGenerator0._writePPFieldName("o|");
      uTF8JsonGenerator0.writeNumber((-1736.86552120357));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", true);
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRaw('\u0086');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((long) 1);
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0086';
      charArray0[1] = '\u0086';
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      charArray0[2] = '\u0086';
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)1, 3);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      byte[] byteArray0 = new byte[5];
      mockFileOutputStream0.write(byteArray0, 2, 33);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ByteQuadsCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65536, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 65536);
      jsonGenerator0.writeFieldName("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("m");
      FileSystemHandling.createFolder(evoSuiteFile0);
      jsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyValueWrite("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[34];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      CharsToNameCanonicalizer.createRoot();
      byteArrayInputStream0.read(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeFieldName("1w{MU!xJto0@#%FVO");
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString0 = new SerializedString("1w{MU!xJto0@#%FVO");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = '!';
      charArray0[2] = 'J';
      charArray0[4] = '^';
      charArray0[5] = 'n';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      Random.setNextRandom(56319);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[9];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3727, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1027, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('S');
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 111);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      mockFileOutputStream0.getChannel();
      byteArray0[3] = (byte)125;
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      uTF8JsonGenerator0._maximumNonEscapedChar = (-128);
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", true);
      iOContext0.allocReadIOBuffer(2409);
      int int0 = 56;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 56, false);
      mockFileOutputStream0.close();
      CharsToNameCanonicalizer.createRoot();
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("quLdNJ(>)Vw~ h[LUAB", true);
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte) (-101);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-101), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRaw('\u0080');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      mockFileOutputStream0.getChannel();
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber((long) 1);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "iDdhT");
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0080';
      charArray0[2] = '\u0080';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 74);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("quLdNJ(>)Vw~ h[LUAB", true);
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte) (-38);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-38), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeRaw('\u0080');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber((long) 1);
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0080';
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "quLdNJ(>)Vw~ h[LUAB");
      charArray0[1] = '\u0080';
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      charArray0[2] = '\u0080';
      charArray0[3] = '\u0080';
      charArray0[4] = '\u0080';
      charArray0[5] = '\u0080';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      StringReader stringReader0 = new StringReader("1w{MU!xJto0@#%FVO");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(1L);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber((long) 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 127, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[12];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$>:H`");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-604), (ObjectCodec) null, (OutputStream) null, byteArray0, 3561, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("write a raw (unencoded) value");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 294, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("ll");
      iOContext0.allocReadIOBuffer(56319);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(56320);
      uTF8JsonGenerator0.writeFieldName("H<#{_'}LP1z*T@h}6");
      uTF8JsonGenerator0.writeStartObject((Object) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", true);
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeRaw('\u0080');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber((long) 1);
      char[] charArray0 = new char[6];
      charArray0[1] = '\u0080';
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      charArray0[2] = '\u0080';
      charArray0[3] = '\u0080';
      charArray0[4] = '\u0080';
      charArray0[5] = '\u0080';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 56319, 7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 56319
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.testBit((byte)0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-37), (ObjectCodec) null, mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3388, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 57343, false);
      mockFileOutputStream0.release();
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'R';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeString(charArray0, 0, 105);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 294, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("ll");
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(56320);
      uTF8JsonGenerator0.writeFieldName("H<#{_'}LP1z*T@h}6");
      uTF8JsonGenerator0.writeNumber((double) 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("ll", 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-2876), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator1.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator1.writeString("B");
      uTF8JsonGenerator1.writeUTF8String(byteArray0, 3, 0);
      uTF8JsonGenerator1.writeNumber((double) 1);
      uTF8JsonGenerator1.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeString("");
      BigInteger bigInteger1 = BigInteger.ONE;
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 457, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", true);
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeRaw('\u0080');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber((long) 1);
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0080';
      charArray0[1] = '\u0080';
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      charArray0[2] = '\u0080';
      charArray0[3] = '\u0080';
      charArray0[4] = '\u0080';
      charArray0[5] = '\u0080';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3, 7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-37);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2148, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2, false);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.toString();
      uTF8JsonGenerator0.writeNumber("B");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
//      try { 
        uTF8JsonGenerator0.writeFieldName("0");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", true);
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRaw('\u0086');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber((long) 1);
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0086';
      charArray0[1] = '\u0086';
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      charArray0[2] = '\u0086';
      charArray0[3] = '\u0086';
      charArray0[4] = '\u0086';
      charArray0[5] = '\u0086';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3, 7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(237.14696F);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeNumber(1399L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)23;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 80);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", true);
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRaw('\u0086');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber((long) 1);
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0086';
      charArray0[1] = '\u0086';
      mockFileOutputStream0.getChannel();
      charArray0[2] = '\u0086';
      charArray0[3] = '\u0086';
      charArray0[4] = '\u0086';
      charArray0[5] = '\u0086';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", true);
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRaw('\u0086');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(mockFileOutputStream0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber((long) 1);
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0086';
      charArray0[1] = '\u0086';
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      charArray0[2] = '\u0086';
      charArray0[3] = '\u0086';
      charArray0[4] = '\u0086';
      charArray0[5] = '\u0086';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3, 7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[12];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      mockFileOutputStream0.write(byteArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)15, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 105, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((double) (byte)15);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._outputTail = 55296;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      String string0 = "1w{MU!xJto0@\\#%FVO";
      StringReader stringReader0 = new StringReader("1w{MU!xJto0@#%FVO");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext0.allocNameCopyBuffer(3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      iOContext0.allocReadIOBuffer(2409);
      iOContext1.allocNameCopyBuffer(2139);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-37);
      byteArray1[3] = (byte) (-37);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 308, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 3, false);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("B");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 2);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, (int) (byte)34);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 34 bytes (out of 34)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 294, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("ll");
      serializedString0.asQuotedUTF8();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(56320);
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1987);
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, Integer.MIN_VALUE, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[12];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      mockFileOutputStream0.write(byteArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)15, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, true, true);
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2412, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 20);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString("1w{MU!xJto0@#%FVO");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(1352.0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeArrayFieldStart("2lZ/&?|B1p[T.M=");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", false);
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeArrayFieldStart("2lZ/&?|B1p[T.M=");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      MockFile mockFile0 = new MockFile("Invalid custom escape definitions; custom escape not found for character code 0x");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1586));
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeEndArray();
      mockFileOutputStream0.flush();
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, 687);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a binary value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("", true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("", true);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-2876), (ObjectCodec) null, mockFileOutputStream1, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator1.writeString("B");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator1.writeUTF8String(byteArray1, 3, 0);
      uTF8JsonGenerator1.writeNumber((double) 1);
      uTF8JsonGenerator1.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "SQEj\",{ZA9wQ(-mH#a,", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
//      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte)69);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 294, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("ll");
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[18];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2254, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeBinaryField("B", byteArray0);
      uTF8JsonGenerator0.writeBoolean(false);
      mockFileOutputStream0.close();
      jsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw('}');
      uTF8JsonGenerator0._writePPFieldName("B");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 150, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 217, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[18];
      PipedInputStream pipedInputStream0 = new PipedInputStream(91);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2254, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeBinaryField("B", byteArray0);
      uTF8JsonGenerator0.writeBoolean(false);
      mockFileOutputStream0.close();
      uTF8JsonGenerator0.writeNumber(2.147483647E9);
      uTF8JsonGenerator0.writeNull();
//      try { 
        uTF8JsonGenerator0.writeFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeArrayFieldStart("2lZ/&?|B1p[T.M=");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      char[] charArray0 = new char[2];
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      MockFile mockFile0 = new MockFile("Invalid custom escape definitions; custom escape not found for character code 0x");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1586));
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 102, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 102
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[12];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      mockFileOutputStream0.getChannel();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)15, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((double) (byte)15);
      uTF8JsonGenerator0._outputTail = 3047;
      uTF8JsonGenerator0.writeFieldName("'");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[12];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      mockFileOutputStream0.write(byteArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)15, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 105, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((double) (byte)15);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._outputTail = 55296;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[12];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      mockFileOutputStream0.getChannel();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)15, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((double) (byte)15);
      uTF8JsonGenerator0._outputTail = 3047;
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((long) (byte)18);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 2138, 3047);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 294, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1972);
      uTF8JsonGenerator0.writeFieldName("H<#{_'}LP1z*T@h}6");
      uTF8JsonGenerator0.writeNumber((long) 2);
//      try { 
        uTF8JsonGenerator0.writeString("H<#{_'}LP1z*T@h}6");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 294, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1972);
      uTF8JsonGenerator0.writeFieldName("H<#{_'}LP1z*T@h}6");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      MockFile mockFile0 = new MockFile("B");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte)61);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 53 bytes (out of 61)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = '-';
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 65535);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 10
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-37);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)102;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2148, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext2.allocNameCopyBuffer(60);
      uTF8JsonGenerator0.writeStartArray();
      String string0 = "LONG";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "tT;BX|@CL%qp";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("tT;BX|@CL%qp");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("G?.<s!=,", false);
      boolean boolean1 = true;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 54, true);
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[18];
      mockFileOutputStream0.write(byteArray0, 3, (int) (byte)1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(91);
      ByteQuadsCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2254, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(2.147483647E9);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName("");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-800), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 729, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 69, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[12];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      mockFileOutputStream0.write(byteArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)15, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 105, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((double) (byte)15);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._outputTail = 55296;
      uTF8JsonGenerator0.writeNumber((long) (byte)15);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(58);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-1), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      iOContext0.allocReadIOBuffer(2416);
      iOContext1.allocWriteEncodingBuffer(51);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 56, false);
      uTF8JsonGenerator0.writeRaw("hYnW--#(9&OZ?>zM");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("hYnW--#(9&OZ?>zM", 0, 4186);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("");
      Locale locale0 = Locale.CHINA;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SerializedString serializedString0 = new SerializedString("");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1950);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 75, false);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      SerializedString serializedString2 = new SerializedString("write raw value");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(103);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = 'P';
      charArray0[2] = 'J';
      charArray0[3] = 'v';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byteArrayBuilder0.reset();
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(103);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      String string0 = "";
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.writeNullField("");
      float float0 = 26.872322F;
      pipedOutputStream0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 1024);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ")", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4044), (ObjectCodec) null, (OutputStream) null, byteArray0, (-3591), true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      CharsToNameCanonicalizer.createRoot();
      byteArrayInputStream0.read(byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty(") out of range of Java byte");
      tokenFilter1.includeElement(1);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 2, 240);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream1, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("start an array", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4010, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.toString();
      String string0 = "";
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2348), (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[12];
      byte byte0 = (byte)15;
      byteArray0[1] = (byte)15;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      String string0 = "^tg8";
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("^tg8");
      iOContext0.allocReadIOBuffer(1);
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 255, true);
      CharsToNameCanonicalizer.createRoot();
//      try { 
        uTF8JsonGenerator0.writeRaw("B");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      byte[] byteArray0 = new byte[5];
      mockFileOutputStream0.write(byteArray0, 2, 33);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ByteQuadsCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65536, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 65536);
      jsonGenerator0.writeFieldName("");
      jsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      boolean boolean1 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2524), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-2524));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 4000, (ObjectCodec) null, pipedOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2385), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)16;
      serializedString0.appendQuotedUTF8(byteArray0, 2845);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("P>FxN&");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      jsonGenerator0.writeBoolean(true);
      jsonGenerator0.writeNumber((double) 33);
      uTF8JsonGenerator0.writeFieldName("P>FxN&");
//      try { 
        jsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringReader stringReader0 = new StringReader("1w{MU!xJto0@#%FVO");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      byteArrayInputStream0.read(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext0.allocNameCopyBuffer(3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      charsToNameCanonicalizer0.makeChild(6402);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 626, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 65, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("OBJECT");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-69);
      byteArray0[4] = (byte)12;
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.version();
      uTF8JsonGenerator0.writeNumber((double) 127);
      uTF8JsonGenerator0.writeFieldName("Can not write a field name, expecting a value");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(574.8F);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55277, true);
      CharsToNameCanonicalizer.createRoot();
      mockFileOutputStream0.write(byteArray0);
      uTF8JsonGenerator0.writeNumber((double) 1);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocNameCopyBuffer((byte)0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(1.0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("l(Zh =.=");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", true);
      bufferRecycler0.allocByteBuffer(0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 68, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 108, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-2805.77153564446));
      bufferRecycler0.allocCharBuffer(2);
      uTF8JsonGenerator0.writeString("l(Zh =.=");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      uTF8JsonGenerator0.writeFieldName("5(T[snr ^mc)4@<");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-117);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-11), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      uTF8JsonGenerator0.writeStartObject();
      String string0 = "UNKNOWN";
//      try { 
        uTF8JsonGenerator0.writeNumber("UNKNOWN");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      byte[] byteArray0 = new byte[5];
      mockFileOutputStream0.write(byteArray0, 2, 33);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ByteQuadsCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65536, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 65536);
      jsonGenerator0.writeFieldName("");
      jsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55277, true);
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeNumber((double) 1);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocNameCopyBuffer((byte)0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeFieldName("l(Zh =.=");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Trying to release buffer not owned by the context
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      byteArrayInputStream0.read(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 127);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 312, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      charsToNameCanonicalizer0.makeChild(115);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      Random.setNextRandom(1);
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(525);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-43), (ObjectCodec) null, objectOutputStream1);
      uTF8JsonGenerator0.writeNumber((short)1630);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-589));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 294, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1972);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      char[] charArray0 = iOContext0.allocNameCopyBuffer(80);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2152), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 200
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55277, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((double) 1);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocNameCopyBuffer((byte)0);
      uTF8JsonGenerator0.writeStartArray();
      String string0 = "";
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeEndArray();
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringReader stringReader0 = new StringReader("1w{MU!xJto0@#%FVO");
      CharsToNameCanonicalizer.createRoot();
      byteArrayInputStream0.read(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeFieldName("1w{MU!xJto0@#%FVO");
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString0 = new SerializedString("1w{MU!xJto0@#%FVO");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = '!';
      charArray0[2] = 'J';
      charArray0[3] = '1';
      charArray0[4] = '^';
      charArray0[5] = 'n';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      String string0 = "1w{MU!xJto0@\\#%FVO";
      StringReader stringReader0 = new StringReader("1w{MU!xJto0@#%FVO");
      CharsToNameCanonicalizer.createRoot();
      byteArrayInputStream0.read(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext0.allocNameCopyBuffer(3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((-2.147483648E9));
      uTF8JsonGenerator0.writeFieldName("1w{MU!xJto0@#%FVO");
      uTF8JsonGenerator0.writeRaw('&');
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 682, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "m", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile(", although was supposed to have one", "m");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 609, (ObjectCodec) null, mockPrintStream0, byteArray0, 760, true);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString(", although was supposed to have one");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "\"{W]6", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6000, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
      iOContext1.allocNameCopyBuffer(3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("+Q}=vX<)A<S40(<3!");
      SerializedString serializedString0 = new SerializedString(">8n`#_FzR");
      uTF8JsonGenerator0.writeNumber(">8n`#_FzR");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 14, (ObjectCodec) null, pipedOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      iOContext1.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 56, false);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((double) (byte)46);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("B");
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeEndArray();
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 294, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1972);
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)102;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2148, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2, false);
      SerializedString serializedString0 = new SerializedString("[YP;");
      uTF8JsonGenerator0.writeNumber("rZmA+/gC<kd42;Z'i");
      uTF8JsonGenerator0.writeStartObject((Object) ", expecting field name");
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, ", expecting field name", true, 'A', 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("X;limeGl-/0a");
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1262), (ObjectCodec) null, mockFileOutputStream1, byteArray0, 3, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-3282.6));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("file");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 19, 126);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(116);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      String string0 = "B";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      iOContext0.allocReadIOBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 56, true);
      CharsToNameCanonicalizer.createRoot();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = 'Q';
      charArray0[2] = 'M';
      charArray0[3] = '9';
      charArray0[4] = 'A';
      charArray0[5] = '>';
      jsonGenerator0.writeRaw(charArray0, 3, 2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      charsToNameCanonicalizer0.makeChild((-787));
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B");
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2672);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1557), (ObjectCodec) null, mockFileOutputStream1, byteArray0, 93, false);
      uTF8JsonGenerator0.writeNumber(370.5539537429649);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((long) 2672);
      uTF8JsonGenerator0.writeString("B");
      uTF8JsonGenerator0.writeNumber((short) (byte)15);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-120);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeArrayFieldStart("2lZ/&?|B1p[T.M=");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      iOContext0.allocNameCopyBuffer((-1089));
      MockFile mockFile0 = new MockFile("Invalid custom escape definitions; custom escape not found for character code 0x");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1586));
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)15;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)15, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 105, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)15, true);
      uTF8JsonGenerator0.writeNumber((double) (byte)15);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeString("B");
      uTF8JsonGenerator0.writeNumber((short) (byte)52);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringReader stringReader0 = new StringReader("1w{MU!xJto0@#%FVO");
      CharsToNameCanonicalizer.createRoot();
      byteArrayInputStream0.read(byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty(") out of range of Java byte");
      TokenFilter tokenFilter2 = tokenFilter1.includeElement((-1));
      tokenFilter2.includeRootValue(2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1027, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.writeNullField(") out of range of Java byte");
      MockFile mockFile0 = new MockFile(") out of range of Java byte");
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 48);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 294, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1972);
      BigInteger bigInteger0 = BigInteger.ONE;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "9*L:%14|c", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte) (-128);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 915, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-332), false);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-33);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3193, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 440, true);
      mockFileOutputStream0.write(byteArray0, 0, 3);
      uTF8JsonGenerator0.writeArrayFieldStart("2lZ/&?|B1p[T.M=");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 58, 440);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 4, false);
      char char0 = '|';
      uTF8JsonGenerator0.writeRaw('|');
      SerializedString serializedString0 = new SerializedString("B");
      uTF8JsonGenerator0.writeNumber((-33.581474F));
      SerializedString serializedString1 = new SerializedString("j4#FFtAy?Rs.SW(L=");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", true);
      byte[] byteArray1 = ByteArrayBuilder.NO_BYTES;
      MockFileOutputStream mockFileOutputStream2 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream3 = new MockFileOutputStream("=ob4544ZNs~", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 68, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 7, true);
      uTF8JsonGenerator0.writeRaw(']');
      SerializedString serializedString0 = new SerializedString("Illegal character (");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.writeQuotedUTF8(mockFileOutputStream2);
      serializedString1.writeUnquotedUTF8(mockFileOutputStream1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2986), (ObjectCodec) null, mockFileOutputStream1, byteArray1, 1, true);
//      try { 
        uTF8JsonGenerator1.writeString((SerializableString) serializedString1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      iOContext0.allocReadIOBuffer(2409);
      iOContext1.allocNameCopyBuffer(2139);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)0, (ObjectCodec) null, mockFileOutputStream1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-955), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.useDefaultPrettyPrinter();
      uTF8JsonGenerator1.writeStartArray();
      String string0 = ":):V{0.*w\"tx~U";
      uTF8JsonGenerator0.writeFieldName(":):V{0.*w\"tx~U");
      uTF8JsonGenerator1.writeStartObject();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
//      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockFileOutputStream1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      iOContext0.allocReadIOBuffer(2409);
      char[] charArray0 = iOContext1.allocNameCopyBuffer(2139);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)0, (ObjectCodec) null, mockFileOutputStream1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-955), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator1.writeRaw(charArray0, 135, 2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      CharsToNameCanonicalizer.createRoot();
      byteArrayInputStream0.read(byteArray0);
      int int0 = 1167;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1167, (ObjectCodec) null, (OutputStream) null, byteArray0, 6, true);
      String string0 = "uymVwX:]Qx?g_c1B";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArrayFieldStart("uymVwX:]Qx?g_c1B");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 294, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.util.InternCache");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeRaw("g~ (");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      uTF8JsonGenerator0.writeNumber(1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'c';
      charArray0[2] = 'x';
      charArray0[3] = '[';
      charArray0[4] = '*';
      jsonGenerator0.writeRaw(charArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocNameCopyBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", true);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = '-';
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw(charArray0, (-1069), (-5801));
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString(charArray0, 3, 0);
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("!`0j=Jo@U,69,");
      byte[] byteArray1 = iOContext1.allocReadIOBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-2876), (ObjectCodec) null, mockFileOutputStream1, byteArray0, 2, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator1.writeString("B");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator1.writeUTF8String(byteArray1, 3, 0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeString(charArray0, 56319, 56320);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 56319
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(2409);
      iOContext1.allocNameCopyBuffer(2139);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.toString();
      bigInteger0.testBit((byte)0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 21, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3388, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 57343, false);
      mockFileOutputStream0.release();
      uTF8JsonGenerator1.writeFieldName("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator1.writeRaw("write a raw (unencoded) value");
      uTF8JsonGenerator1.writeNumber(bigInteger0);
      uTF8JsonGenerator1.writeNull();
      uTF8JsonGenerator1.writeRaw("write a raw (unencoded) value");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = "gY~ (";
      StringReader stringReader0 = new StringReader("gY~ (");
      byteArrayInputStream0.read(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 91, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('\\');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      byte[] byteArray1 = new byte[20];
      byteArray1[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeFieldName("\"mF[r~cz\u0003");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-120);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeArrayFieldStart("2lZ/&?|B1p[T.M=");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      iOContext1.allocNameCopyBuffer((-1089));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("+Q}=`,<)A<S40(<3!");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeFieldName("write a binary value");
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("m");
      Locale locale0 = Locale.CHINA;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = (-4044);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 90, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-4044), false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Locale.lookupTag(linkedList0, list1);
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue(charArray0, 0, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4044
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)78;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)18, 539);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 2 bytes (out of 2)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", true);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(2409);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.toString();
      bigInteger0.testBit((byte)0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 21, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      mockFileOutputStream1.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3388, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 57343, false);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      mockFileOutputStream0.release();
//      try { 
        uTF8JsonGenerator1.writeFieldName("Invalid custom escape definitions; custom escape not found for character code 0x");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      Object object0 = new Object();
      Object object1 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, true);
      String string0 = "B";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.toString();
      bigInteger1.testBit(2073);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 463, (ObjectCodec) null, mockFileOutputStream0, byteArray1, (byte)0, false);
      // Undeclared exception!
      uTF8JsonGenerator1.writeFieldName("B");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      String string0 = "";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3531, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber(1.0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocNameCopyBuffer((byte)0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeFieldName("l(Zh =.=");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("PDD");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 703, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      iOContext0.allocReadIOBuffer(2409);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2002, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeFieldName("BTvXDU1B +2:p`-Tj");
      uTF8JsonGenerator0.writeRaw('t');
//      try { 
        uTF8JsonGenerator0._writePPFieldName("\n");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("21wd}JY8F$'@0U");
      byte[] byteArray1 = ByteArrayBuilder.NO_BYTES;
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 3, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((double) 68);
      int int0 = 1;
      iOContext0.allocNameCopyBuffer(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeStartArray();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.testBit(55296);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-120);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeArrayFieldStart("2lZ/&?|B1p[T.M=");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      iOContext0.allocNameCopyBuffer((-1089));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(0.8F);
      SerializedString serializedString1 = new SerializedString("B");
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((-2510L));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      iOContext1.allocNameCopyBuffer((-1089));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("+Q}=`,<)A<S40(<3!");
      uTF8JsonGenerator0.writeNumberField("B", (float) 0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((double) 0);
//      try { 
        uTF8JsonGenerator0.writeFieldName("write a binary value");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 56, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-464.99878501514985));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("B");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = '^';
      charArray0[2] = 'I';
      uTF8JsonGenerator0.writeString(charArray0, 4, (int) (byte) (-37));
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "!u@22aS5", false, '5', 54);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 8)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(182);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 117, true);
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-76.835));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext1, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)102;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2148, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.toString();
      bigInteger0.testBit((byte)102);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 32, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator1.writeFieldName("B");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      mockFileOutputStream1.write(byteArray0);
      iOContext0.allocReadIOBuffer(2409);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 56, false);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((double) (byte)51);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("B");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeEndArray();
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(182);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)52, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      iOContext0.allocReadIOBuffer(2409);
      char[] charArray0 = iOContext1.allocNameCopyBuffer(2139);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)0, (ObjectCodec) null, mockFileOutputStream1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-955), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator0.writeString(" -- suspect a DoS attack based on hash collisions");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2139
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", true);
      byte[] byteArray1 = ByteArrayBuilder.NO_BYTES;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 68, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 108, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-2805.77153564446));
      char[] charArray0 = iOContext0.allocNameCopyBuffer(3);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 117, 108);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 200
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      iOContext0.allocReadIOBuffer(2409);
      char[] charArray0 = iOContext1.allocNameCopyBuffer(2139);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte) (-37), (ObjectCodec) null, mockFileOutputStream1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-955), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator0.writeString(" -- suspect a DoS attack based on hash collisions");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2139
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)15;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)15, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5801), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeRaw((char[]) null, 0, (-1));
      uTF8JsonGenerator0.writeNumber(511.51984F);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 530, 33);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1394), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)82;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 102, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)37, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("No native support for writing Type Ids");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'c';
      charArray0[2] = '8';
      charArray0[3] = 'd';
      charArray0[4] = 'V';
      charArray0[5] = ';';
      charArray0[6] = 'l';
      uTF8JsonGenerator0.writeString(charArray0, 0, (-24));
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", true);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = '-';
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw(charArray0, (-1069), (-5801));
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString(charArray0, 1446, (-1361));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-37), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("Z\"X");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeFieldName("Z\"X");
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/;<1-JH\"}r.ZS", false);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer((int) (byte)0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 50, false);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((double) (byte)0);
      uTF8JsonGenerator0.writeString("/;<1-JH\"}r.ZS");
      uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      uTF8JsonGenerator0.writeNumber(117);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      iOContext0.allocReadIOBuffer(2409);
      iOContext1.allocNameCopyBuffer(2139);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)0, (ObjectCodec) null, mockFileOutputStream1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-955), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator0.writeString(" -- suspect a DoS attack based on hash collisions");
      uTF8JsonGenerator0.writeFieldName(":):V{0.*w\"tx~U");
      uTF8JsonGenerator1.writeStartObject();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator1, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('0');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 42, (ObjectCodec) null, stringWriter1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte)15;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      mockFileOutputStream0.write(byteArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)15, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 105, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)15, true);
      uTF8JsonGenerator0.writeNumber((double) (byte)15);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString(" -- suspect a DoS attack based on hash collisions");
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = '!';
      charArray0[2] = '$';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = '-';
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw(charArray0, (-1069), (-5801));
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      SerializedString serializedString0 = new SerializedString("B");
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = '-';
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw(charArray0, (-1069), (-5801));
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("21wd}JY8F$'@0U");
      byte[] byteArray1 = ByteArrayBuilder.NO_BYTES;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 3, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((double) 68);
      char[] charArray0 = iOContext0.allocNameCopyBuffer(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator0.writeString(" -- suspect a DoS attack based on hash collisions");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeString(charArray0, 1, 872);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 200
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1972);
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 116, 4);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("gY~ (");
      byteArrayInputStream0.read(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 91, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[1] = 'v';
      charArray0[2] = ':';
      charArray0[3] = '1';
      charArray0[4] = 'n';
      charArray0[5] = 'f';
      charArray0[6] = '^';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, (-488));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      byteArrayInputStream0.read(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeFieldName("\n");
      uTF8JsonGenerator0.writeRaw('~');
//      try { 
        uTF8JsonGenerator0._writePPFieldName("gY~ (");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 98, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream2 = new MockFileOutputStream("Lm(UV,sya DXdzA4f(", true);
      iOContext1.allocReadIOBuffer(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2409, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 2, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-466.20323233));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("B");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("gY~ (");
      byteArrayInputStream0.read(byteArray0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 88;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 21, (ObjectCodec) null, (OutputStream) null, byteArray0, 124, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      int int0 = 1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 4, false);
      uTF8JsonGenerator0.writeRaw('\u0089');
      SerializedString serializedString0 = new SerializedString("B");
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      serializedString0.writeUnquotedUTF8(mockFileOutputStream1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, (-969), 199);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      int int0 = 1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 4, false);
      uTF8JsonGenerator0.writeRaw('|');
      SerializedString serializedString0 = new SerializedString("B");
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      serializedString0.writeUnquotedUTF8(mockFileOutputStream1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, (-969), 199);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.CANADA;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":.'mUr]k4lZJG#", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(":.'mUr]k4lZJG#");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      uTF8JsonGenerator0._bufferRecyclable = true;
      uTF8JsonGenerator0.writeRaw("BIG_INTEGER", 0, 2);
      SerializedString serializedString0 = new SerializedString(":.'mUr]k4lZJG#");
      uTF8JsonGenerator0.writeString("9`!aDCK");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      Locale.forLanguageTag("");
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      uTF8JsonGenerator0.setCodec((ObjectCodec) null);
//      try { 
        uTF8JsonGenerator0.writeNumber((-4615));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      iOContext0.constructTextBuffer();
      byteArrayInputStream0.skip(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "Can not ", (Object[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-127);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      CharsToNameCanonicalizer.createRoot();
      String string0 = "wO|,_";
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("\"mF[r~cz\u0003");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      iOContext0.allocWriteEncodingBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B");
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      PipedInputStream pipedInputStream0 = new PipedInputStream(117);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("B");
      char char0 = '+';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 66, true);
//      try { 
        uTF8JsonGenerator0.writeRaw('+');
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(2409);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 56, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-466.20323233));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("B");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 3, 1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = '^';
      charArray0[2] = 'I';
      uTF8JsonGenerator0.writeString(charArray0, 4, (int) (byte) (-37));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("gY~ (");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 56, true);
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 58, 63);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      File file0 = MockFile.createTempFile("uY6?", "m");
      MockFile mockFile0 = new MockFile(file0, "uY6?");
      mockFile0.getCanonicalPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      IOContext iOContext2 = new IOContext(bufferRecycler0, locale1, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)52;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, (-192), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBinaryField("hY^", byteArray0);
      System.setCurrentTimeMillis((byte)52);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 1, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "B";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)19, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-120);
      byteArray1[1] = (byte)19;
      byteArray1[2] = (byte) (-120);
      byteArray1[3] = (byte) (-120);
      byteArray1[4] = (byte) (-102);
      byteArray1[5] = (byte) (-120);
      byteArray1[6] = (byte)19;
      uTF8JsonGenerator0.writeBinaryField("", byteArray1);
      System.setCurrentTimeMillis(0L);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 108, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      iOContext0.allocReadIOBuffer(2409);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1200), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('a');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1200
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.allocWriteEncodingBuffer();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(2409);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 56, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-466.20323233));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("B");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 3, 67);
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = '^';
      charArray0[2] = 'I';
      uTF8JsonGenerator0.writeString(charArray0, 4, (int) (byte) (-37));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)65;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)33, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("fs^");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      byteArrayInputStream0.read(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      int int0 = 56319;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1955), (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-1920), false);
      String string0 = "8h6Fftd";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("8h6Fftd");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1920
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)15, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)15, true);
      uTF8JsonGenerator0.writeNumber((double) (byte)15);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeFieldName("B");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "B";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-120);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)19, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      MockFile mockFile0 = new MockFile("B");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 149);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 139 bytes (out of 149)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      iOContext0.allocReadIOBuffer(2416);
      iOContext1.allocWriteEncodingBuffer(51);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 56, false);
      MockFile mockFile0 = new MockFile("B");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 119);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 111 bytes (out of 119)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = "gY~ (";
      StringReader stringReader0 = new StringReader("gY~ (");
      byteArrayInputStream0.read(byteArray0);
      ObjectCodec objectCodec0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      StringReader stringReader0 = new StringReader("Current context not an object but ");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-24), (ObjectCodec) null, pipedOutputStream0, byteArray0, 86, false);
      BigInteger bigInteger0 = BigInteger.ONE;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringReader stringReader0 = new StringReader("g~ (");
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile("\"mF[r~cz\u0003", "r9ACt");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      iOContext0.allocReadIOBuffer(2409);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 56, false);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((char[]) null, (-38), (int) (byte) (-37));
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeRaw("B,0E/H", 3, 2);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      byte[] byteArray1 = iOContext2.allocReadIOBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1024), (ObjectCodec) null, mockFileOutputStream1, byteArray1, (byte)0, false);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString((String) null);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 757, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 102, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1023);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator1.setCodec((ObjectCodec) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 248, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-521));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57, (ObjectCodec) null, pipedOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.CANADA;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":.'mUr]k4lZJG#", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw("BIG_INTEGER", 0, 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      tokenFilter0.includeProperty("BIG_INTEGER");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      uTF8JsonGenerator0.writeRaw((char[]) null, 0, (-4505));
      uTF8JsonGenerator0.writeFieldName("BIG_INTEGER");
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("BIG_INTEGER", 2, (int) (byte)12);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      StringReader stringReader0 = new StringReader("Current context not an object but ");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("Current context not an object but ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      uTF8JsonGenerator0.writeString(charArray0, 92, 0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "TM*", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 66, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "m";
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 90, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-4044), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext1.allocReadIOBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 37, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber((-1.0F));
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator1, tokenFilter0, false, false);
      String string1 = "was expecting double-quote to start field name";
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4044
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getOutputBuffered();
      tokenFilter0.includeProperty((String) null);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.CANADA;
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":.'mUr]k4lZJG#", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw("BIG_INTEGER", 0, 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("BIG_INTEGER");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)12, 31);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      byte[] byteArray0 = new byte[5];
      mockFileOutputStream0.write(byteArray0, 2, 33);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ByteQuadsCanonicalizer.createRoot();
      String string0 = " entries; now have ";
      SerializedString serializedString0 = new SerializedString(" entries; now have ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1490, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRaw('+');
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.CANADA;
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ":.'mUr]k4lZJG#";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":.'mUr]k4lZJG#", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      String string1 = "BIG_INTEGER";
      uTF8JsonGenerator0.writeRaw("BIG_INTEGER", 0, 2);
      SerializedString serializedString0 = new SerializedString(":.'mUr]k4lZJG#");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      byteArrayBuilder0.reset();
      int int0 = 3753;
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("\"mF[r~cz\u0003", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"mF[r~cz\u0003");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3175, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeBinaryField("Can not ", byteArray1);
      System.setCurrentTimeMillis((-998L));
      uTF8JsonGenerator0.writeNumber((long) (-1));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte byte0 = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{j%%M7,w#?~");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      int int0 = 2113;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-987), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("{j%%M7,w#?~");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -987
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      StringReader stringReader0 = new StringReader("Current context not an object but ");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("Current context not an object but ");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      uTF8JsonGenerator0.writeNumber((-3004));
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = 'n';
      charArray0[4] = '/';
      charArray0[5] = 'G';
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeString(charArray0, 4, 16);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      File file0 = MockFile.createTempFile("uY6?", "m");
      MockFile mockFile0 = new MockFile(file0, "uY6?");
      mockFile0.getCanonicalPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      IOContext iOContext2 = new IOContext(bufferRecycler0, locale1, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 500, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 9, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = ')';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)49, 33);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "B";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)19, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(2);
      TokenFilter tokenFilter3 = tokenFilter2.includeRootValue((byte)19);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, false, false);
      filteringGeneratorDelegate0.writeNullField("B");
      MockFile mockFile0 = new MockFile("B");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      filteringGeneratorDelegate0.getCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = 'I';
      charArray0[2] = '<';
      charArray0[3] = ']';
      charArray0[4] = 'b';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-3282), (int) (byte)127);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3282
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.ROOT;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)34;
      StringReader stringReader0 = new StringReader("e");
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-39), (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      uTF8JsonGenerator0.writeNumber(33);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._verifyValueWrite("*K!]`|F6V{");
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '<';
      charArray0[2] = 'E';
      charArray0[3] = 'J';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-4008), 33);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4008
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Rrwa{(zHl;gyM7%6");
      byte[] byteArray1 = ByteArrayBuilder.NO_BYTES;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 68, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 98, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-2805.77153564446));
      iOContext0.allocNameCopyBuffer(3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("l(Zh =.=");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBoolean(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4b91E6#]!WEhsZ#e9");
      uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
      uTF8JsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("a");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("a");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      mockFileOutputStream0.write(byteArray0, 2, 33);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 224, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 33, 3, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("m");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1781), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)2225);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 4);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      File file0 = MockFile.createTempFile("\"mF[r~cz\u0003", "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "jmV[|", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinaryField("2:6", byteArray0);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeNumber("-SK1Em");
      uTF8JsonGenerator0._checkStdFeatureChanges(0, (byte)114);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      byteArrayInputStream0.read(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-2429.4868F));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      serializedString1.asUnquotedUTF8();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("gY~ (", 2, 12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(2);
      ObjectCodec objectCodec0 = null;
      String string0 = "B";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B");
      byte[] byteArray1 = bufferRecycler0.allocByteBuffer(0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 68, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 108, true);
      CharsToNameCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      int int0 = 2125;
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2125);
      uTF8JsonGenerator0.writeNumber("B");
      int int1 = 2117;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2117, (ObjectCodec) null, mockFileOutputStream1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B");
      byte[] byteArray1 = bufferRecycler0.allocByteBuffer(0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 68, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 108, true);
      CharsToNameCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2125);
      uTF8JsonGenerator0.writeNumber("B");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2117, (ObjectCodec) null, mockFileOutputStream1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 0, 3);
      IOContext iOContext1 = new IOContext((BufferRecycler) null, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, pipedOutputStream0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 56);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 50 bytes (out of 56)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "B";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)19, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(2);
      TokenFilter tokenFilter3 = tokenFilter2.includeRootValue((byte)19);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, false, false);
      filteringGeneratorDelegate0.writeNullField("B");
      MockFile mockFile0 = new MockFile("B");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 149);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 139 bytes (out of 149)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-7);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Current context not an object but ");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 57);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 52 bytes (out of 57)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("gY~ (");
      byteArrayInputStream0.read(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 91, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      File file0 = MockFile.createTempFile("\"mF[r~cz\u0003", "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "com.fasterxml.jackson.core.JsonParser$Feature", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinaryField("2:6", byteArray0);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeNumber("-SK1Em");
      uTF8JsonGenerator0._checkStdFeatureChanges(0, (byte)114);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringReader stringReader0 = new StringReader("g~ (");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("com.fasterxml.jackson.core.util.InternCache");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("g~ (");
      uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      uTF8JsonGenerator0.writeNumber(1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-302.0F));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      iOContext0.allocTokenBuffer();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("\"mF[r~cz\u0003", 3, 56319);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.ROOT;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)34;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      StringReader stringReader0 = new StringReader("e");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 120, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement((byte) (-80));
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte) (-80), (ObjectCodec) null, (OutputStream) null, byteArray0, 3729, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 90, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-4044), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext1.allocReadIOBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 37, (ObjectCodec) null, byteArrayBuilder0);
      float float0 = (-1.0F);
      uTF8JsonGenerator1.writeNumber((-1.0F));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, (-4044), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.getOutputTarget();
      uTF8JsonGenerator2.writeBinaryField("m", byteArrayBuilder0.NO_BYTES);
      System.setCurrentTimeMillis(56320);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.allocWriteEncodingBuffer();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(2409);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-466.20323233));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("B");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBoolean(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 3, 67);
      mockFileOutputStream0.close();
//      try { 
        uTF8JsonGenerator0.writeString("B");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      iOContext0.allocTokenBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 90, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-4044), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext1.allocReadIOBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 37, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1._flushBuffer();
      uTF8JsonGenerator1.writeNumber((-1.0F));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, (-4044), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.getOutputTarget();
      uTF8JsonGenerator2.writeBinaryField("m", byteArrayBuilder0.NO_BYTES);
      System.setCurrentTimeMillis(56320);
      uTF8JsonGenerator2.writeNumber(538L);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("Current context not an object but ", "jmFr~czd");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "gY~ (", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringReader0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 60, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 91);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 90, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-4044), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byteArrayBuilder0.reset();
      iOContext1.allocReadIOBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 37, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber((-1.0F));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, (-4044), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.getOutputTarget();
      System.setCurrentTimeMillis(56320);
      uTF8JsonGenerator2.writeNumber(538L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(1114111);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      String string0 = "\"mF[r~cz\\3";
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      int int0 = 869;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("qmDUvW");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Rrwa{(zHl;gyM7%6", true);
      iOContext1.allocReadIOBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 68, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 98, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-2805.77153564446));
      iOContext1.allocNameCopyBuffer(3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("l(Zh =.=");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Current context not an object but ");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("Current context not an object but ");
      uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      uTF8JsonGenerator0.writeNumber((-3004));
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      File file0 = MockFile.createTempFile("gY~ (", "com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "gY~ (", (Object[]) null);
      printStream0.println();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, 33, true);
      CharsToNameCanonicalizer.createRoot();
      mockPrintStream0.print(false);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.json.UTF8JsonGenerator", 0);
      float float0 = 3777.82F;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1171, 11);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1171
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler1, pushbackInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1000, true);
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("Current context not an object but ", "\"mF[r~cz\u0003");
      file0.getCanonicalPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.TAIWAN;
      mockPrintStream0.format(locale0, "Current context not an object but ", (Object[]) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      mockFileOutputStream0.write(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 500, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("$VALUES");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Rrwa{(zHl;gyM7%6", true);
      iOContext1.allocReadIOBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 68, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 98, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-2805.77153564446));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("l(Zh =.=");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", true);
      iOContext0.allocReadIOBuffer(2409);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeNumber("B");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.allocWriteEncodingBuffer();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(2409);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 56, false);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-466.20323233));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("B");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 3, 67);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Current context not an object but ");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 57);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 56 bytes (out of 57)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      File file0 = MockFile.createTempFile("gY~ (", "gY~ (");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("gY~ (");
      int int0 = 1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 156, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)116);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2251);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 2251 bytes (out of 2251)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 114, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1459);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-114), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 114, false);
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 745, (-178));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" - ", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" - ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0._checkStdFeatureChanges(1, 126);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((float) 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-33);
      byteArray1[4] = (byte)0;
      serializedString0.appendQuotedUTF8(byteArray1, (byte)11);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis(3);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-1L));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-13510), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)1630);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 0);
      filteringGeneratorDelegate0.writeNullField("");
//      try { 
        filteringGeneratorDelegate0.writeNumberField("", (float) 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("7m$,S}^My");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7m$,S}^My");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 500, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)684);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(33);
      TokenFilter tokenFilter2 = tokenFilter1.includeProperty("8}a|tI C");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter2, true, false);
      filteringGeneratorDelegate0.writeNullField("");
//      try { 
        filteringGeneratorDelegate0.writeNumberField("", (float) 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) '5');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString2);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("YUp{6O'| wnY^B=P");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec0 = null;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)19, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(2);
      TokenFilter tokenFilter3 = tokenFilter2.includeRootValue((byte)19);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, false, false);
      filteringGeneratorDelegate0.writeNullField("B");
      MockFile mockFile0 = new MockFile("B");
//      try { 
        uTF8JsonGenerator0._writePPFieldName("B");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.CANADA;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":.'mUr]k4lZJG#", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      String string0 = "BIG_INTEGER";
      uTF8JsonGenerator0.writeRaw("BIG_INTEGER", 0, 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte byte0 = (byte)12;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("BIG_INTEGER");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      uTF8JsonGenerator0.writeRaw((char[]) null, 0, (-4505));
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a null, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      file0.getCanonicalPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "Can not ", (Object[]) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      mockFileOutputStream0.write(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 500, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      iOContext0.allocReadIOBuffer(2409);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 56, false);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((-466.20323233));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("B");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeEndArray();
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 90, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-4044), true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext1.allocReadIOBuffer(3);
      int int0 = 37;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber((-1.0F));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 90, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-4044), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext1.allocReadIOBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 37, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber((-1.0F));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, (-4044), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.getOutputTarget();
      System.setCurrentTimeMillis(56320);
      uTF8JsonGenerator2.writeNumber(538L);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "Can not ", (Object[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, true);
      CharsToNameCanonicalizer.createRoot();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      uTF8JsonGenerator0.writeStartArray(0);
      uTF8JsonGenerator0.writeNumber("Can not ");
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      // Undeclared exception!
      jsonGenerator0.writeUTF8String(byteArray0, 0, 264);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      byte[] byteArray0 = new byte[5];
      mockFileOutputStream0.write(byteArray0, 2, 33);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ByteQuadsCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65536, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeStartArray(3);
      uTF8JsonGenerator0.writeNumber("UNKNOWN");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.CANADA;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":.'mUr]k4lZJG#", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw("BIG_INTEGER", 0, 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)12;
      serializedString0.appendQuotedUTF8(byteArray0, 12);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      int int0 = (-1437);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("BIG_INTEGER", "BIG_INTEGER", false, 'z', (-1437));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 11)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-566), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)19);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) (-120), 56320);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "7m$,S}^My";
      StringReader stringReader0 = new StringReader("7m$,S}^My");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '5';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 12000);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 50, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 6267, 50);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(103);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)1630);
      String string0 = "";
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      String string1 = "(,uW";
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 2251);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "Can not ", (Object[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      uTF8JsonGenerator0.writeStartArray(0);
      uTF8JsonGenerator0.writeNumber("Can not ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 90, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-4044), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext1.allocReadIOBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 37, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber((-1.0F));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("$,]TAF", "vPhd) 8gEu0skLD)a", false, '|', 56320);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 17)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)114;
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000, (ObjectCodec) null, pipedOutputStream0, byteArray0, 5, true);
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(103);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)1630);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate0.writeNullField("");
//      try { 
        filteringGeneratorDelegate0.writeNumberField("", 26.872322F);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      String string0 = "\"mF[r~cz\\3";
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 74, true);
      CharsToNameCanonicalizer.createRoot();
//      try { 
        uTF8JsonGenerator0.writeNumber(374.9);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      iOContext0.allocReadIOBuffer(2409);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1351), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(1336.9943F);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("$,]TAF", "vPhd) 8gEu0skLD)a", false, '|', (-2117));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 17)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-555), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "Can not ", (Object[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, true);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(103);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)1630);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      Locale locale0 = Locale.CHINA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 90, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-4044), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      String string0 = "";
      // Undeclared exception!
//      try { 
        filteringGeneratorDelegate0.writeNullField("zT");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4044
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      BigDecimal bigDecimal0 = new BigDecimal((-3031L));
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not write a field name, expecting a value");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Can not write a field name, expecting a value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((String) null, 2, (int) (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      File file0 = MockFile.createTempFile("JSON", "gY~ (");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Can not currently override name during filtering read", (Object[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3525), (ObjectCodec) null, printStream0, byteArray0, 49, true);
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(624.87608053);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      char[] charArray0 = new char[15];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("gY~ (", "gY~ (");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "gY~ (", (Object[]) null);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("gY~ (");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 156, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      SerializedString serializedString1 = new SerializedString("gY~ (");
//      try { 
        uTF8JsonGenerator0.writeNumber("gY~ (");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-566), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
//      try { 
        uTF8JsonGenerator0._outputSurrogates((byte)19, (byte)0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x13, second 0x0
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
//      try { 
        filteringGeneratorDelegate0.writeNullField("m");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "gY~ (";
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      String string1 = "\"mF[r~cz\\3";
      MockFile mockFile0 = new MockFile("gY~ (");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 65536, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 12, (-2), false);
      readerBasedJsonParser0._getByteArrayBuilder();
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 65536, true);
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 893);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y");
      int int0 = 1000;
      uTF8JsonGenerator0.writeNumber(1000);
      char char0 = 'L';
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("Y", (String) null, false, 'L', 4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      StringReader stringReader0 = new StringReader("gY~ (");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gY~ (");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Fvh8");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 45, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 2149);
      char[] charArray0 = new char[4];
      uTF8JsonGenerator0.writeString("gY~ (");
      uTF8JsonGenerator0._releaseBuffers();
      charArray0[0] = '}';
      charArray0[1] = '^';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("gY~ (");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber("?0<efJWAQ%ucXZ");
      String string0 = "";
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("?0<efJWAQ%ucXZ", "", true, 'q', 1931);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "Can not ", (Object[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, true);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeNumber((double) 33);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("gY~ (");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      // Undeclared exception!
//      try { 
        filteringGeneratorDelegate0.writeRaw('a');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-110), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      System.setCurrentTimeMillis(3);
      uTF8JsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      boolean boolean1 = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 224, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 33, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)12, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("KV;7|6", 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      byte[] byteArray1 = new byte[19];
      byteArray1[0] = (byte)114;
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArray1, 1690, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 33);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "Can not ", (Object[]) null);
      byte[] byteArray1 = new byte[19];
      byteArray1[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, true);
      uTF8JsonGenerator0.writeBinaryField("Can not ", byteArray0);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      uTF8JsonGenerator0.writeNumber("Can not ");
      uTF8JsonGenerator0._checkStdFeatureChanges((-3302), (byte)67);
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" - ", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" - ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumberField(" - ", (float) (byte)0);
      uTF8JsonGenerator0._checkStdFeatureChanges(1, 126);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((float) 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((char[]) null, 0, (-1756));
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber("`WHh~XoE_jt@");
//      try { 
        uTF8JsonGenerator0._outputSurrogates(1, (byte)0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x1, second 0x0
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 26, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, 0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      String string0 = null;
      // Undeclared exception!
//      try { 
        filteringGeneratorDelegate0.writeNullField((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("7m$,S}^My");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      MockFile mockFile0 = new MockFile("7m$,S}^My");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "b=mA", (Object[]) null);
      mockFileOutputStream0.close();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-825), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1459, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (byte)114);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("B", false);
      iOContext0.allocReadIOBuffer(2409);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1351), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(1336.9943F);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      charsToNameCanonicalizer0.makeChild(1228);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      int int0 = 21;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      // Undeclared exception!
//      try { 
        filteringGeneratorDelegate0.writeNullField("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("KV;7|6", 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#|-;r~'");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "#|-;r~'", (Object[]) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)5, (ObjectCodec) null, mockPrintStream0, byteArray0, 1347, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)5, (-116));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "Can not ", (Object[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, true);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      uTF8JsonGenerator0.writeNumber("Can not ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("?0<efJWAQ%ucXZ");
      String string0 = "";
      char char0 = 'q';
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "", true, 'q', 14);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      mockFileOutputStream0.write(byteArray0, 2, 33);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 224, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 33, 3, false);
      SerializedString serializedString0 = new SerializedString("NL)");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3222), (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 1219, 128);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" - ", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" - ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0._checkStdFeatureChanges(1, 126);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((float) 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      StringReader stringReader0 = new StringReader("gY~ (");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Fvh8", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("YoRTA\ri");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 45, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 2149);
      char[] charArray0 = new char[4];
      uTF8JsonGenerator0.writeString("gY~ (");
      uTF8JsonGenerator0._releaseBuffers();
      charArray0[0] = '}';
      charArray0[1] = '^';
      charArray0[2] = 'l';
      charArray0[3] = ';';
      mockPrintStream0.print(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw((String) null, 6000, 51);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("7m$,S}^My");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      MockFile mockFile0 = new MockFile("7m$,S}^My");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "b=mA", (Object[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-825), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1459, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (byte)114);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "m";
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      boolean boolean1 = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      mockFileOutputStream0.write(byteArray0, 2, 33);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      SerializedString serializedString0 = new SerializedString("7P@S+yo");
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-300), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      int int0 = (-3060);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)19;
      mockFileOutputStream0.close();
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3060), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 91, true);
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1018, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" - ", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" - ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0._checkStdFeatureChanges(1, 126);
      uTF8JsonGenerator0.writeNumber((float) 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-1025), false);
      short short0 = (short)224;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)40);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1025
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("J|2{hZ'xLLP");
      int int0 = 40;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4010, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1118, (byte)19);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      int int0 = 63;
      String string0 = "Lc l6<N[CXw";
      String string1 = "{HbzTvf8}";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)114, true);
      BigDecimal bigDecimal0 = new BigDecimal((-576L));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      mockFileOutputStream0.write(byteArray0, 2, 33);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 965, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" - ", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" - ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0._checkStdFeatureChanges(1, 126);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((float) 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((char[]) null, 0, (-1756));
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "MFeOaoD#2B)";
      StringReader stringReader0 = new StringReader("MFeOaoD#2B)");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      char char0 = '5';
      charArray0[0] = '5';
      MockFile mockFile0 = new MockFile("JCaQ(n5DA#~QBDyj]", "(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("(", objectArray0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, filterOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("7m$,S}^My");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '5';
      int int0 = 377;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3155, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 377, (-1262), false);
      int int1 = 12000;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 12000);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      readerBasedJsonParser0.skipChildren();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 50, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)224);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      mockFileOutputStream0.write(byteArray0, 2, 33);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 224, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 33, 3, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65536, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)12;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 56319, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-37);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-37);
      byteArray1[1] = (byte) (-37);
      byteArray1[2] = (byte) (-37);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-37);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-517), (ObjectCodec) null, byteArrayBuilder0, byteArray1, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("gY~ (", "com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "gY~ (", (Object[]) null);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 156, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)79;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (-3940), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      File file0 = MockFile.createTempFile("gY~ (", "com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 48);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
//      try { 
        uTF8JsonGenerator0.writeNumber((short)224);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{j%%M7,w#?~");
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)70, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2113, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant(".wiB,aMX5S'9*J'", "write a number", false, '^', (-32768));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 14)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      iOContext0.allocTokenBuffer((-1064));
      int int0 = 443;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2113, false);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("gY~ (");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      boolean boolean1 = false;
      int int0 = 57343;
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[2] = (byte) (-69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-672), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" - ", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[0] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" - ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = '<';
      charArray0[2] = 'X';
      charArray0[3] = 'A';
      charArray0[4] = 'e';
      charArray0[5] = 'k';
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)0, (int) (byte)0);
      uTF8JsonGenerator0.flush();
      assertTrue(uTF8JsonGenerator0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("7m$,S}^My");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      char char0 = 'o';
      charArray0[1] = 'o';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3452, 3, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-566), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Fvh8", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("YoRTA\ri");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2149, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber((float) 1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "Can not ", (Object[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, true);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      uTF8JsonGenerator0._verifyValueWrite("gY~ (");
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      File file0 = MockFile.createTempFile("Can not ", "\"mF[r~cz\u0003");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "Can not ", (Object[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, true);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 6, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      boolean boolean1 = false;
      int int0 = 57343;
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[2] = (byte) (-69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-672), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" - ", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" - ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      File file0 = MockFile.createTempFile("gY~ (", "com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockPrintStream mockPrintStream1 = new MockPrintStream("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 33, true);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.json.UTF8JsonGenerator", 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-2405), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      readerBasedJsonParser0.skipChildren();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-825), false);
      short short0 = (short)224;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)224);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -825
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 0;
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 102, false);
      String string0 = "Can not write a field name, expecting a value";
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      File file0 = MockFile.createTempFile("gY~ (", "com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.format(locale0, "gY~ (", (Object[]) null);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 4000, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4000
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      mockFileOutputStream0.write(byteArray0, 2, 33);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 224, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 33, 3, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65536, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 512, 1538);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 0;
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      String string0 = "Can not write a field name, expecting a value";
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 0;
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue("Can not write a field name, expecting a value", 2, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#@8!Z3$-!N", true);
      StringReader stringReader0 = new StringReader("#@8!Z3$-!N");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((float) 1);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      int int0 = 443;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2113, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-633.7390746));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#|-;r~'");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = new SerializedString("#|-;r~'");
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("vF'p");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vF'p");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 102, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-388), (byte) (-69));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      mockFileOutputStream0.write(byteArray0, 2, 33);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 224, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 33, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)12, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('u');
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#|-;r~'", true);
      iOContext1.allocReadIOBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 16, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) (byte)47);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      File file0 = MockFile.createTempFile("gY~ (", "com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "gY~ (", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, 33, true);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.json.UTF8JsonGenerator", 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(3777.82F);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      File file0 = MockFile.createTempFile("gY~ (", "com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "gY~ (", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, 33, true);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      SerializedString serializedString0 = new SerializedString(" zu1mpP=PQ$@jBb81Z");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      int int0 = 612;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2113, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 612, true);
      int int1 = 12;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)224);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      char char0 = '{';
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((String) null, (String) null, true, 'W', 93);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(", although was supposed to have one", "Unrecognized character escape ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('w');
      IOContext iOContext1 = new IOContext(bufferRecycler0, ", although was supposed to have one", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(3);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 57343, 1639);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "o,hs%9$0~3q1Io", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o,hs%9$0~3q1Io");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((byte)0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4985), (ObjectCodec) null, byteArrayBuilder0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 247, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 612, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2048, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(7);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1914), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-5), false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      CharsToNameCanonicalizer.createRoot();
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-100);
      SerializableString serializableString0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)12;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 65535, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 40, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 65535);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      
//      try { 
        uTF8JsonGenerator0._outputSurrogates((byte)0, (byte)0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x0, second 0x0
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawValue("Can not write a field name, expecting a value", 2, 0);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "o,hs%9$0~3q1Io", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o,hs%9$0~3q1Io");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)12, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 33, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 91, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2972);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2113, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("gY~ (", 2308, 33);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("gY~ (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[20];
      charArray0[0] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 90, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2113, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 33, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      int int0 = 403;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 255, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      StringReader stringReader0 = new StringReader("gY~ (");
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gY~ (");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Fvh8");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      int int0 = 45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 45, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 2149);
      char[] charArray0 = new char[4];
      uTF8JsonGenerator0.writeString("gY~ (");
      uTF8JsonGenerator0._releaseBuffers();
      charArray0[0] = '}';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("gY~ (", 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#|-;r~'", true);
      iOContext1.allocReadIOBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 16, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) (byte)47);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("\"go6", (byte)5);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("KV;7|6", 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("o0>`q<#@29-v_+&O[$");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3278, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 1513, 2304);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(512);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-3089), (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")yr8d}V,`$!$", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an ARRAY but ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3278, (ObjectCodec) null, mockPrintStream1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 3, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      int int0 = 6;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2762, (ObjectCodec) null, byteArrayBuilder0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" - ", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1738), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (-2983), 1550);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1738
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("m");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2048, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("m", "m", false, '{', 57343);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 1)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1173), (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile((File) null, "hD'.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('}');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)67);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "hKv[]_4g*";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "hKv[]_4g*", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)115;
      byte byte0 = (byte)51;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 37, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)32, 1589);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(jsonGeneratorDelegate0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate1, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = new Locale("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, (byte)0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      StringWriter stringWriter0 = new StringWriter((byte)0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }
}
