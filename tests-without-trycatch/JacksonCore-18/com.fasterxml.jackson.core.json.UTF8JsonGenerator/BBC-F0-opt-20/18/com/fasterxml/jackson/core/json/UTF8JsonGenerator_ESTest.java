/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 09:01:16 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-38);
      iOContext0.constructTextBuffer();
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)69;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)42, false);
      uTF8JsonGenerator0.getOutputTarget();
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = new SerializedString("a'o{JT,");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-184);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2637), (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2091, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = new SerializedString("Can not ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)39;
      uTF8JsonGenerator0.writeBinaryField("a'o{JT,", byteArray0);
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      byteArrayBuilder0.write(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 332, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
//      try { 
        uTF8JsonGenerator0.writeNumber(1624.4);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-148), (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 554, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      byteArrayBuilder0.write(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 332, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(0L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 63, true);
      uTF8JsonGenerator0._verifyValueWrite("FLUSH_PASSED_TO_STREAM");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinaryField("iSq uQT9*GM4A:{", byteArrayBuilder0.NO_BYTES);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-848), (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E");
      uTF8JsonGenerator0.writeBooleanField("!`zk#r-rZ}@QD_m4", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("E", "&h)bvk 2e", true, 'R', 57343);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 9)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)98;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2089, (ObjectCodec) null, pipedOutputStream0, byteArray0, 55296, true);
//      try { 
        uTF8JsonGenerator0.writeNumber((short)1392);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 682;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(682);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 55296;
      uTF8JsonGenerator0._releaseBuffers();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream("99?KY");
      Object[] objectArray0 = new Object[2];
      byteArrayBuilder0.finishCurrentSegment();
      objectArray0[1] = (Object) "99?KY";
      PrintStream printStream0 = mockPrintStream0.printf("99?KY", objectArray0);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)48;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, printStream0, byteArray0, 36, false);
      uTF8JsonGenerator1._outputSurrogates(115, 57343);
      uTF8JsonGenerator1.writeNumber("@Q;{");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw("99?KY", (-362), (int) (byte) (-8));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(92);
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      byteArrayOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeString(charArray0, 1050, 2328);
      char[] charArray1 = new char[7];
      charArray1[0] = 'k';
      charArray1[1] = 'C';
      charArray1[2] = ']';
      charArray1[3] = '@';
      charArray1[4] = 'I';
      charArray1[5] = 'z';
      charArray1[6] = 'R';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray1, 1, 2934);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 11, 0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-657), (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-459));
      serializedString0.appendQuotedUTF8(byteArrayBuilder0.NO_BYTES, 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-4), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-30), false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      byteArrayBuilder0.write(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[17];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 332, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2678);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1272;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 3;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1272, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 512);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(128);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      StringReader stringReader0 = new StringReader("-wYOxtq");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 682, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 2047, true);
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte byte0 = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 47, 1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 63);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      int int0 = 8000;
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 804, (ObjectCodec) null, byteArrayBuilder1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 117);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 117 bytes (out of 117)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2638));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3363, (ObjectCodec) null, byteArrayBuilder1);
      uTF8JsonGenerator0.writeBooleanField("!`zk#-rZ}@QD_m4", true);
//      try { 
        uTF8JsonGenerator0.writeBinaryField("}%%i|=F2", byteArrayBuilder1.NO_BYTES);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber("8s5YQ'Z(afe|h");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream("99?KY");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "99?KY";
      PrintStream printStream0 = mockPrintStream0.printf("99?KY", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, printStream0, byteArray0, 32, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._outputSurrogates(115, 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2091, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeStartArray(2);
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 'U';
      charArray0[2] = 'T';
      charArray0[3] = '\\';
      charArray0[4] = '[';
      charArray0[5] = 'B';
      charArray0[6] = '0';
      byteArrayBuilder0.appendTwoBytes(841);
      charArray0[7] = ' ';
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeString(charArray0, 0, 1047);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2091, (ObjectCodec) null, byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator1.writeStartArray(2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      String string0 = "gseo][CV\"@3d\\c0O*\\J";
      uTF8JsonGenerator0.writeNumberField(",]WQZkQ5H~", 52);
      uTF8JsonGenerator0.writeNumber("gseo][CV\"@3dc0O*J");
//      try { 
        uTF8JsonGenerator1._writePPFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 2568);
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 8000, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 1 bytes (out of 2)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ": ", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayBuilder0.write(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      objectOutputStream1.writeFloat((-2221));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 695, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 174, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder1.NO_BYTES, 0, false);
//      try { 
        uTF8JsonGenerator0._outputSurrogates((-3952), 1947);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0xfffff090, second 0x79b
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBinary((InputStream) null, 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 92, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
//      try { 
        uTF8JsonGenerator0.writeString("*^'o$PT>h7(>");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 93, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(1828L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber(2430);
      uTF8JsonGenerator0.writeBinaryField("aM.,utkQm?[($p7v{", byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeString("kE7B%?R*t#RbY{l[g");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeRaw("aM.,utkQm?[($p7v{");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) (byte)32);
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeFloat(1.0F);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3249, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 57343, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._outputSurrogates((-2221), 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray1, 33, true);
      SerializedString serializedString0 = new SerializedString("?<b^fcDCYR");
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(45);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder1);
      byte byte0 = (byte)23;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-861), (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder1.NO_BYTES, (byte)127, false);
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 45);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(147);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      iOContext0.allocNameCopyBuffer(3202);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)23;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 2, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((long) 0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, bufferedInputStream0, byteArrayBuilder1.NO_BYTES, 50);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)127, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder0.NO_BYTES, (byte)127, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder1.append(2047);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder1);
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder(bufferRecycler0, 46);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1557), (ObjectCodec) null, objectOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0093';
      charArray0[1] = '\u0093';
      charArray0[2] = '\u0093';
      charArray0[3] = '\\';
      charArray0[4] = '\u0093';
      charArray0[5] = '\u0093';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 97);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayBuilder0.write((-2221));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayBuilder0.write((-2221));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeFloat((-2221));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.close();
      byteArrayOutputStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 69, true);
      int int0 = 1000000000;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber((double) 56320);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(682);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      String string0 = "Internal error: TypeReference constructed without actual type information";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Internal error: TypeReference constructed without actual type information", true);
      mockFileOutputStream0.getChannel();
      uTF8JsonGenerator0.writeNumber((short)5);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 22, (ObjectCodec) null, (Writer) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)85;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber(2430);
      uTF8JsonGenerator0.writeBinaryField("aM.,utkQm?[($p7v{", byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeString("kE7B%?R*t#RbY{l[g");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("Spill-over slots in symbol table with ", "aM.,utkQm?[($p7v{", false, '~', 127);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 17)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(665);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)104;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 367, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBooleanField("", true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(665);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 1, false);
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      uTF8JsonGenerator0.writeString(charArray0, 2, 0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)74;
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, 0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)74;
      byteArray2[1] = (byte)11;
      byteArray2[2] = (byte)74;
      byteArray2[3] = (byte)11;
      byteArray2[4] = (byte)11;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray2, (-3691), 8);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayBuilder0.write((-2221));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeFloat((-2221));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._outputSurrogates(1000000000, 57343);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocTokenBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
      byteArrayOutputStream0.flush();
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(665);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      byte[] byteArray0 = new byte[2];
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '[';
      charArray0[2] = '>';
      charArray0[3] = 'H';
      charArray0[4] = 'T';
      charArray0[5] = 'a';
      charArray0[0] = '\"';
      charArray0[7] = 'T';
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-35);
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte) (-115);
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)58;
      byteArray1[5] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2268, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocTokenBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",f_H'$eo`j", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2942), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 35, true);
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte byte0 = (byte)57;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",f_H'$eo`j", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)88;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 756, false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      mockFileOutputStream0.getChannel();
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) 3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocTokenBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a raw (unencoded) value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1909, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1909;
      doubleArray0[1] = (double) (byte)57;
      doubleArray0[2] = (double) 2;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, (-1));
//      try { 
        uTF8JsonGenerator0.writeNumber(1210.2644F);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayBuilder0.write(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeFloat(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 69, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-1L));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.toByteArray();
      objectOutputStream0.write(byteArrayBuilder0.NO_BYTES);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1560, false);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, objectOutputStream0);
      SerializedString serializedString0 = new SerializedString("write a number");
      SerializedString serializedString1 = new SerializedString("write a number");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[2] = '<';
      charArray0[3] = '>';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 2190);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocTokenBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[0];
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (-142));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write(2);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString2.appendUnquotedUTF8(byteArray0, 56319);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 57343;
      doubleArray0[1] = (double) 56320;
      doubleArray0[2] = (double) 56320;
      doubleArray0[3] = (double) 56319;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 3;
      uTF8JsonGenerator0.writeArray(doubleArray0, 2838, 0);
      uTF8JsonGenerator0.getOutputBuffered();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)77;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 2838, 512);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",f_H'$eo`j", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)57, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      mockFileOutputStream0.getChannel();
      uTF8JsonGenerator0.writeNumber((double) (-2258));
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 56, 928);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(665);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = new SerializedString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayOutputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      uTF8JsonGenerator0.writeString(charArray0, 2070, 0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-25);
      byteArray1[2] = (byte)97;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 391, (ObjectCodec) null, objectOutputStream1, byteArray1, (-4793), false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2326), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      objectOutputStream0.write(byteArrayBuilder0.NO_BYTES);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(648);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.releaseConcatBuffer((char[]) null);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 1, 803);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
//      try { 
        uTF8JsonGenerator0.writeFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      byte[] byteArray0 = byteArrayBuilder0.finishCurrentSegment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "fwhs3mQgab !", true);
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(1571.5F);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString(charArray0, 3, 1058);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArray0, 3, 1058);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1000
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2091, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeStartArray(2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer.allocate(1100);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)114;
      byteArray0[3] = (byte)114;
      jsonGenerator0.writeUTF8String(byteArray0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0._verifyValueWrite("-95]ZkFEHplG{^)%hm+");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte) (-3);
      byteArray0[1] = (byte)57;
      uTF8JsonGenerator0.writeBinaryField("Can not write a field na`e, epectini a value", byteArray1);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayBuilder1.completeAndCoalesce(3);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)97;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 367, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)97;
      doubleArray0[1] = (double) (byte)53;
      doubleArray0[2] = 3191.21305363;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 367;
      doubleArray0[5] = (double) 1;
      uTF8JsonGenerator0.writeArray(doubleArray0, (-988), (-46));
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ObjectCodec objectCodec0 = null;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = "*$\"{!7bAwHX";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*$\"{!7bAwHX", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("*$\"{!7bAwHX");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 16, (ObjectCodec) null, mockFileOutputStream1, byteArrayBuilder0.NO_BYTES, 2, false);
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocTokenBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeStringField("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
//      try { 
        uTF8JsonGenerator0.writeNumber((short)123);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteBuffer.allocate(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-492), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 9, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocTokenBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
      short short0 = (short)123;
//      try { 
        uTF8JsonGenerator0._verifyValueWrite("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not , expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write((-2259));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2259), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer.allocate(0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write((-2258));
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, objectOutputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0084';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 1187);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      int int0 = (-2059);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte) (-3);
      byteArray1[2] = (byte)57;
      uTF8JsonGenerator0.writeBinaryField("Can not write a field na`e, epectini a value", byteArray1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-2258), 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = '\"';
      uTF8JsonGenerator0._charBuffer = charArray0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      String string0 = "a'o{JT,";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("a'o{JT,");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 2);
      char[] charArray0 = new char[12];
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(1);
      byteArrayBuilder0.appendTwoBytes(0);
      charArray0[0] = ')';
      charArray0[1] = ')';
      byteArrayBuilder0.appendTwoBytes(57343);
      charArray0[3] = ')';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      byteArrayBuilder0.appendThreeBytes(2314);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 323);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 812, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write(2);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)83;
      objectOutputStream0.writeLong(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("Non-standard token '");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.close();
      ByteBuffer.allocate(56320);
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 2223, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayBuilder0.write((-2221));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(44);
      objectOutputStream0.writeFloat((-2221));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1371, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.close();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeNumber((double) 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.write((-2258));
      byteArrayBuilder0.write(83);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 83, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 83, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2598));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2598), (ObjectCodec) null, objectOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeNumber((-2.147483648E9));
      uTF8JsonGenerator0.writeNumber((short) (-1865));
      uTF8JsonGenerator0.writeNumber((short) (-1865));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 8000, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBooleanField("JfI|", false);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, (-793));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-2059));
      uTF8JsonGenerator0.writeString("7WT&>");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartArray();
      ByteBuffer.allocate(2048);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = iOContext0.allocTokenBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2773, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = BigInteger.probablePrime(80, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeString(charArray0, 116, 13);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeRaw(charArray0, (-2844), 0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 67, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 101, true);
      uTF8JsonGenerator0.writeString(charArray0, 8, 2048);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw((String) null, 8, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayBuilder1.completeAndCoalesce(3);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)97;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 367, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("): only regular white space (\r, \n, \t) is allowed between tokens");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, (-676), 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-2059));
      uTF8JsonGenerator0.writeNumber(2430);
      uTF8JsonGenerator0.writeBinaryField("7WT&>", byteArrayBuilder0.NO_BYTES);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (-2258), 50);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-2059));
      uTF8JsonGenerator0.writeString("7WT&>");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartArray();
      ByteBuffer.allocate(2048);
      uTF8JsonGenerator0.writeNumber((short)1816);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeRaw('\'');
      iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0._verifyValueWrite("Current context not an ARRAY but ");
      uTF8JsonGenerator0.writeRaw("QaLc@A");
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      int int0 = (-2258);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArrayBuilder0.resetAndGetFirstSegment();
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-2059));
      uTF8JsonGenerator0.writeBinaryField("7WT&>", byteArrayBuilder0.NO_BYTES);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      char[] charArray0 = null;
      int int1 = 50;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pushbackInputStream0, 80);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = iOContext0.allocTokenBuffer(2);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(1571.5F);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString(charArray0, 3, 1784);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw(charArray0, 1784, (-1537));
      SerializedString serializedString0 = new SerializedString("Y{9qVf[su");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('[');
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-220), (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 263, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 84);
      int int0 = (-184);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byte byte0 = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-2059));
      uTF8JsonGenerator0.writeBinaryField("7WT&>", byteArrayBuilder0.NO_BYTES);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, (byte)32, (byte)57);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      char[] charArray0 = new char[4];
      iOContext0.allocBase64Buffer();
      charArray0[0] = ')';
      charArray0[1] = ')';
      byteArrayBuilder0.appendTwoBytes(57343);
      charArray0[3] = ')';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-2059));
      uTF8JsonGenerator0.writeString("7WT&>");
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializedString serializedString0 = new SerializedString("T4&3;$f!A_M=");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((short) (-1666));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write((-2258));
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = byteArrayBuilder0.completeAndCoalesce(1);
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)83;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)60, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 1, true);
      SerializableString serializableString0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 192, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.allocReadIOBuffer(3);
      ByteBuffer.allocate(57);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._flushBuffer();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write((-2258));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-2059));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeString("7WT&>");
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber((short) (-1666));
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      ObjectCodec objectCodec0 = null;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, objectOutputStream1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      uTF8JsonGenerator0.writeString("l-FF(yv65qs%Y");
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializedString serializedString0 = new SerializedString(")''a22/");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write((-2258));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-2059));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeString("7WT&>");
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializedString serializedString0 = new SerializedString("T4&3;$f!A_M=");
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber((short) (-1666));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      int int0 = (-2258);
      int int1 = 728;
      byteArrayBuilder0.write(728);
      byteArrayBuilder0.completeAndCoalesce(3);
      byteArrayBuilder0.write(124);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 728, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 377, 374);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(1, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeBinaryField("-#UK]@", byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(" -- suspect a DoS attack based on hash collisions");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeStartArray(26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder1.NO_BYTES);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer.allocate(108);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 26, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2091, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "write a boolean value";
      jsonGenerator0.writeBinaryField("write a boolean value", byteArrayBuilder0.NO_BYTES);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'u';
      charArray0[2] = ',';
      charArray0[3] = 'p';
      charArray0[4] = 'T';
      charArray0[5] = 'P';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 57343, 550);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 57343
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1224, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = iOContext2.allocTokenBuffer((-2157));
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 63, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 23, true);
      int int0 = 1400;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw(charArray0, 1400, (-3));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, fileDescriptor0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 227, (ObjectCodec) null, objectOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-2659), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 951, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeBinary((InputStream) mockFileInputStream0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ObjectCodec objectCodec0 = null;
      byteArrayBuilder0.appendTwoBytes(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1054, (ObjectCodec) null, objectOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1521, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      objectOutputStream0.write(byteArrayBuilder0.NO_BYTES);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.releaseConcatBuffer((char[]) null);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 3;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, (-2519));
      uTF8JsonGenerator0.writeNumber((float) 1272);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 56320);
      IOContext iOContext2 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 8000, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      uTF8JsonGenerator1._verifyValueWrite("pJR`NRcyF9+&Kp0p");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(55296);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'P';
      charArray0[3] = '9';
      charArray0[4] = '^';
      charArray0[5] = '^';
      charArray0[6] = 'b';
      charArray0[7] = 'b';
      uTF8JsonGenerator0.writeString(charArray0, 0, (-2787));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.appendUnquotedUTF8(byteArrayBuilder0.NO_BYTES, 1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = 'P';
      charArray0[4] = 'O';
      charArray0[4] = '^';
      charArray0[5] = 'b';
      uTF8JsonGenerator0.writeNumber((long) 3);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1313);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(":h3R9x");
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeNumber((float) 3);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeBinaryField(" -- suspect a DoS attack based on hash collisions", byteArrayBuilder1.NO_BYTES);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[15];
      charArray0[0] = 'b';
      charArray0[1] = 'T';
      charArray0[4] = 'T';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 36);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 15
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 0, 76);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = 'P';
      charArray0[4] = 'O';
      charArray0[4] = '^';
      charArray0[5] = 'b';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      byteArrayBuilder1.appendTwoBytes(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder1.NO_BYTES, 114, true);
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = 'K';
      charArray0[0] = ')';
      charArray0[3] = ')';
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-510), 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 12);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", ")XDL-H/czm:[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/)XDL-H/czm:[0)XDL-H/czm:[");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ")XDL-H/czm:[");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeFieldName(")XDL-H/czm:[");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2539));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2539), (ObjectCodec) null, objectOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'X';
      charArray0[2] = '|';
      charArray0[3] = '.';
      charArray0[4] = 'v';
      charArray0[5] = 'k';
      charArray0[6] = 'A';
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 32767, (-187));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      SerializedString serializedString0 = new SerializedString("a'o{JT,");
      StringWriter stringWriter0 = new StringWriter(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "3.Q'p~M", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byteArrayBuilder0.finishCurrentSegment();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      int int0 = (-2258);
      byteArrayBuilder0.write((-2258));
      byte[] byteArray0 = new byte[8];
      byteArrayBuilder0.completeAndCoalesce(1);
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-2059));
      uTF8JsonGenerator0.writeString("7WT&>");
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = "T4&3;$f!A_M=";
      SerializedString serializedString0 = new SerializedString("T4&3;$f!A_M=");
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("T4&3;$f!A_M=");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", ")XDL-H/czm:[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURI();
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/)XDL-H/czm:[0)XDL-H");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ")XDL-H/czm:[");
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) ")XDL-H/czm:[");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArrayBuilder0.NO_BYTES);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-3), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('v');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = 'L';
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 4, 21);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      objectOutputStream0.write(byteArrayBuilder0.NO_BYTES);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.releaseConcatBuffer((char[]) null);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, Integer.MAX_VALUE, (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator1.writeNumber((short)6);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator1.writeNumber((short)25);
      uTF8JsonGenerator1.writeRaw('');
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8000, (ObjectCodec) null, byteArrayBuilder0);
      byte byte0 = (byte) (-128);
      uTF8JsonGenerator0.writeBinaryField("-#UK]@", byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, (-2240));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)10;
      uTF8JsonGenerator0.writeBinaryField("-#UK]@", byteArray0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (byte) (-128));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write((-2258));
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = iOContext0.allocTokenBuffer((-2258));
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z{brLAS@xI", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2640, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRaw(charArray0, 45, 0);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer.allocate(171);
//      try { 
        uTF8JsonGenerator0._flushBuffer();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(" -- suspect a DoS attack based on hash collisions");
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      byteArrayBuilder0.toByteArray();
      uTF8JsonGenerator0.writeNumber(105.0F);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder1.NO_BYTES);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      byteArrayBuilder1.toByteArray();
      uTF8JsonGenerator0.writeNumber((float) 1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " -- suspect a DoS attack based on hash collisions");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 1);
      SerializedString serializedString0 = new SerializedString(" -- suspect a DoS attack based on hash collisions");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write((-2258));
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.completeAndCoalesce(1);
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber("BE~Ae:O}@R");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer.allocate(0);
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("", 45, 12000);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      char[] charArray0 = iOContext0.allocTokenBuffer(33);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, objectOutputStream1);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      byteArrayBuilder0.toByteArray();
      uTF8JsonGenerator0.writeNumber((float) 3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder1.NO_BYTES);
      byteArrayBuilder1.toByteArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J*m\"+");
      uTF8JsonGenerator0.writeNumber(0.0F);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder1.NO_BYTES);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString(charArray0, 2, 1);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer.wrap(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((short)1044);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(" -- suspect a DoS attack based on hash collisions");
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      byteArrayBuilder0.toByteArray();
      uTF8JsonGenerator0.writeNumber(105.0F);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder1.NO_BYTES);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      byteArrayBuilder1.toByteArray();
      uTF8JsonGenerator0.writeNumber((float) 1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = '^';
      charArray0[2] = 'P';
      charArray0[4] = 'O';
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      uTF8JsonGenerator0.writeNumber("q#&NW|,Kn?S");
      SerializedString serializedString0 = new SerializedString("a'o{JT,");
      // Undeclared exception!
      uTF8JsonGenerator0.writeBinaryField("uVMn5;,<Xv|T^", byteArrayBuilder0.NO_BYTES);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2091, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeStartArray(313);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer.allocate(1100);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)114;
      byteArray0[3] = (byte)114;
      byteArray0[5] = (byte)114;
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeUTF8String(byteArray0, 3, 313);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(" -- suspect a DoS attack based on hash collisions");
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      byteArrayBuilder0.toByteArray();
      uTF8JsonGenerator0.writeNumber(105.0F);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder1.NO_BYTES);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      byteArrayBuilder1.toByteArray();
      uTF8JsonGenerator0.writeNumber((float) 1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 56319;
      uTF8JsonGenerator0.writeArray(doubleArray0, 1, 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 5);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer.wrap(byteArray0);
      int int0 = GeneratorBase.SURR2_LAST;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber(178.83F);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, 91);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6!z8");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 114);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 2, (-838));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2091, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeStartArray(313);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer.allocate(1100);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)114;
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeUTF8String(byteArray0, 3, 313);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 665;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(665);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(665);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 1, true);
      double[] doubleArray0 = null;
      int int1 = 13;
      String string0 = "";
      uTF8JsonGenerator0.writeString("");
      int int2 = 118;
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 1629, 665);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2232), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar((-2232));
      objectOutputStream0.writeFloat(0.0F);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = 69;
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      int int1 = 315;
      objectOutputStream0.writeChar(315);
      int int2 = 97;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1552);
      int int3 = 61;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 61, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArray((double[]) null, 50, 13);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = null;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0);
      objectOutputStream0.writeObject((Object) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      byteArrayBuilder0.write((-2764));
      String string0 = "C +Uoi  a,4C";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6<");
      int int0 = 48;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 48);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, bufferedOutputStream0);
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 665;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(665);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 1, true);
      double[] doubleArray0 = null;
      String string0 = "";
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArray((double[]) null, 118, 13);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[1] = (byte)64;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-2066), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", "/c\"JBV=v(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      mockPrintStream1.println("/c\"JBV=v(");
      mockPrintStream1.append((CharSequence) ")XDL-H/czm:[");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 0, 1247);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      byte[] byteArray1 = new byte[0];
      mockFileInputStream0.read(byteArray1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = '^';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 2, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      int int0 = 1000000000;
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = '|';
      charArray0[2] = 'K';
      charArray0[3] = '\u0084';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("(Soj]6]G_.\"RnU");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1581), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)56;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 41, (ObjectCodec) null, (OutputStream) null, byteArray0, 4518, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, 786);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write(2);
      byteArrayBuilder0.completeAndCoalesce(34);
      boolean boolean0 = false;
      int int0 = 192;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 192, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte)60);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2232), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar((-2232));
      objectOutputStream0.writeFloat(0.0F);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("61-gYlH");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext2.withEncoding(jsonEncoding2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0);
      objectOutputStream0.writeObject((Object) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-3302));
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 56320, false);
      uTF8JsonGenerator1.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeStartObject();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write((-2258));
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.completeAndCoalesce(255);
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      // Undeclared exception!
//      try { 
        ByteBuffer.allocate((-1058));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.ByteBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)61;
      byteArrayBuilder0.write(byteArray0);
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 43, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((short) (-283));
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(58);
      serializedString0.putQuotedUTF8(byteBuffer0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.setEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeNumber((short) (byte)43);
//      try { 
        uTF8JsonGenerator0.writeFieldName("5OgGj");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(4055);
      int int0 = 4139;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4139);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-283), false);
      double[] doubleArray0 = null;
      int int1 = 13;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -283
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 97, true);
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 3203, false);
      double[] doubleArray0 = null;
      String string0 = "?>l4NW]K";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayBuilder0.write((-2221));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(44);
      objectOutputStream0.writeFloat((-2221));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putQuotedUTF8(byteBuffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber(178.83F);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, 91);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(69);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(97);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 69, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer.allocate(13);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2221), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar((-2221));
      objectOutputStream0.writeFloat(0.0F);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeNumber((short) (-617));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(56319);
      uTF8JsonGenerator0.writeNumber(0.0F);
      serializedString1.putQuotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("was expecting comma to separate ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(69);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(97);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 69, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      double[] doubleArray0 = null;
      int int0 = 13;
      int int1 = 115;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("?>l4NW]K");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", ")XDL-H/czm:[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("MWOD#:Ja|xA)Qc");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      iOContext0.allocTokenBuffer(33);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, objectOutputStream1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8000);
      uTF8JsonGenerator0.writeNumber((float) 33);
      serializedString0.putQuotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((long) (-2581));
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      StringReader stringReader0 = new StringReader("ALLOW_NUMERIC_LEADING_ZEROS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = '|';
      charArray0[3] = 'K';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 114, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("|E?Qj<3y4E9`Ke/");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 2623);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'L';
      charArray0[2] = 'P';
      charArray0[3] = 'O';
      charArray0[4] = '^';
      charArray0[5] = 'b';
      charArray0[6] = 'E';
      charArray0[7] = '^';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, objectOutputStream0, byteArrayBuilder1.NO_BYTES, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      uTF8JsonGenerator0._releaseBuffers();
      serializedString0.putQuotedUTF8(byteBuffer0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0);
      objectOutputStream0.writeObject((Object) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (-1259));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2221), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      byteArrayBuilder0.write(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(20);
      objectOutputStream0.writeFloat(0.0F);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeBoolean(true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = '3';
      Object object0 = new Object();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 56319, false);
      uTF8JsonGenerator0.writeRaw('M');
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber(bigInteger0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'L';
      charArray0[2] = 'O';
      charArray0[3] = 'b';
      charArray0[4] = 'L';
      charArray0[5] = '9';
      charArray0[6] = '9';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-394), 2355);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)34;
      SerializedString serializedString0 = new SerializedString("0TQC");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 49, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._flushBuffer();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0);
      objectOutputStream0.writeObject((Object) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(1);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw("g3p}Y=c");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator1.writeNumber((float) 55296);
      uTF8JsonGenerator1.writeNumber((-829L));
      uTF8JsonGenerator1._writePPFieldName("J");
      uTF8JsonGenerator1.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", "Can not write a field name, expecting a value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ")XDL-H/czm:[");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(bufferedOutputStream0);
      PrintStream printStream1 = mockPrintStream1.printf(")XDL-H/czm:[", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream1);
      uTF8JsonGenerator0.writeNumber("((hamr(,}E? O");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3541);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-23.167916122113308);
      doubleArray0[3] = (double) 56320;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 0.0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 3);
      MockFile mockFile0 = new MockFile("", ")XDL-H/czm:[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      uTF8JsonGenerator0._flushBuffer();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "", true, 'J', (-2416));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayBuilder0.write((-2221));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(44);
      objectOutputStream0.writeFloat((-2221));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1371, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 69, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._outputSurrogates(1000000000, 57343);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = 2069;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.putQuotedUTF8(byteBuffer0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((-1509.0F));
      jsonGenerator0.writeFieldName("");
      jsonGenerator0.writeNumber((-2191));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 57343;
      int int1 = (-1104);
      uTF8JsonGenerator0.writeArray(doubleArray0, 3, (-1104));
      MockFile mockFile0 = new MockFile("", "");
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(",'ptQbcul(+_Fz]384y");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      byte byte0 = (byte) (-3);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 15, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-9.223372036854776E18));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0);
      objectOutputStream0.writeObject((Object) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw("g3p}Y=c");
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 1633, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      StringReader stringReader0 = new StringReader("y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 47, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 2, 44, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 972, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, (-858), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -858
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString(", expecting field name");
      int int0 = 13;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 55296;
      double double0 = (-1199.5855);
      doubleArray0[1] = (-1199.5855);
      doubleArray0[2] = 2.147483647E9;
      int int1 = 56319;
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeArray(doubleArray0, 1, 56319);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write((-2258));
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = bufferRecycler0.allocByteBuffer(1, 2);
      byteArray0[0] = (byte)57;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinaryField("-#UK]@", byteArray1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, objectOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, objectOutputStream1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-1.0F));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder1, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, objectOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", ")XDL-H/czm:[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/)XDL-H/czm:[0)XDL-H/czm:[");
      file0.setLastModified(1);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) ")XDL-H/czm:[");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(bufferedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeFieldName(")XDL-H/czm:[");
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeNumber(55296);
      uTF8JsonGenerator0.writeString("at'\" = 6YUg];f");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.writeNumber(2289.411F);
      uTF8JsonGenerator0.writeNumber((long) 0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(" -- suspect a DoS attack based on hash collisions");
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      byteArrayBuilder0.toByteArray();
      uTF8JsonGenerator0.writeNumber(105.0F);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder1.NO_BYTES);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'L';
      charArray0[2] = 'O';
      charArray0[3] = 'P';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 108);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      byte[] byteArray0 = new byte[0];
      uTF8JsonGenerator0.writeBinaryField(" in a comment", byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 0, 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", ")XDL-H/czm:[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/)XDL-H/czm:[0)XDL-H/czm:[");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ")XDL-H/czm:[");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeFieldName("; illegal combination");
      uTF8JsonGenerator0.writeNumber(65);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeString((String) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
//      try { 
        uTF8JsonGenerator0._writePPFieldName("E.");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2091, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.putQuotedUTF8(byteBuffer0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((-1509.0F));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 100, 338);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, Integer.MAX_VALUE, (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator1.writeNumber((short)6);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString1);
      // Undeclared exception!
//      try { 
        ByteBuffer.allocate((-1707));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.ByteBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      SerializedString serializedString0 = new SerializedString(" bytes (out of ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (short)1317, (ObjectCodec) null, (OutputStream) null, byteArray0, (-768), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (-252));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -768
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      ObjectCodec objectCodec0 = null;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-60);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-577), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = ", expecting field name";
      SerializedString serializedString1 = new SerializedString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (-1642));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write((-2258));
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = byteArrayBuilder0.completeAndCoalesce(255);
      byteArray0[0] = (byte)57;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinaryField("-#UK]@", byteArray1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 210, (ObjectCodec) null, objectOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler1, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder1.NO_BYTES, 58, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = "rNB>v]c0LK.X";
      SerializedString serializedString1 = new SerializedString("rNB>v]c0LK.X");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)21);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(" -- suspect a DoS attack based on hash collisions");
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      byteArrayBuilder0.toByteArray();
      uTF8JsonGenerator0.writeNumber(105.0F);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder1.NO_BYTES);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'L';
      charArray0[2] = 'O';
      charArray0[3] = 'P';
      charArray0[4] = 'E';
      charArray0[5] = '^';
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[7];
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.TEN;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-65), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, objectOutputStream0, byteArrayBuilder1.NO_BYTES, 2, false);
      byteArrayBuilder1.write(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('5');
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString(", expecting field name");
      jsonGenerator0.writeNumber((short)1317);
//      try { 
        jsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", "Can not write a field name, expecting a value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ")XDL-H/czm:[");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(bufferedOutputStream0);
      PrintStream printStream1 = mockPrintStream1.printf(")XDL-H/czm:[", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream1);
      uTF8JsonGenerator0.writeNumber("((hamr(,}E? O");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3541);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 0.8;
      doubleArray0[3] = (double) (-3541);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 0.0;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 3);
      MockFile mockFile0 = new MockFile("", ")XDL-H/czm:[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      uTF8JsonGenerator0._flushBuffer();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "", true, 'J', (-2438));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      SerializedString serializedString0 = new SerializedString("write a number");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayBuilder0.write((-2221));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(44);
      objectOutputStream0.writeFloat((-2221));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1371, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 69, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeBoolean(true);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.putQuotedUTF8(byteBuffer0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((-1509.0F));
      jsonGenerator0.writeFieldName("");
      jsonGenerator0.writeNumber((-2191));
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 3, 727);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.putQuotedUTF8(byteBuffer0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((-1509.0F));
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      int int0 = (-226);
      byteArrayBuilder0.write((-226));
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream1.writeChar((-5092));
      objectOutputStream1.writeFloat((-2027.1161F));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 126, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(97);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 46, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2355);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject((Object) pipedInputStream0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, objectOutputStream1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      SerializedString serializedString0 = new SerializedString("write a number");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '3';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      uTF8JsonGenerator0.writeString(charArray0, 2, (-3));
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = 69;
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write((-2258));
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.completeAndCoalesce(255);
      byteArray0[0] = (byte)57;
      byte byte0 = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2258), (ObjectCodec) null, objectOutputStream0, byteArray0, 2, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-2059));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      String string0 = ") does not override copy(); it has to";
      PipedInputStream pipedInputStream0 = new PipedInputStream(110);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 147, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 2, 0);
      int int0 = GeneratorBase.SURR2_FIRST;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName(") does not override copy(); it has to");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(97);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 46, false);
      String string0 = "b";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(69);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(97);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 69, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 1, true);
      double[] doubleArray0 = null;
      int int0 = 13;
      int int1 = 115;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.putQuotedUTF8(byteBuffer0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((-1509.0F));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 100, 338);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 595, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 51, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1529, false);
      String string0 = "";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(260);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.putQuotedUTF8(byteBuffer0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      int int0 = 1250;
      int int1 = 111;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArrayBuilder0.write(44);
      objectOutputStream0.writeFloat(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1250, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("3J ", 111, 270);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, objectOutputStream1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      SerializedString serializedString0 = new SerializedString("write a number");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 2633, 945);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2633
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocReadIOBuffer((-1708));
      SerializedString serializedString0 = new SerializedString("K:_o>");
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(1);
      byteArrayBuilder0.append(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 224, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      int int0 = 111;
      byteArrayBuilder0.write(44);
      objectOutputStream0.writeChar(111);
      objectOutputStream0.writeFloat(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1250, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", ")XDL-H/czm:[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/)XDL-H/czm:[0)XDL-H/czm:[");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) ")XDL-H/czm:[");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(bufferedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeFieldName(")XDL-H/czm:[");
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeNumber(512);
      uTF8JsonGenerator0.writeString("at'\" = 6YUg];f");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 617);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1582, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName("MyW*3au=Dg)0aTu");
      uTF8JsonGenerator0.writeNumber(512);
      uTF8JsonGenerator0.writeNumber(617);
      uTF8JsonGenerator0.writeString("L~{pAh1UKw50Fi");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "a'o{JT,";
      iOContext0.allocTokenBuffer(798);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1792, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 2, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = '<';
      charArray0[2] = 'Z';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 1792);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", ")XDL-H/czm:[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/)XDL-H/czm:[0)XDL-H/czm:[");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) ")XDL-H/czm:[");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(bufferedOutputStream0);
      mockPrintStream2.printf(")XDL-H/czm:[", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(" -- suspect a DoS attack based on hash collisions");
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeFieldName(" -- suspect a DoS attack based on hash collisions");
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeNumber((short)2047);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, objectOutputStream1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.putQuotedUTF8(byteBuffer0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("UJgcd[w%\"MVF39Bl", 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(" -- suspect a DoS attack based on hash collisions");
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      byteArrayBuilder0.toByteArray();
      uTF8JsonGenerator0.writeNumber(105.0F);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder1.NO_BYTES);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Qa5y0SimKWU");
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#P:3m8/|C0 CX9|i-");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream0.println((float) 3);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "#P:3m8/|C0 CX9|i-");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 92, (ObjectCodec) null, printStream0, byteArray0, 3, true);
      mockPrintStream0.print(true);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0._verifyValueWrite("H^>ga%c2Ki(K");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(338.41968F);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 1352);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1352, (ObjectCodec) null, byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("write a number");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      MockFile mockFile0 = new MockFile("Trying to release buffer not owned by the context", "1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "1");
      MockPrintStream mockPrintStream2 = new MockPrintStream(printStream0);
      byteArrayBuilder0.append((-1613));
      mockPrintStream2.printf("Trying to release buffer not owned by the context", (Object[]) null);
      uTF8JsonGenerator0.writeNumber("1");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBoolean(true);
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'G';
      BigDecimal bigDecimal0 = null;
//      try {
        bigDecimal0 = new BigDecimal(charArray0);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      MockFile mockFile0 = new MockFile("Trying to release buffer not owned by the context", "1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      mockPrintStream0.append((CharSequence) "Trying to release buffer not owned by the context");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      byteArrayBuilder0.append(3);
      mockPrintStream1.printf("Trying to release buffer not owned by the context", (Object[]) null);
      uTF8JsonGenerator0.writeNumber("Current context not an object but ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder1);
      ByteArrayBuilder byteArrayBuilder2 = new ByteArrayBuilder();
      byteArrayBuilder2.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeBinaryField("#gv{;!Mn~gw+ZYdyBxh", byteArrayBuilder0.NO_BYTES);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 74);
      uTF8JsonGenerator0.writeStartObject((Object) pushbackInputStream0);
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder1.NO_BYTES, 1, 253);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2104, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      SerializedString serializedString0 = new SerializedString("a'o{JT,");
      uTF8JsonGenerator0.writeBinaryField("a'o{JT,", byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeRaw("a'o{JT,", 0, 3);
      uTF8JsonGenerator0.writeNumber((-1160.0189F));
      SerializedString serializedString1 = new SerializedString("write a binary value");
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      System.setCurrentTimeMillis(472L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "wKe Js))|G=", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 40, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 56319, false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = 'n';
      charArray0[2] = 'P';
      charArray0[3] = '9';
      charArray0[4] = '-';
      charArray0[5] = ']';
      charArray0[6] = ' ';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-559), 34);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)0;
      byteArrayBuilder0.write(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)3;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (byte)3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('v');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, objectOutputStream0, byteArrayBuilder1.NO_BYTES, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = ", expecting field name";
      SerializedString serializedString1 = new SerializedString(", expecting field name");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", ")XDL-H/czm:[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) ")XDL-H/czm:[");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(bufferedOutputStream0);
      mockPrintStream2.printf(")XDL-H/czm:[", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeBinaryField(")XDL-H/czm:[", byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeNumber((-497.0));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 2, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder1);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder1);
      String string0 = " -- suspect a DoS attack based on hash collisions";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, (-2581));
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2581), (ObjectCodec) null, objectOutputStream0, byteArrayBuilder1.NO_BYTES, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = ", expecting field name";
      SerializedString serializedString1 = new SerializedString(", expecting field name");
      serializedString0.asUnquotedUTF8();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)8000);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      String string0 = " -- suspect a DoS attack based on hash collisions";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(" -- suspect a DoS attack based on hash collisions");
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeNumber(105.0F);
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(69);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(97);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 69, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 1, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      String string0 = "a'o{JT,";
      char[] charArray0 = iOContext0.allocTokenBuffer((-534));
      boolean boolean1 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1899), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1899
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("ALLOW_NUMERIC_LEADING_ZEROS");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("/r_!");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 3, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      String string0 = ")XDL-H/czm:[";
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", ")XDL-H/czm:[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) ")XDL-H/czm:[");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(bufferedOutputStream0);
      mockPrintStream2.printf(")XDL-H/czm:[", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(" -- suspect a DoS attack based on hash collisions");
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 1114111);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1114111, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName("{7`]3G,j)Rg=");
      byteArrayBuilder0.appendTwoBytes(0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "oa8:6", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(990);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 28, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2539, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      StringReader stringReader0 = new StringReader("ALLOW_NUMERIC_LEADING_ZEROS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = '|';
      charArray0[3] = 'K';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 114, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("|E?Qj<3y4E9`Ke/");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 2623);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 617);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName("MyW*3au=Dg)0aTu");
      uTF8JsonGenerator0.writeNumber(512);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      File file0 = MockFile.createTempFile(")XDL-H/czm:[", ")XDL-H/czm:[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) ")XDL-H/czm:[");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(bufferedOutputStream0);
      mockPrintStream2.printf(")XDL-H/czm:[", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(" -- suspect a DoS attack based on hash collisions");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = (double) 55296;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      uTF8JsonGenerator0.writeArray(doubleArray0, 3, (-3541));
      MockFile mockFile0 = new MockFile("", "");
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 40, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 13, 42);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 127);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 38, (ObjectCodec) null, objectOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 617);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1582, (ObjectCodec) null, objectOutputStream0);
      objectOutputStream0.writeFloat(1.0F);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName("MyW*3au=Dg)0aTu");
      uTF8JsonGenerator0.writeNumber(512);
//      try { 
        uTF8JsonGenerator0.writeFieldName("MyW*3au=Dg)0aTu");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 59);
      String string0 = ".PackageVersion";
      SerializedString serializedString0 = new SerializedString(".PackageVersion");
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectOutputStream0.flush();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('\u0089');
      BigDecimal bigDecimal0 = new BigDecimal(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3884), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 7);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName("<E<dJ0XXm9");
      uTF8JsonGenerator0._verifyValueWrite("");
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 2, (-828));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 2);
      StringReader stringReader0 = new StringReader("ALLOW_NUMERIC_LEADING_ZEROS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '-';
      charArray0[2] = '|';
      charArray0[3] = 'K';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 114, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("|E?Qj<3y4E9`Ke/");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 25, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0._verifyValueWrite("<E<dJ0XXm9");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 114, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 114
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.write(44);
      objectOutputStream0.writeChar(111);
      objectOutputStream0.writeFloat(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 69, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      String string0 = ") does not override copy(); it has to";
      PipedInputStream pipedInputStream0 = new PipedInputStream(110);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 147, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 2, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 42);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(3);
      String string0 = "Invalid UTF-8 middle byte 0x";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Invalid UTF-8 middle byte 0x");
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder1);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)125;
      uTF8JsonGenerator0.writeBinaryField("ikk(UwMOD*UN4.B", byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 2, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      String string0 = "a'o{JT,";
      char[] charArray0 = iOContext0.allocTokenBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2058, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-3087), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3087
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 114);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNull();
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeFieldName("<E<dJ0XXm9");
      uTF8JsonGenerator0._verifyValueWrite("");
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 114, 0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(111);
      objectOutputStream0.writeFloat(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 69, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("NLT1");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 56319;
      doubleArray0[2] = (double) 57343;
      doubleArray0[3] = (double) 56320;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 1163.55687551;
      doubleArray0[6] = 3855.9878063014;
      doubleArray0[7] = (double) 56319;
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 3513, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3513
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1511, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2070, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.print(false);
      mockPrintStream0.printf("", (Object[]) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumberField("", (BigDecimal) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 617);
      SerializedString serializedString0 = new SerializedString("r_nT$\"wBU@^F");
      objectOutputStream0.flush();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('');
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 617, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      MockFile mockFile0 = new MockFile("Trying to release buffer not owned by the context", "1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "a'o{JT,");
      MockPrintStream mockPrintStream2 = new MockPrintStream(printStream0);
      byteArrayBuilder0.append(0);
      mockPrintStream1.printf("a'o{JT,", (Object[]) null);
      uTF8JsonGenerator0.writeNumber("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.write((-2871));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-814), true);
      int int0 = (-462);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 1114111);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1114111, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName("{7`]3G,j)Rg=");
      byteArrayBuilder0.appendTwoBytes(0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("UTF-8", "{7`]3G,j)Rg=", false, '\u000F', 55296);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 12)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2487), (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 1, 44);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1424), (ObjectCodec) null, byteArrayOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      uTF8JsonGenerator0.writeNumber("+>*t*lunig");
      SerializedString serializedString0 = new SerializedString(":,");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('q');
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 500, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      File file0 = MockFile.createTempFile("C#Vll?SvASFqQ,+A", "V$I!'");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      mockPrintStream1.append((CharSequence) ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      MockPrintStream mockPrintStream2 = new MockPrintStream(byteArrayBuilder0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Locale locale0 = Locale.TAIWAN;
      iOContext0.releaseNameCopyBuffer((char[]) null);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) file0;
      objectArray1[1] = (Object) bufferRecycler0;
      objectArray1[2] = (Object) mockPrintStream2;
      objectArray0[1] = (Object) mockPrintStream0;
      mockPrintStream0.printf(")XDL-H/czm:[", objectArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 3, 7);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.write((-2871));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-814), true);
      int int0 = (-462);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(50);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -814
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeNumber("a'o{JT,");
      SerializedString serializedString0 = new SerializedString("a'o{JT,");
      uTF8JsonGenerator0.writeBinaryField("a'o{JT,", byteArrayBuilder0.NO_BYTES);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2487), (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = new SerializedString(">G");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 1114111);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1114111, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNull();
      String string0 = ") does not override copy(); it has to";
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(52);
      int int0 = 1000;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)55, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar((-253));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4001), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 4, false);
      String string0 = ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary";
      String string1 = "start an object";
      MockFile.createTempFile(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", "start an object");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStringField("", ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 617);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1582, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 1, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-93);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream1, byteArray0, 1128, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2070, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-462));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      byteArrayBuilder1.resetAndGetFirstSegment();
      byteArrayBuilder1.append(50);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 3, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.json.JsonWriteContext", "com.fasterxml.jackson.core.json.JsonWriteContext");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      mockPrintStream1.append((CharSequence) ")XDL-H/czm:[");
      MockPrintStream mockPrintStream2 = new MockPrintStream(byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(52);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-1);
      mockPrintStream0.printf("Can not write a field name, expecting a value", (Object[]) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 582, true);
      serializedString0.asUnquotedUTF8();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF8");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 114);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 2, (-838));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, bufferedOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      mockPrintStream0.append('p');
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 830, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 77, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 101, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2487), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinaryField(">G", byteArrayBuilder0.NO_BYTES);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 617);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1582, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName("MyW*3au=Dg)0aTu");
      uTF8JsonGenerator0.writeNumber(114);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      File file0 = MockFile.createTempFile(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", ")XDL-H/czm:[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      MockPrintStream mockPrintStream2 = new MockPrintStream(printStream0);
      String string0 = "";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.reset();
      objectOutputStream0.writeChar(69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      File file0 = MockFile.createTempFile(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      MockPrintStream mockPrintStream2 = new MockPrintStream(printStream0);
      mockPrintStream0.printf("", (Object[]) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("2A]2H[tH]be'_:75");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2069, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeNumber("a'o{JT,");
      SerializedString serializedString0 = new SerializedString("a'o{JT,");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1769), (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("aq.wIJ");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-67);
      byteArrayBuilder0.write(byteArray0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      File file0 = MockFile.createTempFile(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", ")XDL-H/czm:[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      MockPrintStream mockPrintStream2 = new MockPrintStream(printStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 114);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      mockPrintStream0.printf("write a number", (Object[]) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 1114111);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1114111, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName("`E");
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      byteArrayBuilder0.append(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2426, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 2, 8000);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      int int0 = 0;
      String string0 = "T_";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumberField("T_", (double) 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 65535, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2070, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeNumber("a'o{JT,");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 114);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeFieldName(") does not override copy(); it has to");
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      byteArrayBuilder0.append(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2426, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2070, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeNumber("a'o{JT,");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1958), (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, (-258), 1000000000);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -258
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 65, false);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1388.186;
      doubleArray0[1] = (double) 56319;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 986, 3);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 0, false);
//      try { 
        uTF8JsonGenerator0._outputSurrogates((-184), 6);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0xffffff48, second 0x6
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      PrintStream printStream0 = mockPrintStream0.printf("", (Object[]) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, printStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4668, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 127, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumberField("T_", (double) 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-3515), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArrayBuilder0.NO_BYTES, 1000, 4, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000, (ObjectCodec) null, byteArrayBuilder0);
      filteringParserDelegate0.getValueAsDouble(0.0);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeRaw("");
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2685, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2685, true);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArrayBuilder0;
      objectArray0[1] = (Object) objectOutputStream0;
      objectArray0[2] = (Object) iOContext0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) objectOutputStream0;
      objectArray0[5] = (Object) byteArrayBuilder0;
      objectArray0[6] = (Object) mockPrintStream0;
      mockPrintStream0.printf("", objectArray0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 248, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      uTF8JsonGenerator0.writeRaw('h');
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-2091), (byte)36);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      int int0 = 1000;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)55, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, byteArrayBuilder0);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byteArrayBuilder0.appendThreeBytes(2685);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-120);
      byteArrayBuilder0.append((-2519));
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)72;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.reset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1424), (ObjectCodec) null, byteArrayOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      uTF8JsonGenerator0.writeNumber("+>*t*lunig");
      SerializedString serializedString0 = new SerializedString(",,");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('q');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 24, (ObjectCodec) null, stringWriter1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2070, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber("a'o{JT,");
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-3515), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArrayBuilder0.NO_BYTES, 1000, 4, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 500, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder1.NO_BYTES, 3, true);
      File file0 = MockFile.createTempFile("C#Vll?SvASFqQ,+A", "V$I!'");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      mockPrintStream1.append((CharSequence) ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      MockPrintStream mockPrintStream2 = new MockPrintStream(byteArrayBuilder1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Locale locale0 = Locale.TAIWAN;
      iOContext0.releaseNameCopyBuffer((char[]) null);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) file0;
      objectArray1[1] = (Object) bufferRecycler0;
      objectArray1[2] = (Object) mockPrintStream2;
      mockPrintStream0.printf(locale0, "u,", objectArray1);
      objectArray0[1] = (Object) mockPrintStream0;
      mockPrintStream0.printf(")XDL-H/czm:[", objectArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(")XDL-H/czm:[");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 114);
      bufferedOutputStream0.close();
      objectOutputStream0.writeChar(69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 114);
      bufferedOutputStream0.close();
      objectOutputStream0.writeChar(69);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0, (byte[]) null, 3, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2070, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 248, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("name", 1387);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      PrintStream printStream0 = mockPrintStream0.append('8');
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      int int0 = 0;
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("T_", (double) 1);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2070, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2070, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.printf("", (Object[]) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, (-730), true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 248, (ObjectCodec) null, mockPrintStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) uTF8JsonGenerator0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) uTF8JsonGenerator0;
      objectArray0[5] = (Object) iOContext0;
      mockPrintStream0.printf("", objectArray0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 248, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 55296, (ObjectCodec) null, mockPrintStream0, byteArray0, 248, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 1, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2070, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Current context not an ARRAY but ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an ARRAY but ", false);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      PrintStream printStream0 = mockPrintStream0.append('8');
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 248, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-2091), (byte)36);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1263, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }
}
