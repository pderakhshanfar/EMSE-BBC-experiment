/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 09:00:22 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.nio.ByteBuffer;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVgO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString(charArray0, 21, 21);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 84, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1114111, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 1114111, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2048);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      mockPrintStream0.println(65535);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField("", (float) 65535);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2222, (ObjectCodec) null, pipedOutputStream0);
      StringReader stringReader0 = new StringReader("*rcn:");
      stringReader0.read();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeRawValue("/$E!ZBR?");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeObjectFieldStart("com.fasterxml.jackson.core.JsonGenerator");
      jsonGenerator0.writeObjectFieldStart("ql3@jrx");
//      try { 
        jsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      MockFile mockFile0 = new MockFile("was expecting either '*' or '/' for a comment", "was expecting either '*' or '/' for a comment");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 56319, (byte)15);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("C=qDN|cLH%t4B]");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.writeBinaryField("3", byteArray0);
      System.setCurrentTimeMillis(0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      int[] intArray0 = new int[6];
      intArray0[0] = 56320;
      intArray0[1] = 56320;
      intArray0[2] = 57343;
      intArray0[3] = 56320;
      intArray0[4] = (int) (byte)34;
      intArray0[5] = (int) (byte)34;
      jsonGenerator0.writeArray(intArray0, (int) (byte)0, (-3459));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1552), false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      iOContext0.allocReadIOBuffer();
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("Split surrogate on writeRaw() input (last character): first character 0x%4x");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("._u:^;8H", "w");
      MockFile mockFile1 = new MockFile("write a binary value", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("._u:^;8H");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1108));
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[2] = (byte)39;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      tokenFilter1.includeProperty("/$E!ZBR?");
      SerializedString serializedString0 = new SerializedString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte) (-3);
      byteArray1[3] = (byte)39;
      byteArray1[4] = (byte)120;
      byteArray1[5] = (byte) (-3);
      byteArray1[6] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5, (ObjectCodec) null, pipedOutputStream0, byteArray1, 84, true);
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6y4w[M");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      mockPrintStream0.println((long) (byte)121);
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)121;
      byteArray0[3] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)121, (ObjectCodec) null, mockPrintStream0, byteArray0, 39, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber((-995L));
      SerializedString serializedString0 = new SerializedString("6y4w[M");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeString((String) null);
      int int0 = GeneratorBase.SURR1_LAST;
      SerializedString serializedString0 = new SerializedString("qp:&~dU> ");
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator1._writePPFieldName("VVkOUb");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      char[] charArray0 = new char[6];
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting either '*' or '/' for a comment", true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, true);
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, 0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2222, (ObjectCodec) null, pipedOutputStream0);
      StringReader stringReader0 = new StringReader("*rcn:");
      stringReader0.read();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeRawValue("/$E!ZBR?");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber((-382));
      uTF8JsonGenerator0.writeNumber((short)101);
//      try { 
        jsonGenerator0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "VVkOUb";
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8000, (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 924);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 916 bytes (out of 924)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "' (code ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "' (code ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      ObjectCodec objectCodec0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' (code ");
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2593, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[17] = (byte)127;
      byteArray0[7] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeString(charArray0, 2000, 2000);
      uTF8JsonGenerator0.writeStartObject();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (byte)42);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      bufferRecycler0.allocCharBuffer(3, 2);
      MockFile mockFile0 = new MockFile("VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[5] = (byte)0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Current context not an ARRAY but ", true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 500, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1914), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("UTF-32BE");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1914
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, filterOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeStartArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeString("VVkOUb");
      int int0 = GeneratorBase.SURR1_LAST;
      uTF8JsonGenerator0.writeNumber(2350L);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VV#Oeb";
      byte[] byteArray0 = new byte[24];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 522, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString("|MRd@g+/#Mp&a");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 55296);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      uTF8JsonGenerator0.writeNumber(10000000000L);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("|MRd@g+/#Mp&a");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "w";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 90, (ObjectCodec) null, (OutputStream) null, byteArray0, 1857, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, filterOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeStartArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1902);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 110);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 102 bytes (out of 110)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      mockFile0.setReadable(true);
      byteArray0[17] = (byte)127;
      byteArray0[7] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      int int0 = 2000;
      uTF8JsonGenerator0.writeString(charArray0, 2000, 2000);
      uTF8JsonGenerator0.writeStartObject();
      MockFile.createTempFile("VVkO", "");
//      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("4", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[6] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)42;
      mockPrintStream0.write(byteArray0, 1, (-3100));
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigDecimal0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)42, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("4");
      uTF8JsonGenerator0.writeString(charArray0, 13, 13);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 5, 0);
      uTF8JsonGenerator0.writeNumber((long) 3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "6y4w[M";
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6y4w[M");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(3);
      boolean boolean1 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, (-426), false);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger.valueOf((-1561L));
      BigInteger bigInteger1 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -426
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("was expecting either '*' or '");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      CharsToNameCanonicalizer.createRoot();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting either '*' or '/' for a comment", true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, true);
      uTF8JsonGenerator0.writeStartArray(3);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2);
      uTF8JsonGenerator0.writeRawValue("dg,U[qE&z9|");
      uTF8JsonGenerator0.writeBinary((InputStream) null, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, (OutputStream) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, (OutputStream) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(4171.235F);
      uTF8JsonGenerator0.writeString("qp:&~dU> ");
      int int0 = GeneratorBase.SURR1_LAST;
      jsonGenerator0.writeNumber((long) 56320);
      jsonGenerator0.writeStartObject();
      jsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("w");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[3] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.setCurrentValue("w");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-3657), 32767);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger.valueOf(55296);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      int[] intArray0 = new int[13];
      intArray0[0] = 1;
      intArray0[1] = 3;
      SerializedString serializedString0 = new SerializedString("Parser of type ");
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumber((short) (-3803));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("w");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[3] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-12), false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeString("w");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "6y4w[M";
      MockPrintStream mockPrintStream0 = new MockPrintStream("6y4w[M");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      mockPrintStream0.println((long) (byte)121);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[3] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)121, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 31);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 55296);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 1836);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 1834 bytes (out of 1836)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      bufferRecycler0.allocCharBuffer(3, 2);
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)42;
      BigDecimal bigDecimal0 = new BigDecimal(13L);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigDecimal0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)42, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("ti-&}FRB@wX?xQ");
      uTF8JsonGenerator0.writeFieldName("}`");
      uTF8JsonGenerator0.writeString("}`");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("VVkO", 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      bufferRecycler0.allocCharBuffer(3, 2);
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)42;
      System.setCurrentTimeMillis((-2894L));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)127, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      System.setCurrentTimeMillis(0);
      uTF8JsonGenerator0.writeString("|\"^A!*");
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      uTF8JsonGenerator0.writeRaw("Current context not an ARRAY but ");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2057);
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)110;
      System.setCurrentTimeMillis(676L);
      String string0 = " |{Dwpbh\"+n";
      iOContext0.withEncoding(jsonEncoding0);
      byteArrayOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-99), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeString(" |{Dwpbh\"+n");
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[1];
      uTF8JsonGenerator0._charBuffer = charArray0;
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte) (-99));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2057);
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)1;
      byte byte0 = (byte)32;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)110;
      System.setCurrentTimeMillis(676L);
      String string0 = " |{Dwpbh\"+n";
      iOContext0.withEncoding(jsonEncoding0);
      byteArrayOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-99), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)110, false);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(" |{Dwpbh\"+n");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream("VVkOUb");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      mockPrintStream0.println("");
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byte byte0 = (byte)15;
      byteArray0[7] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 43, (byte)15);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream1, bufferedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-141), (ObjectCodec) null, mockPrintStream0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 43);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 35 bytes (out of 43)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "VVkOUb";
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream("VVkOUb");
      Object[] objectArray0 = new Object[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[14];
      byte byte0 = (byte)121;
      byteArray0[0] = (byte)121;
      printStream0.println(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-3095));
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("VVkOUb", (-3));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2057);
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)110;
      System.setCurrentTimeMillis(676L);
      iOContext0.withEncoding(jsonEncoding0);
      byteArrayOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-99), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeString(" |{Dwpbh\"+n");
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0._charBuffer = charArray0;
      uTF8JsonGenerator0.writeNumber((short) (byte) (-99));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(" |{Dwpbh\"+n");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Z6(l\"\"j3+Q(J3F");
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-433), (ObjectCodec) null, pipedOutputStream0, byteArray0, 12, true);
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-3));
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-804), (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString("|MRd@g+/#Mp&a");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 3);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 57343);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-804));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2960, (ObjectCodec) null, (OutputStream) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      byte byte0 = (byte)15;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString("|MRd@g+/#Mp&a");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 80);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, bufferedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 33);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1095);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 1015 bytes (out of 1095)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6y4w[M");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      mockPrintStream0.println((long) (byte)121);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)121, (ObjectCodec) null, mockPrintStream0, byteArray0, 39, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 31);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 55296);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (-329));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0._verifyValueWrite("6y4w[M");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("6y4w[M");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.writeStartObject();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      String string0 = "|rA";
      uTF8JsonGenerator0.writeNumberField("|rA", (float) 1);
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 56320);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("w", "zi-4KZy");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2487, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString("|MRd@g+/#Mp&a");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 54);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream1, byteArrayInputStream1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 3423);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      iOContext0.allocReadIOBuffer(11);
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      byte byte0 = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[6] = (byte)69;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1299), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)15, true);
      uTF8JsonGenerator0.writeRaw("<null>");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger.valueOf((-1299));
      BigInteger bigInteger1 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((long) (byte)95);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((String) null, "Invalid custom escape definitions; custom escape not found for character code 0x", true, '/', (byte)34);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 80)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "6y4w[M";
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6y4w[M");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      mockPrintStream0.println((long) (byte)121);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)121, (ObjectCodec) null, mockPrintStream0, byteArray0, 39, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      String string1 = "+N$UuLaOM /`eqC.";
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("+N$UuLaOM /`eqC.", (float) 2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString("#Ia");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 30, 3);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, bufferedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1000000000);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("VVkOUb");
      mockFile0.mkdir();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartArray();
      int[] intArray0 = new int[4];
      iOContext0.allocWriteEncodingBuffer(123);
      intArray0[0] = 2;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 15;
      intArray0[3] = (int) (byte)0;
      uTF8JsonGenerator0.writeArray(intArray0, 115, (-2));
      uTF8JsonGenerator0.writeString("RmP`zA?Q~T");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Trying to release buffer not owned by the context
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)15;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 80);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString("|MRd@g+/#Mp&a");
      ByteBuffer.allocate(33);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream1, 80);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream2, (-2763));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      iOContext0.allocWriteEncodingBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      int int0 = 33;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 61, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 33, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("VVkOUb");
      mockFile0.mkdir();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartArray();
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 15;
      intArray0[3] = (int) (byte)0;
      System.setCurrentTimeMillis((byte)0);
      uTF8JsonGenerator0.writeString("VVkOUb");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("kRk[w]R", 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("._u:^;8H", "w");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("w");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeShort((byte) (-12));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("._u:^;8H");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2048);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      mockPrintStream0.println(65535);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      uTF8JsonGenerator0.writeString(charArray0, 3, 1);
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("USEP^\"hfQwn*E");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B");
      mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-546), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 248, true);
      uTF8JsonGenerator0.writeRaw(']');
      SerializedString serializedString0 = new SerializedString("Invalid custom escap definitions; custom escape not found for character code 0x");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-804), (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString("|MRd@g+/#Mp&a");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 3);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 80);
      uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6y4w[M");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      String string0 = "e8LD\\uf";
      MockPrintStream mockPrintStream1 = new MockPrintStream(string0);
      mockPrintStream1.append('N');
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      boolean boolean0 = true;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)121, (ObjectCodec) null, mockPrintStream0, byteArray1, 2301, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeObjectFieldStart("CABz}&?D!<tBm,?v");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)42;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigDecimal0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)42, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeString(charArray0, 3146, 3);
      uTF8JsonGenerator0.writeNumberField("", (float) 0);
      uTF8JsonGenerator0.writeNumber(1.0F);
//      try { 
        uTF8JsonGenerator0.writeObjectFieldStart("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("._u:^;8H", "w");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("w");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeShort((byte) (-12));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0.writeRaw("vEF'f3L^Du");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger.valueOf(55296);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      int[] intArray0 = new int[13];
      intArray0[0] = 1;
      intArray0[1] = 3;
      SerializedString serializedString0 = new SerializedString("Parser of type ");
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumber((short) (-3803));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("Can not ", "Can not ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 93, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, true);
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6y4w[M");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-701), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      int[] intArray0 = new int[9];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 3;
      intArray0[3] = 2;
      intArray0[4] = (int) (byte)121;
      intArray0[5] = (-701);
      intArray0[6] = 11;
      intArray0[7] = 42;
      intArray0[8] = (int) (byte)121;
      uTF8JsonGenerator0.writeArray(intArray0, 56319, (-1601));
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("RmP`zA?Q~T");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1), 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)49;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)59, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1781, 1781);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1781
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 80);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString("|MRd@g+/#Mp&a");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(33);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeNumber((short)110);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (-1914));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[17] = (byte)127;
      byteArray0[7] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeString(charArray0, 2000, 2000);
      uTF8JsonGenerator0.writeStartObject();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      OutputStream outputStream0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 467, (ObjectCodec) null, (OutputStream) null, byteArray0, 8, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 467);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[3] = (byte)42;
      iOContext0.setEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte) (-3), (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)42, false);
      SerializedString serializedString0 = new SerializedString("");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(56320);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte) (-12));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, (OutputStream) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeRootValue(5);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, (OutputStream) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(4171.235F);
      uTF8JsonGenerator0.writeString("qp:&~dU> ");
      int int0 = GeneratorBase.SURR1_LAST;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)42, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)42;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigDecimal0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)42, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeString(charArray0, 3146, 3);
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeNumber((short)119);
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[2] = 'g';
      charArray0[4] = '\u0085';
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "Kd", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2461, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeRaw('\u0085');
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "VVkO";
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeString(charArray0, 2000, 2000);
      uTF8JsonGenerator0.writeStartObject();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 4096, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2048);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)110;
      System.setCurrentTimeMillis(676L);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-99), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString((SerializableString) defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR);
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeString(" |{Dwpbh\"+n");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("5T'", (byte)34);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream("VVkOUb");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      byte[] byteArray0 = new byte[24];
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 108, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, false);
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(10000000000L);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      mockPrintStream0.println((double) 1);
      uTF8JsonGenerator0.writeString("wrte null");
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 121, 101);
      uTF8JsonGenerator0._verifyPrettyValueWrite(";VD/I2)l]", 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2202, (ObjectCodec) null, pipedOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, dataOutputStream0, true);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString("|MRd@g+/#Mp&a");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 264, 2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream1, pipedInputStream1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyValueWrite("XE");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      ObjectCodec objectCodec0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2048);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1595, 2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 97);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1595, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (int) (byte)1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeString(charArray0, 2000, 2000);
      uTF8JsonGenerator0.writeStartObject();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray0, 128);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("", "w");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[0] = (Object) "w";
      PrintStream printStream0 = mockPrintStream0.printf("w", objectArray0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)121;
      printStream0.println(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)121, (ObjectCodec) null, printStream0, byteArray0, (byte)121, false);
      uTF8JsonGenerator0.writeNumber((float) 1);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeNumber(1);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1751);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite(" bytes (out of ");
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'u';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 512, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 512
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 3;
      uTF8JsonGenerator0.writeArray(intArray0, 11, (-2539));
      uTF8JsonGenerator0.writeString("VALUE_TRUE");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      mockPrintStream0.println((Object) pipedInputStream0);
      byteArray0[5] = (byte) (-88);
      mockFile0.setWritable(true);
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 96, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[11];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (-208));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      char[] charArray0 = new char[4];
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting either '*' or '/' for a comment", true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, true);
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, 0);
      uTF8JsonGenerator0.writeNumber((float) 1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "VVkOUb";
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartArray();
      String string1 = "";
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[11];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (-208));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber(298.48F);
      String string2 = "start an array";
      char char0 = ']';
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("start an array", "", true, ']', 56319);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[7] = (byte)42;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigDecimal0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)42, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      bigDecimal0.setScale(2670);
      uTF8JsonGenerator0.writeString("ti-&}FRB@wX?xQ");
      String string0 = "}`";
      uTF8JsonGenerator0.writeFieldName(" in field name");
//      try { 
        uTF8JsonGenerator0.writeFieldName("}`");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream("VVkOUb");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      byte[] byteArray0 = new byte[24];
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 108, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, false);
      iOContext1.allocWriteEncodingBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(10000000000L);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      mockPrintStream0.println((double) 1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeObjectFieldStart("<null>");
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("VWU?m;_evBWvxxgUx", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream("VVkOUb");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VWU?m;_evBWvxxgUx";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[24];
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)99;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, printStream0, byteArray0, (byte)0, true);
      iOContext0.allocWriteEncodingBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      mockPrintStream0.println((double) (-161));
      uTF8JsonGenerator0.writeString("kRs*Q,+Qg\u0007E\"%mA|");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Trying to release buffer not owned by the context
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      char[] charArray0 = new char[23];
      charArray0[1] = 'v';
      charArray0[15] = '~';
      charArray0[3] = ']';
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 16, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting either '*' or '/' for a comment");
      byte[] byteArray0 = new byte[16];
      mockFileOutputStream0.getChannel();
      byteArray0[0] = (byte)83;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-965), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      SerializedString serializedString0 = new SerializedString("was expecting either '*' or '/' for a comment");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 336, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      stringReader0.read();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeRawValue("!G]TTw34LNPt4r ");
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("!G]TTw34LNPt4r ");
      uTF8JsonGenerator0.writeObjectFieldStart("!G]TTw34LNPt4r ");
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charsToNameCanonicalizer0.findSymbol(charArray0, (-2), (-1016), 116);
      charArray0[1] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("");
      URI uRI0 = MockURI.aFileURI;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2367), (ObjectCodec) null, (OutputStream) null, byteArray0, 18, false);
      char[] charArray1 = new char[6];
      charArray1[0] = '}';
      charArray1[1] = '|';
      charArray1[2] = '}';
      charArray1[3] = '/';
      charArray1[4] = '/';
      charArray1[5] = '/';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray1, 2, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)42;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigDecimal0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)42, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeString(charArray0, 3146, 3);
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      dataOutputStream0.write(0);
      char[] charArray0 = new char[2];
      charArray0[1] = 'K';
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeBinary(byteArray0, 23, (int) (byte) (-3));
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber((short) (byte) (-12));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeObjectFieldStart("7$Yo");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 336, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      stringReader0.read();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeRawValue("!G]TTw34LNPt4r ");
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("!G]TTw34LNPt4r ");
      uTF8JsonGenerator0.writeObjectFieldStart("!G]TTw34LNPt4r ");
//      try { 
        uTF8JsonGenerator0._verifyValueWrite("!G]TTw34LNPt4r ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not !G]TTw34LNPt4r , expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 437, (-3111));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, bufferedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream0, (-636));
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 437, (ObjectCodec) null, pipedOutputStream0, byteArray0, 55296, false);
      uTF8JsonGenerator1._verifyValueWrite("X[)D2*az}Bw@TXX</h");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeStartObject();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "VVkO";
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)42;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigDecimal0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)42, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumberField("W?`oZP?Tb!", 0.0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[0] = (Object) "VVkOUb";
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)121;
      IOContext iOContext1 = new IOContext(bufferRecycler0, objectArray0[0], false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)121, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw('x');
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("", 2, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 128, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      mockFile0.getAbsoluteFile();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString(charArray0, 0, (-72));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-72), 1090);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockFile mockFile0 = new MockFile("6y4w[M");
      MockPrintStream mockPrintStream0 = new MockPrintStream("6y4w[M");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintStream0.println(7);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '\u0080';
      charArray0[2] = 'g';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, (int) (byte)121);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      MockFile mockFile0 = new MockFile("VVkOUb", "was expecting either '*' or '/' for a comment");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      mockFile0.delete();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-244), (ObjectCodec) null, mockPrintStream0, byteArray0, 3141, true);
      mockPrintStream0.println(true);
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumber(0L);
      int int0 = 4000;
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("q,uP#of <y", 0.8F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString("|MRd@g+/#Mp&a");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1933);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 91);
      uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 33);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[3] = (byte)42;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.setEncoding(jsonEncoding1);
      byteArray0[4] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding2);
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString(charArray0, (-798), (-3258));
      SerializedString serializedString0 = new SerializedString("ldzKFSQ$tG_Kjg&#");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("6y4w[M");
      MockPrintStream mockPrintStream0 = new MockPrintStream("6y4w[M");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintStream0.println(7);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-701), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      SerializedString serializedString0 = new SerializedString("START_OBJECT");
      uTF8JsonGenerator0.writeNumber((long) 3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "' (code ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("' (code ");
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1058), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, true);
      uTF8JsonGenerator0.writeString(charArray0, 0, (-1058));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)125);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream("VVkOUb");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[24];
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)99;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      iOContext1.allocWriteEncodingBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(10000000000L);
      uTF8JsonGenerator0._checkStdFeatureChanges((byte)0, (byte)99);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis((-3139L));
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-120), (ObjectCodec) null, (OutputStream) null, byteArray0, 7991, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("M`Fs2_v>C6kpOr~5");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[2] = 'g';
      charArray0[3] = '@';
      charArray0[4] = '\u0080';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, (int) (byte)54);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("6y4w[M");
      MockPrintStream mockPrintStream0 = new MockPrintStream("6y4w[M");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintStream0.println(7);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString(".PackageVersion");
      uTF8JsonGenerator0.writeFieldName("): has to be escaped using backslash to be included in ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".PackageVersion");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeStartObject();
      uTF8JsonGenerator1.writeObjectFieldStart(".PackageVersion");
      uTF8JsonGenerator0.writeBoolean(true);
//      try { 
        uTF8JsonGenerator0.writeFieldName("6y4w[M");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocReadIOBuffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("Ef\"'OfR@}y");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("O(");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)83;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 30, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)83, true);
      SerializedString serializedString0 = new SerializedString("Ef\"'OfR@}y");
      uTF8JsonGenerator0.writeNumber(0L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[1] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(13.0F);
      uTF8JsonGenerator0.writeString("qp:&~dU> ");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyValueWrite("qp:&~dU> ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[11];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (-208));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)44, (byte)34);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 44
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      String string0 = "|MRd@g+/#Mp&a";
      uTF8JsonGenerator0.writeString("|MRd@g+/#Mp&a");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 56320);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 1 bytes (out of 1)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[1] = 'p';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      jsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(13.0F);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)124;
      byteArray0[3] = (byte)124;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8hJ%!jZ_m*VaP!\"}", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3435), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)124, true);
      mockPrintStream0.println(true);
      uTF8JsonGenerator0.writeNumber((long) (byte)42);
      uTF8JsonGenerator0.writeNumber(1830L);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte)124;
      byteArray1[2] = (byte)42;
      byteArray1[3] = (byte)42;
      byteArray1[4] = (byte)99;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 72, (-47));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 336, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      stringReader0.read();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeRawValue("!G]TTw34LNPt4r ");
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("!G]TTw34LNPt4r ");
      uTF8JsonGenerator0.writeObjectFieldStart("!G]TTw34LNPt4r ");
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "' (code ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("' (code ");
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1058), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, true);
      uTF8JsonGenerator0.writeString(charArray0, 0, (-1058));
      uTF8JsonGenerator0._verifyValueWrite("write a number");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("6y4w[M");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".PackageVersion");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeObjectFieldStart(".PackageVersion");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a raw (unencoded) value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      PrintStream printStream0 = mockPrintStream0.append('p');
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1038, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      String string0 = "Reader returned 0 characters when trying to read ";
      uTF8JsonGenerator0.writeString("Reader returned 0 characters when trying to read ");
      String string1 = "w@.VBE!\"d]Q";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, 4000);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      PrintStream printStream0 = mockPrintStream0.append('p');
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1038, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("Reader returned 0 characters when trying to read ");
      uTF8JsonGenerator0.writeNumberField("w@.VBE!\"d]Q", 0.0);
      uTF8JsonGenerator0.close();
//      try { 
        uTF8JsonGenerator0.writeFieldName("Reader returned 0 characters when trying to read ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2048);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-106);
      byteArray0[5] = (byte) (-113);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[7];
      mockPrintStream0.printf("VVkO", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)38;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigDecimal0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)38, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("ti-&}FRB@wX?xQ");
      uTF8JsonGenerator0.writeFieldName("}`");
      uTF8JsonGenerator0.writeString("}`");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[7];
      mockPrintStream0.printf("VVkO", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)42;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 643, false);
      mockPrintStream0.println(false);
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 46, 1329);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "MODIFIED-FOR-URL";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MODIFIED-FOR-URL");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I0)#!O&`w%Vo$I");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I0)#!O&`w%Vo$I");
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4286, (ObjectCodec) null, pipedOutputStream0, byteArray0, 9, false);
//      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte) (-56));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)15;
      byteArray0[0] = (byte) (-1);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.writeRawValue("VVkOUb");
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeString("(4s^ej");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 1);
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[3] = (byte)42;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.setEncoding(jsonEncoding1);
      byteArray0[4] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      dataOutputStream0.write(0);
      char[] charArray0 = new char[2];
      charArray0[1] = 'K';
      uTF8JsonGenerator0.writeBinary(byteArray0, 23, (int) (byte) (-3));
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeObjectFieldStart("7$Yo");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString("|MRd@g+/#Mp&a");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 3, 80);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 57343);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, (-999));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 336, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      stringReader0.read();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, false);
      String string0 = "!G]TTw34LNPt4r ";
      filteringGeneratorDelegate0.writeRawValue("!G]TTw34LNPt4r ");
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      int[] intArray0 = new int[2];
      intArray0[0] = 33;
      intArray0[1] = 33;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArray(intArray0, 2, 116);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<eda");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[2] = 'g';
      charArray0[3] = '@';
      uTF8JsonGenerator0._maximumNonEscapedChar = (int) (byte) (-43);
      uTF8JsonGenerator0.writeObjectFieldStart(".1D$G!Y*{Fs");
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream("VVkOUb");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[24];
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)99;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      iOContext1.allocWriteEncodingBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(10000000000L);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis((-3139L));
      uTF8JsonGenerator0.writeNumber(8);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (-1972), 24);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[7];
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)127, (ObjectCodec) null, printStream0, byteArray0, (byte)127, true);
      uTF8JsonGenerator0.writeObjectFieldStart("");
      uTF8JsonGenerator0.writeNumberField("", 0.0F);
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      charArray0[5] = 'e';
      charArray0[6] = 'e';
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 108, 512);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("6y4w[M", "6y4w[M");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.getCanonicalFile();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-100);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2043, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)99, true);
      iOContext0.allocWriteEncodingBuffer();
      BigDecimal bigDecimal0 = new BigDecimal((long) (byte)15);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      MockFile mockFile0 = new MockFile("6y4w[M", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream("6y4w[M");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintStream0.println(7);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 976, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, 2881);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[2] = 'g';
      charArray0[3] = '@';
      uTF8JsonGenerator0._maximumNonEscapedChar = 2461;
      charArray0[4] = '\u0085';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, (int) (byte)54);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'p';
      char[] charArray1 = new char[5];
      charArray1[0] = 'Q';
      charArray1[1] = 'Q';
      charArray1[2] = 'Q';
      charArray1[3] = 'p';
      charArray1[4] = 'j';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 900, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray1, 0, 2, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 111, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumberField("SJl`}1!omp", 1920.7788F);
      uTF8JsonGenerator0.writeNumber((float) 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.flush();
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream("VVkOUb");
      MockPrintStream mockPrintStream1 = new MockPrintStream("Ab0fa|");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintStream0.println(1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, fileSystemHandling0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)121;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 3436, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2048);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 25, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)1, false);
      uTF8JsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      System.setCurrentTimeMillis(3);
      uTF8JsonGenerator0.writeString("");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 145;
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[7];
      PrintStream printStream0 = mockPrintStream0.printf("VVkO", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 145, (ObjectCodec) null, printStream0, byteArray0, (byte)127, true);
      mockPrintStream0.println(true);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeStartObject((Object) null);
//      try { 
        uTF8JsonGenerator0.writeNumber((-254L));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[7];
      PrintStream printStream0 = mockPrintStream0.printf("VVkO", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)42;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigDecimal0, false);
      printStream0.write(861);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((byte)0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, (int) (byte)0, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[2] = 'g';
      charArray0[3] = '@';
      uTF8JsonGenerator0._maximumNonEscapedChar = 2461;
      charArray0[4] = '';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, (int) (byte)54);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)124;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, false);
      iOContext1.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("*a");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 102, false);
      iOContext1.allocWriteEncodingBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2048);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-106);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 69, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)124;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, false);
      iOContext1.allocWriteEncodingBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(10000000000L);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("*a");
      uTF8JsonGenerator0.writeRaw('');
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream("VVkOUb");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      iOContext1.allocWriteEncodingBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(10000000000L);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeString("wrte null");
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream("VVkOUb");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      iOContext1.allocWriteEncodingBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(10000000000L);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("wrte null");
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[2] = 'g';
      charArray0[3] = '@';
      uTF8JsonGenerator0.writeStartObject();
      charArray0[4] = '';
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, (int) (byte)54);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      iOContext0.allocReadIOBuffer();
      charArray0[2] = 'C';
      String string0 = "; illegal combination";
      MockPrintStream mockPrintStream0 = new MockPrintStream("; illegal combination");
      PrintStream printStream0 = mockPrintStream0.append('J');
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, objectOutputStream0, byteArray0, 0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      System.setCurrentTimeMillis((-2147483648L));
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(" |{Dwpbh\"+n");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "B";
      StringReader stringReader0 = new StringReader("B");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3545, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1425, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3545, false);
      uTF8JsonGenerator0.writeNumber((-667.5588F));
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)85;
      byteArray1[4] = (byte)85;
      byteArray1[5] = (byte)85;
      byteArray1[6] = (byte)85;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (byte)85, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)0;
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, (byte)15, true);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)15, 23);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 26
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      iOContext1.allocWriteEncodingBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(10000000000L);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("write a null");
      uTF8JsonGenerator0.writeFieldName("*a");
      uTF8JsonGenerator0.writeRaw('');
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[1] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 55296, (ObjectCodec) null, mockFileOutputStream0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      iOContext2.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2048);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-106);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 25, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber((long) 25);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 123;
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      FilterOutputStream filterOutputStream1 = new FilterOutputStream(filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 18, false);
      filterOutputStream1.write(0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 56319, 18);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xH1.4A%9");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-4153));
      byteArrayBuilder0.write((-4153));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber((double) 3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, (-1), (-921));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      char[] charArray0 = new char[23];
      char char0 = 'v';
      charArray0[1] = 'v';
      charArray0[2] = '~';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G#");
      charArray0[3] = ']';
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 16, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting either '*' or '/' for a comment");
      byte[] byteArray0 = new byte[16];
      charsToNameCanonicalizer0.makeChild(5407);
      mockFileOutputStream0.getChannel();
      byteArray0[0] = (byte)83;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-973), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      SerializedString serializedString0 = new SerializedString("was expecting either '*' or '/' for a comment");
//      try { 
        uTF8JsonGenerator0.writeNumber((-2325L));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)54;
      byte byte0 = (byte) (-93);
      byteArray0[3] = (byte) (-93);
      byte byte1 = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[2] = 'g';
      charArray0[3] = '9';
      charArray0[4] = '';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, (int) (byte)54);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(65535);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1097, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      String string0 = ":3HhiLVC{{0m\\uCB#";
      SerializedString serializedString0 = new SerializedString(string0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)116;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("`?8#gXE*Rj2!w<{");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VVkOUb");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0j4?EH");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 335, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2048);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-106);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1744, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 112, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      iOContext1.allocWriteEncodingBuffer();
      BigDecimal bigDecimal0 = new BigDecimal(10000000000L);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("write a null");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeFieldName("*a");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      iOContext0.allocReadIOBuffer();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-84);
      byteArray1[1] = (byte) (-84);
      byteArray1[2] = (byte) (-72);
      iOContext1.allocBase64Buffer();
      byteArray1[3] = (byte) (-84);
      byteArray1[4] = (byte) (-84);
      byteArray1[5] = (byte)86;
      byteArray1[6] = (byte) (-84);
      byteArray1[7] = (byte) (-84);
      byteArray1[8] = (byte) (-84);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Object object0 = new Object();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte) (-120), (ObjectCodec) null, filterOutputStream0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding1);
      iOContext3.allocReadIOBuffer();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-120);
      byteArray1[1] = (byte) (-120);
      byteArray1[2] = (byte) (-120);
      byteArray1[3] = (byte) (-120);
      byteArray1[4] = (byte) (-120);
      byteArray1[5] = (byte) (-120);
      byteArray1[6] = (byte) (-120);
      byteArray1[7] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      uTF8JsonGenerator1.writeString("6LGM[R");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator1.writeRaw("6LGM[R");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-5700.0));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding1, false);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding2);
      iOContext1.withEncoding(jsonEncoding2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)49;
      pipedOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 8, false);
      pipedInputStream0.mark(150);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-4202), (-2));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2048);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 25, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)1, false);
      uTF8JsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      System.setCurrentTimeMillis(3);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 34, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-391), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -391
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      charArray0[2] = 'C';
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.io.IOContext");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 40, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 26, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 26, 1);
      uTF8JsonGenerator0._verifyValueWrite("G^L/W&}HZ_R");
      uTF8JsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.io.IOContext", 0);
      uTF8JsonGenerator0.writeString(charArray0, 3, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-32768), (ObjectCodec) null, printStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(357L);
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-76);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)12, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0L);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)54;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile0 = new MockFile("[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]", "Incomplete surrogate pair: first char 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream("6y4w[M");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintStream0.println((int) (byte)121);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, mockPrintStream0, byteArray0, 7, false);
      mockPrintStream0.append((CharSequence) "[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)121, (-5855));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      charArray0[2] = 'C';
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.io.IOContext");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 40, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-4150), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4150
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56308, true);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)15;
      intArray0[1] = (int) (byte)127;
      intArray0[2] = (-370);
      intArray0[3] = 123;
      intArray0[4] = 0;
      intArray0[5] = 57343;
      int int0 = (-181);
      intArray0[6] = (-181);
      intArray0[7] = (int) (byte)15;
      uTF8JsonGenerator0.writeArray(intArray0, (int) (byte)15, (-370));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)15, 23);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 26
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      stringReader0.read(charArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)85;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2411, (ObjectCodec) null, (OutputStream) null, byteArray0, (-2008), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(1L);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2008
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      int int0 = GeneratorBase.SURR1_LAST;
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 48, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, "jw$4@*J&e{Io]!~i", true);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1466, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1570, (ObjectCodec) null, (OutputStream) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.ResolvedType");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream1, true);
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = '9';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 33, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)127, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 324, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "VVkOUb";
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, filterOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeStartArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-3));
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream("", true);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-1373);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 840, false);
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '$';
      charArray0[5] = '8';
      charArray0[6] = 'P';
      charArray0[7] = '$';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 3);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[3] = 'j';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3545, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      int int0 = GeneratorBase.SURR1_LAST;
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 48, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNullField("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 336, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      mockFile0.getAbsoluteFile();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      stringReader0.read();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.writeRawValue("!G]TTw34LNPt4r ");
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeString("!G]TTw34LNPt4r ");
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = new SerializedString("!G]TTw34LNPt4r ");
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", (-1));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting either '*' or '/' for a comment");
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3545, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1006), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, true);
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 102, 3317);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'j';
      charArray0[2] = 'g';
      charArray0[3] = '9';
      charArray0[4] = '';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, (int) (byte)54);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[0] = (byte)127;
      byteArray0[3] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-32768), (ObjectCodec) null, printStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(357L);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("VVkOUb");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      iOContext1.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeString("write a null");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeFieldName("*a");
      StringWriter stringWriter0 = new StringWriter((byte)15);
      StringWriter stringWriter1 = stringWriter0.append('|');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 123, (ObjectCodec) null, stringWriter1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      MockFile mockFile0 = new MockFile("", "VVOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      byte byte0 = (byte)127;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2683, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("Dsr:IDIT(@mXH>-h x ");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator1.writeRaw('x');
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = new char[4];
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      StringReader stringReader0 = new StringReader("wt");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("wt");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)91;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-64), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      printStream0.write(byteArray0);
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeString("qf");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("Can not write a field name, expecting a value");
      uTF8JsonGenerator0.writeRaw("VVkOUb");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 56319, (-2636));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("6y4w[M", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.getCanonicalFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintStream0.println(7);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 7, true);
      uTF8JsonGenerator0.writeNumber((float) (byte)50);
      SerializedString serializedString0 = new SerializedString("VVkOUb");
      uTF8JsonGenerator0.writeRaw('x');
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRaw("nfG)60", 2, 1);
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '$';
      charArray0[2] = '$';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 115, (ObjectCodec) null, pipedOutputStream0);
      iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString(") out of range of long (");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(") out of range of long (");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 336, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      stringReader0.read();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeRawValue("!G]TTw34LNPt4r ");
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeString("!G]TTw34LNPt4r ");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", (-1));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "VVkOUb";
      MockFile mockFile0 = new MockFile("", "P:>");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.printf("Can not ", (Object[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)99;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 404, (ObjectCodec) null, printStream0, byteArray0, (byte)127, false);
      uTF8JsonGenerator0.writeNumber(1092.2585F);
      iOContext0.allocWriteEncodingBuffer();
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("?m/Mxxs6O~E'aDag+");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)15;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)15;
      intArray0[1] = (int) (byte)127;
      intArray0[2] = (-370);
      intArray0[3] = 123;
      intArray0[6] = (-181);
      intArray0[7] = (int) (byte)15;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 15, (ObjectCodec) null, printStream0, byteArray0, 1208, true);
      uTF8JsonGenerator0.writeNumber(1L);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting either '*' or '/' for a comment");
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = ']';
      stringReader0.read(charArray0);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3545, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumberField("HQaT g+R%$WhPdDP", (float) 3);
      uTF8JsonGenerator0.writeNumber((float) 2);
//      try { 
        uTF8JsonGenerator0.writeObjectFieldStart("Operation not supported by generator of type ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      stringReader0.read(charArray0);
      charArray0[8] = 'Q';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 336, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 1, true);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      int int0 = (-4391);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4391), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumberField("SJl`}1!omp", (float) 0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile0 = new MockFile("", "VVokU");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[0] = (Object) "VVokU";
      PrintStream printStream0 = mockPrintStream0.printf("VVokU", objectArray0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)121;
      printStream0.println(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, objectArray0[0], false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, printStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((float) 1);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw('x');
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber((short) (byte)49);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("[");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      charArray0[2] = 'J';
      charArray0[3] = '\'';
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-1);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-2525), (ObjectCodec) null, dataOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2428, 101);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = 'p';
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      charArray0[2] = 'C';
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.io.IOContext");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 40, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 26, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 26, 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.io.IOContext", 33);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 123, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('!');
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter1);
      JsonGenerator jsonGenerator0 = filteringGeneratorDelegate0.setPrettyPrinter(defaultPrettyPrinter2);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate1.useDefaultPrettyPrinter();
      filteringGeneratorDelegate1.getCodec();
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeString("=OMnwJ}q4D");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 4993, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1.getOutputBuffered();
      uTF8JsonGenerator0._writePPFieldName("=OMnwJ}q4D");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)127, (ObjectCodec) null, mockPrintStream0, byteArray0, 26, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)127, (byte)99);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      dataOutputStream0.writeUTF(") in base64 content");
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '8';
      uTF8JsonGenerator0.writeString(charArray0, 240, 0);
      pipedInputStream0.mark(4);
      SerializedString serializedString0 = new SerializedString("-2");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 5, 2);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '8';
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(1.0F);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      int int0 = 56319;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)15;
      intArray0[1] = (int) (byte)127;
      intArray0[2] = (-370);
      intArray0[3] = 123;
      intArray0[4] = 0;
      intArray0[5] = 57343;
      intArray0[6] = (-181);
      intArray0[7] = (int) (byte)15;
      uTF8JsonGenerator0.writeArray(intArray0, (int) (byte)15, (-370));
      uTF8JsonGenerator0.writeNumber((float) (byte)46);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)15, 23);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 26
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[0] = (Object) "VVkOUb";
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)121;
      IOContext iOContext1 = new IOContext(bufferRecycler0, objectArray0[0], false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)121, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jsonGenerator0.writeNumberField("Invalid custom escape definitions; custom escape not found for character code 0x", bigDecimal0);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(13.0F);
      uTF8JsonGenerator0.writeString("qp:&~GdUO> ");
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeRaw("", 2, 3186);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      stringReader0.read(charArray0);
      charArray0[8] = 'Q';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 336, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 1, true);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4391), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumberField("SJl`}1!omp", (float) 0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 1);
      uTF8JsonGenerator0.writeNumber("7|0r1~m9iyMUnqa");
      uTF8JsonGenerator0.writeRaw('\'');
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("[");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1641, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(1L);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      SerializedString serializedString0 = new SerializedString("ed]Eiik707aQMD?m");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.flush();
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('y');
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      filteringGeneratorDelegate0.setPrettyPrinter(defaultPrettyPrinter0);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumberField("|rA", (float) 1);
      uTF8JsonGenerator0.writeNumber(1048.0F);
//      try { 
        uTF8JsonGenerator0.writeObjectFieldStart("rqv4qHDUfe1");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString(charArray0, 2, (-668));
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = '~';
      charArray0[3] = ']';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3545, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 110, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.util.DefaultPrettyPrinter");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("*a");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = '~';
      charArray0[3] = ']';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3545, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      int int0 = GeneratorBase.SURR1_LAST;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-934), (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("was expecting either '*' or '/' for a comment", 2, 56319);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(":vV^[");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeRawValue(":vV^[");
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      jsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(13.0F);
      uTF8JsonGenerator0.writeString("qp:&~GdUO> ");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("qp:&~GdUO> ");
      jsonGenerator0.close();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('p');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)121;
      printStream0.println(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, objectArray0[0], false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2933, (ObjectCodec) null, printStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((float) 1);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw('x');
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      SerializedString serializedString0 = new SerializedString("VVkOUb");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[2] = (byte) (-84);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 45, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedUTF8();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(":vV^[");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("N$BrD,");
      StringReader stringReader2 = new StringReader("");
      int int0 = GeneratorBase.SURR1_LAST;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":vV^[");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((-2490L));
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      charArray0[8] = 'Q';
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)62;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 342, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2990, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)62, 31);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)15, 23);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 26
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      boolean boolean0 = true;
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      charArray0[8] = 'Q';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 336, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 1, true);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4391), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumberField("SJl`}1!omp", (float) 0);
      uTF8JsonGenerator0.writeNumber(1048.0F);
//      try { 
        uTF8JsonGenerator0.writeObjectFieldStart("%}lZIo-7ef");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      StringReader stringReader0 = new StringReader("wt");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1166, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 127, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-183), 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.io.IOContext");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.io.IOContext");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[3] = 'C';
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('y');
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      filteringGeneratorDelegate0.setPrettyPrinter(defaultPrettyPrinter0);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeString("write a string");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._writePPFieldName("write a string");
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(":vV^[");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeRawValue(":vV^[");
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(13.0F);
      uTF8JsonGenerator0.writeString("qp:&~GdUO> ");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("qp:&~GdUO> ");
      jsonGenerator0.close();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('p');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('k');
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = filteringGeneratorDelegate0.setPrettyPrinter(defaultPrettyPrinter1);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      jsonGenerator0.getCodec();
      uTF8JsonGenerator0.writeNumber(13.0F);
      uTF8JsonGenerator0.writeString("");
      int int0 = GeneratorBase.SURR1_LAST;
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeRaw('k');
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "' (code ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("' (code ");
      StringReader stringReader1 = new StringReader("' (code ");
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '&';
      charArray0[2] = 'v';
      int int0 = GeneratorBase.SURR1_LAST;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((long) 3);
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      int int0 = 1166;
      StringReader stringReader0 = new StringReader("");
      int int1 = 127;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1166, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 127, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "' (code ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("' (code ");
      StringReader stringReader1 = new StringReader("' (code ");
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = ']';
      charArray0[2] = 'v';
      stringReader1.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "Operation not supported by generator of type ";
      IOContext iOContext2 = new IOContext(bufferRecycler0, "' (code ", false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 49, (ObjectCodec) null, (OutputStream) null, byteArray0, 5, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "' (code ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("' (code ");
      StringReader stringReader1 = new StringReader("' (code ");
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = ']';
      charArray0[2] = 'v';
      stringReader1.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(54);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2593, true);
      int int0 = 33;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      charArray0[1] = 'p';
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-114);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, stringReader0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 3, (ObjectCodec) null, filterOutputStream0);
      iOContext1.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString("A");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      char[] charArray0 = new char[23];
      charArray0[1] = 'v';
      charArray0[2] = '~';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G#");
      charArray0[3] = ']';
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 16, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting either '*' or '/' for a comment");
      byte[] byteArray0 = new byte[16];
      charsToNameCanonicalizer0.makeChild(5407);
      mockFileOutputStream0.getChannel();
      byteArray0[0] = (byte)85;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-973), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, true);
      SerializedString serializedString0 = new SerializedString("was expecting either '*' or '/' for a comment");
      uTF8JsonGenerator0.writeNumber((-2325L));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '8';
      uTF8JsonGenerator0.writeBinary(byteArray0, 23, (int) (byte) (-3));
      uTF8JsonGenerator0.writeString(charArray0, 240, 0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeObjectFieldStart("7$Yo");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '$';
      charArray0[2] = '$';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 115, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString(") out of range of long (");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 691, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('y');
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      filteringGeneratorDelegate0.setPrettyPrinter(defaultPrettyPrinter0);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeString("write a string");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._writePPFieldName("write a string");
      uTF8JsonGenerator0.writeNumber(266.17044923918);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZZM16Nkho(H':fFUS");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1087), (ObjectCodec) null, filterOutputStream0);
      iOContext1.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString("zm!Ec.V");
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      char[] charArray0 = new char[23];
      charArray0[1] = 'v';
      charArray0[2] = '~';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G#");
      charArray0[3] = ']';
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 16, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting either '*' or '/' for a comment");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)85;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-973), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, true);
      SerializedString serializedString0 = new SerializedString("was expecting either '*' or '/' for a comment");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = '<';
      charArray0[2] = 'c';
      charArray0[3] = ' ';
      charArray0[4] = '+';
      charArray0[5] = 'l';
      charArray0[6] = '1';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 34
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("[");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[1] = 'p';
      charArray0[2] = 'J';
      charArray0[3] = '\'';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)119;
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4422, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('\'');
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("VVkOUb", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      uTF8JsonGenerator0.writeString("write a null");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeFieldName("*a");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      charArray0[2] = 'C';
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.io.IOContext");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 40, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.io.IOContext");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 2);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 4);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3, 33);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '8';
      uTF8JsonGenerator0.writeString(charArray0, 240, 0);
      pipedInputStream0.mark(4);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 5, 2);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nFi");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[2] = '$';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 240);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.write(2);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder1);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      charArray0[2] = 'C';
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.io.IOContext");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 40, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.io.IOContext");
      mockFileOutputStream0.write(79);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 38, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-192), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 121, false);
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 33, 110);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ni");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[3];
      charArray0[2] = '1';
      charArray0[1] = '/';
      charArray0[2] = '$';
      StringReader stringReader0 = new StringReader("ni");
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 256, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("30L:d*I;Ts'iEGM*");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3033), (ObjectCodec) null, pipedOutputStream0, byteArray0, 51, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 21, (-1232));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      filteringGeneratorDelegate0.writeRawValue("");
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(13.0F);
      uTF8JsonGenerator0.writeString("qp:&~GdUO> ");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
//      try { 
        jsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      String string0 = "com.fasterxml.jackson.core.util.JsonParserDelegate";
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.util.JsonParserDelegate");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'p';
      charArray0[1] = '\'';
      charArray0[2] = 'C';
      charArray0[3] = 'p';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = 'J';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1148), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4391), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeObjectFieldStart("%}lZIo-7ef");
//      try { 
        uTF8JsonGenerator0.writeNumber((-1533.4));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      filteringGeneratorDelegate0.setPrettyPrinter(defaultPrettyPrinter1);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber(13.0F);
      uTF8JsonGenerator0.writeString("qp:&~GdUO> ");
      uTF8JsonGenerator0.getOutputBuffered();
      jsonGenerator0.writeNumber(289.719F);
//      try { 
        jsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 691, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('y');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      filteringGeneratorDelegate0.setPrettyPrinter(defaultPrettyPrinter0);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeString("write a string");
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      charArray0[2] = 'C';
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.io.IOContext");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 40, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.io.IOContext");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      uTF8JsonGenerator0.writeString("qf");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("Can not write a field name, expecting a value");
      String string0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null, (int) (byte)118, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.Version");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = '/';
      charArray0[2] = '@';
      charArray0[3] = '7';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1000000000, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '8';
      uTF8JsonGenerator0.writeBinary(byteArray0, 23, (int) (byte) (-3));
      uTF8JsonGenerator0.writeString(charArray0, 240, 0);
      pipedInputStream0.mark(4);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a raw (unencoded) value");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-1373));
      byteArrayBuilder0.write(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2651, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.util.JsonParserDelegate");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'p';
      charArray0[1] = '\'';
      charArray0[2] = 'C';
      charArray0[3] = 'p';
      charArray0[4] = '\'';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vwqkA%<S>jf\"cqqVg");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 11);
      byteArrayBuilder0.write(33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1478), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(1.0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1478
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)99;
      byteArray0[1] = (byte) (-88);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, true);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = '<';
      charArray0[2] = 'c';
      charArray0[3] = ' ';
      charArray0[4] = '+';
      charArray0[5] = 'l';
      charArray0[6] = '1';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 34
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      char[] charArray0 = new char[23];
      charArray0[1] = 'v';
      charArray0[2] = '~';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#");
      charArray0[3] = ']';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3545, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting either '*' or '/' for a comment");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)85;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeObjectFieldStart("was expecting either '*' or '/' for a comment");
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      char char0 = 'k';
      uTF8JsonGenerator0.writeRaw('k');
      boolean boolean0 = false;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      filteringGeneratorDelegate0.setPrettyPrinter(defaultPrettyPrinter0);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(684.7776F);
      uTF8JsonGenerator0._writePPFieldName("");
      String string1 = "";
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "", false, 'Y', 127);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      iOContext0.allocReadIOBuffer();
      charArray0[2] = 'C';
      charArray0[3] = '\'';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byteArrayBuilder0.write(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2341), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (-171));
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("[");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocReadIOBuffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-INF");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1836);
      byteArrayBuilder0.write(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1152, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      IOContext iOContext2 = new IOContext(bufferRecycler0, objectArray0[0], false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2616), true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2933, (ObjectCodec) null, printStream0, byteArray0, 2, false);
      uTF8JsonGenerator1.writeNumber((float) 1);
      SerializedString serializedString0 = new SerializedString("'ihf_&mv-L");
      uTF8JsonGenerator1.writeRaw('x');
      uTF8JsonGenerator1.writeNumber(1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      charArray0[2] = 'C';
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.io.IOContext");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 40, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.io.IOContext");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/VVkOUb");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Can not write a field name, expecting a value");
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      printStream0.write(byteArray0);
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeString("qf");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("Can not write a field name, expecting a value");
      uTF8JsonGenerator0.writeRaw("VVkOUb");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 56319, (-2636));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "VVkOUb";
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, filterOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeStartArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-3));
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream("", true);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      iOContext0.allocReadIOBuffer();
      charArray0[2] = 'C';
      charArray0[3] = '\'';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byteArrayBuilder0.write(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 573;
      StringReader stringReader0 = new StringReader("[");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      charArray0[2] = 'C';
      charArray0[3] = '\'';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 573, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-1148), false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2676), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeObjectFieldStart("[");
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '8';
      pipedInputStream0.mark((-1268));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) (-3), 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '8';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 2, 3443);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      IOContext iOContext2 = new IOContext(bufferRecycler0, objectArray0[0], false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2616), true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2933, (ObjectCodec) null, printStream0, byteArray0, 2, false);
      uTF8JsonGenerator1.writeNumber((float) 1);
      uTF8JsonGenerator1.writeString("Can not write a field name, expecting a value");
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('k');
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      filteringGeneratorDelegate0.setPrettyPrinter(defaultPrettyPrinter1);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(13.0F);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeString("qf");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("Can not write a field name, expecting a value");
      uTF8JsonGenerator0.writeRaw("VVkOUb");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "' (code ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("' (code ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1039, (-10), true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 33, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeString(charArray0, 2, (-1590));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "' (code ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("' (code ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1039, (-10), true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 33, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeString(charArray0, 2, (-1590));
      uTF8JsonGenerator0.writeRaw('n');
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)85;
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)127, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)85;
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)127, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer(1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '8';
      uTF8JsonGenerator0.writeString(charArray0, 240, 0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-128);
      byteArray0[5] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, true);
      uTF8JsonGenerator0.writeNumber((float) (byte)34);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      System.setCurrentTimeMillis((byte)99);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, true);
      uTF8JsonGenerator0.writeNumber((float) (byte)48);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = '<';
      charArray0[2] = 'c';
      charArray0[3] = ' ';
      charArray0[4] = '+';
      charArray0[5] = 'l';
      charArray0[6] = '1';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 34
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'v';
      charArray0[2] = '~';
      charArray0[3] = ']';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3545, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", false);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      iOContext3.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      PrintStream printStream0 = mockPrintStream0.append('j');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 8, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber(984);
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("[");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'C';
      charArray0[2] = 'p';
      charArray0[3] = '\'';
      charArray0[4] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 100, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2676), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 127, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 127
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      IOContext iOContext2 = new IOContext(bufferRecycler0, objectArray0[0], false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2616), true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2933, (ObjectCodec) null, printStream0, byteArray0, 2, false);
      uTF8JsonGenerator1.writeNumber((float) 1);
      SerializedString serializedString0 = new SerializedString("'ihf_&mv-L");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      char[] charArray0 = new char[2];
      charArray0[1] = '8';
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataOutputStream0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, filterOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '8';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-990));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-163), (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte)127, true);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      SerializedString serializedString0 = new SerializedString("VVkOUb");
      SerializedString serializedString1 = new SerializedString("");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      IOContext iOContext2 = new IOContext(bufferRecycler0, objectArray0[0], false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2616), true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2933, (ObjectCodec) null, printStream0, byteArray0, 2, false);
      uTF8JsonGenerator1.writeNumber((float) 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2616
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 91, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(']');
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-574), (ObjectCodec) null, mockPrintStream0, byteArray0, 963, true);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(38);
      byteArrayOutputStream0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 963, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      iOContext1.allocWriteEncodingBuffer(1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte) (-3);
      byteArray1[2] = (byte) (-84);
      byteArray1[3] = (byte)42;
      byteArray1[4] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, filterOutputStream0, byteArray1, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '8';
      uTF8JsonGenerator0.writeString(charArray0, 240, 0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = '8';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "B", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, (OutputStream) null, byteArray0, 911, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)48);
      assertArrayEquals(new byte[] {(byte)34, (byte)52, (byte)56, (byte)46, (byte)48, (byte)34, (byte) (-128), (byte)15}, byteArray0);
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      assertArrayEquals(new byte[] {(byte)34, (byte)52, (byte)56, (byte)46, (byte)48, (byte)34, (byte)32, (byte)91}, byteArray0);
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'd';
      charArray0[2] = 'C';
      charArray0[3] = '}';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)34, (int) (byte)15);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 34
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      uTF8JsonGenerator0.writeString("qf");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("Can not write a field name, expecting a value");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-88);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-128), (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = '$';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)99, (int) (byte)0);
      uTF8JsonGenerator0.writeRaw('8');
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("Can not write a field name, expecting a value");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)48);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("VVkOUb", 12, (-528));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2684, (ObjectCodec) null, printStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 49, 6131);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      int int0 = 56319;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, filterOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("MHQkmS=1ZTeX", "", false, '8', (-266));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '8';
      uTF8JsonGenerator0.writeString(charArray0, 240, 0);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      
      pipedInputStream0.mark(4);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 5, 2);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3545, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1639), (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-20), (int) (byte) (-20));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, true);
      uTF8JsonGenerator0.writeNumber((float) (byte)48);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertArrayEquals(new byte[] {(byte)34, (byte)49, (byte)48, (byte)34, (byte)48, (byte)34, (byte)32, (byte)91}, byteArray0);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "' (code ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "' (code ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("' (code ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1039, (-10), true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(65599);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-127), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (byte) (-88), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -88
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, printStream0, byteArray0, 3496, false);
      SerializedString serializedString0 = new SerializedString("VVkOUb");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(53L, mockFile0.length());
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte byte0 = (byte) (-20);
      int int0 = (-1442);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(247);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, dataOutputStream0, byteArray0, 2150, false);
//      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte) (-84));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('k');
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(13.0F);
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-12);
      char[] charArray0 = new char[2];
      charArray0[1] = '8';
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataOutputStream0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeNumber(2);
      SerializedString serializedString0 = new SerializedString("]_^@C%#i5f5");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-84);
      boolean boolean1 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2100), (ObjectCodec) null, filterOutputStream0, byteArray0, (byte) (-3), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('w');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer(1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1373), (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '8';
      uTF8JsonGenerator0.writeString(charArray0, 240, 0);
      uTF8JsonGenerator0.close();
      assertEquals(2, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte) (-84), (byte)42, (byte) (-12)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("[");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      charArray0[2] = 'C';
      charArray0[3] = '\'';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 573, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-1148), false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2676), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 573, 2604);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 573
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      iOContext0.allocReadIOBuffer();
      charArray0[2] = 'C';
      charArray0[3] = '\'';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byteArrayBuilder0.write(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2150, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 33, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 573);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-12);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3782);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1444), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2150, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte) (-20));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("", "VVkOUb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "VVkOUb";
      PrintStream printStream0 = mockPrintStream0.printf("Can not write a field name, expecting a value", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, printStream0, byteArray0, 56319, false);
      uTF8JsonGenerator0.writeNumber((float) (byte)48);
      uTF8JsonGenerator0.writeString("qf");
      int int0 = uTF8JsonGenerator0.getOutputBuffered();
      assertArrayEquals(new byte[] {(byte)113, (byte)102, (byte)34, (byte)46, (byte)48, (byte)34, (byte)32, (byte)34}, byteArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "' (code ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("' (code ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1039, (-10), true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2527), (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0._flushBuffer();
//      try { 
        uTF8JsonGenerator0._outputSurrogates(45, 1091);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x2d, second 0x443
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-885), (ObjectCodec) null, (OutputStream) null, (byte[]) null, 1, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-697), true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '[';
      charArray0[2] = 's';
      charArray0[3] = 'B';
      charArray0[4] = 'm';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 609, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -697
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-49);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 56320, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      int int0 = (-314);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-314), (ObjectCodec) null, (OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3545, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting either '*' or '/' for a comment");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)93;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1006), (ObjectCodec) null, objectOutputStream0, byteArray0, (-3893), true);
      SerializedString serializedString0 = new SerializedString("B");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "was expecting either '*' or '/' for a comment";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("B");
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'v';
      charArray0[2] = '~';
      charArray0[3] = ']';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3545, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1006), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, true);
      byte[] byteArray1 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 3, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("[");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      charArray0[2] = 'C';
      charArray0[3] = '\'';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 573, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-1148), false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._flushBuffer();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)85;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)127, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)85;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)127, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "' (code ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("' (code ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = '`';
      charArray0[3] = 'O';
      charArray0[4] = '+';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 34, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 110, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' (code ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2140, false);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an array", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }
}
